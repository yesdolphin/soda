class Imports:
  import os
  __file__ = os.path.expanduser("~/tavern/tavern/soda/can.py")
  def homepath(x):
    import os
    return os.path.expanduser("~%s"%(x.split("~")[1]))
  if not os.path.exists(homepath("~/.matplotlib")):
    import imageio
    os.system("mkdir ~/.matplotlib && touch ~/.matplotlib/matplotlibrc && echo 'backend: agg' >> ~/.matplotlib/matplotlibrc")
    os.system("brew install ffmpeg &>/dev/null")
    os.system("brew install mysql &>/dev/null")
    imageio.plugins.ffmpeg.download()
    os.system("brew install mpv --with-libcaca &>/dev/null")
    os.system("asciiview")
    os.system("open ueiraweur.png")
    os.system("mpv fasdfs.jpg -vo caca")
  from time import sleep as sleep, sleep as zz, sleep as sp
  from os import system, makedirs
  from subprocess import Popen, getoutput, check_output
  from json_field import JSONField
  from facebook_business.adobjects.targetingsearch import TargetingSearch
  from facebook_business.adobjects.targeting import Targeting
  # from facebook_business.adobjects.reachestimate import ReachEstimate
  from facebook_business.adobjects.customaudiencedatasource import CustomAudienceDataSource
  from facebook_business.adobjects.customaudience import CustomAudience
  from facebook_business.adobjects.campaign import Campaign
  from facebook_business.adobjects.adset import AdSet
  from facebook_business.adobjects.adpreview import AdPreview
  from facebook_business.adobjects.adimage import AdImage
  from facebook_business.adobjects.adcreativephotodata import AdCreativePhotoData
  from facebook_business.adobjects.adcreativeobjectstoryspec import AdCreativeObjectStorySpec
  from facebook_business.adobjects.adcreativelinkdata import AdCreativeLinkData
  from facebook_business.adobjects.adcreative import AdCreative
  from facebook_business.adobjects.adaccount import AdAccount
  from facebook_business.adobjects.ad import Ad
  from facebook_business import FacebookAdsApi
  from django.db.models import Q
  from django.db import models
  from django.conf import settings
  from datetime import timedelta, date, datetime
  from collections import OrderedDict, Counter, defaultdict
  import time
  import sys
  import subprocess
  import shopify
  import pyperclip
  import pickle
  import rumps
  import requests as requests, requests as r
  import re
  import random
  import os
  import json
  import csv
  import copy
  import string
  def timeit(func):
    def wrapper(*arg, **kw):
      t1 = time.time()
      res = func(*arg, **kw)
      t2 = time.time()
      print("timeit: %s, %s"%((t2 - t1), func.__name__))
      return res
    return wrapper
  g = lambda: globals()
  rnd = round
  ADSET_TESTING = False

  Count = lambda l, x: l.count(x)
  Database = "soda"
  GLOBAL_ADD_PRODUCT_NOTIFICATION = False
  GLOBAL_IMAGE_COMPARISON_TEST_SCORE = 0.9
  GLOBAL_BROWSER_PAGEGOT_ZOOM_LEVEL = 2
  GLOBAL_BROWSER_ELEMENT_WAIT_TIME = 3 # 7
  GLOBAL_BROWSER_GET_PAGE_WAIT_TIME = 12 # 12 # requires 12
  GLOBAL_BROWSER_URLWAIT_WAIT_TIME = 10 # 60
  GLOBAL_BROWSER_PAGEGOT_WAIT_TIME = 3 # 5
  GLOBAL_BROWSER_REQUIRE_SPEEDTEST = False
  GLOBAL_BROWSER_STEP_SLEEPTIME = 0
  GLOBAL_BROWSER_WINDOW_POSITION = [0, 0]
  GLOBAL_BROWSER_WINDOW_SIZE = [1920, 600] # [1920, 1200]
  GLOBAL_EMAILER_INITIALIZE_ERROR_MESSAGE = False
  GLOBAL_FIREFOX_PROFILE_PATH = homepath("~/Library/Application Support/Firefox/Profiles")
  DOWNLOAD_VIDEO = False
  WHILE_TRUE = 100000000
  EMPTYSTRING = ""
  Null = None
  Exists = lambda address: os.path.exists(String(address))
  Join = lambda *args: args[0].join(args[1])if(2==len(args))else(args[0].join(args[1:]))
  Replacements = lambda s, *args, LOL={}: [setitem(LOL,"z",s),[setitem(LOL,"z",LOL["z"].replace(x,j)) for x,j in zip(args[0::2],args[1::2])] ,LOL["z"]][-1]
  Split = lambda *args: (args[1].split(args[0]))if(len(args)==2)else(args[1].split(args[0],args[2]))
  Strip = lambda s: s.strip()
  Title = lambda s: s.title().replace("'S ","'s")
  add = "globals().update(g.__dict__)"
  midcmd = """process(lambda:[[OSA.log(str(tryreturn(lambda:eval(OSA.log("Func?"))(),ep=1)))]for i in(range(WHILE_TRUE)]))"""
  rex = print

  subtract = "g.__dict__.update(globals())"
  globals().update(locals())
  sys.setrecursionlimit(100000)

  """ General-Utils """
  def All(_):
    __ = _
    _ = _.objects.all()
    n = lambda self, x: list(self)[x]
    ( bind3(_,len), bind3(_,n) )
    return _
  def BeautifulSoup(x, y="lxml"):
    from bs4 import BeautifulSoup as BeautifulSoup
    return BeautifulSoup(x, "lxml")
  def Bulk_Create(_, x, batch_size=None):
    return _.objects.bulk_create(x, batch_size=batch_size)
  def Copy(id,**kwargs):
    # v3.3
    return [setitem(kwargs,"x",list(map(Integer,key("copied_id", [Shop()(All(Shop)[0].shop_abbreviation),json.loads(requests.post("https://graph.facebook.com/v3.3/%s/copies"%id, data={ "deep_copy":"true",
                 "start_time":"%s 6:00:00 EST"%(Date().dt(0) if datetime.now().hour in [0,1,2] else Date().dt(1)),
                 "status_option": "ACTIVE",
                 "access_token": Shop.objects.all()[0].Facebook_Business_App_Token, }).content.decode())][1]["ad_object_ids"]))) ),
          [[AdSet(kwargs["x"][0]).remote_update(params={"status":"ACTIVE"}),Ad(kwargs["x"][1]).remote_update(params={"status":"ACTIVE"}),] if(2==len(kwargs["x"])) else [Campaign(kwargs["x"][0]).remote_update(params={"status":"ACTIVE"}),AdSet(kwargs["x"][1]).remote_update(params={"status":"ACTIVE"}),Ad(kwargs["x"][2]).remote_update(params={"status":"ACTIVE"}),] ],
          kwargs["x"],
    ][2]
  def Create(_, **kwargs):
    new = _()
    for k,v in kwargs.items():
      setattr(new, k, v)
    try:
      new.save()
      return new
    except Exception as e:
      pass
  def Del(_):
    mysql_delete(_)
  def Exec(x,globals_,locals_):
    globals().update(locals_)
    exec(x,globals())
  def Filter(_, *args, **kwargs):
    __ = _

    _ = _.objects.filter(**{a:v for a,v in kwargs.items() if "__range" not in a and not [i for i in __._meta.fields if i.name == a.split("__")[0] and type(i) == JSONField]})
    if {a:v for a,v in kwargs.items() if "__range" not in a and [i for i in __._meta.fields if i.name == a.split("__")[0] and type(i) == JSONField]}:
      _ = filter(_,**{a:v for a,v in kwargs.items() if "__range" not in a and [i for i in __._meta.fields if i.name == a.split("__")[0] and type(i) == JSONField]})
    if args and not [i[0] for i in sum(key("children",args),[]) if [j for j in __._meta.fields if j.name == i[0] and type(j) == JSONField]]:
      _ = _.filter(*args)
    if args and [i[0] for i in sum(key("children",args),[]) if [j for j in __._meta.fields if j.name == i[0] and type(j) == JSONField]]:
      _ = filter(_,*args)
    for a,v in kwargs.items():
      if "__range" in a:
        field = a.split("__",1)[0]
        for i in _:
          setattr(i, field, Date(getattr(i, field)).dateobj  )

        class myList(list):
          1
        _ = myList([i for i in _ if   Date(v[0]).dateobj<= getattr(i,field)  <= Date(v[1]).dateobj ])

    if type(_) == list:
      class myList(list):
        1
      _ = myList(_)

    n = lambda self, x: list(self)[x]
    ( bind3(_,len), bind3(_,n) )


    return _
  def Filter_Get_Random(_, *args, **kwargs):
    x = mysql_exec("select count(*) from soda_%s %s;"%(    _.__name__.lower()   ,   ("")if(0==len(args)and(0==len(kwargs)))else(mysql_args_and_kwargs_to_string(*args, **kwargs))    ))  [0]["count(*)"]
    random_index = random.randrange(int(x))

    redprint("%s count: %s" % (_.__name__, x))
    redprint("random index: %s" % random_index)

    _ = _.objects.filter(**kwargs)
    for arg in args:
      _ = _.filter(arg)
    bind3(_,len)
    return _[random_index:random_index+1][0]
  def Filter_Get_Randoms(_, count = 1, *args, **kwargs):
    x = mysql_exec("select count(*) from soda_%s %s;"%(    _.__name__.lower()   ,   ("")if(0==len(args)and(0==len(kwargs)))else(mysql_args_and_kwargs_to_string(*args, **kwargs))    ))  [0]["count(*)"]
    random_index = random.randrange(int(x))

    redprint("%s count: %s" % (_.__name__, x))
    redprint("random indexes: %s" % random_index)
    _ = _.objects.filter(**kwargs)
    for arg in args:
      _ = _.filter(arg)     

    random_index_plus_count = min([int(x)-1,random_index +count])
    redprint("[random index:random index + count][%s:%s]" % (random_index,random_index_plus_count))
    _ = _[random_index:random_index_plus_count]
    bind3(_,len)
    return _
  def Float(x):
    return float(x)
  def Get(_, *args, **kwargs):
    if len(args) > 0:
      _ = _.objects.filter(args[0])
      for arg in args[1:]:
        _ = _.filter(arg)
      return _.get(**kwargs)
    else:
      return _.objects.get(**kwargs)
  def Integer(x):
    return int(x)
  def Push(_, *args, **kwargs):
    _ = Save(_,**kwargs) if Filter(_,*args,**kwargs).len() == 0   else  Get(_,*args,**kwargs)
    def __call__(self, **kwargs):
      return Update(self, **kwargs)
    bind3(_, __call__)
    return _
  def String(x):
    return str(x)
  def SOUP(x, y="lxml"):
    from bs4 import BeautifulSoup as SOUP
    return SOUP(x, "lxml")
  def SOUPY(soup,x=None,y=None,z=None):
    import bs4
    if type(soup) != bs4.BeautifulSoup: soup = BeautifulSoup(str(soup))
    if x==None: return soup
    return(soup.findAll(x)if(None==y==z)else(soup.findAll(x,attrs={y:z})))
  def Save(_, **kwargs):
    _ = _() if hasattr(_,"objects") else _
    for k,v in kwargs.items():
      setattr(_, k, v)
    _.save()
    return _
  def Sync(_, **kwargs):
    keys = sql_get_multiple_primary_keys(_)
    filter_dict = {a:kwargs[a] for a in keys if a in kwargs}
    existing = _.objects.filter(**filter_dict)
    return Update(_(),**kwargs) if len(existing) == 0 or len(existing) > 1 else Update(getitem(existing,0),**kwargs)
  def Update(_, **kwargs):
    for k,v in kwargs.items():
      setattr(_, k, v)
    _.save()
    return _
  def UpdateIfNone(x,**kwargs):
    Update(x,**{a:b for a,b in kwargs.items() if getattr(x,a) == None})
    """
    p = Product(id=1)
    p.save()
    assert p.title == None
    UpdateIfNone(p,title="X")
    print(p.title)
    Del(p)
    """
  def Ziff(*args):
    s, sep = args[0], args[1]
    maxsplit = -1 if len([i for i in args if type(i) == int])==0 else [i for i in args if type(i) == int][0]
    fncs = None if len([i for i in args if type(i) == list])==0 else [i for i in args if type(i) == list][0]
    y = s.split(sep,maxsplit)
    if fncs == None:
      return y
    else:
      y = [fncs[idx](i) for idx, i in enum(y)]
      return y
    """
    Ziff("x|y|z","|",[lambda i: i*2,lambda i: i*2,lambda i: i*2])
    Ziff("x|y|z","|")
    Ziff("x|y|z","|",1,[lambda i:i*2, lambda i: i*2])
    """
  def a_shop():
    return Shop()(All(Shop)[0].shop_abbreviation)
  def add(x,y):
    globals()[x] += y
    return globals()[x]
  def add_tag(x,y):
    if x == "" or x == None:
      x = y
    else:
      x += ", "
      x += y
    x = sorted(set(x.split(", ")))
    x = Join(", ", x)
    return x
    """
    add_tag("","Test")
    add_tag("Home","Test")
    add_tag("Home, Place","Test")
    """
  def add_text_to_file(file, text, line_number):
    new_line_text = generate_one_random_number(5000)
    os.system("""sed -i "" -e '%ss/$/%s/' '%s'"""%(line_number,new_line_text,file))
    with open(file,"r") as f:
      new = f.read().replace(str(new_line_text),"\n"+text)
      open(file,"w").write(new)
  def add_text_to_image(address,text,font=16,position=None):
    from PIL import Image, ImageDraw, ImageFont
    img = Image.open(address)
    d = ImageDraw.Draw(img)
    fnt = ImageFont.truetype("/Library/Fonts/Times New Roman.ttf", font)
    if not position:
      position = (5,5)
    d.text(position, text, font=fnt, fill=(0, 0, 0))
    img.save(address)
    return address
  def added_list(*args):
    return flatten(args,1)
  def address_backslash(address):
    return address.replace(" ", "\\ ")
  def address_normalize(address):
    return(address)if(0==address.endswith("/"))else(address[:-1])
  def addressurl(url, part = 0):
    return ("%s%s.png" % (Replacements(address_normalize(url), "/", " "), (":%s:"%(part))if(part!=0)else("") ))
    """
    ss = Browser()("sele")
    ss.get("google.com")
    assert addressurl(ss.current_url, part = 0) == "https:  www.google.com.png"
    assert addressurl(ss.current_url, part = 1) == "https:  www.google.com:1:.png"
    """
  def array_even(data, count):
    data2 = data
    for data in data2:
      while len(data)%count!=0:
        data.append("")
    return data2
  def array_inner_even(data, delimiter="|"):
    for idx, i in enumerate(data):
      max_len = max(list(map(len, list(map(str, i)))))
      for idx2, j in enumerate(i):
        j = str(j)
        if(max_len!=len(j)):
          j = j + (delimiter*(max_len-len(j)))
          i[idx2]=j
    return data
  def array_split(data, count, even=False):
    """
    array_split(lrange(45),10)
    [[0, 1, 2, 3, 4, 5, 6, 7, 8],
     [9, 10, 11, 12, 13, 14, 15, 16, 17],
     [18, 19, 20, 21, 22, 23, 24, 25, 26],
     [27, 28, 29, 30, 31, 32, 33, 34, 35],
     [36, 37, 38, 39, 40, 41, 42, 43, 44]]
    """
    import numpy as np
    data = list(data)
    if len(data) % count == 0:
      a = int(len(data)/count)
      b = list(range(0,len(data),a))+[len(data)]
      a_c = [data[i:i+a] for i in (b[:-1])]
      data = a_c
    else:
      return array_split1(data, count)
    data = list(map(list, data))
    return array_even(data) if(True==even) else(data)
  def array_split1(data, count, even=False):
    """
    array_split1(lrange(45),10)
    [[0, 1, 2, 3, 4, 5, 6, 7, 8],
     [9, 10, 11, 12, 13, 14, 15, 16, 17],
     [18, 19, 20, 21, 22, 23, 24, 25, 26],
     [27, 28, 29, 30, 31, 32, 33, 34, 35],
     [36, 37, 38, 39, 40, 41, 42, 43, 44]]
    """
    import numpy as np
    data = np.array(data)
    data = np.array_split(data, (int(len(data)/count)+1))
    data = list(map(list, data))
    return array_even(data) if(True==even) else(data)
  def array_split2(data, count):
    """
    array_split2(lrange(45),10)
    [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
     [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
     [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
     [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
     [40, 41, 42, 43, 44]]
    """
    x = []
    y = len(data) % count
    z = []
    i = 0
    z.append(data[0:count]) if int(len(data)/count) == 0 else "`"
    for i in range(int(len(data)/count)):
      z.append(data[i*count:(i+1)*count])
    z.append(data[(i+1)*count:]) if ""!=data[(i+1)*count:] else "`"
    return z
  def apilimitcall(x, sleeptime = 5):
    try:
      # [(x.__call__()())if(x.__name__=="<lambda>")else(x.__call__()),blueprint("success")][0]
      return [(x.__call__())if(x.__name__=="<lambda>")else(x.__call__()),blueprint("success")][0]
    except Exception as e:
      blueprint("error: %s; sleeping %s" % (e, sleeptime))
      [[blueprint("waiting: %s\r"%(i+1),end=""),time.sleep(1)] for i in range(sleeptime)]
      sleeptime = sleeptime + 5
      return apilimitcall(x, sleeptime = sleeptime)
    """
    x = lambda: (0/0) if random.random() > 0.5 else ()
    apilimitcall(x)
    """
  def assert_dialog(lambda_function, notification):
    try:
      assert lambda_function()
    except:
      OSA.display_dialog(notification, text_prompt = False, buttons = ["OK"])
  def bind(obj,name,method):
    from types import MethodType,ModuleType,FunctionType
    setattr(obj, name, MethodType(method,obj))
  def bind2(obj, name):
    from types import MethodType,ModuleType,FunctionType
    setattr(obj, name, MethodType(globals()[name],obj))
  def bind3(obj,func):
    from types import MethodType,ModuleType,FunctionType
    setattr(obj, func.__name__, MethodType(func,obj))if("<lambda>"!=func.__name__)else(setattr(obj, get_lambda_name(func), MethodType(func,obj)))
  def bindm(x,**kwargs):
    [bind(x,a,b) for a,b in kwargs.items()]
    return x
    """
    bindm(AD(),test = lambda self: print(1)).test()
    """
  def binded_update(x,y):
    lmap(lambda i: bind(x,*i), y.items())
    """
    x= AttrDict()
    y={"croak": lambda self:print("croaks"),"moof":lambda self:print("moofs")}
    binded_update(x,y)
    x.croak()
    x.moof()
    """
  def bitly_url(url):
    return json.loads(requests.get("https://api-ssl.bitly.com/v3/shorten?access_token={}&longUrl={}".format(Muta()().bitly_access_token, url)).text)["data"]["url"]
    """
    bitly_url("https://google.com")
    """
  def blocktext_to_session_headers(x):
    x=x.strip().split("\n")
    x={i.split(": ",1)[0] if not i.split(": ",1)[0].startswith(":") else(i.split(": ",1)[0][1:]):i.split(": ")[1] for i in x }
    return x
  def brewlist(versions=False):
    """
    --versions, you get 1.20.1_4, not necessarily what's in brew search. seems that you tended to use latest version.
    """
    return getoutput("brew list").split("\n")if(versions==False)else(lmap(lambda x: x.replace(" ", "@"), getoutput("brew list --versions").split("\n")))
    """
    brewlist(versions = False)
    brewlist(versions = True)
    """
  def brightness(lvl):
    OSA("System Events", ['brightness %s'%lvl])
  def button_up(x=None,y=None,z=None,cork=None,headors=None):
    if cork: return [dict(zip(lmap(re_spaces,key('text',headors(x))),lmap(re_spaces,key('text',i)))) for i in array_split(cork(x),int(len(cork(x))/len(headors(x))) )]
    return dict(zip(lmap(lambda i: re_spaces(i), key("text",y(x))),lmap(lambda i: re_spaces(i), key("text",z(x)))))
  def change_default_file_extension(ext, application_address):
    duti(ext = ext, application_address = application_address)
  def ceil(x):
    import math
    return math.ceil(x)
  def change_mac_address():
    mac_address = subprocess.getoutput("openssl rand -hex 6 | sed 's/\(..\)/\\1:/g; s/.$//'")
    os.system("sudo ifconfig en0 ether %s"%(mac_address))
  def check_gmail_account_exists(x):
    ss = Browser()("ph")
    ss.get("https://accounts.google.com/signin/v2/identifier")
    blueprint("got page")
    ss.ffs("input","type","email").send_keys(x).sp(2)
    blueprint("entered in email")

    ss.jtns("span","click",{"text":"Next"}).sp(5)
    blueprint("clicked next button")
    exists = None
    if "/pwd" in ss.current_url:
      blueprint(ss.current_url)
      exists = True # exists
    else:
      exists = False
    ss.quit()
    return exists
    """
    blueprint(check_gmail_account_exists("test"))
    blueprint(check_gmail_account_exists("asjdgasjgepawokgepak"))
    """
  def check_option(option):
    option = option.title()
    if "Size" not in option and "Material" not in option and "Capacity" not in option and "Height" not in option and "Model" not in option:
      return True
    else:
      return False
  def check_output(x):
    return or_list(lambda:subprocess.check_output(x,shell=True).decode()[:-1],lambda:subprocess.getoutput(x))
  def chromejs(x):
    blueprint("View -> Developer -> Allow JavaScript from Apple Events")
    x = 'tell application "Google Chrome 70" to execute front window\'s active tab javascript "%s"'%x
    fn = get_random_address(homepath("~/tavern/tavern/soda/dls"))
    blueprint(fn)
    open(fn, "w").write(x)
    r = subprocess.getoutput("osascript %s"%fn)
    os.remove(fn)
    return r
    """
    x = "alert('example');"
    chromejs(x)
    """
  def chromejs_added():
    while True:
      url = get_first_chrome_url()
      if "&switch_new_app=y" in url:
        openchromeurl(re.sub("&switch_new_app=y","&switch_new_app=n",url),2)
      x = chromejs("var arr = []; X = document.getElementsByClassName('pic'); y = X.length; for (i = 0; i < y; i++) { arr.push(X[i].outerHTML); }; arr")
      y = re.findall('(?s)<div class="pic".*?</div>',x)
      z = lmap(lambda i: findall(SOUP(i).findAll("a")[0].attrs["href"],1,"aliexpress.com/item/.*?/(\d+).html"),y)
      idxs = []
      L = lmap(lambda i: findall(i,1,"aliexpress.com/item/.*?/(\d+).html"), oset(key("ali_url",All(Product)) + key("ali_url",All(GhostProduct))))
      for idx, i in enum(z):
        if i in L:
          idxs.append(idx)
      chromejs("""var arr = [%s]
                  X = document.getElementsByClassName('pic')
                  y = X.length
                  for (i = 0; i < y; i++) { if (arr.includes(i) && X[i].outerHTML.includes('Added') == false && X[i].added != true) { X[i].outerHTML = X[i].outerHTML + 'Added'; X[i].added = true} }"""%(Join(", ",lmap(str,idxs)), ))
  def chromejstest():
    while True:
      # chromejs("x = document.getElementsByClassName('history-item product'); y = x.length; for (i = 0; i < y; i ++) { x[i].outerHTML = '' ; } ")
      # chromejs("document.getElementsByClassName('product-title')[0].outerHTML = ''")
      # chromejs("document.getElementsByClassName('store-header-bg')[0].outerHTML = ''")
      # chromejs("document.getElementsByClassName('store-name')[0].outerHTML = ''")
      # chromejs("x = document.getElementsByTagName('li'); y = x.length; for (i = 0; i < y; i ++) { if (x[i].getAttribute('role') == 'listitem') { x[i].outerHTML = '' ; } ; } ")
      # chromejs("document.getElementsByClassName('store-info')[0].outerHTML = ''")
      chromejs("""var frame = document.getElementsByClassName('product-evaluation')[0]; x = frame.contentDocument.getElementsByClassName('fb-user-info'); y = x.length; for (i = 0; i < y; i++) { x[i].outerHTML = '' }""")
  def clear_google_chrome_processes():
    tp(lambda:lmap(lambda i: os.system("kill -9 %s" % i), lmap(lambda i: re.sub(r" +"," ",i.strip()).split(" ")[1],subprocess.getoutput("ps -ef | grep Google\ Chrome | grep Profile\ 1000").split("\n"))))
  def cm_to_inch(s):
    if "cm" not  in s: return s
    try:
      cm_findings = re.findall(r" [0-9]*?cm", s)
      for cm_finding in cm_findings:
        x = cm_finding.replace("cm","")
        x = int(x)
        inch_measurement = x / 2.54
        inch_measurement = round(inch_measurement, 1)
        print("cm_to_inch finding: %scm to %sin" % (x, inch_measurement))
        s = s.replace(cm_finding, "%sin"%inch_measurement)
      print("[NOTE] function cm_to_inch --questionable use-- ")
    except Exception as e:
      print("cm to inches error: %s" % e)
      print(s)
    return s
  def cm_to_inch2(s):
    if "cm" not in s: return s
    __original__ = s
    try:
      s = " " + s
      cm_findings = re.findall(r"( .*?cm)", s)
      for cm_finding in cm_findings:
        original = cm_finding
        cm_finding = cm_finding.replace("cm", "")
        cm_finding = cm_finding.split(" ")[-1]
        numbers = re.findall(r"[^0-9]*([0-9]*)",cm_finding)
        tmp = []
        print("tmp numbers: %s" % numbers)
        for i in numbers:
          try: tmp.append(int(i))
          except Exception as e: print("error: %s, %s" % (i,e))
        numbers = tmp
        print("numbers after tmp: %s" % numbers)
        numbers = [str(i) for i in numbers]
        the_inch_copy = str(original)
        for i in numbers:
          rounded = round((int(i)/2.54), 1)
          rounded = str(rounded)
          the_inch_copy = the_inch_copy.replace(i, rounded)
          print("cm: %s; rounded: %s" % (i, rounded))
        print("new 'original' : %s" % the_inch_copy)
        the_inch_copy = the_inch_copy.replace("cm", "in")
        s = s.replace(original, the_inch_copy)
        s = s.strip()
      print("===\n\n===== now showing comparison..")
      print("original: %s" % __original__)
      print("\n\n")
      print("s: %s" % s)
      print("\n\n")
      input("is this okay?: ")
      return s
    except Exception as e:
      print("erorrror : %s" % e)
  def cm_to_inch3(s):
    s = Replacements(s, "2XL", "XXL", "3XL", "XXXL", "4XL", "XXXXL", "5XL", "XXXXXL", "6XL", "XXXXXXL")
    swizes = re.findall(r"[0-9]+",s)
    swizes = pool(Integer, swizes).result()
    swizes_ = pool(lambda i: wall((i/2.54)), swizes).result()
    s = Replacements(s, *list(map(str,sum(list(map(list,zip(swizes,swizes_))),[]))))
    return s
  def cm_to_inch4(a):
    return a
    w = findall(a,"[\d\.]+cm")
    if w:
      x = findall(a,"[\d\.]+cm")
      assert len(x) == 1
      y = findall(a,1,"[\d\.]+cm")
      z = int(findall(y,1,"([\d\.]+)cm"))
      z = round(float(z)/2.54,2)
      z = str(z)
      if z.endswith(".0"):
        z = str(z).split(".")[0]
      replacement_string = "{}in".format(z)
      return re.sub("([\d\.]+cm)",replacement_string,a)
    else:
      return a
  def compare_dict(a,b):
    x=""
    x+="{"
    x+="\n"
    for c,d in a.items():
      x+="    "
      x+="'%s': "%(c)
      if d != b[c]:
        x+="'%s' -> '%s',"%(d,b[c])
      else:
        x+="'%s'"%(d)
      x+="\n"
    x+="}"
    print(x)
    return x
    """
    compare_dict(
    {'ali_url': 'url',
    'fulfilled quantity': 0,
    'idx': 0,
    'shipping_address': 'Shipping Address, City, State, Zip Code',
    'sku': 'sku',
    'title': 'title',
    'total quantity': 0,
    'variant_title': ''},
    {'ali_url': 'url',
    'fulfilled quantity': 1,
    'idx': 0,
    'shipping_address': 'Shipping Address, City, State, Zip Code',
    'sku': 'sku',
    'title': 'title',
    'total quantity': 1,
    'variant_title': ''}
    )
    """
  def cookies_to_database(username,website_name,cookies=None,reverse=True):
    # return Binarydata().update_or_create([pickle.dump(cookies,open("%s|%s|Cookies.ini"%(username,website_name),"wb")),"%s|%s|Cookies.ini"%(username,website_name)][1])if(reverse==False)else([Binarydata().export("%s|%s|Cookies.ini"%(username,website_name)),pickle.load(open("%s|%s|Cookies.ini"%(username,website_name),"rb")),rm("%s|%s|Cookies.ini"%(username,website_name)) ][1])
    return Binarydata().update_or_create([pickle.dump(cookies,open("%s|%s|Cookies.ini"%(username,website_name),"wb")),"%s|%s|Cookies.ini"%(username,website_name)][1])if(reverse==False)else([Binarydata().export("%s|%s|Cookies.ini"%(username,website_name)),pickle.load(open("%s|%s|Cookies.ini"%(username,website_name),"rb")), ][1])
  def cookies_to_session(cookies, session):
    for cookie in cookies:
      session.cookies.set(cookie['name'], cookie['value'])
    return session
  def copy_details():
    pyperclip.copy("dsthingasdf@protonmail.com asdfghjkASDFGHJK in the drafts folder")
  def create_directories(*args):
    for idx,i in enum(args):
      os.makedirs("/".join(args[:idx+1]),exist_ok=True)
    """
    create_directories("a","b")
    rm("a")
    """
  def create_new_fulfillment(line_item,shopify_order,tracking_company_dict):
    OSA.log("Creating new tracking number fulfillment: %s, %s" % (line_item.ali_tracking_number, tracking_company_dict))
    Update(line_item,ali_tracking_number = line_item.ali_tracking_number.strip())
    fulfillment = None
    for i in shopify_order.fulfillments:
      for j in i.line_items:
        if j.id == line_item.id:
          fulfillment = i

    fulfillment.tracking_numbers.append(str(line_item.ali_tracking_number.strip()))
    fulfillment.tracking_urls.extend(["https://tools.usps.com/go/TrackConfirmAction?tLabels={}".format(line_item.ali_tracking_number.strip()),"https://t.17track.net/en#nums={}".format(line_item.ali_tracking_number.strip())])
    fulfillment.tracking_company = tracking_company_dict.get(line_item.ali_tracking_method, "USPS")
    try:
      Fulfillments_Created().add(order_id=shopify_order.id,lineitem_id=line_item.id,tracking_company_dict=fulfillment.to_dict())
      OSA().log("Fulfillments_Created saved")
    except Exception as e:
      print(e)
      OSA().log("Fulfillment could not create. Not saving the fulfillment.")
      (0/0)

    redprint("saved fulfillment: %s" % fulfillment.save())
    redprint("An email will be sent out. ")
  def csed(r="class",s="class"):
    greenprint("the use of ' is not supported")
    s = s.replace('"','\\"').replace("'","\\'")
    blueprint(re.findall(r, open(__file__).read(), flags=re.MULTILINE))
    os.system("""sed -i '' -e 's/%s/%s/g' %s"""%(r,s,__file__))
  def csv_table_to_html(table):
    data = '<table border="1">'
    data +=  '<tbody>'
    numerical_row = 0
    for row in table:
      data += "<tr>"
      numerical_col = 0
      for cell in row:
        data+= ("""<th style="text-align: center; color: #000000;">%s</th>"""%cell) if (numerical_row == 0\
          or numerical_col == 0) else ("""<td style="text-align: center;">%s</td>"""%cell)
        numerical_col += 1
      numerical_row += 1



      data += "</tr>"
    data += "</tbody>"
    data += "</table>"
    return data
  def csv_table_to_png(bux):
    address = str(homepath("~/tavern/tavern/soda/dls/%s.csv"%random.randrange(99999999))).zfill(len("99999999"))
    csv.writer(open(address,"w")).writerows(bux)
    import pandas as pd
    df = pd.read_csv(address)
    os.remove(address)
    htmTable = df.to_html()
    load = re.sub(r"[\n\t]","",htmTable)

    import cv2
    reds = html_to_png(load)
    q = cv2.imread(reds)
    quinces = []
    for x in range(q.shape[1]):
      y = q[0:,x]
      print(x, y.shape, set(y.flatten()))
      if set(y.flatten()) == {255}:
        quinces.append(x)


    quinces = list(reversed(quinces))
    zealous = None
    for greater, lesser in zip(quinces[0:], quinces[1:]):
      if (greater-lesser) != 1:
        zealous = greater+10
        break
    redprint(zealous)
    v = q[0:,0:zealous]

    address = str(homepath("~/tavern/tavern/soda/dls/%s.png"%random.randrange(9999999999))).zfill(len("9999999999"))
    cv2.imwrite(address, v)
    impreview(address)
    return address
  def date_of_birth_drawer(date_of_birth, m_num = False):
    date_of_birth = String(date_of_birth)
    date_of_birth = date_of_birth.zfill(8)
    m, d, y = ["January","February","March","April","May","June","July","August","September","October","November","December"].__getitem__(Integer(date_of_birth[:2])-1)if(m_num==False)else(date_of_birth[0:2]), date_of_birth[2:4], date_of_birth[4:]
    return m, d, y
  def dataframe_to_dictlist(dataframe):
    dictlist = []
    headers = list(dataframe)
    data = dataframe.to_dict()
    data_len = len(data[headers[0]])
    for idx in range(data_len):
      e = {}
      for header in headers:
        e[header] = data[header][idx]
      dictlist.append(e)
    return dictlist
  def datetime_math(x, **kwargs):
    return x + timedelta(**kwargs)
  def dbsed(s="",r=""):
    csed(r, s)
  def delete_adset(adset_id):
    Del(Get(Adset,adset_id=adset_id))
  def delete_adsets():
    a_shop()
    for i in All(Adset):
      if AdSet(i.adset_id).remote_read(fields=["status"])["status"] == "ARCHIVED":
        print("Deleting one adset")
        Del(i)
        lmap(Del,Filter(Adsetinsight,adset_id=i.adset_id))
  def delete_data():
    lmap(Del,All(AceInTheHole))
    lmap(Del,All(AceInTheHoleType))
    lmap(Del,All(AceInTheHoleTypeTag))
    lmap(Del,All(Adset))
    lmap(Del,All(Aliexpress_Dispute))
    lmap(Del,All(Aliexpressorder))
    lmap(Del,All(Aliexpressorder_event))
    lmap(Del,All(ApprovedTransaction))
    lmap(Del,All(Facebookadaccountspend))
    lmap(Del,All(GhostProduct))
    lmap(Del,All(GhostProductUpdate))
    lmap(Del,All(Keep_Exchange))
    lmap(Del,All(Lineitem))
    lmap(Del,All(New_Email))
    lmap(Del,All(Order))
    lmap(Del,All(Payment))
    lmap(Del,All(Payout))
    lmap(Del,All(Product))
    lmap(Del,All(ProductTalk))
    lmap(Del,All(ReOrder))
    lmap(Del,All(Settlement))
    lmap(Del,All(Soup))
    lmap(Del,All(Video))
    lmap(Del,All(TertiaryAction))
    lmap(Del,All(ProductsFeed))
    lmap(Del,All(LineitemsFeed))
  def delete_last():
    Del(All(RandomGeneratedWords).n(-1))
  def dictfromkeys(headers, default_value, ordered=False):
    x = dict(zip(headers, [default_value for header in headers]))if(ordered==False)else(OrderedDict(zip(headers, [default_value for header in headers])))
    return x
  def dictrecurse(attrdict):
    for k,v in attrdict.items():
      if type(v) == AttrDict:
        attrdict[k] = dictrecurse(attrdict[k])
    return dict(attrdict)
  def dictupdate(x,**kwargs):
    x.update(**kwargs)
    return x
  def decimal_re(x):
    return Integer("".join(re.findall(r"\d+", x)))
  def delete_keys(x,*args):
    for i in args:
      tryprocess(lambda: x.__delitem__(i))
    return x
    """
    a = {"a":"b","c":"d",}
    delete_keys(a,"a","c")
    """
  def dictionarymeaning(x):
    from nltk.corpus import wordnet
    y = sudby(lambda i:i.name().split(".")[0]==x,wordnet.synsets(x))
    z = ifelseget(lambda:len(y) == 0,lambda:or_list(lambda:"Definition using Mirriam Webster. %s"%(re_substitute(random.choice(SOUPY(requests.get("https://www.merriam-webster.com/dictionary/%s"%(x)).text,"span","class","dtText")).text.split(": ")[1],["\s+"," "])),lambda:"No definition found for %s"%(x)),lambda:random.choice(y).definition())
    return z
  def dictjoin(*args,**kwargs):
    x = {}
    for i in args:
      x.update(i)
    return x
  def dicttoxml(x):
    import dicttoxml
  def diff(x,y):
    x_, y_ = x, y
    x, y = lmap(lambda i:open(i).read().split("\n"),[x,y])
    diffs = []
    for i in x:
      if i in y:
        y.pop(y.index(i))
      else:
        diffs.append(i)
    x, y = lmap(lambda i:open(i).read().split("\n"),[x_,y_])
    for i in y:
      if i in x:
        x.pop(x.index(i))
      else:
        diffs.append(i)if(i not in diffs) else ()
    print(len(diffs))
    return diffs
  def dip(x, y=1):
    for i in range(y):
      try:
        x = sum(x,[])
      except Exception as e:
        x = x
    return x
  def dictxml(x,tcer=False):
    if tcer == False:
      import dicttoxml
      y = dicttoxml.dicttoxml(x)
      #y = y[0:39] + y[45:len(y)-7]
      return y
    else:
      import xmltodict
      y = xmltodict.parse(x)
      return y
  def dkey(x):
    return list(x.items())[0][0]
    """
    dkey({"a":"b"})
    """
  def dl(x):
    return Images().download(x)
  def draw_circular_pay_chart():
    length = 45
    x = np.full(tuple(([length]*2)+[3]),[255,255,255])
    coordinates = []
    y = 0
    for i in range(length):
      coordinates.append((y,length-y-1))
      y += 1
    y = 0
    for i in range(length):
      coordinates.append((y,-(length-y)+1))
      y += 1
    y = 0
    for i in range(length):
      coordinates.append((-y,length-y-1))
      y += 1
    y = 0
    for i in range(length):
      coordinates.append((-y,-(length-y)+1))
      y += 1
    for i in coordinates:
      x[i[0]][i[1]] = np.array([0,0,0])
  def droll(x):
    assert x() == True
  def dt(x=0, strf='%Y-%m-%d'):
    return (datetime.now() + timedelta(x)).strftime(strf)
  def dune(*args):
    x, y = args[0], args[1]
    x = [y[idx](i) for idx,i in enum(x)]
    return x
    """
    dune("a, 2, 3".split(", "), [lambda i: i*2, lambda i:int(i)+2, lambda i:int(i)+5])

    """
  def duti(ext = "informative", application_address = "/Applications/Sublime Text.app"):
    bundle_identifier = subprocess.getoutput("/usr/libexec/PlistBuddy -c 'Print CFBundleIdentifier' '%s/Contents/Info.plist'" % application_address)
    os.system("brew install duti")if("duti" not in brewlist())else()
    redprint("duti -s %s %s all" % (bundle_identifier, ext))
    os.system("duti -s %s %s all" % (bundle_identifier, ext))
    return
  def dvalue(x):
    return list(x.items())[0][1]
    """
    dvalue({"a":"b"})
    """
  def emoji_viewer():
    os.system("""osascript -e 'tell application "System Events" to key code 49 using {control down, command down}' """)
  def enum(x):
    return enumerate(x)
  def eye_exam():
    print("visit:  https://www.personaleyes.com.au/online-eye-test/index.php")
    print(" 1m away, 6 questions are asked  ")
  def extract_emojis(str):
    import emoji
    return ''.join(c for c in str if c in emoji.UNICODE_EMOJI)
  def filter(objects, *args, **kwargs):
    from django.db.models.query_utils import Q
    objects = [AttrDict(i) if type(i)==dict else i for i in objects]
    data = []
    for i in objects:
      to_append = 1
      for attr, value in kwargs.items():
        attr_arg = None
        if "__" not in attr:
          attr_arg = "equals"
        elif "__" in attr and attr.split("__")[1] == "contains":
          attr_arg = "contains"
        elif "__" in attr and attr.split("__")[1] == "icontains":
          attr_arg = "icontains"
        elif "__" in attr and attr.split("__")[1] == "range":
          attr_arg = "range"

        attr=((attr)if("__" not in attr)else(attr.split("__")[0]))

        if attr_arg == "equals" and not (getattr(i,attr) == value):
          to_append = 0
        if attr_arg == "contains" and not (value in getattr(i,attr)):
          to_append = 0
        if attr_arg == "icontains" and not (value.lower() in getattr(i,attr).lower()):
          to_append = 0
        if attr_arg == "range" and not (getattr(i,attr) >= value[0] and getattr(i,attr) <= value[1]):
          to_append = 0

        
      if(1==to_append):
        data.append(i)

    #data = []
    #args = [~Q(x=5),~Q(y=5)]
    #args = [~Q(x=5,y=5),]
    #data = lmap(AD,[{"x":5,"y":5},{"x":5,"y":4},{"x":4,"y":5},{"x":4,"y":4}])
    #new = []
    #for i in data:
    #  to_append = True
    #  for j in args:
    #    for k, l  in j.children:
    #      print(i, j, k, l)
    #      if getattr(i, k) == l:
    #        to_append = False
    #        print(getattr(i,k), l)
    #  if to_append == True:
    #    print(i)
    #    new.append(i)
    
    #new = []
    #for i in data:
    #  to_append = [True for i in range(len(args))]
    #  idx = 0
    #  for j in args:
    #    for k, l  in j.children:
    #      print(i, j, k, l)
    #      if getattr(i, k) == l:
    #        to_append[idx] = False
    #        print(getattr(i,k), l)
    #    idx += 1
    #  if set(to_append) == {True}:
    #    print(i)
    #    new.append(i)
    if args:
      new = []
      for i in data:
        to_append = [True for i in range(len(args))]
        idx = 0
        for j in args:
          all_signifiers = [True for i in range(len(j.children))]
          idx_2 = 0
          for k, l  in j.children:

            attr_arg = None
            if "__" not in k:
              attr_arg = "equals"
            elif "__" in k and k.split("__")[1] == "contains":
              attr_arg = "contains"
            elif "__" in k and k.split("__")[1] == "icontains":
              attr_arg = "icontains"
            elif "__" in k and k.split("__")[1] == "range":
              attr_arg = "range"

            attr=((k)if("__" not in k)else(k.split("__")[0]))
            value = l

            if attr_arg == "equals" and (getattr(i,attr) == value):
              all_signifiers[idx_2] = False
            if attr_arg == "contains" and (value in getattr(i,attr)):
              all_signifiers[idx_2] = False
            if attr_arg == "icontains" and (value.lower() in getattr(i,attr).lower()):
              all_signifiers[idx_2] = False
            if attr_arg == "range" and (getattr(i,attr) >= value[0] and getattr(i,attr) <= value[1]):
              all_signifiers[idx_2] = False

            #if getattr(i, k) == l:
            #  #to_append[idx] = False
            #  all_signifiers[idx_2] = False
            #  print(getattr(i,k), l)
            idx_2 += 1
          if set(all_signifiers) == {False}:
            to_append[idx] = False
          idx += 1
        if set(to_append) == {True}:
          new.append(i)

      data = new
    return data
    """
    assert filter([{"a":5,"b":2},{"a":4,"b":3}],~Q(a=5)) == [{'a': 4, 'b': 3}]
    assert filter([{"a":5,"b":2},{"a":4,"b":3}],~Q(a=5),~Q(b=3)) == []
    assert filter([{"a":5,"b":2},{"a":4,"b":3}],~Q(a=5),~Q(b=2)) == [{'a': 4, 'b': 3}]
    assert filter([{"a":5,"b":2},{"a":4,"b":3},{"a":5,"b":5}],~Q(a=5)) == [{'a': 4, 'b': 3}]
    assert filter([{"a":5,"b":2},{"a":4,"b":3},{"a":5,"b":5}],~Q(a=5,b=5)) == [{'a': 5, 'b': 2}, {'a': 4, 'b': 3}]
    """
  def filter_in(a, b, mode="show_not_there"):
    assert len(oset(a)) == len(a)
    assert len(oset(b)) == len(b)
    if mode == "show_not_there":
      x = []
      for i in a:
        if i in b:
          x.append(i)
      y = []
      for i in b:
        if i not in x:
          y.append(i)
      return y
    elif mode == "show_there":
      x = []
      for i in a:
        if i in b:
          x.append(i)
      return x
    """
    filter_in([1,2,3],[1,2,3,4],"show_not_there")
    filter_in([1,2,3],[1,2,3,4],"show_there")
    filter_in([1,2,3,5],[1,2,3,4,5,6],"show_not_there")
    """
  def findall(s, r, x=None):
    return (re.findall(r, s))if(len(listminus(locals().values(),None))==2)else(re.findall(x, s)[0])if(len(listminus(locals().values(),[[]]))==3)else()
  def firefox65_do(executable_string):
    os.system("pip install selenium==3.14.1 && sleep 2 && cd /Users/$USER/tavern/tavern && /Users/$USER/tavern/bin/python3.5 -c 'from soda.can import *; %s' ; sleep 10 && pip install selenium==2.53.1 && killall python3.5 ; killall python ; echo complete ; sleep 10" % (executable_string))
  def flatten(x, y=1):
    for i in range(y):
      try:
        x = sum(x,[])
      except Exception as e:
        x = x
    return x
  def floor(x):
    import math; return math.floor(x)
  def flt(x):
    return float(x)
  def font_preview(address):
    from PIL import Image, ImageDraw, ImageFont
     
    img = Image.new('RGB', (1800, 540), color = (255, 255, 255))
     
    fnt = ImageFont.truetype(address, 45)
    d = ImageDraw.Draw(img)
    d.text((10,10), "[{}] Hello world. Untitled `404`.liquid ~`!@#$%^&*()_+-=[]\\|;':<>,.?/Seven Six Five Four".format(address.split("/")[-1]), font=fnt, fill=(0, 0, 0))
     
    img.save('pil_text_font.png')
    impreview('pil_text_font.png')
    os.system('rm pil_text_font.png')
  def free_plus_ship(x):
    CH().free_plus_ship(x)
  def generate_keylogger():
    times, keys = [], []
    file = open(homepath("~/hole/hole/keylogger/logfile.log")).read().split("\n")[:-1]
    file = sudby(lambda i: i.split(" ",1)[1][0] != "[", file)
    for i in file:
      time, key = i.split(" ",1)
      times.append(time)
      keys.append(key)
    time, letters, current_load, on = None, "", "", False
    current_loads = []
    for i, j in zip(times,keys):
      letters = letters + j
      time = i
      if letters.endswith("ss-"):
        on = True
      if on == True:
        current_load = current_load + j
      if letters.endswith("-ee"):
        on = False
        time = i
        current_load = current_load[2:-3]
        print(current_load)
        current_loads.append([time, current_load])
        time = datetime.fromtimestamp(int(time))
        tp(lambda:Save(Note,note=current_load,time=time))
        letters = ""
        current_load = ""
    # if os.path.getsize(homepath("~/hole/hole/keylogger/logfile.log")) > 7432790:
    #   x = open(homepath("~/hole/hole/keylogger/logfile.log"),"r").readlines()
    #   num_lines = int(len(x)/2)
    #   y = x[:num_lines]
    #   open(homepath("~/hole/hole/keylogger/logfile.log"),"w").write("".join(y))
    time.sleep(60)
    ifdo(lambda:random.randrange(1,61) == 60,lambda:os.system("killall keylogger"))
    generate_keylogger()
    # return current_loads
  def generate_one_alphabetical_string(size=10):
    import string
    w = (" ".join(string.ascii_letters)).split(" ")
    x = ""
    for i in range(size):
      x += random.sample(w,1)[0]
    return x
  def generate_one_alphanumeric_string(size=10):
    import string
    w = (" ".join(string.ascii_letters)).split(" ") + list(map(str,list(range(10))))
    x = ""
    for i in range(size):
      x += random.sample(w,1)[0]
    return x
  def generate_one_random_number(digits):
    x = ""
    while True:
      x = x + str(random.choice(list(range(10))))
      if len(x) == digits:
        return x
  def generator(x):
    return (i for i in x)
  def getattrs(attrs,x):
    return [getattr(x,i) for i in attrs]
  def getchromesource(r=None):
    redprint("Google Chrome -> View -> Developer -> Allow JavaScript from Apple Events")
    if r: r = check_output('osascript -e \'tell application "Google Chrome 70"\' -e "set source to execute tab %s of window 1 javascript \\"document.documentElement.outerHTML\\"" -e "end tell"'%(r))
    else: r = check_output('osascript -e \'tell application "Google Chrome 70"\' -e "set source to execute front window\'s active tab javascript \\"document.documentElement.outerHTML\\"" -e "end tell"')
    if "Google Chrome 70 got an error: Executing JavaScript through AppleScript is turned off." in r:
      # from http://hints.macworld.com/article.php?story=20060921045743404
      if OSA.display_dialog("Google Chrome 70 currently has Executing JavaScript through AppleScript turned off. Turn it on (it will be required for the program to work.)?",text_prompt=False,buttons=["Yes","No"]) == "No":
        return ""
      blueprint('tell application "Google Chrome 70"\n  activate\nend tell\ntell application "System Events"\n  tell process "Google Chrome"\n    tell menu bar 1\n      tell menu bar item "View"\n        tell menu "View"\n          tell menu item "Developer"\n            tell menu "Developer"\n              click menu item "Allow JavaScript from Apple Events"\n            end tell\n          end tell\n        end tell\n      end tell\n    end tell\n  end tell\nend tell')
      os.system("""osascript -e 'tell application "Google Chrome 70"' -e 'activate' -e 'end tell' -e 'tell application "System Events"' -e 'tell process "Google Chrome"' -e 'tell menu bar 1' -e 'tell menu bar item "View"' -e 'tell menu "View"' -e 'tell menu item "Developer"' -e 'tell menu "Developer"' -e 'click menu item "Allow JavaScript from Apple Events"' -e 'end tell' -e 'end tell' -e 'end tell' -e 'end tell' -e 'end tell' -e 'end tell' -e 'end tell'""")
      return getchromesource(r)
    return r
  def getitems(items,x):
    return [getitem(x,i) for i in items]
  def getpass(x = None):
    from getpass import getpass
    return getpass()if(x==None)else(getpass(x))
  def getsafarisource():
    blueprint("Safari -> Advanced -> Show develop menu ; Develop -> Allow JavaScript from Apple Events")
    x = subprocess.check_output("""osascript -e 'tell application "Safari" to set my_html to source of document 1'""",shell=True).decode("utf-8",errors="backslashreplace")
    return x
  def getsafariurl():
    x = subprocess.getoutput("""osascript -e 'tell application "Safari" to set the_url to URL of current tab of window 1'""")
    return x
  def getuser():
    import getpass
    return getpass.getuser()
  def getwindowcount(x):
    return int(subprocess.getoutput("""osascript -e 'tell application "%s" to get (count of windows)'"""%x))
  def get_active_shops():
    return Filter(Shop,Active=True)
  def get_ali_url(x):
    return Get(Product,shop=Muta()().store_abbre,handle=x).ali_url
  def get_all_chrome_urls():
    return subprocess.getoutput("""osascript -e'set text item delimiters to linefeed' -e'tell app "Google Chrome 70" to url of tabs of window 1 as text'""").split("\n")
  def get_chmod_statuses():
    for i in os.listdir("/Applications"):
      status = subprocess.getoutput("stat -f '%OLp' '/Applications/{}'".format(i))
      print("%s: %s" % (i,status))
    for i in os.listdir("/Applications/Utilities"):
      status = subprocess.getoutput("stat -f '%OLp' '/Applications/Utilities/{}'".format(i))
      print("%s: %s" % (i,status))
  def get_dircount(path=None):
    if path is None: path = os.path.expanduser('~/')+'Downloads'
    return len(os.listdir(path))
  def get_feed():
    return get_user().remote_read(fields=["feed"]).export_all_data()["feed"]["data"]
  def get_first_chrome_url(q=None):
    x = None
    if q:
      v = pool(lambda i: subprocess.getoutput("""osascript -e 'tell application "Google Chrome 70" to get URL of active tab of window %s'"""%i),list(range(getwindowcount("Google Chrome 70")))).result()
      v = [i for i in v if q in i]
      assert len(v) == 1
      x = v[0]
    else:
      x = timed(lambda:subprocess.getoutput("""osascript -e 'tell application "Google Chrome 70" to get URL of active tab of first window'"""),5)
      if x == None:
        ()if(OSA.log("Can't get window. Have to end all Google Chrome processes and restart again. Click OK to continue. Clicking Abort will abort.",tp=False,buttons=["Abort","OK"])=="OK")else(0/0)
        os.system("killall Google\ Chrome")
        OSA.log("Please restart Google Chrome and navigate to the previous urls",tp=False)
        return get_first_chrome_url(q=q)
    # OSA.notify("got url: %s" % x)
    if "Not authorized to send Apple events to Google Chrome 70" in x:
      # from http://hints.macworld.com/article.php?story=20060921045743404
      if OSA.display_dialog("Google Chrome 70 currently has Executing JavaScript through AppleScript turned off. Turn it on (it will be required for the program to work.)?",text_prompt=False,buttons=["Yes","No"]) == "No":
        return ""
      os.system("""osascript -e 'tell application "Google Chrome 70"' -e 'activate' -e 'end tell' -e 'tell application "System Events"' -e 'tell process "Google Chrome"' -e 'tell menu bar 1' -e 'tell menu bar item "View"' -e 'tell menu "View"' -e 'tell menu item "Developer"' -e 'tell menu "Developer"' -e 'click menu item "Allow JavaScript from Apple Events"' -e 'end tell' -e 'end tell' -e 'end tell' -e 'end tell' -e 'end tell' -e 'end tell' -e 'end tell'""")
      return get_first_chrome_url()
    if "Google Chrome 70 got an error: Can’t get window" in x:
      ()if(OSA.log("Can't get window. Have to end all Google Chrome processes and restart again. Click OK to continue. Clicking Abort will abort.",tp=False,buttons=["Abort","OK"])=="OK")else(0/0)
      os.system("killall Google\ Chrome")
      OSA.log("Please restart Google Chrome and navigate to the previous urls",tp=False)
      return get_first_chrome_url(q=q)
    return x
  def get_in_between_idx(new,x):
    chosen_idx = None
    for idx,i in enum(x[:-1]):
      if new > i and new < x[idx+1]:
        print(i,new,x[idx+1])
        chosen_idx = idx
    return chosen_idx
  def get_one_address(directory,ext):
    return os.path.join(directory,"x")+(".%s"%(ext))
  def get_random_address(directory):
    print("getting random address")
    class x(str):
      __init__ = lambda self, s: super().__init__()
      png = lambda self: self.__add__(".png")
      jpg = lambda self: self.__add__(".jpg")
      jpeg = lambda self: self.__add__(".jpeg")
      csv = lambda self: self.__add__(".csv")
      mp4 = lambda self: self.__add__(".mp4")
      txt = lambda self: self.__add__(".txt")
      txt = lambda self: self.__add__(".txt")
      txt = lambda self: self.__add__(".txt")
      txt = lambda self: self.__add__(".txt")
    c = x(generate_one_random_number(10))
    if c in lmap(lambda i: ".".join(i.split(".")[:-1]), os.listdir(directory)):
      return get_random_address(directory)
    c = x(os.path.join(directory,c))
    return c
  def get_random_address2(directory,ext):
    x = random.randrange(10000000)
    return os.path.join(directory,str(x))+".%s"%(ext)
  def get_random_from_lists(*args):
    firsts = args[:int(len(args)/2)]
    x = []
    x.append(firsts[0])
    for idx,i in enum(firsts[1:]):
      x.append(round(i+x[-1],2))
    new = random.random()
    x.insert(0,0)
    """
    while True:
      new = random.random()
      for idx,i in enum(x[:-1]):
        if new > i and new < x[idx+1]:
          print(i,new,x[idx+1])
          time.sleep(1)
    """
    choices = args[int(len(args)/2):]
    chosen_idx = get_in_between_idx(new,x)
    chosen_choices = choices[chosen_idx]
    return random.choice(chosen_choices)
  def get_random_word():
    from nltk.corpus import words
    x = words.words()
    word = random.choice(x)
    return word
  def get_lambda_name(l):
    return get_source(l).split("=")[0].strip()
  def get_latest_download(path=None,x=0):
    import glob
    if path is None: path = os.path.expanduser('~/')+'Downloads'
    return sorted(glob.glob('%s/*' % path), key=os.path.getmtime, reverse=True)[x]
  def get_one(_, *args, **kwargs):
    __ = _

    _ = _.objects.filter(**{a:v for a,v in kwargs.items() if "__range" not in a and not [i for i in __._meta.fields if i.name == a.split("__")[0] and type(i) == JSONField]})
    if {a:v for a,v in kwargs.items() if "__range" not in a and [i for i in __._meta.fields if i.name == a.split("__")[0] and type(i) == JSONField]}:
      _ = filter(_,**{a:v for a,v in kwargs.items() if "__range" not in a and [i for i in __._meta.fields if i.name == a.split("__")[0] and type(i) == JSONField]})
    if args and not [i[0] for i in sum(key("children",args),[]) if [j for j in __._meta.fields if j.name == i[0] and type(j) == JSONField]]:
      _ = _.filter(*args)
    if args and [i[0] for i in sum(key("children",args),[]) if [j for j in __._meta.fields if j.name == i[0] and type(j) == JSONField]]:
      _ = filter(_,*args)
    for a,v in kwargs.items():
      if "__range" in a:
        field = a.split("__",1)[0]
        for i in _:
          setattr(i, field, Date(getattr(i, field)).dateobj  )

        class myList(list):
          1
        _ = myList([i for i in _ if   Date(v[0]).dateobj<= getattr(i,field)  <= Date(v[1]).dateobj ])

    if type(_) == list:
      class myList(list):
        1
      _ = myList(_)

    n = lambda self, x: list(self)[x]
    ( bind3(_,len), bind3(_,n) )

    _ = _[0]
    return _
  def get_product_url(x):
    url = "https://%s/admin/products/%s"%(Get(Shop,shop_abbreviation="rom").Domain_Name,x.id)
    return url
  def get_size_of(x):
    return sys.getsizeof(x)
  def get_source(x):
    from inspect import getsource
    return getsource(x)
  def get_us_ip_list():
    try:
      soup = BeautifulSoup(requests.get("https://free-proxy-list.net/").text)
      soup.findAll("td")
      x = key("text", soup.findAll("td"))
      y = [i for i in x if i.count(".") == 3 or tryprocess(int, i) == 1]
      proxy_list = ["%s:%s"%(i,j) for i,j in zip(y[0::2], y[1::2])]
      if len(proxy_list) == 0:
        q = redinput("redo/Error in My_Requests().set_proxies() | proxy_list == []   | check requests.get('http://www.free-proxy-list.net')    ")
        if q == "redo": return get_us_ip_list()
      if random.randrange(1,3) == 1:  proxy_list = list(tcer(proxy_list))
      else:                           random.shuffle(proxy_list)
      return proxy_list
    except :
      soup = BeautifulSoup(requests.get("http://www.idcloak.com/proxylist/free-us-proxy-list.html").text)
      x = key("text", soup.findAll("td"))
      y = []
      for i in x:
        try:
          if i.count(".") == 3:
            int(i.replace(".",""))
            y.append(i)
          else:
            int(i)
            y.append(i)
        except:
          pass
      y = list(tcer(y))
      proxy_list = []
      for i,j in zip(y[0::2], y[1::2]):
        proxy_list.append("%s:%s"%(i,j))
      proxy_list = proxy_list
      if random.randrange(1,3) == 1:
        proxy_list = list(tcer(proxy_list))
      else:
        random.shuffle(proxy_list)
      if len(proxy_list) == 0:
        return get_us_ip_list()
      return proxy_list
  def getitem(*args):
    return or_list(lambda:args[0].get(args[1],or_list(lambda:args[2],None)),lambda:or_list(lambda:args[0][args[1]],lambda:args[2]),lambda:(0/0))
  def gl(x,a):
    globals()[a] = x
    """
    gl("5","test")
    print(gx("test"))
    """
  def gleb(x,y=1):
    return (random.sample(x,1)[0])if(y==1)else(random.sample(x,y))
  def globalise(x,a):
    globals()[a] = x
  def globe(x,*args):
    return (globals().get(x,*args))if(args)else(globals().get(x))
  def go_over(x,y):
    x(y)
    return y
    """
    go_over(lambda i: print(i.a), AD(a=5))
    """
  def got_ali_url():
    existing = lmap(lambda i: re.findall("\d+\.html",i.ali_url)[0],Filter(Product,ali_url__icontains="aliexpress.com"))
    urls_2 = lmap(lambda i: re.findall("\d+.html",i.url)[0],All(AddProduct))
    now = re.findall("\d+\.html",get_first_chrome_url())[0]
    if now in existing or now in urls_2:
      print("index: %s"%(shuffled(existing+urls_2).index(now)))
      print("now: %s" % now)
      return True
  def gx(x,*args):
    return (globals().get(x,*args))if(args)else(globals().get(x))
  def html_test(x):
    open("test.html","w").write(str(x))
    system("/Applications/Firefox\ 46.app/Contents/MacOS/firefox-bin -p sele test.html &>/dev/null&")
  def html_to_png(io):
    address_1 = homepath("~/tavern/tavern/soda/dls/._%s_tmp.html"%(random.randrange(10000000,99999999)))
    address_2 = homepath("~/tavern/tavern/soda/dls/._%s_out.png"%(random.randrange(10000000,99999999)))
    try:
      if os.path.exists(io):
        io = io
      else:
        try:
          try:open(address_1,"w",encoding="utf-8").write(io)
          except:open(address_1,"wb",encoding="utf-8").write(io)
        except Exception as v:
          v
        io = address_1
      try:
        os.system("""/usr/local/bin/wkhtmltoimage --disable-smart-width --javascript-delay 1000 --encoding utf-8 --load-error-handling ignore --load-media-error-handling ignore "%s" "%s" """%(address_1,address_2))
      except Exception as w:
        w
      tryprocess(os.remove,address_1)
      return address_2
    except Exception as e:
      e = str(e)
      OSA.log("MIGHTY_ERROR: %s"%e)
      return "MIGHTY ERROR"
  def ifdo(x,y):
    if x():
      y()
    """
    ifdo(lambda: 1==1, lambda: print(5))
    ifdo(lambda: 1==2, lambda: print(5))
    ifdo(lambda: [], lambda: print(5))
    ifdo(lambda: True, lambda: print(5))
    """
  def ifelseget(x,y,z):
    if tryreturn(lambda:x()):
      return y()
    else:
      return z()
    """
    ifelseget(lambda: 1==1, lambda: print(5), lambda: print(4))
    ifelseget(lambda: 1==2, lambda: print(5), lambda: print(4))
    ifelseget(lambda: [], lambda: print(5), lambda: print(4))
    ifelseget(lambda: True, lambda: print(5), lambda: print(4))
    """
  def ifelselist(*args):
    for i,j in zip(args[0::2],args[1::2]):
      if i():
        return j()
  def ifget(x,y):
    if tryreturn(lambda:x()):
      return y()
  def im2arr(fn):
    import numpy as np
    from PIL import Image
    return np.array(Image.open(fn))
  def images_to_column_xlsx(images,column="A",image_size=100,**stars):
    import openpyxl
    wb = ifelseget(lambda:stars["wb"],lambda:stars["wb"],lambda:openpyxl.Workbook())
    ws = wb.worksheets[0]
    ws.column_dimensions['A'].width = (image_size/8)
    s = 1
    for i in images:
      img = openpyxl.drawing.image.Image(i)
      img.anchor = '%s%s'%(column,s)
      print('%s%s'%(column,s))
      ws.add_image(img)
      ws.row_dimensions[s].height = (image_size*0.75)
      s += 1
    wb.save('out.xlsx')
    return wb
  def impreview(address, speed=0.3):
    if not os.path.exists(str(address)):
      import cv2
      os.makedirs(homepath("~/tavern/tavern/soda/dls"),exist_ok=True)
      a = (homepath("~/tavern/tavern/soda/dls/%s.png"%(generate_one_alphanumeric_string(18))))
      cv2.imwrite(a, address)
      address = a

    from PIL import Image
    if os.path.isdir(address):
      [[Image.open(os.path.join(address,fn)).show(), time.sleep(speed)] for fn in sorted(os.listdir(address))]
    else:
      Image.open(address).show()
  def index(x, y):
    try:return list(x).index(y)
    except:return -1
  def indicepick(x,y):
    return [y[i] for i in x]
    """
    indicepick([1,2,3], [1,2,3,4,5,6])
    """
  def intcls(x,**kwargs):
    return type("a",(int,),kwargs)(x)
    """
    r = intcls(123,print = lambda self:print(self))
    r.print()
    """
  def instapyupload(urls):
    # 'class InstagramAccount(Records):\n  id = AutoField()\n  password = CharField()\n  username = CharField()\n  urls = JSONField()\n  posted_urls = JSONField()\n  # :End:\n  def createAccount(self):\n    user,password=OSA.log("User?"),OSA.log("Password?",hidden=True)\n    Save(InstagramAccount,username=username,password=password,urls=[],posted_urls=[])\n  def instapyUpload(self):\n    next_urls = [i for i in self.urls if i not in self.posted_urls]\n    addr=Images().download(i)\n    subprocess.getoutput("instapy -u %s -p %s -f %s -t \'\'"%(user,pass_,addr))\n'
    user,pass_=OSA.log("User?"),OSA.log("Password?",hidden=True)
    for i in urls:
      addr=Images().download(i)
      x = subprocess.getoutput("instapy -u %s -p %s -f %s -t ''"%(user,pass_,addr))
      print(x)
      if "rate_limit_error" in x:
        time.sleep(60)
        print("sleeping 60")
      time.sleep(60)
  def itemcopy(a,b,f):
    redprint("Temporary Guide For Cloning: Keyse, GeheadN+(A),(B),(F);A^!TAKES FROM B, ITER<F>.")
    for zelish in f:
      rhondousel = getattr(b, zelish, None)
      setattr(a, zelish, rhondousel)
    a.save()
    return a
    """ ::: Tests ::: """
    """
    a = AttrDict()
    b = All(Product)[0]
    fields = ['size_chart', 'vendor', 'id', 'item_type']
    itemcopy(a,f,fields)
    """
  def iterindex(xy, lox):
    x = []
    for i in xy:
      if i in lox:
        x.append(lox.index(i))
    return x
    """
    xy = [0,1,2,3,4,5,6]
    lox = [0,1,2,3,4,5,6,7,8,0,1,2,3]
    print(iterindex(xy, lox))
    xy = [0,1,2,3,4,5,6]
    lox = [7]
    print(iterindex(xy, lox))
    """
  def key(dictlist, key):
    if type(dictlist) is str or type(dictlist) is int:
      dictlist, key = key, dictlist
    try: return [getattr(i, key) for i in list(dictlist)]
    except: return [i[key] for i in list(dictlist)]
  def keyby(x,y):
    return or_list(lambda:[i for i in y if x(i)],lambda:[i for i in y if x(*i)],[])
  def keycall(key, dictlist, *args, **kwargs):
    try: return [getattr(i, key)(*args, **kwargs) for i in list(dictlist)]
    except: return [i[key](*args, **kwargs) for i in list(dictlist)]
  def keycontains(key, contains, dictlist):
    try: return [i for i in list(data) if contains in i[key]]
    except: return [i for i in list(data) if contains in getattr(i, key)]
  def keyequals(key, equals, data):
    try: return [i for i in list(data) if i[key] == equals]
    except: return [i for i in list(data) if getattr(i, key) == equals]
  def keyicontains(key, icontains, dictlist):
    try: return [i for i in list(data) if icontains.lower() in i[key].lower()]
    except: return [i for i in list(data) if icontains.lower() in getattr(i, key).lower()]
  def keymulti(keys, dictlist):
    try: return [[getattr(a,b) for b in keys] for a in list(dictlist)]
    except: return [[getitem(a,b) for b in keys] for a in list(dictlist)]
  def keynicontains(key, nicontains, data, ):
    try: return [i for i in list(data) if nicontains.lower() not in i[key].lower()]
    except: return [i for i in list(data) if nicontains.lower() not in getattr(i, key).lower()]
  def keyncontains(key, ncontains, data, ):
    try: return [i for i in list(data) if ncontains not in i[key]]
    except: return [i for i in list(data) if ncontains not in getattr(i, key)]
  def keynequals(key, nequals, data, ):
    try: return [i for i in list(data) if i[key] != nequals]
    except: return [i for i in list(data) if getattr(i, key) != nequals]
  def keynotequals(key, notequals, data, ):
    try: return [i for i in list(data) if i[key] != notequals]
    except: return [i for i in list(data) if getattr(i, key) != notequals]
  def keysort(key, dictlist, tcer=True):
    import operator
    if type(key) is not list:
      key = [key]
    try: return sorted(list(dictlist), key=operator.itemgetter(*key), reverse=tcer)
    except: return sorted(list(dictlist), key=operator.attrgetter(*key), reverse=tcer)
  def keysort_multi(columns, items, tcer=False):
    from operator import itemgetter, attrgetter
    from functools import cmp_to_key
    comparers = None
    if tryprocess(lambda:items[0].get(columns[0])): comparers = [((itemgetter(col[1:].strip()), -1) if col.startswith('-') else (itemgetter(col.strip()), 1)) for col in columns]
    else: comparers = [((attrgetter(col[1:].strip()), -1) if col.startswith('-') else (attrgetter(col.strip()), 1)) for col in columns]
    def comparer(left, right):
      def cmp(a, b):
        if a == None and b == None: return 0
        if a == None and b != None: return 1        
        if a != None and b == None: return -1
        elif a != None and b != None: return (a > b) - (a < b)
      comparer_iter = ( cmp(fn(left), fn(right)) * mult for fn, mult in comparers)
      return next((result for result in comparer_iter if result), 0)
    return sorted(list(items), key=cmp_to_key(comparer), reverse=tcer)
  def killall_phantomjs():
    os.system("killall .phantomjs phantomjs &>/dev/null")
  def kodo(func, *args, ep=0, error = None, **kwargs):
    try:
      return func(*args, **kwargs)
    except Exception as e:
      OSA.log(str(or_list(error,e)))if(1==ep or error)else(1)
      return 0
    (0/0)
  def ldict(x=None):
    return OrderedDict(x)if(x)else(OrderedDict())
  def lid_is_closed():
    lid_is_closed = (False)if("No"in(subprocess.getoutput("ioreg -r -k AppleClamshellState -d 4 | grep AppleClamshellState  | head -1")))else(True)
    return lid_is_closed
  def linspace(start, stop, precision, endpoint=False):
    start, stop = round(float(start),2), round(float(stop),2)
    roundpoint = len(str(precision).split(".")[-1])if(".") in str(precision) else 0
    d = []
    x = start
    while True:
      d.append(x)
      x = x + precision
      x = round(x, roundpoint)
      if x == stop:
        break
    if endpoint == True:
      d.append(x)
    return d
    """
    linspace(0.76, 1.01, 0.01)
    """
  def list_and(*args):
    from types import MethodType,ModuleType,FunctionType
    latest = None
    for idx, arg in enum(args):
      if type(arg) == FunctionType or type(arg) == MethodType: arg = tryreturn(lambda:arg())
      else: arg = args[idx]
      latest = arg
      if arg == False or arg == 0 or arg == None or arg == [] or arg == () or arg == "" or arg == b"": return latest
    return latest
  def listadd(*args):
    x = []
    for i in args:
      if "append" not in dir(i):
        i = [i]
      x.extend(i)
    return x
    """
    listadd([1,2,3],[1,2,3],["a","b","c"],[[1,2,3]])
    """
  def listinsert(x,l1,l2):
    return l2[:x] + l1 + l2[x:]
    """
    assert listinsert(1,[4,5,6],[1,2,3]) == [1,4,5,6,2,3,]

    """
  def listmap(func, *args, **kwargs):
    from functools import partial
    return list(map( partial(func, **kwargs), *args ))
  def listminus(x,y=[],minus_once = False, **kwargs):
    # puts [] into a list.
    if "append" not in dir(y):
      y = [y]
    if minus_once == False:
      return [i for i in x if i not in y and kwargs.get("method",lambda i:True)(i)]
    else:
      for i in y:
        if i not in x:
          continue
        else:
          R = x.index(i)
          x.pop(R)
      return x
    """
    x = [2,1,2,1]
    y = [1]
    assert [2, 2] == listminus(x, y, minus_once = False)
    assert [2, 2, 1] == listminus(x, y, minus_once = True)
    """
  def listreplace(io, *args, **kwargs):
    return [setitem(kwargs,"z",io),[setitem(kwargs,"z",[i if i != x else j for i in kwargs["z"]]) for x,j in zip(args[0::2],args[1::2])] ,kwargs["z"]][-1]
  def listshift(start=None,x=None):
    a = x[start]
    x.__delitem__(start)
    x = [a] + x
    return x
    """
    listshift(2,[1,2,3,4,5])
    """
  def lmap(func, *args, **kwargs):
    from functools import partial
    arg_lens = oset([len(i) for i in args])
    assert len(arg_lens) == 1
    if arg_lens[0] == 0:
      return []
    # x = or_list(lambda:list(map( partial(func, **kwargs), *args )),
    #                 lambda:list(map( partial(func, **kwargs), *[[i[idx] for i in args[0]] for idx in list(range(oset(list(map(len,args[0])))[0]))]) ),
    #                 lambda: 0/0)
    x = or_list(lambda:list(map( partial(func, **kwargs), *args )),
                    lambda:list(map( partial(func, **kwargs), *transpose(args[0]) )),
                    lambda:0/0)
    ifdo(lambda:x==0,lambda:exec("assert False"))
    return x
    """
    assert lmap(lambda i,j: i+j, [(1,1),(2,2),(3,3)]) == [2, 4, 6]
    assert lmap(lambda i: i+1, [1,2]) == [2, 3]
    """
  def lrange(*args):
    return list(range(args[0]))if(len(args)==1)else(list(range(args[0],args[1])))
  def lset(x):
    return list(set(x))
  def login_gmail(ss, username, password):
    logout_gmail(ss)
    ss.get("https://accounts.google.com/ServiceLogin/identifier?service=mail&passive=true&rm=false&continue=https%3A%2F%2Fmail.google.com%2Fmail%2F&ss=1&scc=1&ltmpl=default&ltmplcache=2&emr=1&osid=1&flowName=GlifWebSignIn&flowEntry=AddSession")
    flexed = False
    quas = ss.ffss("div", "aria-label", "Switch account")
    if([] != quas):
      flexed = True
    if flexed == True:
      trykeycall("click", quas); sp(10)
      trykeycall("click", ss.ffsts("div", "Use another account")); sp(7)
    1
    trykeycall("send_keys", ss.fns("identifier"), username); sp(7)
    trykeycall("click", ss.ffsts("span", "Next")); sp(4)
    while("/pwd" not in ss.current_url):
      time.sleep(1)
    trykeycall("send_keys", ss.fns("password"), password); sp(7)
    current_url = ss.current_url
    trykeycall("click", ss.ffsts("span", "Next")); sp(7)
    while(current_url == (lambda: ss.current_url)()):
      time.sleep(1)
    time.sleep(10)
    if("/challenge" in ss.current_url):
      OSA.display_dialog("Please fill in the six digit verification code. Then click OK in this prompt.", text_prompt = False)
    trykeycall("click", ss.ffsts("span", "Next")); sp(6)
  def login_prompt():
    OSA().log("Please log in. Then press OK. ʕ•́ᴥ•̀ʔ",tp=False)
  def logout_gmail(ss):
    ss.get("https://accounts.google.com/Logout")
  def lsorted(x,**kwargs):
    return sorted(x,key=kwargs.get("key",None),reverse=kwargs.get("tcer",False))
    """
    lsorted([5,2,3],tcer=True)
    lsorted([5,2,3],y=lambda i: i)
    lsorted([5,2,3],y=lambda i: i,tcer=True)
    """
  def make_archive(address):
    import shutil
    import zipfile
    rm("%s.zip"%address)if(1==os.path.exists("%s.zip"%address))else(0)
    shutil.make_archive(address, 'zip', address) if os.path.isdir(address) else zipfile.ZipFile("%s.zip"%address, mode="w").write(address)
    return "%s.zip"%address
  def methodsort(x, method, tcer=False):
    return sorted(x, key=method, reverse=tcer)
  def microsecondize(a,b):
    c = (b-a)
    d = c.seconds
    v = c.microseconds / 1000000
    f = (d)+(v)
    return f
  def mig(*args,**kwargs):
    SQL().migrate(*args,**kwargs)
  def mkchdir(address):
    os.makedirs(address, exist_ok=True)
    os.chdir(address)
  def msort(x, method, tcer=False):
    return sorted(x, key=method, reverse=tcer)
  def multi_input(printout):
    distinct_print("====multi_input====:\n%s"%printout)
    x = ""
    while True:
      y = input("")
      if y[-2:] == "\Q":
        y = y[:-2]
      if y=="q":
        return x
      x += y
      x += "\n"
  def multiprocessing_process(target):
    import multiprocessing
    R = multiprocessing.Process(target = target)
    R.start()
    return R
  def mysql_args_and_kwargs_to_string(*args, **kwargs):
    import django
    stuff = []
    for i in args:
      if type(i) == django.db.models.query_utils.Q:
        x = i.children
        for idx_0, a in enum(x):
          x[idx_0] = list(a)

          for idx,b in enum(x[idx_0]):
            if b == True:
              x[idx_0][idx] = "true"
            elif b == False:
              x[idx_0][idx] = "false"

        for j in x:
          if "__" in j[0]:
            if "__icontains" in j[0]:
              stuff.append("%s not like '%%%s%%'"%(j[0].split("__")[0],j[0].split("__")[1]))
          else:
            stuff.append("%s!='%s'"%(j[0],j[1]))


    for a,b in kwargs.items():
      if a == True: a = "true"
      if a == False: a = "false"
      if "__" in a:
        if "__icontains" in a:
          stuff.append("%s like '%%%s%%'"%(a.split("__")[0],b))
      else:
        stuff.append("%s='%s'"%(a,b))


    stuff = "where" + " " + " and ".join(stuff)
    return stuff
  def mysql_delete(x):
    """ This will work only if the id is an AutoField on any model with multiple unique fields. """
    #t = ('/usr/local/bin/mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A soda -e """delete from %s_%s where id="%s";"""&>/dev/null ' % (Database, x._meta.verbose_name.replace(" ",""), x.id))
    t = ("""/usr/local/bin/mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A soda -e "delete from %s_%s where id='%s';"&>/dev/null """ % (Database, x._meta.verbose_name.replace(" ",""), x.id))
    #redprint(t)
    os.system(t)
  def mysql_exec(w="select count(*) from soda_timedtask;"):
    x = subprocess.getoutput("""mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A soda -e "%s" """ % ((w+";")if(not w.endswith(";"))else(w))).split("\n")[1:]
    x = [i.split("\t") for i in x]
    headers = x.pop(0)
    y = [dict(zip(headers, i)) for i in x]
    return y
  def ner_tagger(text):
    from nltk.tag import StanfordNERTagger
    from nltk.tokenize import word_tokenize

    Binarydata().export("NER")
    
    st = StanfordNERTagger('NER/english.all.3class.distsim.crf.ser.gz',
                 'NER/stanford-ner.jar',
                 encoding='utf-8')

    tokenized_text = word_tokenize(text)
    classified_text = st.tag(tokenized_text)

    print(classified_text)

    x = []
    for i in classified_text:
      if i[1]=='PERSON':
        print(i)
        x.append(i[0])

    import shutil
    shutil.rmtree("NER")

    return x
  def new_dict(x,fields=[]):
    return AD({a:b for a,b in x.items() if a in fields})
  def notentry(a,b):
    if b not in globals():
      globalise(a(),b)
    return globals()[b]
    """
    notentry(lambda:1,"b")
    assert globe("b") == 1
    """
  def notexists(x):
    if x != False and x != 0 and x != None and x != [] and x != () and x != "" and x != b"":
      return False
    else:
      return True
    """
    notexists("")
    """
  def nps_chat_reader():
    from nltk.corpus import nps_chat
    for i in nps_chat.xml_posts():
      print(i.text)
      x = input("")
      if x == "quit":
        break
    return
  def openchromeurl(url,wait_time=1):
    x = chromejs("window.location.href = '%s'"%(url))
    if "Google Chrome 70 got an error: Executing JavaScript through AppleScript is turned off." in x:
      if OSA.display_dialog("Google Chrome 70 currently has Executing JavaScript through AppleScript turned off. Turn it on (it will be required for the program to work.)?",text_prompt=False,buttons=["Yes","No"]) == "No":
        return ""
      blueprint('tell application "Google Chrome 70"\n  activate\nend tell\ntell application "System Events"\n  tell process "Google Chrome"\n    tell menu bar 1\n      tell menu bar item "View"\n        tell menu "View"\n          tell menu item "Developer"\n            tell menu "Developer"\n              click menu item "Allow JavaScript from Apple Events"\n            end tell\n          end tell\n        end tell\n      end tell\n    end tell\n  end tell\nend tell')
      os.system("""osascript -e 'tell application "Google Chrome 70"' -e 'activate' -e 'end tell' -e 'tell application "System Events"' -e 'tell process "Google Chrome"' -e 'tell menu bar 1' -e 'tell menu bar item "View"' -e 'tell menu "View"' -e 'tell menu item "Developer"' -e 'tell menu "Developer"' -e 'click menu item "Allow JavaScript from Apple Events"' -e 'end tell' -e 'end tell' -e 'end tell' -e 'end tell' -e 'end tell' -e 'end tell' -e 'end tell'""")
      return openchromeurl(url,wait_time)
    time.sleep(wait_time)
    return x
  def openchromeurls(urls):
    for i in urls:
      openchromeurl(i)
      time.sleep(0.1)
      OSA("Google Chrome 70",["ctrl_t"])
  def openr(address):
    return open(address)
  def openw(address):
    return open(address, "w")
  def openrb(address):
    return open(address, "rb")
  def openwb(address):
    return open(address, "wb")
  def ordered_json_dumps(x):
    return json.dumps(OrderedDict([[a,str(x[a])] for a in list(sorted(x.keys())) if not a.startswith("_")]), indent=4)
  def or_list(*args):
    from types import MethodType,ModuleType,FunctionType
    for idx, arg in enum(args):
      if type(arg) == FunctionType or type(arg) == MethodType:
        arg = tryreturn(lambda:arg())
        if arg != False and arg != 0 and arg != None and arg != [] and arg != () and arg != "" and arg != b"":
          return arg
      if arg != False and arg != 0 and arg != None and arg != [] and arg != () and arg != "" and arg != b"":
        return args[idx]
    return (tryreturn(lambda:args[-1]()))if(type(args[-1])==FunctionType or type(args[-1])==MethodType)else(args[-1])
    """
    or_list(tryreturn(lambda: 3/1), "a", None, 0,)
    or_list(1,lambda:print(1),lambda:print(1))
    or_list(lambda:print(1),1,lambda:print(1))
    or_list(lambda:print(1),1)
    or_list(0,ExecutableText().export("hello"),1)
    or_list(0,lambda x=1: x)
    """
  def oset(x, **kwargs):
    y = []
    for i in x:
      if i not in y:
        if i not in kwargs.get("minus",[]):
          if kwargs.get("method",lambda i: True)(i) == True:
            y.append(i)
    return y
    """
    assert oset([3,2,3,3,2]) == [3, 2]
    assert oset([1,2,1,]) == [1,2]
    assert oset([1,2,1,],method=lambda i: i!=1) == [2]
    assert oset([1,2,1,],method=lambda i: i!=1,minus=[2]) == []
    assert oset([1,2,1,],method=lambda i: i!=1,minus=[3]) == [2]
    """
  def overlay_sound_files(sound_files):
    from pydub import AudioSegment
    sound_file = AudioSegment.from_file(sound_files[0])
    for i in sound_files[1:]:
      new_sound_file = AudioSegment.from_file(i)
      sound_file = sound_file.overlay(new_sound_file)
    sound_file.export(os.path.expanduser("~/Downloads/export.wav"), format='wav')
    return os.path.expanduser("~/Downloads/export.wav")
  def pathjoin(*args):
    return os.path.join(*args)
  def plusUpdate(x, **kwargs):
    return [[setattr(x,a,getattr(x,a)+b) for a,b in kwargs.items()],x.save(),x][2]
  def poll(o, x, step=8, poll_forever=True):
    import polling
    polling.poll(o, step=step, poll_forever=poll_forever)
    x()
    poll(o, x, step=step, poll_forever=poll_forever)
  def pool(f, *args, nodes=12, **kwargs):
    # [ERRORFUL] if you do pool(ss.assert_connection_speed, "20MB"), it should have minimum_speed = , otherwise you're saying that "20MB" is the list which you should be pooling.
    results = type("list", (list,), dict(result=lambda self: [keycall("join",self),keycall("result",self)][1]))
    results = results()
    if args and len(args[0]) == 0: return results

    #@results() returns "processing" list. does not fine.
    #@unless i make results keycall join.
    #results = []
    from inspect import getfullargspec
    fullargspec = getfullargspec(f)
    """
    defaults_len = tryreturn(len, fullargspec.defaults)
    accountable_args = listminus(fullargspec.args, (["self"] + list(kwargs)), minus_once = True)
    accountable_args_len = len(accountable_args) - defaults_len
    if accountable_args_len == 0:
      accountable_args_len = accountable_args_len - len(args)
    """
    argcount = f.__code__.co_argcount
    if "self" in fullargspec.args:
      argcount = argcount - 1
    accountable_args_len = argcount -  (len(kwargs))
    # [TESTING] magentaprint(accountable_args_len)

    zilleum = 0
    while True:
      if keycall("result",results).count("processing") < nodes:
        if accountable_args_len != 0:
          #@ruined the args from before calling pool. results.append(process(f,*[a.pop(0) for a in args], **kwargs))
          results.append(process(f,*[a[zilleum] for a in args], **kwargs))
          zilleum+=1
        elif accountable_args_len == 0:
          results.append(process(f, **kwargs))
          #def hi():
          #@works. hi(**{})
      else:
        time.sleep(0.1)
      #if len(args[0]) == 0:
      if not args:
        r = results[0]
        r.join_saved = r.join
        r.result_saved = r.result
        def result(self):
          self.join()
          return self.result_saved()
        is_running = lambda self: self.isAlive()
        bind3(r, result)
        bind3(r, is_running)
        return r
      elif zilleum == len(args[0]):
        # halts for say, args[0] is 11, nodes is 2.
        return results
      assert 1 == len(set(list(map(len, args))))
    """ :Tests:
    def x(self = 1, a = True, b = True, c = True):
      return 1
    a = pool(x) # will yield -1 in event self is supplied to not a truly instantiated object
    assert a.result() == 1
    def x(y):
      return 1
    b = pool(x, [1, 2, 3])
    assert [1, 1, 1] == b.result()
    def x(y, z):
      return (y + z)
    c = pool(x, [1,2,3], [1,2,3])
    assert [2, 4, 6] == c.result()
    def x(y, multiplier = 5):
      return 1 * multiplier
    b = pool(x, [1, 2, 3], multiplier = 5)
    assert [5, 5, 5] == b.result()
    def x(y, multiplier):
      return 1 * multiplier
    b = pool(x, [5, 5, 5], multiplier = 5)
    assert [5, 5, 5] == b.result()
    def x(y, z, multiplier = 5):
      return (y + z) * multiplier
    c = pool(x, [1, 2, 3], [1, 2, 3], multiplier = 5)
    assert [10, 20, 30] == c.result()
    def x(y, z, multiplier):
      return (y + z) * multiplier
    c = pool(x, [1,2,3], [1,2,3], multiplier = 5)
    assert [10, 20, 30] == c.result()
    def x(y, z, multiplier, multiplier_2):
      return (y + z) * multiplier * multiplier_2
    c = pool(x, [1,2,3], [1,2,3], multiplier = 5, multiplier_2 = 5)
    assert [50, 100, 150] == c.result()
    x = lambda: 1
    c = pool(x)
    assert 1 == c.result()
    x = lambda x: 1
    c = pool(x, [1,2,3])
    assert [1, 1, 1] == c.result()
    x = lambda x, y: x + y
    c = pool(x, [1,2,3], [1,2,3])
    assert [2, 4, 6] == c.result()
    x = lambda x, y, multiplier = 5: (x + y) * multiplier
    c = pool(x, [1,2,3], [1,2,3], multiplier = 5)
    assert [10, 20, 30] == c.result()
    x = lambda x, y, multiplier: (x + y) * multiplier
    c = pool(x, [1,2,3], [1,2,3], multiplier = 5)
    assert [10, 20, 30] == c.result()
    x = lambda x, y, multiplier = 5: (x + y) * multiplier
    c = pool(x, [1,2,3], [1,2,3])
    assert [10, 20, 30] == c.result()
    def x(self, a = True, b = True, c = True):
      return 1
    c = pool(x, [1,2,3])
    assert [1, 1, 1] == c.result()
    # Find any more issues add the tests here.
    # Idea [IGNORE]: Accountable Args meant arguments for which not keywords supplied, and given 0 accountable args, you have only keywords, but if defaults will minus until 0. unless none keywords. then is still 0 accountable args, ie pool(lambda: 1)
    # Idea: Actually, the only thing that was different was if clean arguments was 0. so you needed to get a len. to do this. you take co_argcounts which is ALL args+kwargs(?-1), and minus by ALLKWARGS. so all params, minus all kwargs. that leaves all arguments.
    # tldr. if 0== ALL PARAMS - ALL KWARGS (== ALL ARGUMENTS , LEN), then, it's pool(lambda: 1), which will work
    """
  def popen(cmd):
    return Popen(cmd.split(' '),shell=False,stdin=None, stdout=None, stderr=None, close_fds=True)
  def popwhere(key, keyequals, dictlist):
    [  setitem(g(),"indexes",[])  ,  [g()["indexes"].append(idx)if(keyequals==  (getattr(i,key) if("~~~"!=getattr(i,key,"~~~")) else(i.get(key))  )) else(None)    for idx, i in enum(dictlist)]  ]
    assert len(g()["indexes"]) == 1
    dictlist.pop(g()["indexes"].pop())
    return dictlist
    """
    class Test():
      def __init__(self):
        self.a = "b"
        self.c = "d"
    class Test2():
      def __init__(self):
        self.a = "c"
        self.c = "b"
    dictlist = [Test(),Test2()]
    popwhere("a","b",dictlist)

    class Test():
      def __init__(self):
        self.a = "b"
        self.c = "d"
    class Test2():
      def __init__(self):
        self.a = "b"
        self.c = "b"
    dictlist = [Test(),Test2()]
    try:popwhere("a","b",dictlist)
    except:print("expected error")
    """
  def process(func, *args, start_process=1, **kwargs):
    import multiprocessing
    process_id = str(generate_one_random_number(20))
    while process_id in globals():
      process_id = str(generate_one_random_number(20))
    globals()[process_id] = "processing"
    def new_func(func, *args, **kwargs):
      globals()[process_id] = func(*args,**kwargs)
    def strand(func, *args, start_process=1, **kwargs):
      from threading import Thread
      t = Thread(target=func, args=args, kwargs=kwargs)
      t.start()if(start_process==1)else(1)
      return t
    x = strand(new_func, *tuple([func] + list(args)), start_process=start_process, **kwargs)
    x.globals = globals
    x.process_id = process_id
    def result(self):
      return self.globals()[self.process_id]
    bind3(x, result)
    def tmp(self):
      while self.is_alive() == True:
        time.sleep(1)
      return self.globals()[self.process_id]
    bind3(x, tmp)
    return x
  def process_(func, *args, start_process=1, **kwargs):
    import multiprocessing
    p = multiprocessing.Process(target=func,*args,**kwargs)
    if(1==start_process):p.start()
    return p
  def productcsv(sku_image_dict=None,shop=None,images=None,options=None,variants=None,title=None,product_type=None,tags=None,description=None,):
    {'Body (HTML)': 'Cute but funny',
     'Handle': 'feel-the-force-decor',
     'Image Alt Text': '',
     'Image Position': '1',
     'Image Src': '',
     'Option1 Name': 'Color',
     'Option1 Value': 'Black',
     'Option2 Name': '',
     'Option2 Value': '',
     'Option3 Name': '',
     'Option3 Value': '',
     'Tags': '1, test',
     'Title': 'Feel The Force Decor',
     'Type': 'test',
     'Variant Compare At Price': '14.95',
     'Variant Grams': '0',
     'Variant Image': '',
     'Variant Inventory Qty': '1494',
     'Variant Price': '9.95',
     'Variant SKU': "['sku-1-193']",
     'Vendor': 'Epic Life Shop'}


    {
     'Gift Card': 'false', #
     'Google Shopping / AdWords Grouping': '', #
     'Google Shopping / AdWords Labels': '', #
     'Google Shopping / Age Group': '', #
     'Google Shopping / Condition': '', #
     'Google Shopping / Custom Label 0': '', #
     'Google Shopping / Custom Label 1': '', #
     'Google Shopping / Custom Label 2': '', #
     'Google Shopping / Custom Label 3': '', #
     'Google Shopping / Custom Label 4': '', #
     'Google Shopping / Custom Product': '', #
     'Google Shopping / Gender': '', #
     'Google Shopping / Google Product Category': '', #
     'Google Shopping / MPN': '', #
     'Published': 'true', #
     'SEO Description': '', #
     'SEO Title': '', #
     'Variant Barcode': '', #
     'Variant Fulfillment Service': 'manual', #
     'Variant Inventory Policy': 'deny', #
     'Variant Inventory Tracker': 'shopify', #
     'Variant Requires Shipping': 'true', #
     'Variant Tax Code': '', #
     'Variant Taxable': 'true', #
     'Variant Weight Unit': 'kg', # 
     }


    """Handle               Option1 Value   Option2 Value   Option3 Value Variant SKU Variant Grams Variant Inventory Tracker Variant Inventory Qty Variant Inventory Policy  Variant Fulfillment Service Variant Price Variant Compare At Price  Variant Requires Shipping Variant Taxable   Image Src Image Position 

    Handle  Title Body (HTML) Vendor  Type  Tags  Published Option1 Name    Option2 Name    Option3 Name                          Image Src                                     Variant Image"""

    headers = \
    ['Handle',
     'Title',
     'Body (HTML)',
     'Vendor',
     'Type',
     'Tags',
     'Published',
     'Option1 Name',
     'Option1 Value',
     'Option2 Name',
     'Option2 Value',
     'Option3 Name',
     'Option3 Value',
     'Variant SKU',
     'Variant Grams',
     'Variant Inventory Tracker',
     'Variant Inventory Qty',
     'Variant Inventory Policy',
     'Variant Fulfillment Service',
     'Variant Price',
     'Variant Compare At Price',
     'Variant Requires Shipping',
     'Variant Taxable',
     'Variant Barcode',
     'Image Src',
     'Image Position',
     'Image Alt Text',
     'Gift Card',
     'SEO Title',
     'SEO Description',
     'Google Shopping / Google Product Category',
     'Google Shopping / Gender',
     'Google Shopping / Age Group',
     'Google Shopping / MPN',
     'Google Shopping / AdWords Grouping',
     'Google Shopping / AdWords Labels',
     'Google Shopping / Condition',
     'Google Shopping / Custom Product',
     'Google Shopping / Custom Label 0',
     'Google Shopping / Custom Label 1',
     'Google Shopping / Custom Label 2',
     'Google Shopping / Custom Label 3',
     'Google Shopping / Custom Label 4',
     'Variant Image',
     'Variant Weight Unit',
     'Variant Tax Code']

    x = dictfromkeys(headers, default_value = "")

    x.update({"Option1 Name": getitem(key("name",options), 0, ""), "Option2 Name": getitem(key("name",options), 1, ""), "Option3 Name": getitem(key("name",options), 2, ""), "Title": title, "Body (HTML)": description, "Vendor": "", "Type": product_type, "Tags":"", "Published":"true", "Image Src":images[0]["src"], "Gift Card": "false", "Variant Image": images[0]["src"]})
    image_position = 0
    variants_ = []
    for idx, variant in enumerate(variants):
      variant_ = dictfromkeys(headers, default_value="")
      if idx==0: variant_.update(x)
      variant_["Handle"] = "".join(re.findall(r"[0-9a-zA-Z ]",title)).lower().replace(" ","-").replace("--","-").replace("--","-")
      variant_["Option1 Value"] = variant.get("option1", "")
      variant_["Option2 Value"] = variant.get("option2", "")
      variant_["Option3 Value"] = variant.get("option3", "")
      variant_["Variant SKU"] = variant.get("sku", "")
      variant_["Variant Grams"] = variant.get("weight", "")*100
      variant_["Variant Weight Unit"] = "kg"
      variant_["Variant Inventory Tracker"] = variant["inventory_management"]
      variant_["Variant Inventory Qty"] = variant["inventory_quantity"]
      variant_["Variant Inventory Policy"] = variant["inventory_policy"]
      variant_["Variant Fulfillment Service"] = "manual"
      variant_["Variant Price"] = variant["price"]
      variant_["Variant Compare At Price"] = variant["compare_at_price"]
      variant_["Variant Requires Shipping"] = "true"
      variant_["Variant Taxable"] = "true"
      variant_["Image Src"] = images[ sku_image_dict[variant.get("sku")] ]["src"] if sku_image_dict!={} else images[0]["src"]
      image_position += 1
      variant_["Image Position"] = image_position
      variant_["Variant Image"] = images[ sku_image_dict[variant.get("sku")] ]["src"] if sku_image_dict!={} else ""
      variants_.append(variant_)

    if len(images) > len(variants_):
      for idx, image in enumerate(images[ len(variants_): ]):
        variant_ = dictfromkeys(headers, default_value="")
        variant_["Handle"] = "".join(re.findall(r"[0-9a-zA-Z ]",title)).lower().replace(" ","-").replace("--","-").replace("--","-")
        variant_["Image Src"] = image["src"]
        image_position += 1
        variant_["Image Position"] = image_position
        variants_.append(variant_)




    fn = homepath("~/tavern/tavern/bag/products_%s.csv" % (generate_one_random_number(10)))
    CSV().DictWriteWithHeaders(fn, variants_, headers = headers)
  def productgost(x):
    GhostProduct().productgost(x)
  def query_google(q, pages):
    urls = ["https://www.google.com/search?q={}&oq={}&start={}".format(q,q, i*10) for i in range(pages)]
    print(urls)
    x=[]
    for idx, url in enumerate(urls):
      print("getting page %s.." % idx)
      try:soup = BeautifulSoup(requests.get(url).text)
      except Exception as e: redprint("[query_google][%s]"%e); continue
      results = re.findall(r'<a href="/url\?q=(.*?)"', str(soup))
      for i in results:
        if i not in x:
          x.append(i)
      time.sleep(2)
      print("%s results so far" % len(x))
    x1 = []
    for url in x:
      x1.append(url.split("&amp")[0])
    return x1
  def query_google_images(searches="", limit=20):
    for i in searches.split(","):
      rm(homepath("~/Documents/downloads"))
      rm(homepath("~/Documents/photos/%s"%(i)))
      os.chdir(homepath("~/Documents"))
      os.system('googleimagesdownload --chromedriver ~/tavern/tavern/soda/.chromedriver -k """%s""" -l %s'%(i.strip(), limit))
      os.system("mkdir ~/Documents/photos &>/dev/null")
      os.system("""mv ./downloads/* /Users/$USER/Documents/photos/ && mv ./downloads/*/* "/Users/$USER/Documents/photos/%s/" """%(i))
      os.system("echo 'printing image folders in ~/Documents/photos..'")
      os.system("ls -l ~/Documents/photos | grep -v 'jpg\|png\|jpeg\|psd'")
      rm("./downloads")
    return flatten([lmap(lambda x: homepath("~/Documents/photos/%s/%s"%(i,x)),os.listdir(homepath("~/Documents/photos/%s"%(i)))) for i in searches.split(",")],1)
  def quicktime_recording():
    os.system("""osascript -e 'tell application "QuickTime Player" to activate' -e 'tell application "QuickTime Player" to start (new screen recording)'""")
  def r_image_search(io,webbrowser_open=False):
    import webbrowser

    if type(io) != list:
      io = [io]
    def x(address):
      multipart = {"encoded_image": open(address, "rb"), "image_content": ""}
      response = requests.post("http://www.google.com/searchbyimage/upload", files=multipart, allow_redirects=False)
      fetchUrl = response.headers["Location"]
      url = fetchUrl + "&q=site%3Aaliexpress.com"
      return url
    l=pool(x,io,nodes=2).result()

    if webbrowser_open == True:
      if OSA.log("Are you sure you want to open the urls?",tp=False,buttons=["Yes","No"]) == "Yes":
        lmap(webbrowser.open,l)
    return l
  def randomised(x):
    random.shuffle(x)
    return x
  def rangelen(x):
    return range(len(x))
  def raw_input(x=None):
    return eval(input(""))if(None==x)else(eval(input(x)))
  def re_findall_overlaps(regex_string, x):
    groups_regex = '(?=(' + regex_string + '))'
    print("groups regex: %s" % groups_regex)
    matches = re.finditer(groups_regex,x)
    results = [match.group(1) for match in matches]
    print("%s matches" % len(results))
    return results
  def re_found_function(x,r,method):
    if findall(x,r):
      return method(x)
    else:
      return x
  def re_spaces(x):
    return re_substitute(x,["\s+"," "]).strip()
  def re_substitute(x,y):
    return re.sub(y[0],y[1],x)
  def re_substitute_function(x,r,method):
    found = findall(x,r)
    if len(found) == 0: print("No found matches")
    print(x)
    random_strings = []
    multiplier = 10000
    for i in lrange(len(found)):
      random_strings.append("<<<<<%s>>>>>"%(random.choice(string.ascii_letters)*multiplier))
      multiplier = multiplier * 10
    for i,j in zip(found,random_strings): x = x.replace(i,j)
    y = lmap(lambda i:str(method(i)),found)
    for i,j in tcer(list(zip(random_strings,y))): x = x.replace(i,j)
    print(x)
    return x
  def readministrate():
    import getpass
    os.system("sudo -passwd admin")
    os.system("sudo dscl . -append /Groups/admin GroupMembership %s"%(getpass.getuser()))
  def read_html(url, to_dict=True):
    import pandas as pd
    dataframes = pd.read_html(url, header=0)
    dataframes=[dataframe_to_dictlist(dataframe) for dataframe in dataframes]if(1==to_dict)else(dataframes)
    return dataframes
  def reverse_image_search(io,search=None):
    try:
      # for segmentation fault
      if not os.path.exists(io):
        io = Images().download(io)
      # filePath = '/mnt/Images/test.png'
      searchUrl = 'http://www.google.com/searchbyimage/upload'
      multipart = {'encoded_image': (io, open(io, 'rb')), 'image_content': ''}
      response = requests.post(searchUrl, files=multipart, allow_redirects=False)
      url = response.headers['Location']
      if search:
        url = url + "&q=%s&oq=%s"%(search,search)
      return url
    except Exception as e:
      OSA.notify("reverse image search error: %s" % str(e))
      return reverse_image_search(io=io,search=search)
  def rfloat(r1 = 0.2, r2 = 0.7):
    return random.uniform(r1, r2)
  def rm(address):
    subprocess.getoutput("""rm -rf "%s" """%address)
  def run_pinterest_board_image_getter():
    # 'https://api.pinterest.com/oauth/?scope=read_public,write_public&client_id=5066656475317842279&state=768uyFys&response_type=code&redirect_uri=https://localhost/auth/pinterest/callback\nhttps://localhost/auth/pinterest/callback?state=768uyFys&code=de928c1c929e5c05\n\n\ndata={"grant_type":"authorization_code",\n"client_id":5066656475317842279,\n"client_secret":"84a1b5a0d3c5fc58fdbf7238902330d042ff2dfcf997c3ee2013c0408b03bb8e",\n"code":"d2021af082c74329",}\nx=requests.post("https://api.pinterest.com/v1/oauth/token",data=data)\n#y=\'{"access_token": "An0Xs7HN42Vf6UlX72a-KVcHjQahFdfH1Ef4bCxGUGE4UkCxZwhtQDAAAsw9RlBjTAqAq3MAAAAA", "token_type": "bearer", "scope": ["read_public", "write_public", "read_private", "write_private", "read_write_all"]}\'\ndata = json.loads(x.text)\naccess_token = data["access_token"]\n\nhttps://api.pinterest.com/v1/boards/396035429671343708/pins/?access_token=An8K8wKh3MUU2SX8uNNQh4I42w_1FcKm1yR6NIlGJA_4Q6Ckiwj7gDAAAqv1RiQTFyGAsh0AAAAA&fields=id%2Clink%2Cnote%2Curl%2Cattribution%2Cboard\n\n\n\nparams = {"access_token":access_token,"fields":["image","note"]}\nr = requests.get("https://api.pinterest.com/v1/boards/whitetiger62/steampunk-girl/pins/",params=params)\nall_data = []\ndata = json.loads(r.text)\nall_data.extend(data["data"])\nwhile "next" in data.get("page",{}):\n  r = requests.get(data["page"]["next"])\n  data = json.loads(r.text)\n  all_data.extend(data["data"])\n  print(data)\n  time.sleep(1)\n\n\nrequests.get("https://api.pinterest.com/v1/me/pins/?access_token=%s&fields=id,note&limit=1"%(access_token))\n\nrequests.get("https://api.pinterest.com/v1/boards/anapinskywalker/wanderlust/pins/?access_token=%s&limit=2&fields=id,link,counts,note"%(access_token))\n'
    process(lambda:OSA.log("x=document.getElementsByTagName('img');y=x.length;l=[];for (i=0;i<y;i++) {l=l.concat(x[i].src);};console.log(l.length);copy(l.join());"))
    datas = []
    while True:
      if pyperclip.paste() not in datas:
        datas.append(pyperclip.paste())
      if pyperclip.paste() == "end":
        break
    datas = listminus(datas,None)
    datas = oset(flatten(lmap(lambda i:i.split(","),sudby(lambda i:i.endswith("jpg"),datas)),1))
    datas = datas[1:]
    datas = lmap(lambda i:re.sub("(https://i.pinimg.com/)\d+x(.*)","\\g<1>1200x\\g<2>",i),datas)
    datas = [i for i in datas if re.findall("https://i.pinimg.com/\d+x\d+_RS",i) == []]
    # file_links = pool(lambda i: Images().download(i),datas,nodes=24)

    return datas
  def safarijs(x):
    blueprint("Safari -> Advanced -> Show develop menu ; Develop -> Allow JavaScript from Apple Events")
    x = 'tell application "Safari" to do JavaScript "%s" in current tab of window 1'%x
    fn = ".%s.scpt" % str(generate_one_random_number(10))
    blueprint(fn)
    open(fn, "w").write(x)
    r = subprocess.getoutput("osascript %s"%fn)
    os.remove(fn)
    return r
    """
    x = "window.location.href = 'https://google.com'"
    safarijs(x)
    """
  def save_default_aceintheholedata():
    exec('def x(y,    ):\n  from decimal import Decimal\n  import datetime\n  from dateutil.tz import tzoffset\n  globals().update(locals())\n  fields = key("name",  y._meta.fields)\n  blueprint("Save(%s,   "%(type(y).__name__),   end="")\n  for i in fields:\n    z = getattr(y,  i)\n    r = None\n    import datetime\n    if type(z) == str:\n      r = \'%s = """%s""",   \'%(i,    z)\n    elif type(z) == datetime.datetime:\n      r = \'%s = datetime.datetime(%s,   %s,   %s,   %s,   %s,   %s,   %s),   \'%(i,   z.year,   z.month,   z.day,   z.hour,   z.minute,   z.second,   z.microsecond)\n    elif type(z) == datetime.date:\n      r = \'%s = datetime.date(%s,   %s,   %s),   \'%(i,   z.year,   z.month,   z.day,   )\n    else:\n      r = "%s = %s,   "%(i,   z)\n    blueprint(r.replace("\\n",    "\\\\n"),  end="")\n  blueprint(")",  end="")\n  blueprint("\\n")',globals())
    import datetime
    from decimal import Decimal
    Save(AceInTheHole,   id = 408,   account = """Chase""",   date = datetime.datetime(2019,   4,   29),   amount = 10.0,   type = """BUSINESS_PAYMENT_GATEWAY_DEPOSITS""",   tag = """STRIPE""",   description = """STRIPE""",   )
    Save(AceInTheHoleType,   id = 18,   name = """BUSINESS_OTHER_CONTRACT_LABOR""",   )
    Save(AceInTheHoleType,   id = 19,   name = """BUSINESS_OTHER_HOSTING""",   )
    Save(AceInTheHoleType,   id = 20,   name = """BUSINESS_OTHER_SUBSCRIPTIONS""",   )
    Save(AceInTheHoleType,   id = 14,   name = """BUSINESS_PAYMENT_GATEWAY_DEPOSITS""",   )
    Save(AceInTheHoleType,   id = 15,   name = """BUSINESS_PAYMENT_GATEWAY_WITHDRAWALS""",   )
    Save(AceInTheHoleType,   id = 17,   name = """BUSINESS_PURCHASING_ADS""",   )
    Save(AceInTheHoleType,   id = 16,   name = """BUSINESS_PURCHASING_PRODUCTS""",   )
    Save(AceInTheHoleType,   id = 22,   name = """PERSONAL_FOOD""",   )
    Save(AceInTheHoleType,   id = 21,   name = """PERSONAL_NOT_FOOD""",   )
    Save(AceInTheHoleTypeTag,   id = 12,   type = """BUSINESS_PURCHASING_PRODUCTS""",   tag = """Ali""",   sign = """negative""",   )
    Save(AceInTheHoleTypeTag,   id = 13,   type = """BUSINESS_PAYMENT_GATEWAY_DEPOSITS""",   tag = """Stripe Deposit""",   sign = """positive""",   )
    Save(AceInTheHoleTypeTag,   id = 29,   type = """PERSONAL_NOT_FOOD""",   tag = """METROCARD""",   sign = """negative""",   )
    Save(AceInTheHoleTypeTag,   id = 30,   type = """PERSONAL_NOT_FOOD""",   tag = """ATM FEE""",   sign = """negative""",   )
  def saveobj(x):
    import _pickle
    import pickle
    import dill
    return dill.dumps(x)
  def sch(x):
    from spellchecker import SpellChecker as sch
    sch = sch()

    a = list(set(re.findall("[\w']+",x)))
    b = pool(lambda i: sch.correction(i), a).result()
    e = dict(zip(a,b))
    c = [i for i in a if i not in b]
    distinct_print(c)
    for i in c:
      while True:
        print("+1",i)
        d=tryreturn(lambda:next(re.finditer("""[^\w'](%s)(?:[^\w']|$)"""%(i),x)))
        if d:
          blueprint(x)
          x = "".join([x[:d.start()],x[d.start():d.start()+1],e[i],(x[d.end()-1:d.end()])if(x[d.end()-1:d.end()]==" ")else(" "),x[d.end():]])
          greenprint(x)
        else:
          break
    x = x.upper()
    return x
    """
    x = '''hello,
    ths is col
    hllo.
    bye\tyes4 123
    '''
    """
  def screenshot(address=None):
    if address == None:
      os.makedirs(homepath("~/tavern/tavern/soda/dls"), exist_ok = True)
      address = homepath("~/tavern/tavern/soda/dls/%s.png"%(random.randrange(9999999999999)))
      magentaprint("generated address: %s" % address)
    greenprint("saving to address: %s" % address)
    os.system("""screencapture -x "{}" """.format(address))
    return address
  def sedremoveline(file,line_numbers):
    os.system("""sed -i "" -e "%sd" '%s'"""%((",".join(lmap(str,line_numbers))),file))
    """
    os.system('''echo -e "line1\nline2\nline3\nx" > infile''')
    sedremoveline("infile",[1,2])
    assert open("infile").read() == 'line3\nx\n'
    rm("infile")
    """
  def setadd(x,y):
    if y not in x:
      x.add(y)
    return x
  def setattrs(x, *args, **kwargs):
    from types import MethodType,ModuleType,FunctionType
    for a,b in kwargs.items():
      setattr(x,a,b)
    for a,b in zip(args[0::2],args[1::2]):
      if type(b) == FunctionType or type(b) == MethodType:
        b = tryreturn(lambda: b())
      setattr(x,a,b)
    """
    a = AD()
    setattrs(a,"x",2,"y",3,"z",4)
    """
  def setfrom(x, *args):
    return [i(x) for i in args]
    """
    setfrom(1, lambda i: i, lambda i: i)
    """
  def setitem(x, k, v):
    x[k] = v
  def setitems(x,*args):
    for i,j in zip(args[0::2],args[1::2]):
      x[i] = j
  def show_in_list(a,b):
    a = copy.deepcopy(a)
    b = copy.deepcopy(b)
    x = []
    for i in a:
      if i in b:
        x.append(i)
        b.__delitem__(b.index(i))
    return x
    """
    assert show_in_list([1,2,3,4],[1,2]) == [1,2]
    assert show_in_list([10,10],[10]) == [10]
    assert show_in_list([10,10],[10,11]) == [10]
    """
  def show_overhead(a, b):
    # assert len(oset(a)) == len(a)
    # assert len(oset(b)) == len(b)
    a = copy.deepcopy(a)
    b = copy.deepcopy(b)
    x = []
    for i in a:
      if i not in b:
        x.append(i)
      elif i in b:
        b.__delitem__(b.index(i))
    return x
    """
    show_overhead([1,2,3,4],[1,2])
    show_overhead([10,10],[10])
    """
  def shuffled(x):
    if type(x) is str:
      x = list(x)
      random.shuffle(x)
      return x
    else:
      x = list(x)
      random.shuffle(x)
      return x
    return x
  def shutil_move(a, b):
    import shutil
    shutil.move(a, b)
  def similar(a, b):
    from difflib import SequenceMatcher    
    return SequenceMatcher(None, a, b).ratio()
  def site_speed_test(shop):
    """
    In [4]: @timeit
       ...: def timed():
       ...:     requests.get("https://%s"%Shop()(shop).Domain_Name)
       ...:     
       ...:     

    In [5]: timed()
    timeit: 2.1305429935455322, timed

    In [6]: timed()
    timeit: 0.7816150188446045, timed
    """
    @timeit
    def timed():
      requests.get("https://%s"%Shop()(shop).Domain_Name)
    timed()
    return
  def slank(key,dict_):
    return dict_.pop(key)
  def slow_url(x):
    return x.split("?")[0]
  def socket_connect_send(host_and_port=("data.pr4e.org", 80),url="http://data.pr4e.org/romeo.txt"):
    import socket
    mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    mysock.connect(host_and_port)
    cmd = ("GET %s HTTP/1.0\r\n\r\n"%(url)).encode()
    mysock.send(cmd)
    while True:
      data = mysock.recv(512)
      if (len(data) < 1):
        break
      print(data.decode())
    mysock.close()
  def sorted_list_matching(x,y):
    z = lmap(lambda i:None,x)
    for i in x:
      index = y.index(i)
      z[index] = i
    return z
    """
    a = [2,1,3]
    b = [1,2,3]
    sorted_list_matching(a,b)
    """
  def sorted_set(x):
    return list(sorted(list(set(x))))
  def soupy(soup,x=None,y=None,z=None):
    import bs4
    if type(soup) != bs4.BeautifulSoup: soup = BeautifulSoup(soup)
    if x==None: return soup
    return(soup.findAll(x)if(None==y==z)else(soup.findAll(x,attrs={y:z})))
  def sql_get_multiple_primary_keys(x):
    with open(__file__,"r") as f:
      return [i.strip().split("=")[0].strip() for i in re.findall(r"(?s)(class %s\(Worksheet\):.*?)class"%x.__name__,f.read())[0].strip().split("\n") if((-1!=i.find("AutoField()"))or(-1!=i.find("unique=True"))or(-1!=i.find("primary_key=True")) )]
  def sqltroubleshoot():
    os.system("""rm /usr/local/etc/my.cnf && echo "Removed mysql cnf file." sleep 5 && echo "Stopping mysql." && sleep 5 && brew services stop mysql & sleep 5 && mysqld & sleep 5 && echo "Running py2_file again to set up mysql cnf file." && sleep 5 && cd ~/tavern/tavern/soda && /usr/bin/python -B -c "from py2_file import *; Setter_Upper().m15__17_initiate_install_mysql__and__create_database_soda()" ;""")
  def strand(func, *args, **kwargs):
    from threading import Thread
    t = Thread(target=func, args=args, kwargs=kwargs)
    t.start()
    return t
  def strands(func, x, c=32, *args, **kwargs):
    for idx, i in enumerate(array_split(x, c)):
      stuff = []
      for j in i:
        stuff.append(strand(func, j, *args, **kwargs))
      for s in stuff:
        s.join()
      print("%s out of %s at %s per done for %s"%(idx, (len(x)/c), c, func.__name__))
  def strcls(x,**kwargs):
    return type("a",(str,),kwargs)(x)
    """
    r = intcls("asdf",print = lambda self:print(self))
    r.print()
    """
  def sud(dictlist, key):
    if type(dictlist) is str:
      dictlist2 = dictlist
      dictlist = key
      key = dictlist2
    try: return [getattr(i, key) for i in list(dictlist)]
    except: return [i[key] for i in list(dictlist)]
  def sudby(x,y):
    return or_list(lambda:[i for i in y if x(i)],lambda:[i for i in y if x(*i)],[])
  def sudcall(key, dictlist, *args, **kwargs):
    try: return [getattr(i, key)(*args, **kwargs) for i in list(dictlist)]
    except: return [i[key](*args, **kwargs) for i in list(dictlist)]
  def sudsort(key, dictlist, tcer=True):
    import operator
    if type(key) is not list:
      key = [key]
    try: return sorted(list(dictlist), key=operator.itemgetter(*key), reverse=tcer)
    except: return sorted(list(dictlist), key=operator.attrgetter(*key), reverse=tcer)
  def sudsort_multi(columns, items, tcer=False):
    from operator import itemgetter, attrgetter
    from functools import cmp_to_key
    comparers = None
    if tryprocess(lambda:items[0].get(columns[0])): comparers = [((itemgetter(col[1:].strip()), -1) if col.startswith('-') else (itemgetter(col.strip()), 1)) for col in columns]
    else: comparers = [((attrgetter(col[1:].strip()), -1) if col.startswith('-') else (attrgetter(col.strip()), 1)) for col in columns]
    def comparer(left, right):
      def cmp(a, b):
        if a == None and b == None: return 0
        if a == None and b != None: return 1        
        if a != None and b == None: return -1
        elif a != None and b != None: return (a > b) - (a < b)
      comparer_iter = ( cmp(fn(left), fn(right)) * mult for fn, mult in comparers)
      return next((result for result in comparer_iter if result), 0)
    return sorted(list(items), key=cmp_to_key(comparer), reverse=tcer)
  def swamp(*args):
    a, b = args[0], args[1]
    for x, y in zip(a, b):
      if y() == True:
        return x()
    """
    a, b, c = 1,0,0
    (1)if(a==True)else(2)if(b==True)else(3)if(c==True)else()
    a, b, c = 0,1,0
    (1)if(a==True)else(2)if(b==True)else(3)if(c==True)else()
    a, b, c = 0,0,1
    (1)if(a==True)else(2)if(b==True)else(3)if(c==True)else()
    swamp(lambda: a==True, lambda: b==True, lambda: c==True, lambda: 1, lambda: 2, lambda: 3)
    
    def ard():
      print(d)
    def r():
      a = 1
      b = 0; c= 0; d=5
      swamp(lambda: a==True, lambda: b==True, lambda: c==ard(), lambda: 1, lambda: 2, lambda: 3)
      (1)if(a==True)else(2)if(b==True)else(3)if(c==ard())else()
    """
  def sys_exit():
    [exec("import sys",globals()), sys.exit()]
  def tcer(x,a=0):
    return reversed(x)if(a==0)else(list(reversed(x)))
  def text_to_docx(text, filename):
    from docx import Document
    document = Document()
    paragraph = document.add_paragraph(text)
    from docx.shared import Pt
    style = document.styles["Normal"]; document.styles["Normal"].font.name = "Times New Roman"; document.styles["Normal"].font.size = Pt(4); 
    paragraph.style = document.styles["Normal"]
    document.save(filename)
  def text_to_image(text):
    from PIL import Image, ImageDraw, ImageFont

    if text == "":
      text = "\n"
     
    img = Image.new('RGB', (1800, 540), color = (255, 255, 255))
    fnt = ImageFont.truetype("/Library/Fonts/Times New Roman.ttf", 20)
    d = ImageDraw.Draw(img)
    d.text((0,0), text, font=fnt, fill=(0, 0, 0))
    font_size = d.textsize(text, fnt)

    img = Image.new('RGB', font_size, color = (255, 255, 255))
    fnt = ImageFont.truetype("/Library/Fonts/Times New Roman.ttf", 20)
    d = ImageDraw.Draw(img)
    d.text((0,0), text, font=fnt, fill=(0, 0, 0))

    address = get_random_address(homepath("~/tavern/tavern/soda/dls")).png()
    img.save(address)
    impreview(address)
    os.remove(address)
  def textplot(L,a,b):
    def divs(x,c):
      return [int(x/c)*i for i in range(c+1)]
    Q=divs(a,b) + [max(L)]
    def slot_file(L,x):
      r = []
      for idx, i in enum(x[:-1]):
        r.append(["%s-%s"%(i,x[idx+1]),len(sorted([a for a in L if a>i and a<=x[idx+1]]))])
      return r
    slot_file(L,Q)
    data= slot_file(L,Q)

    max_value = max(count for _, count in data)
    increment = max_value / 25
    longest_label_length = max(len(label) for label, _ in data)
    O = []
    for label, count in data:
      bar_chunks, remainder = divmod(int(count * 8 / increment), 8)
      bar = '█' * bar_chunks
      if remainder > 0:
          bar += chr(ord('█') + (8 - remainder))
      bar = bar or  '▏'
      O.append(bar+ " " + "(%s(%s))"%(str(label.rjust(longest_label_length).strip()),"%sCount"%(str(round(count,4)))) )
    O = ("\n".join(O))
    drkprint(O)
    return O
  def timed(r,x):
    m = datetime.now()
    R = process(r)
    while True:
      l = datetime.now()
      if (l-m).seconds >=x and R.is_alive() == True:
        drkprint("timed out at %s seconds, returning None"%(x))
        return None
      elif (l-m).seconds <x and R.is_alive() == False:
        drkprint("timed in at %s seconds, "%(x))
        break
    return R.result()
  def timed_input(prompt, x=10):
    import select
    cyanprint(prompt, end="")
    sys.stdout.flush()
    i,o,e = select.select([sys.stdin],[],[],x)
    if (i):
      response = sys.stdin.readline().strip()
      print("You said %s" % response)
      return response
    else:
      print("response [None]")
      return None
  def thread(f, x, c=32):
    from multiprocessing.dummy import Pool
    pool = Pool(c)
    payload = pool.map(f, x)
    pool.close()
    pool.join()
    return payload
  def time_a_download(method, arg=None):
    import time
    
    current = get_dircount()
    command = None
    if arg:
      command = 'method(%s)'%arg
    else:
      command = 'method()'
    exec(command)
    while get_dircount() == current and '.part' not in get_latest_download():
      time.sleep(0.05)
    time.sleep(5)
    return get_latest_download()
  def timeit(func):
    def wrapper(*arg, **kw):
      t1 = time.time()
      res = func(*arg, **kw)
      t2 = time.time()
      print("timeit: %s, %s"%((t2 - t1), func.__name__))
      return res
    return wrapper
  def timedretry(x,y):
    z = multiprocessing_process(x)
    time.sleep(y)
    if z.is_alive():
      z.terminate()
      return timedretry(x,y)
    else:
      return
  def timedtask(func):
    def wrapper(*arg, **kw):
      t1 = time.time()
      start_datetime = datetime.now()



      new = Timedtask()
      new.function_name = func.__name__


      existants = Filter(Timedtask,function_name=new.function_name)
      zellums = key("elapsed",existants)
      stis = (sum(zellums)/len(zellums))
      redprint("stis")
      
      roundulo = int(stis/100)

      def sleeperman():
        for sleeptime in range(roundulo):
          lox = "█"*i
          sys.stdout.write(lox)
          sys.stdout.flush()
          time.sleep(sleeptime)
      import multiprocessing
      p = multiprocessing.Process(target=sleeperman)
      p.start()
      res = pool(func, *args, **kw)
      p.terminate()
      sys.stdout.write(("█"*10)+" %100")

      res = res[0]
      t2 = time.time()
      end_datetime = datetime.now()
      elapsed_time = (end_datetime - start_datetime).seconds
      print("elapsed: time: %s" % elapsed_time)
      print("timeit: %s, %s"%((t2 - t1), func.__name__))

      new.start = start_datetime
      new.end = end_datetime
      new.elapsed_time = elapsed_time
      new.my_time_elapsed = (1.1574074074074073e-05) * elapsed_time
      new.my_time_start = Date().myDatetimenow(start_datetime)
      new.my_time_end = Date().myDatetimenow(end_datetime)
      new.save()
      distinct_print(ordered_json_dumps(new.__dict__))
      return res
    return wrapper
  def timer(t, func, *args, **kwargs):
    t = Timer(t, func, args=args, kwargs=kwargs)
    t.start()
    return t
  def timestamp(x,forward=True):
    if forward == True:
      timestamp = datetime.timestamp(x)
      return timestamp
    elif forward == False:
      datetime_ = datetime.fromtimestamp(x)
      return datetime_
  def tinyurl(url):
    return requests.get("http://tinyurl.com/api-create.php?url=%s"%(url)).text
  def tp(func, *args, ep=0, error = None, **kwargs):
    import multiprocessing
    t = multiprocessing.Process(target=func, args=args, kwargs=kwargs)
    #t = multiprocessing.Process(target=func)#, args=args, kwargs=kwargs)
    try:
      t.run()
      return 1
    except Exception as e:
      #OSA.notify("%s, %s, %s" %  (str(func), str(args), str(kwargs)))
      #OSA.notify("tryprocess: " + str(e))
      #pyperclip.copy(str(e))
      OSA.log(str(or_list(error,e)))if(1==ep or error)else(1)
      return 0
  def tr(func, *args, ep=0, error = None, **kwargs):
    try:
      return func(*args, **kwargs)
    except Exception as e:
      OSA.log(str(or_list(error,e)))if(1==ep or error)else(1)
      return 0
  def transfer_bash():
    os.system("""rm ~/tavern/tavern/soda/bash_profile; cp -r ~/.bash_profile ~/tavern/tavern/soda/bash_profile""")
  def transfer_workflows():
    [os.system("rm -rf /Users/$USER/tavern/tavern/soda/*.workflow"),[os.system("cp -r ~/Library/Services/%s ~/tavern/tavern/soda/%s"%(i,i)) for i in os.listdir(homepath("~/Library/Services")) if i.endswith(".workflow")]]
  def transpose(x):
    import numpy as np
    x = np.transpose(x)
    x = [list(i) for i in x]
    return x
    """
    x = [[1,2],
      [1,2]]
    greenprint(transpose(x))
    """
  def trykeycall(key, dictlist, *args, **kwargs):
    try: return [tryprocess(getattr(i, key), *args, **kwargs) for i in list(dictlist)]
    except: return [tryprocess(i[key], *args, **kwargs) for i in list(dictlist)]
  def trylmap(f, x, *args, **kwargs):
    Q = []
    for i in x:
      Z = tryprocess(f, i, *args, **kwargs)
      Q.append(Z)
    return Q
  def tryprocess(func, *args, ep=0, error = None, **kwargs):
    import multiprocessing
    t = multiprocessing.Process(target=func, args=args, kwargs=kwargs)
    #t = multiprocessing.Process(target=func)#, args=args, kwargs=kwargs)
    try:
      t.run()
      return 1
    except Exception as e:
      #OSA.notify("%s, %s, %s" %  (str(func), str(args), str(kwargs)))
      #OSA.notify("tryprocess: " + str(e))
      #pyperclip.copy(str(e))
      OSA.log(str(or_list(error,e)))if(1==ep or error)else(1)
      return 0
  def tryreturn(func, *args, ep=0, error = None, **kwargs):
    try:  
      return func(*args, **kwargs)
    except Exception as e:
      OSA.log(str(or_list(error,e)))if(1==ep or error)else(1)
      return 0
  def typecls(x,**kwargs):
    return type("a",(int,),kwargs)(x) if type(x)==int else(
           type("a",(str,),kwargs)(x)) if type(x)==str else(
           type("a",(list,),kwargs)(x)) if type(x)==list else(
           type("a",(float,),kwargs)(x)) if type(x)==float else(
           type("a",(Time,),kwargs)(x)) if type(x)==datetime else(
           type("a",(dict,),kwargs)(x)) if type(x)==dict else()
  def uli(x,y,z=-1):
    return x.split(y,z)
  def unadministrate():
    import getpass
    os.system("sudo chmod 000 '/Applications/League of Legends.app'")
    os.system("sudo passwd admin")
    os.system("sudo dseditgroup -o edit -d %s -t user admin"%(getpass.getuser()))
    os.system("dscl . -delete /groups/admin GroupMembership %s"%(getpass.getuser()))
  def unpack_archive(address):
    import shutil
    import zipfile
    shutil.unpack_archive(address, "%s.zip"%address)if(os.path.isdir(address))else(zipfile.ZipFile(address,"r").extractall(os.getcwd()))
  def update(x,**kwargs):
    lmap(lambda k,v: setitem(x,k,v), list(kwargs.items()))
    return x
    """
    assert update({"a":"b"},e=5) == {'a': 'b', 'e': 5}
    """
  def urllib_video_download(x):
    import urllib
    y = get_random_address(homepath("~/tavern/tavern/soda/dls")).mp4()
    urllib.request.urlretrieve(x, y)
    return y
  def urlopenproduct(product,url):
    [pyperclip.copy(url%(product.handle)), OSA.log("Press OK"), OSA("Google Chrome 70",["ctrl_t","ctrl_l","ctrl_v","return"])]
  def valuelist(x):
    return {a:b for a,b in x}
    """
    valuelist([(1,2), (2,3), (3,4)])
    """
  def varsave(x):
    'def varsave(x):\n  image_ids = key("image_id", x.variants)\n  first_save = apilimitcall(x.save)\n  assert first_save == True\n  image_ids_after_save = key("image_id", x.variants)\n  if image_ids_after_save != image_ids:\n    for a, b in zip(x.variants, image_ids):\n      a.image_id = b\n    pool(lambda i: apilimitcall(i.save), x.variants, nodes=4).result()\n    if len(x.variants) > 50:\n      time.sleep(0.2)\n  return x'
    image_ids = key("image_id", x.variants)
    first_save = apilimitcall(x.save)
    assert first_save == True
    image_ids_after_save = key("image_id", x.variants)
    if image_ids_after_save != image_ids:
      for a, b in zip(x.variants, image_ids):
        a.image_id = b
      image_ids_x = oset(sud("image_id",x.variants))
      new = dictfromkeys(image_ids_x,[])
      for a, b in new.items():
        new[a] = sud("id",filter(x.variants,image_id=a))
      for a, b in new.items():
        y = filter(x.images,id=a)[0]
        y.variant_ids = new[a]
      x.save()
      # pool(lambda i: apilimitcall(i.save), x.variants, nodes=6).result()
      # if len(x.variants) > 50:
      #   time.sleep(0.2)
    return x
  def versioncheck(x,z=None):
    exec("import selenium; bprint(selenium.__version__); y = selenium.__version__",globals())
    if z:os.system("pip install %s==%s"%(x,z))
    return y
  def viden(x,*args):
    print(args)
    for i,j in zipeven(args[0::2],args[1::2],None):
      if j == None:
        x = x.split(i)
      else:
        x = x.split(i)[j]
    return x
    """
    viden("asdfa","a",1)
    """
  def video_download(x):
    print("Downloading Video")
    timer = multiprocessing_process(lambda: [[OSA.notify(str(i)),time.sleep(1)] for i in range(WHILE_TRUE)])
    y = get_random_address(homepath("~/tavern/tavern/soda/dls")).mp4()
    timedretry(lambda: os.system("wget -O '%s' '%s'"%(y,x)),80)
    tryprocess(lambda: timer.terminate())
    return y
  def wall(i):
    return ceil(i)if((i)%1>=0.5)else(floor(i))
  def wikipedia_article_search(x, limit=500, r=True):
    results = []
    url = "https://en.wikipedia.org/w/index.php?title=Special:Search&limit=500&offset=0&ns0=1&search=%22{}%22".format(x)
    for i in range(2):
      try:
        soup = BeautifulSoup(requests.get(url).text)
        for idx,j in enumerate(soup.findAll("div",attrs={"class":"mw-search-result-heading"})):
          m = list(j)
          l = m[0]
          results.append(l.attrs)
          if len(results) == limit:
            return key("title", results) if r!=True else list(tcer(key("title",results)))
        url = "https://en.wikipedia.org" + soup.findAll("a",attrs={"title":"Next 500 results"})[0].attrs["href"]
      except Exception as e:
        #print(e)
        1
        break
    return key("title", results) if r!=True else list(tcer(key("title",results)))
  def wikipedia_article_search_to_clip(x):
    y = wikipedia_article_search(x)
    pyperclip.copy( ",\n".join(list(set([i for i in key("title",y) if "," not in i]))) )
  def word_multiply(l1,l2):
    x = []
    for i in l1:
      for j in l2:
        x.append([i,j])
        x.append([j,i])
    return x
  def wordcount(x):
    apostrophes = x.count("'")
    words = len(x.split(" "))
    count = apostrophes + words
    return count
  def writew(x,y):
    open(x,"w").write(y)
    return x
  def writewb(x,y):
    open(x,"wb").write(y)
    return x
  def write_xlsx_cell(cell,x,wb=None,save=False):
    ws = None
    if globe("workbook"):
      wb = globe("workbook")
      ws = wb.worksheets[0]
    else:
      import openpyxl
      wb = ifelseget(lambda:os.path.exists(wb),lambda:openpyxl.load_workbook(wb),lambda:openpyxl.Workbook())
      ws = wb.worksheets[0]
      globalise(wb,"workbook")
    ws[cell].value = x
    if save:
      wb.save("out.xlsx")
    return wb
  def xir(x,**kwargs):
    [setattr(x,i,j) for i,j in kwargs.items()]
    return x
  def xplist(x):
    r = '\n  <?xml version="1.0" encoding="UTF-8"?>\n  <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n  <plist version="1.0">\n  <dict>\n      <key>Label</key>\n      <string>{}</string>\n      <key>ProgramArguments</key>\n      <array>\n      <string>/Users/%s/tavern/bin/python3.5</string>\n      <string>-c</string>\n      <string>{}</string>\n      </array>\n      <key>UserName</key>\n      <string>%s</string>\n      <key>StandardOutPath</key>\n      <string>{}</string>\n      <key>StandardErrorPath</key>\n      <string>{}</string>\n      <key>KeepAlive</key>\n      <true/>\n  </dict>\n  </plist>\n  '%(getuser(),getuser())
    title = "%s"%([exec("import nltk",globals()),random.sample(random.sample(list(nltk.wordnet.wordnet.all_synsets(nltk.wordnet.wordnet.NOUN)),1)[0].lemmas(),1)[0].name()][1])
    os.makedirs(homepath("~/tavern/tavern/soda/plists"),exist_ok=True)
    save_path = homepath("~/tavern/tavern/soda/plists/%s.plist"%(title))
    y = 'import os; os.chdir(os.path.expanduser("~/tavern/tavern")); from soda.can import *; %s'%(x)
    x = r.format(save_path.split("/")[-1].split(".")[0],y,save_path+".out",save_path+".err").strip().replace("\n  ", "\n")
    open(save_path, "w").write(x)
    return x
  def youtube_downloader(y="asdf",z=20):
    os.makedirs(homepath("~/Documents/%s"%(y)),exist_ok=True)
    os.chdir(homepath("~/Documents/%s"%(y)))
    x=getoutput("youtube-dl --get-title --get-url ytsearch%s:%s"%(z,y)).split("\n")
    titles = x[0::3]
    urls = x[2::3]

    titles = lmap(lambda i: i.title(), titles)

    x = []
    for title, url in zip(titles, urls):
      if ner_tagger(title):
        pass
      else:
        cmd = "youtube-dl '%s' --output '%s.mp4' &"%(url,title)
        print(cmd)
        x.append(lambda: os.system("youtube-dl '%s' --output '%s.mp4' &"%(url,title)))
    pool(lambda i: i.__call__(), x, nodes=5).result()
  def zipUtil(address,reverse=not True):
    if reverse!=True:
      # - zip -  a file
      redprint("    # - zip -  a file   ---- ")
      # set original path
      redprint("    # set original path   ---- ")
      setitem(globals(),"cwd",os.getcwd())
      # normalize address
      redprint("    # normalize address   ---- ")
      setitem(globals(),"address",address_normalize(address))

      # chdir from homepath to /Users, ~/picture.png to homepath, tryprocess from picture.png to `""`
      redprint("    # chdir from homepath to /Users, ~/picture.png to homepath, tryprocess from picture.png to `""`   ---- ")
      tryprocess(os.chdir, "/".join(globals()["address"].split("/")[:-1]))

      # set address to ./`address`
      redprint("    # set address to ./`address`   ---- ")
      setitem(globals(),"address",globals()["address"]if(-1==globals()["address"].find("/"))else(globals()["address"].split("/")[-1]))


      # remove the directed address
      redprint("    # remove the directed address   ---- ")
      subprocess.getoutput(""" rm -rf "%s.zip" """%globals()["address"])
      # waitfor directed address gone
      redprint("    # waitfor directed address gone   ---- ")
      while(1==os.path.exists("%s.zip"%globals()["address"])): time.sleep(0.1)



      # zip ~/tavern/tavern/drawings to ./drawings.zip
      redprint("    # zip ~/tavern/tavern/drawings to ./drawings.zip   ---- ")
      subprocess.getoutput("""zip -r "%s.zip" "%s" """%(globals()["address"],globals()["address"]))
      # waitfor gone not directed address
      redprint("    # waitfor gone not directed address   ---- ")
      while(0==os.path.exists("%s.zip"%globals()["address"])): time.sleep(0.1)

      # revert to original path
      redprint("    # revert to original path   ---- ")
      os.chdir(globals()["cwd"])
      redprint(address+".zip",)
      return address+".zip"


    elif reverse==True:
      # - unzip - a file
      redprint("    # - unzip - a file   ---- ")
      # remove&waitfor directed folder address
      redprint("    # remove&waitfor directed folder address   ---- ")
      subprocess.getoutput("""rm -rf "%s" """%(address[:-4]))
      while(1==os.path.exists(address[:-4])): time.sleep(0.1)

      # unzip&waitfor directed folder address
      redprint("    # unzip&waitfor directed folder address   ---- ")
      if "/" in address:
        direc = "/".join(address.split("/")[:-1])
        os.chdir(direc)
      subprocess.getoutput("""unzip "%s" """%(address))
      #while(0==os.path.exists(address[:-4])): time.sleep(0.1)

      # remove&waitfor original zip address
      redprint("    # remove&waitfor original zip address   ---- ")
      subprocess.getoutput("""rm -rf "%s" """%(address))
      #while(1==os.path.exists(address)): time.sleep(0.1)
      redprint(address[:-4],)
      return address[:-4]
  def zipeven(x,y,z):
    x, y = list(x), list(y)
    if len(x) != len(y):
      if len(y) > len(x):
        x.append(z)
      elif len(x) > len(y):
        y.append(z)
    return zip(x,y)
    """
    assert list(zipeven([1,2,3],[1,2],None)) == [(1, 1), (2, 2), (3, None)]
    assert list(zipeven([1,2],[1,2,3],None)) == [(1, 1), (2, 2), (None, 3)]
    """
  def zki(x,y,z):
    if x():
      return lmap(y,z)
    else:
      return z
    """
    zki(lambda: 1==1, lambda i: i+1, [1,2,3])
    zki(lambda: 1==2, lambda i: i+1, [1,2,3])
    """
  def zz(x):
    #print("sleeping %s"%x); time.sleep(x)
    time.sleep(x)
  globals().update(locals())
  class A_DJANGO_FIELDS:
    import pytz
    timezones = pytz.all_timezones
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "soda.settings")
    credential_path = homepath("~/tavern/tavern/soda/.credentials")
    AutoField = lambda: models.AutoField(primary_key=True)
    BinaryField = lambda max_length=4294967295: models.BinaryField(max_length=max_length)
    CharField = lambda primary_key=False,max_length=512,unique=False: models.CharField(max_length=int(max_length),null=True,blank=True,primary_key=primary_key,unique=unique)
    DecimalField = lambda: models.DecimalField(max_digits=16,decimal_places=3,null=True,default=0)
    IntegerField = lambda unique=False,primary_key=False,default=0: models.IntegerField(null=True,unique=unique,primary_key=primary_key,default=default)
    DateField = lambda null=True,unique=False: models.DateField(null=null,blank=True,unique=unique)
    DateTimeField = lambda null=True,unique=False: models.DateTimeField(null=null,blank=True,unique=unique)
    BigIntegerField = lambda primary_key=False, unique=False: models.BigIntegerField(primary_key=primary_key, unique=False)
    BooleanField = lambda default=None: models.BooleanField(default=default) if default != None else models.BooleanField()
    NullBooleanField = lambda: models.NullBooleanField(null=True)
    FloatField = lambda unique=False: models.FloatField(null=True,default=0,unique=unique)
    class BaseModelManager(models.Manager):
      def update_or_create(self, **kwargs):
        try: queryObj = self.create(id=kwargs['id']) if 'id' in kwargs else self.create()
        except: queryObj = self.get(id=kwargs['id'])
        queryObj.__dict__.update(kwargs)
        queryObj.save()
        return queryObj
    exec('class AttrDict(dict):\n  def __recurse__(self):\n    keys_to_change = []\n    for a,b in self.items():\n      #print(v,"\\n")\n      if "values" in dir(b):\n        keys_to_change.append(a)\n    for a in keys_to_change:\n      self[a] = AttrDict(self[a])\n    list_keys = []\n    for a,b in self.items():\n      if "append" in dir(b) and "extend" in dir(b):\n        list_keys.append(a)\n    for a in list_keys:\n      self[a] = [AttrDict(i) if "values" in dir(i) else i for i in self[a]]\n  def __getattr__(self, attr):\n    self.__recurse__()\n    #print(self[attr])\n    return self[attr]\n  def __setattr__(self, attr, value):\n    self[attr] = value\n    self.__recurse__()\n  def copy(self):\n    return AttrDict(self)\n  def __test__(self):\n    d = {"a": {"a": {"a": "a"}}}\n    dd = AttrDict(d)\n    assert "AttrDict" in str(type(dd))\n    assert "AttrDict" in str(type(dd.a))\n    assert "AttrDict" in str(type(dd.a.a))\n    dd.b = d\n    dd["c"] = d\n    assert "AttrDict" in str(type(dd.b))\n    assert "AttrDict" in str(type(dd.b.a))\n    assert "AttrDict" in str(type(dd.b["a"]))\n    assert "AttrDict" in str(type(dd.c))\n    assert "AttrDict" in str(type(dd["c"].a))\n    assert "AttrDict" in str(type(dd["c"][\'a\']))\n    dd.update({"e":{"a":{"a":1}}})\n    assert "AttrDict" in str(type(dd.e.a))\n    dd.pop("e")\n    assert "e" not in dd.keys()\n    assert list(sorted(dd.items())) == [("a", {"a": {"a": "a"}}), ("b", {"a": {"a": {"a": "a"}}}), ("c", {"a": {"a": {"a": "a"}}})]\n    assert "".join(sorted(str(list(dd.values())))) == "          \'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\',,::::::::[]aaaaaaaaaaa{{{{{{{{}}}}}}}}"\n    assert list(sorted(dd.keys())) == [ \'a\', \'b\', \'c\']\n    assert dd.get("a") == {\'a\': {\'a\': \'a\'}}\n    assert dd.copy() == AttrDict(dd)\n    dd.get("a")\n    dd.get("a", 1)\n    assert tryreturn(dd.get, "d") == 0\n    dd.clear()\n    assert dd == {}\n    redprint("tests successful")\n    d = {"a": {"a": [{"a": "a"}]}}\n    dd = AttrDict(d)\n    assert "AttrDict" in str(type(dd.a.a[0]))\n  def items(self):\n    d = []\n    for k,v in super().items():\n      #print("items:_ v: %s" % v)\n      if "values" in dir(v):\n        d.append((k, AttrDict(v)))\n      else:\n        d.append((k, v))\n      # This stops if it iterates to a value (v) which is not a dictionary. such as a list of dictionaries. \n    return d\n  def get(self, *args):\n    try: return self[args[0]]\n    except:\n      if len(args) == 2:\n        return args[1]\n      else:\n        return self[args[0]]', globals())
    exec('class AD(dict):\n  def __recurse__(self):\n    keys_to_change = []\n    for a,b in self.items():\n      #print(v,"\\n")\n      if "values" in dir(b):\n        keys_to_change.append(a)\n    for a in keys_to_change:\n      self[a] = AttrDict(self[a])\n    list_keys = []\n    for a,b in self.items():\n      if "append" in dir(b) and "extend" in dir(b):\n        list_keys.append(a)\n    for a in list_keys:\n      self[a] = [AttrDict(i) if "values" in dir(i) else i for i in self[a]]\n  def __getattr__(self, attr):\n    self.__recurse__()\n    #print(self[attr])\n    return self[attr]\n  def __setattr__(self, attr, value):\n    self[attr] = value\n    self.__recurse__()\n  def copy(self):\n    return AttrDict(self)\n  def __test__(self):\n    d = {"a": {"a": {"a": "a"}}}\n    dd = AttrDict(d)\n    assert "AttrDict" in str(type(dd))\n    assert "AttrDict" in str(type(dd.a))\n    assert "AttrDict" in str(type(dd.a.a))\n    dd.b = d\n    dd["c"] = d\n    assert "AttrDict" in str(type(dd.b))\n    assert "AttrDict" in str(type(dd.b.a))\n    assert "AttrDict" in str(type(dd.b["a"]))\n    assert "AttrDict" in str(type(dd.c))\n    assert "AttrDict" in str(type(dd["c"].a))\n    assert "AttrDict" in str(type(dd["c"][\'a\']))\n    dd.update({"e":{"a":{"a":1}}})\n    assert "AttrDict" in str(type(dd.e.a))\n    dd.pop("e")\n    assert "e" not in dd.keys()\n    assert list(sorted(dd.items())) == [("a", {"a": {"a": "a"}}), ("b", {"a": {"a": {"a": "a"}}}), ("c", {"a": {"a": {"a": "a"}}})]\n    assert "".join(sorted(str(list(dd.values())))) == "          \'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\',,::::::::[]aaaaaaaaaaa{{{{{{{{}}}}}}}}"\n    assert list(sorted(dd.keys())) == [ \'a\', \'b\', \'c\']\n    assert dd.get("a") == {\'a\': {\'a\': \'a\'}}\n    assert dd.copy() == AttrDict(dd)\n    dd.get("a")\n    dd.get("a", 1)\n    assert tryreturn(dd.get, "d") == 0\n    dd.clear()\n    assert dd == {}\n    redprint("tests successful")\n    d = {"a": {"a": [{"a": "a"}]}}\n    dd = AttrDict(d)\n    assert "AttrDict" in str(type(dd.a.a[0]))\n  def items(self):\n    d = []\n    for k,v in super().items():\n      #print("items:_ v: %s" % v)\n      if "values" in dir(v):\n        d.append((k, AttrDict(v)))\n      else:\n        d.append((k, v))\n      # This stops if it iterates to a value (v) which is not a dictionary. such as a list of dictionaries. \n    return d\n  def get(self, *args):\n    try: return self[args[0]]\n    except:\n      if len(args) == 2:\n        return args[1]\n      else:\n        return self[args[0]]', globals())
    globals()["Worksheet"] = models.Model
    globals()["Records"] = globals()["Worksheet"]
    globals().update(locals())
  class A_DJANGO_FIELDS_2:
    def __call__(self, **kwargs):
      redprint(self)
      return Update(self, **kwargs)
    import django
    from types import MethodType,ModuleType,FunctionType
    for k,v in globals().items():
      if(django.db.models.base.ModelBase==type(v)):
        if v.__name__ != "Shop":
          #setattr(v, __call__.__name__, MethodType(__call__,v))
          v.__call__ = __call__
          #def bind3(obj,func):
          #  from types import MethodType,ModuleType,FunctionType
          #  setattr(obj, func.__name__, MethodType(func,obj))
  class Aliexpress_Core(object):
    def __init__(self,window_index=[0,0,3.5,3.5],ph=True,exit_browser=True):
      setattrs(self,"username",a_shop().AliExpress_Email,"password",a_shop().AliExpress_Password,)
      self.rq = Aliexpress_Requests()()
  class Aliexpress_Login:
    def __init__(self,window_index=[0,0,3.5,3.5],ph=False,exit_browser=True):
      setattrs(self,"ph",ph,"exit_browser",exit_browser,"window_index",window_index,"headers",session_headers,"username",Get(Shop,shop_abbreviation=Muta()().store_abbre).AliExpress_Email,"password",Get(Shop,shop_abbreviation=Muta()().store_abbre).AliExpress_Password,)
      globalise(Browser()( ("sele") ).get("https://login.aliexpress.com/").sp(5).tp(lambda:globe("ss_v").frame("alibaba-login-box")).bat().fid("fm-login-id").fid("fm-login-password").fcn("password-login").bat(self.username,self.password,globe("ss_v").SHADOW.ENTER).sp(10).tp(lambda: cookies_to_database(username=self.username,website_name="AliExpress",cookies=globe("ss_v").get_cookies(),reverse=False)).tp(lambda:setattr(self,"rq",cookies_to_session(cookies_to_database(self.username,"AliExpress"),requests.Session()))).tp(lambda:globe("ss_v").quit()if(self.exit_browser)else()),"ss")
  class Aomoji(AttrDict):
    def __repr__(self):
      return "{}".format(self.f)
    def __init__(self):
      super().__init__()
      self.a = "(⌐■_■)"
      self.b = "[̲̅$̲̅(̲̅ ͡° ͜ʖ ͡°̲̅)̲̅$̲̅]"
      self.c = "( ・∀・)・・・--------☆"
      self.d = "٩(◕‿◕)۶"
      self.e = "ᶘ ᵒᴥᵒᶅ"
      self.f = "Ƹ̵̡Ӝ̵̨̄Ʒ"
      self.cat = "🐈"
      self.hamster = "🐹"
      self.fox = "🦊"
      self.panda = "🐼"
      self.bear = "🐻"
      self.frog = "🐸"
      self.bee = "🐝"
      self.mosquito = "🦟"
      self.cricket = "🦗"
      self.spider = "🕷"
      self.turtle = "🐢"
      self.octopus = "🐙"
      self.squid = "🦑"
      self.whale = "🐳"
      self.shark = "🦈"
      self.alligator = "🐊"
      self.rat = "🐀"
      self.squirrel = "🐿"
  class AD(dict):
    def __recurse__(self):
      keys_to_change = []
      for a,b in self.items():
        #print(v,"\n")
        if "values" in dir(b):
          keys_to_change.append(a)
      for a in keys_to_change:
        self[a] = AttrDict(self[a])
      list_keys = []
      for a,b in self.items():
        if "append" in dir(b) and "extend" in dir(b):
          list_keys.append(a)
      for a in list_keys:
        self[a] = [AttrDict(i) if "values" in dir(i) else i for i in self[a]]
    def __getattr__(self, attr):
      self.__recurse__()
      #print(self[attr])
      return self[attr]
    def __setattr__(self, attr, value):
      self[attr] = value
      self.__recurse__()
    def copy(self):
      return AttrDict(self)
    def __test__(self):
      d = {"a": {"a": {"a": "a"}}}
      dd = AttrDict(d)
      assert "AttrDict" in str(type(dd))
      assert "AttrDict" in str(type(dd.a))
      assert "AttrDict" in str(type(dd.a.a))
      dd.b = d
      dd["c"] = d
      assert "AttrDict" in str(type(dd.b))
      assert "AttrDict" in str(type(dd.b.a))
      assert "AttrDict" in str(type(dd.b["a"]))
      assert "AttrDict" in str(type(dd.c))
      assert "AttrDict" in str(type(dd["c"].a))
      assert "AttrDict" in str(type(dd["c"]['a']))
      dd.update({"e":{"a":{"a":1}}})
      assert "AttrDict" in str(type(dd.e.a))
      dd.pop("e")
      assert "e" not in dd.keys()
      assert list(sorted(dd.items())) == [("a", {"a": {"a": "a"}}), ("b", {"a": {"a": {"a": "a"}}}), ("c", {"a": {"a": {"a": "a"}}})]
      assert "".join(sorted(str(list(dd.values())))) == "          '''''''''''''''''''''',,::::::::[]aaaaaaaaaaa{{{{{{{{}}}}}}}}"
      assert list(sorted(dd.keys())) == [ 'a', 'b', 'c']
      assert dd.get("a") == {'a': {'a': 'a'}}
      assert dd.copy() == AttrDict(dd)
      dd.get("a")
      dd.get("a", 1)
      assert tryreturn(dd.get, "d") == 0
      dd.clear()
      assert dd == {}
      redprint("tests successful")
      d = {"a": {"a": [{"a": "a"}]}}
      dd = AttrDict(d)
      assert "AttrDict" in str(type(dd.a.a[0]))
    def items(self):
      d = []
      for k,v in super().items():
        #print("items:_ v: %s" % v)
        if "values" in dir(v):
          d.append((k, AttrDict(v)))
        else:
          d.append((k, v))
        # This stops if it iterates to a value (v) which is not a dictionary. such as a list of dictionaries. 
      return d
    def get(self, *args):
      try: return self[args[0]]
      except:
        if len(args) == 2:
          return args[1]
        else:
          return self[args[0]]
  class B_Colors:
    builtin_input = input
    builtin_print = print
    bprint = builtin_print
    def print(*args, **kwargs):
      globals()["printed"] = [] if  "printed" not in globals() else globals()["printed"]
      globals()["printed"].append(" ".join([str(i) for i in args]))
      args = list(args)
      #args.insert(0, "[%s] "%datetime.now())
      args = tuple(args)
      builtin_print(*args, **kwargs)
    if "colored" not in globals():
      from termcolor import colored
      setitem(globals(),"colored",colored)
    redprint = lambda *args, **kwargs: [[builtin_print(colored(" ".join(list(map(str, args))), "red"),**kwargs) if "attrs" not in kwargs else builtin_print(colored(" ".join(list(map(str, args))), "red", attrs=kwargs["attrs"]))], sys.stdout.flush()]
    greenprint = lambda *args, **kwargs: [[builtin_print(colored(" ".join(list(map(str, args))), "green"),**kwargs) if "attrs" not in kwargs else builtin_print(colored(" ".join(list(map(str, args))), "green", attrs=kwargs["attrs"]))], sys.stdout.flush()]
    yellowprint = lambda *args, **kwargs: [[builtin_print(colored(" ".join(list(map(str, args))), "yellow"),**kwargs) if "attrs" not in kwargs else builtin_print(colored(" ".join(list(map(str, args))), "yellow", attrs=kwargs["attrs"]))], sys.stdout.flush()]
    blueprint = lambda *args, **kwargs: [[builtin_print(colored(" ".join(list(map(str, args))), "blue"),**kwargs) if "attrs" not in kwargs else builtin_print(colored(" ".join(list(map(str, args))), "blue", attrs=kwargs["attrs"]))], sys.stdout.flush()]
    magentaprint = lambda *args, **kwargs: [[builtin_print(colored(" ".join(list(map(str, args))), "magenta"),**kwargs) if "attrs" not in kwargs else builtin_print(colored(" ".join(list(map(str, args))), "magenta", attrs=kwargs["attrs"]))], sys.stdout.flush()]
    cyanprint = lambda *args, **kwargs: [[builtin_print(colored(" ".join(list(map(str, args))), "cyan"),**kwargs) if "attrs" not in kwargs else builtin_print(colored(" ".join(list(map(str, args))), "cyan", attrs=kwargs["attrs"]))], sys.stdout.flush()]
    whiteprint = lambda *args, **kwargs: [[builtin_print(colored(" ".join(list(map(str, args))), "white"),**kwargs) if "attrs" not in kwargs else builtin_print(colored(" ".join(list(map(str, args))), "white", attrs=kwargs["attrs"]))], sys.stdout.flush()]
    redinput = lambda *args, **kwargs: [input(colored(" ".join(list(map(str, args))), "red"),**kwargs) if "attrs" not in kwargs else input(colored(" ".join(list(map(str, args))), "red", attrs=kwargs["attrs"]))][-1]
    greeninput = lambda *args, **kwargs: [input(colored(" ".join(list(map(str, args))), "green"),**kwargs) if "attrs" not in kwargs else input(colored(" ".join(list(map(str, args))), "green", attrs=kwargs["attrs"]))][-1]
    yellowinput = lambda *args, **kwargs: [input(colored(" ".join(list(map(str, args))), "yellow"),**kwargs) if "attrs" not in kwargs else input(colored(" ".join(list(map(str, args))), "yellow", attrs=kwargs["attrs"]))][-1]
    blueinput = lambda *args, **kwargs: [input(colored(" ".join(list(map(str, args))), "blue"),**kwargs) if "attrs" not in kwargs else input(colored(" ".join(list(map(str, args))), "blue", attrs=kwargs["attrs"]))][-1]
    magentainput = lambda *args, **kwargs: [input(colored(" ".join(list(map(str, args))), "magenta"),**kwargs) if "attrs" not in kwargs else input(colored(" ".join(list(map(str, args))), "magenta", attrs=kwargs["attrs"]))][-1]
    cyaninput = lambda *args, **kwargs: [input(colored(" ".join(list(map(str, args))), "cyan"),**kwargs) if "attrs" not in kwargs else input(colored(" ".join(list(map(str, args))), "cyan", attrs=kwargs["attrs"]))][-1]
    whiteinput = lambda *args, **kwargs: [input(colored(" ".join(list(map(str, args))), "white"),**kwargs) if "attrs" not in kwargs else input(colored(" ".join(list(map(str, args))), "white", attrs=kwargs["attrs"]))][-1]
    def distinct_print(*args, **kwargs):
      distinct_print_dict = {1:redprint, 2: greenprint, 3: yellowprint, 4: blueprint, 5: magentaprint, 6: cyanprint, 7: whiteprint}

      while True:
        if "DISTINCT_PRINT_COUNTER" not in globals().keys():
          globals()["DISTINCT_PRINT_COUNTER"] = random.randrange(1, 8)
          distinct_print_dict[globals()["DISTINCT_PRINT_COUNTER"]](*args, **kwargs)
          break
        else:
          x = random.randrange(1, 8)
          if x == globals()["DISTINCT_PRINT_COUNTER"]:
            continue
          else:
            distinct_print_dict[x](*args, **kwargs)
            globals()["DISTINCT_PRINT_COUNTER"] = x
            break
    def dprint(*args, **kwargs):
      distinct_print_dict = {1:redprint, 2: greenprint, 3: yellowprint, 4: blueprint, 5: magentaprint, 6: cyanprint, 7: whiteprint}

      while True:
        if "DISTINCT_PRINT_COUNTER" not in globals().keys():
          globals()["DISTINCT_PRINT_COUNTER"] = random.randrange(1, 8)
          distinct_print_dict[globals()["DISTINCT_PRINT_COUNTER"]](*args, **kwargs)
          break
        else:
          x = random.randrange(1, 8)
          if x == globals()["DISTINCT_PRINT_COUNTER"]:
            continue
          else:
            distinct_print_dict[x](*args, **kwargs)
            globals()["DISTINCT_PRINT_COUNTER"] = x
            break
    def drkprint(*args, **kwargs):
      from colored import fg, bg
      args = ", ".join(lmap(str,args))
      x = "%s%s" % (fg(255), bg(0))
      #x = "%s" % (fg(random.randrange(1,256)))
      builtin_print("%s%s" % (x, args))
    def rprint(*args, **kwargs):
      from colored import fg, bg
      args = ", ".join(args)
      #x = "%s %s" % (fg(random.randrange(1,256)), bg(random.randrange(1,256)))
      x = "%s" % (fg(random.randrange(1,256)))
      builtin_print("%s%s" % (x, args))
    def random_input(*args, **kwargs):
      from colored import fg, bg
      args = ", ".join(args)
      #x = "%s %s" % (fg(random.randrange(1,256)), bg(random.randrange(1,256)))
      x = "%s" % (fg(random.randrange(1,256)))
      builtin_input("%s %s" % (x, args))
    def distinct_input(*args, **kwargs):
      distinct_input_dict = {1:redinput, 2: greeninput, 3: yellowinput, 4: blueinput, 5: magentainput, 6: cyaninput, 7: whiteinput}
      while True:
        if "DISTINCT_INPUT_COUNTER" not in globals().keys():
          globals()["DISTINCT_INPUT_COUNTER"] = random.randrange(1, 8)
          distinct_input_dict[globals()["DISTINCT_INPUT_COUNTER"]](*args, **kwargs)
          break
        else:
          x = random.randrange(1, 8)
          if x == globals()["DISTINCT_INPUT_COUNTER"]:
            continue
          else:
            distinct_input_dict[x](*args, **kwargs)
            globals()["DISTINCT_INPUT_COUNTER"] = x
            break
    globals().update(locals())
  class Bowser(object):
    def __call__(self, profile="sele", invis=False, window_index=None):
      distinct_print("initializing profile %s" % profile)
      from selenium.webdriver.support.ui import WebDriverWait
      from selenium.webdriver.firefox.firefox_profile import FirefoxProfile
      from selenium.webdriver.firefox.firefox_binary import FirefoxBinary
      from selenium.webdriver.common.keys import Keys, Keys as SHADOW
      from selenium.webdriver.common.by import By
      from selenium.webdriver.chrome.options import Options
      from selenium.webdriver import ActionChains
      from selenium import webdriver
      from pyvirtualdisplay import Display
      from selenium.webdriver.common.alert import Alert
      from sys import platform
      import selenium.webdriver.support.expected_conditions as EC
      globals().update({a:v for a,v in Keys.__dict__.items() if not a.startswith("_")})
      globals().update(locals())

      wd = None
      if invis == True:
        display = Display(visible=0, size=(1024, 768)).start()
      if profile == 'ph':
        #@service_log_path somewhere else [2018.11.23 05:07 PM]
        wd = webdriver.PhantomJS(os.path.expanduser('~/tavern/tavern/soda/.phantomjs'),service_log_path=homepath("~/tavern/tavern/soda/.ghostdriver.log"))
        (wd.set_window_position(*GLOBAL_BROWSER_WINDOW_POSITION), wd.set_window_size(*GLOBAL_BROWSER_WINDOW_SIZE))
        wd.profile = "sele" # false but slips
        wd.driver_type = "phantomjs"
      if 'ch' in profile:
        # os.system("rm -rf '~/Library/Application Support/Google/Chrome/Profile 1000'")
        os.system("killall Google\ Chrome\ 70&>/dev/null&")
        options = webdriver.ChromeOptions()
        options.add_argument("--no-sandbox")
        options.add_argument("--user-data-dir=~/Library/Application Support/Google/Chrome/Profile 1000")
        options.add_argument("disable-infobars")
        options.add_argument('--disable-infobars')
        options.add_argument("--disable-infobars")
        os.system("rm -rf ~/Library/Application\ Support/Google/Chrome/Profile\ 1000/Cookies")
        OSA().notify("initiating webdriver")


        options.binary_location = '/Applications/Google Chrome 70.app/Contents/MacOS/Google Chrome'
        options.add_argument("--disable-dev-shm-usage");

        # killall "Google Chrome 70"

        # options.add_argument('window-size=1200x600')

        chromedriver = os.path.expanduser('~/tavern/tavern/soda/.chromedriver')
        if '+' in profile:
          rm(homepath("~/Library/Application Support/Google/Chrome/Profile 1000"))
          options.add_argument('--headless')
        if '/' in profile:
          rm(homepath("~/Library/Application Support/Google/Chrome/Profile 1000"))
        wd = webdriver.Chrome(executable_path=chromedriver, chrome_options=options)
        (wd.set_window_position(*GLOBAL_BROWSER_WINDOW_POSITION), wd.set_window_size(*GLOBAL_BROWSER_WINDOW_SIZE))
        wd.profile = profile
        wd.driver_type = "chrome"
      elif profile != 'ph':
        try:
          if platform == 'darwin':
            profile_path = os.path.expanduser("~/Library/Application Support/Firefox/Profiles")
          else:
            profile_path = os.path.expanduser('~/.mozilla/firefox')
          
          #options = Options()

          #options.add_argument("--headless")
          #options.set_headless(headless=True)

          # 3.14.1, 65/61, 24
          # 2.53.1, 46, 19? (24*)
          # 46 ruled as screenshot savely and zoomable
          executable_path = os.path.expanduser("~/tavern/tavern/soda/.geckodriver")
          #firefox_profile = FirefoxProfile(os.path.expanduser("~/Library/Application Support/Firefox/Profiles") + "/" + [i for i in os.listdir(os.path.expanduser("~/Library/Application Support/Firefox/Profiles"))][0])
          firefox_profile = FirefoxProfile(homepath("~/Library/Application Support/Firefox/Profiles/%s" % (( [i for i in os.listdir(os.path.expanduser("~/Library/Application Support/Firefox/Profiles")) if profile == "".join(i.split(".")[1:]) ][0] )) ))
          #firefox_profile.set_preference('browser.download.dir', '/tmp')
          firefox_profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'text/csv; charset=utf-8')
          firefox_profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'text/json; charset=utf-8')
          firefox_profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'text/plain; charset=utf-8')
          firefox_profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'text/html; charset=utf-8')
          firefox_profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'text/csv')
          firefox_profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'text/json')
          firefox_profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'text/plain')
          firefox_profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'text/html')
          firefox_profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'attachment/json')
          firefox_profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'attachment/json; charset=utf-8')
          firefox_profile.set_preference('browser.helperApps.neverAsk.saveToDisk', 'attachment/json;charset=utf-8')
          firefox_binary = FirefoxBinary("/Applications/Firefox 46.app/Contents/MacOS/firefox-bin") # Make sure selenium is 3.8.0
          # firefox_binary = FirefoxBinary("/Applications/Firefox 46.app/Contents/MacOS/firefox-bin") # Make sure selenium is 2.53.1
          wd = webdriver.Firefox(executable_path=executable_path, firefox_profile=firefox_profile, firefox_binary=firefox_binary)if(invis!=66)else(webdriver.Firefox(executable_path=executable_path,firefox_profile=firefox_profile,firefox_binary=FirefoxBinary("/Applications/Firefox 46.app/Contents/MacOS/firefox-bin".replace("46","66")), log_path="/dev/null"))#,capabilities=capabilities)
          (wd.set_window_position(*GLOBAL_BROWSER_WINDOW_POSITION), wd.set_window_size(*GLOBAL_BROWSER_WINDOW_SIZE))

          wd.driver_type = "firefox"
          # HERE IS THE PAYLOAD
          #if invis: OSA().setforemostwindowarrangement("Firefox",0,0,0,0)


          from selenium.webdriver.common.keys import Keys
          wd.keys = Keys
        except Exception as e:
          print(e)
      o = lambda self: [blueprint("imko_checker on"), setattr(self, "imko_checker", True), self][2]
      k = lambda self: [blueprint("imko_checker off"), setattr(self, "imko_checker", False), self][2]
      
      def imko(self, *args, part = 0):
        return self
        # [ Depreciatied]
        if len(args) > 1: part = args[-1]
        self.zoom_level()
        if part == "on":
          self.imko_checker = True
          return self
        elif part == "off":
          self.imko_checker = False
          return self


        if args: return [[greenprint("Image compare test passed.")]if(True==[self.save_screenshot("%s/%s%s.png"%(homepath("~/tavern/tavern/soda/imqo"),addressurl(args[0],part=part),"_:compare:_")), ImageComp()("%s/%s"%(homepath("~/tavern/tavern/soda/imqo"), addressurl(args[0],part=part)), "%s/%s%s.png"%(homepath("~/tavern/tavern/soda/imqo"),addressurl(args[0],part=part),"_:compare:_"))][1] )else([greenprint("Image compare test failed."), OSA.display_dialog("This page with url:\n%s\n failed the image compare test. It may have been changed.\nThis test was taken with a similarity metric of %s.\n\nContinue? (may result in program crash)"  % (self.current_url, GLOBAL_IMAGE_COMPARISON_TEST_SCORE), text_prompt = False)]), self][1]

        address_current = addressurl(self.current_url, part = part)
        address_imqo = homepath("~/tavern/tavern/soda/imqo")
        destination_locale = "%s/%s" % (address_imqo, address_current)
        assert os.path.exists(destination_locale)
        compare_locale = "%s%s.png" % (destination_locale, "_:compare:_") # gen new
        self.save_screenshot(compare_locale) # save
        image_compare_test_result = ImageComp()(destination_locale, compare_locale)
        os.remove(compare_locale)
        # :image_compare_test:
        if True == image_compare_test_result:
          greenprint("Image compare test passed.")
        else:
          greenprint("Image compare test failed.")
          OSA.display_dialog("This page with url:\n%s\n failed the image compare test. It may have been changed.\nThis test was taken with a similarity metric of %s.\n\nContinue? (may result in program crash)"  % (self.current_url, GLOBAL_IMAGE_COMPARISON_TEST_SCORE), text_prompt = False)
        return self
      def silver_port(self, executable_string):
        os.system("pip install selenium==3.14.1 && cd ~/tavern/tavern && ~/tavern/bin/python3.5 -c 'from soda.can import *; %s' ; pip install selenium==2.53.1" % (executable_string))
        return self
      def set_window(self, x,y,l,w):
        self.set_window_position(y, x)
        self.set_window_size(l, w)
        return self
      def set_window_index(self, row, col, num_rows=4, num_cols=4):
        self.get('http://google.com')
        if self.profile == 'ch':
          self.execute_script("document.body.style.zoom='25%'")
        else:
          self.zoom_out()
        row_size = 4000/num_rows
        col_size = 6400/num_cols
        if self.profile == 'ch':
          row_size = (row_size / 4) *1.2
        if self.profile == 'ch':
          col_size = (col_size / 4) *1.2
        x_position = row_size * row
        y_position = col_size * col
        x_size = row_size
        y_size = col_size
        print(x_position, y_position, x_size, y_size)
        self.set_window(x_position, y_position, y_size, x_size)
        return self
      def click_by_offset(self, element, x, y):
        ActionChains(self).move_to_element_with_offset(element, x, y).click().perform()
        return self
      def cget(self,url):
        self.execute_script("window.open('%s', 'new_window')"%url)
        self.switchlast()
        return self
      def switchlast(self):
        self.switch_to_window(self.window_handles[-1])
        return self
      def closelast(self):
        self.switchlast()
        self.close()
        self.switchlast()
        return self
      def nexturlwait(self):
        self.nexturlwait_current = self.current_url
        return self
      def nexturlwaitjoin(self, _time = GLOBAL_BROWSER_URLWAIT_WAIT_TIME):
        start_time = datetime.now()
        while self.current_url == self.nexturlwait_current:
          if ((datetime.now()-start_time).seconds) > _time: assert(False)
          time.sleep(0.5)
        self.zoom_level(level = self.zoom_level_idx)
        self.sp(GLOBAL_BROWSER_STEP_SLEEPTIME)
        return self
      def urlwait(self, x, _time = GLOBAL_BROWSER_URLWAIT_WAIT_TIME):
        start_time = datetime.now()
        while(x not in self.current_url):
          if ((datetime.now()-start_time).seconds) > _time: assert(False)
          time.sleep(0.5)
        self.zoom_level(level = self.zoom_level_idx)
        self.sp(GLOBAL_BROWSER_STEP_SLEEPTIME)
        return self
      def assert_connection_speed(self, minimum_speed = "25MB"):
        minimum_speed_integer = decimal_re(minimum_speed)
        download_speed_readable = Psutil().SpeedTest(download = True, upload = False, verbose = False)
        download_speed_integer = decimal_re(download_speed_readable)
        while download_speed_integer < minimum_speed_integer:
          download_speed_readable = Psutil().SpeedTest(download = True, upload = False, verbose = False)
          download_speed_integer = decimal_re(download_speed_readable)
          OSA.display_dialog("Browser is not working because download speed is not over the minimum speed which is %s.\nPressing Okay will re-attempt this download speed test." % (minimum_speed))
        greenprint("Download Speed, %s Is Over %s. Connection Speed Is Good" % (download_speed_readable, minimum_speed))
        return True
      if GLOBAL_BROWSER_REQUIRE_SPEEDTEST == True:
        speedtest = pool(type("", (AttrDict,), dict(assert_connection_speed = assert_connection_speed))().assert_connection_speed, minimum_speed = "200MB")
      def iframe_find(self, command, *args, **kwargs):
        iframes = self.ftns("iframe")
        for i in iframes:
          try:
            time.sleep(3)
            self.switch_to_frame(i)
            time.sleep(3)
          except Exception as e:
            redprint("could not switch to a frame, switching to default content and continuing.")
            time.sleep(3)
            self.switch_to_default_content()
            time.sleep(3)
            continue
            pass
          R = tryreturn(command, *args, **kwargs)
          if R == 0:
            print("could not execute the command with the args and kwargs, switching to default content and continuing.")          
            time.sleep(3)
            self.switch_to_default_content()
            time.sleep(3)
            continue
          elif R != 0:
            time.sleep(3)
            self.switch_to_default_content()
            time.sleep(3)
            return j
        time.sleep(3)
        self.switch_to_default_content()
        time.sleep(3)
      def wait_for(self, _type,_name,_time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME):
        try: return WebDriverWait(self,_time).until(EC.presence_of_element_located((getattr(By, _type), _name))); zz(2)
        except: print('[Disregardable] %s Not Found'%_name); return 'fail'
      def wait_fors(self, _type,_name,_time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME):
        try: return WebDriverWait(self,_time).until(EC.presence_of_all_elements_located((getattr(By, _type), _name))); zz(2)
        except: print('[Disregardable] %s Not Found'%_name); return []
      def wait_for_element(self, method, *args):
        while True:
          try:
            x = method(*list(args))
            if x != "fail":
              return x
          except Exception as e:
            print(method, *args, "not found", "sleeping 1")
            time.sleep(1)
        # ie self.ss.fcn, "s-company-title"
      # send_keys/click should be classed to return self
      def bind_more(elem, webdriver = None):
        if type(elem)==str: return "fail"
        elem.find_element_by_class_name1 = elem.find_element_by_class_name
        find_element_by_class_name = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.find_element_by_class_name1(x), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_element_by_css_selector1 = elem.find_element_by_css_selector
        find_element_by_css_selector = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.find_element_by_css_selector1(x), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_element_by_id1 = elem.find_element_by_id
        find_element_by_id = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.find_element_by_id1(x), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_element_by_link_text1 = elem.find_element_by_link_text
        find_element_by_link_text = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.find_element_by_link_text1(x), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_element_by_name1 = elem.find_element_by_name
        find_element_by_name = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.find_element_by_name1(x), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_element_by_partial_link_text1 = elem.find_element_by_partial_link_text
        find_element_by_partial_link_text = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.find_element_by_partial_link_text1(x), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_element_by_tag_name1 = elem.find_element_by_tag_name
        find_element_by_tag_name = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.find_element_by_tag_name1(x), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_element_by_xpath1 = elem.find_element_by_xpath
        find_element_by_xpath = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.find_element_by_xpath1(x), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_elements_by_class_name1 = elem.find_elements_by_class_name
        find_elements_by_class_name = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.find_elements_by_class_name1(x))(webdriver = webdriver)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_elements_by_css_selector1 = elem.find_elements_by_css_selector
        find_elements_by_css_selector = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.find_elements_by_css_selector1(x))(webdriver = webdriver)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_elements_by_id1 = elem.find_elements_by_id
        find_elements_by_id = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.find_elements_by_id1(x))(webdriver = webdriver)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_elements_by_link_text1 = elem.find_elements_by_link_text
        find_elements_by_link_text = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.find_elements_by_link_text1(x))(webdriver = webdriver)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_elements_by_name1 = elem.find_elements_by_name
        find_elements_by_name = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.find_elements_by_name1(x))(webdriver = webdriver)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_elements_by_partial_link_text1 = elem.find_elements_by_partial_link_text
        find_elements_by_partial_link_text = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.find_elements_by_partial_link_text1(x))(webdriver = webdriver)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_elements_by_tag_name1 = elem.find_elements_by_tag_name
        find_elements_by_tag_name = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.find_elements_by_tag_name1(x))(webdriver = webdriver)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.find_elements_by_xpath1 = elem.find_elements_by_xpath
        find_elements_by_xpath = lambda self, x, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.find_elements_by_xpath1(x))(webdriver = webdriver)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
        elem.click1 = elem.click
        click = lambda self, sleeptime = GLOBAL_BROWSER_STEP_SLEEPTIME: [elem.click1(), webdriver.sp(sleeptime), webdriver][2]
        elem.send_keys1 = elem.send_keys
        send_keys = lambda self, keys, sleeptime = GLOBAL_BROWSER_STEP_SLEEPTIME: [tryprocess(elem.clear), webdriver.sp(sleeptime), elem.send_keys1(keys), webdriver.sp(sleeptime), self][4]
        elem.clear1 = elem.clear
        s_keys = lambda self,x,r1=0.2,r2=0.8,sleeptime=GLOBAL_BROWSER_STEP_SLEEPTIME: [[tryprocess(elem.clear), time.sleep(sleeptime), time.sleep(1), [[elem.send_keys1(i), time.sleep(random.uniform(r1,r2))] for i in x]], self.sp(sleeptime), self][2]
        """
        ss = Browser()("sele")
        ss.get("google.com")
        ss.fcss(".gLFyf").s_keys("RR")
        """
        clear = lambda self: [elem.clear1(), self][1]
        for k,v in locals().items():
          try:    bind(elem, k, v)
          except: pass
        for i in dir(webdriver):
          if not i.startswith("_"):
            if not i.startswith("find"):
              if not i == "s_keys":
                tryprocess(setattr, elem, i, tryreturn(getattr, webdriver, i))
        # [don't do this, it sets the find_elements, wait, that uses ftn, etc, so none other collide]
        return elem
        """
        ss = Bowser()("ch")
        ss.get("google.com")
        a = ss.ftn("body")
        assert ss == a.click()
        """
      """
      ss = Browser()("sele")
      ss.get("google.com").bat()
      ss.ftns("input").ftns("input")
      ss.bat("A", "B")
      ss.batterypack
      """
      actionitem = lambda self: self
      bat = lambda self, *args, batterysleep_time = GLOBAL_BROWSER_STEP_SLEEPTIME: [setattr(self, "batterypack", []), setattr(self, "batterysleep", batterysleep_time), self][2] if len(args) == 0 else [[[self.batterypack[idx].click() if i=="Click" else self.nexturlwait() if i == "Nexturlwait" else self.nexturlwaitjoin() if i == "Nexturlwaitjoin" else () if i == Null else self.batterypack[idx].send_keys(i), self.sp(self.batterysleep)] for idx, i in enum(args)], self][1]
      atomicdialog = lambda self, x, method: [OSA.display_dialog(x, text_prompt = False) if True == method() else 1, self][1]
      binded_list = type("", (list,), dict(__call__ = lambda self, webdriver: [setattr(self, "ss", webdriver),self.ora(),(self)if(self!=["f","a","i","l"])else("fail")][2], click = lambda self, sleeptime = GLOBAL_BROWSER_STEP_SLEEPTIME: [binded_list(trykeycall("click", self))(webdriver = self.ss), self.sp(sleeptime)][0], send_keys = lambda self, keys, sleeptime = GLOBAL_BROWSER_STEP_SLEEPTIME: [trykeycall("clear", self), self.sp(sleeptime), binded_list(trykeycall("send_keys", self, keys))(webdriver = self.ss), self.sp(sleeptime)][2], s_keys = lambda self, keys, r1 = 0.2, r2 = 0.7, sleeptime = GLOBAL_BROWSER_STEP_SLEEPTIME: [[trykeycall("clear", self), self.sp(sleeptime), binded_list([[[tryprocess(elem.send_keys, i), time.sleep(random.uniform(r1, r2))][0] for i in keys] for elem in self])(webdriver = self)][2], self.sp(sleeptime)][0], clear = lambda self, sleeptime = GLOBAL_BROWSER_STEP_SLEEPTIME: [binded_list(trykeycall("clear", self))(webdriver = self.ss), self.sp(sleeptime)][0], ora = lambda self: [tryprocess(setattr, self, i, tryreturn(getattr, self.ss, i)) for i in dir(self.ss) if not i.startswith("_") and i != "s_keys"])) # could be just and i != "s_keys" # or... and i not in dir(self) # less risk
      fcn = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.wait_for('CLASS_NAME', Elem, _time=_time), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      fcss = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.wait_for('CSS_SELECTOR', Elem, _time=_time), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      fid = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.wait_for('ID', Elem, _time=_time), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      flt = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.wait_for('LINK_TEXT', Elem, _time=_time), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      fn = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.wait_for('NAME', Elem, _time=_time), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      fplt = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.wait_for('PARTIAL_LINK_TEXT', Elem, _time=_time), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      ftn = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.wait_for('TAG_NAME', Elem, _time=_time), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      fx = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", bind_more(self.wait_for('XPATH', Elem, _time=_time), webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      fcns = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.wait_fors('CLASS_NAME', Elem, _time=_time))(webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      fcsss = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.wait_fors('CSS_SELECTOR', Elem, _time=_time))(webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      fids = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.wait_fors('ID', Elem, _time=_time))(webdriver = self)),  self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      flts = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.wait_fors('LINK_TEXT', Elem, _time=_time))(webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      fns = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.wait_fors('NAME', Elem, _time=_time))(webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      fplts = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.wait_fors('PARTIAL_LINK_TEXT', Elem, _time=_time))(webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      ftns = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.wait_fors('TAG_NAME', Elem, _time=_time))(webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      fxs = lambda self, Elem, _time=GLOBAL_BROWSER_ELEMENT_WAIT_TIME, **kwargs: [setitem(kwargs, "hotspot", binded_list(self.wait_fors('XPATH', Elem, _time=_time))(webdriver = self)), self.batterypack.append(kwargs["hotspot"]), kwargs["hotspot"]][2]
      up = lambda self, x=1: binded_list([self.key(Keys.UP) for i in range(x)])(webdriver = self)
      down = lambda self, x=1: binded_list([self.key(Keys.DOWN) for i in range(x)])(webdriver = self)
      left = lambda self, x=1: binded_list([self.key(Keys.LEFT) for i in range(x)])(webdriver = self)
      right = lambda self, x=1: binded_list([self.key(Keys.RIGHT) for i in range(x)])(webdriver = self)
      enter = lambda self, x=1: binded_list([self.key(Keys.ENTER) for i in range(x)])(webdriver = self)
      zoom_out = lambda self, x=10: binded_list([self.execute_script, [(self.ctrlkey('-'), self.cmdkey('-')) for i in range(x)]])(webdriver = self)
      def zoom_level(self, level = GLOBAL_BROWSER_PAGEGOT_ZOOM_LEVEL):
        chrome_levels  = [33, 50, 67, 80, 90, 100, 110, 125, 133, 150, 175, 200, 250, 300, 400, 500, 25] # edited
        firefox_levels = [30, 50, 67, 80, 90, 100, 110, 120, 133, 150, 170, 200, 240, 300]
        if self.driver_type == "firefox":
          self.zoom_out(len(firefox_levels))
          self.zoom_in(level)
        elif self.driver_type == "chrome":
          chrome_level = chrome_levels[level]
          self.execute_script("document.body.style.zoom='{}%'".format(chrome_level))
        elif self.driver_type == "phantomjs":
          pass
        time.sleep(1)
        time.sleep(1)
        return self
      set_zoom_level = lambda self, x: [setattr(self, "zoom_level_idx", x), self.zoom_level(self.zoom_level_idx), self][2]
      zoom_in = lambda self, x=1: binded_list([(self.ctrlkey('='), self.cmdkey('='), time.sleep(0.5)) for i in range(x)])(webdriver = self)
      tab = lambda self, x=1, s=1: binded_list([[self.key(Keys.TAB), zz(s)] for i in range(x)])(webdriver = self)
      key = lambda self, keys: [ActionChains(self).send_keys(keys).perform(), self][1]
      ctrlkey = lambda self, keys: [ActionChains(self).key_down(Keys.CONTROL).send_keys(keys).key_up(Keys.CONTROL).perform(), self][1]
      cmdkey = lambda self, keys: [ActionChains(self).key_down(Keys.COMMAND).send_keys(keys).key_up(Keys.COMMAND).perform(), self][1]
      pagestop_timeout = lambda self: [self.ftn("body").send_keys(Keys.ESCAPE), self][1]
      handle_alert = lambda self, x=True: [tryprocess(Alert(self).accept) if x == True else tryprocess(Alert(self).dismiss), self][1]
      clear_cookies = lambda self, profile: [os.system("rm -rf ~/Library/Application\ Support/Firefox/Profiles/{}/cookies*".format([i for i in os.listdir(GLOBAL_FIREFOX_PROFILE_PATH) if i.split(".")[-1] == profile][0]))if("ch"!=profile)else([os.system("killall Google\ Chrome &>/dev/null"), time.sleep(1), os.system("rm -rf '~/Library/Application Support/Google/Chrome/Profile 1000'"), time.sleep(1), os.system("/Applications/Google\ Chrome\ 70.app/Contents/MacOS/Google\ Chrome --args --profile-directory=Profile\ 1000 &>/dev/null &"), time.sleep(1), os.system("/usr/bin/killall Google\ Chrome &>/dev/null &"), process(lambda: [time.sleep(1), os.system("/usr/bin/killall Google\ Chrome &>/dev/null &")])]), self][1]
      whippin = lambda self: self
      def space(self):
        self.key(self.Keys.SPACE)
        return self
      def ffs(self,tag,attr,value, _time = GLOBAL_BROWSER_ELEMENT_WAIT_TIME, GLOBAL_VARIABLE = None):
        start_time = datetime.now()
        if (None==GLOBAL_VARIABLE):
          GLOBAL_VARIABLE = generate_one_random_number(20)
          globals()[GLOBAL_VARIABLE] = start_time
        tags = self.find_elements_by_tag_name(tag)
        for e in tags:
          try:  
            if e.get_attribute(attr) == value:
              R = bind_more(e, webdriver = self)
              self.batterypack.append(R)
              return R
          except: pass
        if (datetime.now() - globals()[GLOBAL_VARIABLE]).seconds < _time:
          return self.ffs(tag = tag, attr = attr, value = value, _time = _time, GLOBAL_VARIABLE = GLOBAL_VARIABLE)
        assert False
      def ffss(self,tag,attr,value, _time = GLOBAL_BROWSER_ELEMENT_WAIT_TIME, GLOBAL_VARIABLE = None):
        start_time = datetime.now()
        if (None==GLOBAL_VARIABLE):
          GLOBAL_VARIABLE = generate_one_random_number(20)
          globals()[GLOBAL_VARIABLE] = start_time
        tags = self.find_elements_by_tag_name(tag)
        element_list = []
        for i in tags:
          if i.get_attribute(attr) == value:
            element_list.append(i)
        if (datetime.now() - globals()[GLOBAL_VARIABLE]).seconds < _time and element_list == []:
          self.ffss(tag = tag, attr = attr, value = value, _time = _time, GLOBAL_VARIABLE = GLOBAL_VARIABLE)
        R = binded_list(element_list)(webdriver = self)
        self.batterypack.append(R)
        return R
      def ffst(self, tag, text, _time = GLOBAL_BROWSER_ELEMENT_WAIT_TIME, GLOBAL_VARIABLE = None):
        start_time = datetime.now()
        if (None==GLOBAL_VARIABLE):
          GLOBAL_VARIABLE = generate_one_random_number(20)
          globals()[GLOBAL_VARIABLE] = start_time
        tags = self.find_elements_by_tag_name(tag) # !!
        for i in tags:
          if (datetime.now() - start_time).seconds > 100:
            print("over 100 refresh_every_x_seconds")
            if input("continue? (y/n): ") == "n":
              return
          if i.text == text:
            R = bind_more(i, webdriver = self)
            redprint("APPEND")
            self.batterypack.append(R)
            return R
        
        redprint("ffst return nothing so it should raise an Error/")

        if (datetime.now() - globals()[GLOBAL_VARIABLE]).seconds < _time:
          return self.ffst(tag = tag, text = text, _time = _time, GLOBAL_VARIABLE = GLOBAL_VARIABLE)
        assert False
      def ffsts(self, tag, text, _time = GLOBAL_BROWSER_ELEMENT_WAIT_TIME, GLOBAL_VARIABLE = None):
        start_time = datetime.now()
        if (None==GLOBAL_VARIABLE):
          GLOBAL_VARIABLE = generate_one_random_number(20)
          globals()[GLOBAL_VARIABLE] = start_time
        tags = self.find_elements_by_tag_name(tag)
        element_list = []
        for i in tags:
          if (datetime.now() - start_time).seconds > 100:
            print("over 100 refresh_every_x_seconds")
            if input("continue? (y/n): ") == "n":
              return
          if i.text == text:
            element_list.append(i)
        if (datetime.now() - globals()[GLOBAL_VARIABLE]).seconds < _time and element_list == []:
          return self.ffsts(tag = tag, text = text, _time = _time, GLOBAL_VARIABLE = GLOBAL_VARIABLE)
        R = binded_list(element_list)(webdriver = self)
        self.batterypack.append(R)
        return R
        assert False
      def bacpac(self, start = False, end = False, url = None):
        (setattr(self,"bacpac_urls",[]))if(None==getattr(self, "bacpac_urls", None))else()
        if start == True:
          self.bacpac_urls.append(self.current_url) if self.current_url not in self.bacpac_urls else ()
        if end == True:
          while True:
            if self.current_url not in self.bacpac_urls:
              self.bacpac_urls.append(self.current_url)
              print("break")
              break
            else:
              ()
          if url not in self.bacpac_urls:
            assert_dialog(lambda: url == self.bacpac_urls.__getitem__(-1), "current url: %s\nrequired url: %s\nsomething has changed"%(self.current_url, url))
          elif url in self.bacpac_urls:
            print("verified)")
            ()
        return self
      def pagedowndo(self, x, _time = GLOBAL_BROWSER_ELEMENT_WAIT_TIME):
        start_time = datetime.now()
        for i in range(WHILE_TRUE):
          if (datetime.now() - start_time).seconds > GLOBAL_BROWSER_ELEMENT_WAIT_TIME:
            assert False
          if(True==x()):
            self.key(self.Keys.PAGE_DOWN)
          else:
            self.key(self.Keys.HOME)
            time.sleep(GLOBAL_BROWSER_STEP_SLEEPTIME)
            return self
      def arrowdowndo(self, x, _time = GLOBAL_BROWSER_ELEMENT_WAIT_TIME):
        start_time = datetime.now()
        for i in range(WHILE_TRUE):
          if (datetime.now() - start_time).seconds > GLOBAL_BROWSER_ELEMENT_WAIT_TIME:
            assert False
          if(True==x()):
            self.key(self.Keys.ARROW_DOWN)
          else:
            self.key(self.Keys.HOME)
            time.sleep(GLOBAL_BROWSER_STEP_SLEEPTIME)
            return self
      def s_keys(self, elem, x, r1 = 0.2, r2 = 0.8):
        elem.clear()
        time.sleep(GLOBAL_BROWSER_STEP_SLEEPTIME)
        time.sleep(1)
        for i in x:
          elem.send_keys(i)
          Q = random.uniform(r1, r2)
          time.sleep(Q)
        return self
      def workable_from(self, element_list, command, *args, **kwargs):
        x = lambda *args, **kwargs: command(*args, **kwargs)
        attempt = trylmap(x, element_list)
        return binded_list([element_list[i] for i in attempt if i == 0])(webdriver = self)
      def html_test(self):
        pyperclip.copy("")
        open(homepath("~/tavern/tavern/test.html"),"w").write(self.page_source)
        if "/Applications/Firefox\ 46.app" not in subprocess.getoutput("ps -ef | grep firefox | grep -v grep"):
          os.system("/Applications/Firefox\ 46.app/Contents/MacOS/firefox-bin ~/tavern/tavern/test.html -foreground &")
          time.sleep(4)
        OSA("Firefox 46", ["cmd_l", "return", "delay 1"])
        return self
      def fxsxs(self, x):
        g()["ELEMENT_LIST"] = []
        GET_XPATHS = lambda R: R.find_elements_by_xpath("*")
        def GET_MORE(x):
          List = GET_XPATHS(x)
          if List == []: return
          for i in List:
            g()["ELEMENT_LIST"].extend(List)
            GET_MORE(i)
          return g()["ELEMENT_LIST"]
        GET_MORE(x)
        R = binded_list(g()["ELEMENT_LIST"])
        self.batterypack.append(R)
        return R
      def jcns(self, x, m, kws, _time = GLOBAL_BROWSER_ELEMENT_WAIT_TIME, tc=False):
        S = datetime.now()
        """
        x = "ui-button"
        m = "click"
        kws = {"text":"Close store"}
        """
        # kws = dict(zip(args[0::2], args[1::2]))
        t = self.execute_script("return document.getElementsByClassName('%s')"%(x))
        l = []
        for idx in list(range(len(t))):
          for a,b in kws.items():
            v = None
            if a == "text": v = Strip(self.execute_script("return document.getElementsByClassName('%s')[%s].%s"%(x,idx,"textContent"if("text"==a)else("textContent"))))
            else: v = self.execute_script("return document.getElementsByClassName('%s')[%s].getAttribute('%s')"%(x,idx,a))
            if v!=b:
              l.append(idx)
        r = len(t)
        y = sorted(set(range(r)) - set(l)) #
        E = (_time-((datetime.now()-S).total_seconds()))
        redprint(E)
        if ((y==[])and(E>0)): return [redprint("again,%s"%E),self.jcns(x, m, kws, _time = E)][1]
        elif ((y==[])and(E<=0)): return [] #
        if(m==0): return [self.execute_script("return document.getElementsByClassName('%s')[%s]"%(x,idx)) for idx in y]
        for idx in y:
          if m == "click": self.execute_script("document.getElementsByClassName('%s')[%s].click()"%(x,idx))
          else: self.execute_script("document.getElementsByClassName('%s')[%s].value = '%s'"%(x,idx,m))if(tc==False)else(self.execute_script("document.getElementsByClassName('%s')[%s].textContent = '%s'"%(x,idx,m)))
        time.sleep(GLOBAL_BROWSER_STEP_SLEEPTIME)
        return self

        """
        x = "ui-button"
        m = "click"
        kws = {"text":"Close store"}
        idx = [5]
        ss.fcns(x)[5].click() # does not work @ top of page
        self.execute_script("document.getElementsByClassName('%s')[%s].click()"%(x,idx)) # works @ top of page
        
        """
        """
        ss.get("{}/settings/account".format(self.Administrative_Url))
        kws = {"text":"Close store","name":"button","data-bind-event-click":"passwordConfirmationModal.show()"}
        x = "ui-button"
        m = "click"
        # getElementsByTagName
        """
      def jtns(self, x, m, kws, _time = GLOBAL_BROWSER_ELEMENT_WAIT_TIME, tc=False):
        # added strip to text
        S = datetime.now()
        # kws = dict(zip(args[0::2], args[1::2]))
        redprint("_time: %s, S: %s" % (_time, S))
        t = self.execute_script("return document.getElementsByTagName('%s')"%(x))
        l = []
        for idx in list(range(len(t))):
          for a,b in kws.items():
            v = None
            if a == "text": v = Strip(self.execute_script("return document.getElementsByTagName('%s')[%s].%s"%(x,idx,"textContent"if("text"==a)else("textContent"))))
            else: v = self.execute_script("return document.getElementsByTagName('%s')[%s].getAttribute('%s')"%(x,idx,a))
            if v!=b:
              l.append(idx)
        r = len(t)
        y = sorted(set(range(r)) - set(l)) #
        E = (_time-((datetime.now()-S).total_seconds()))
        redprint(E)
        if ((y==[])and(E>0)): return [redprint("again,%s"%E),self.jtns(x, m, kws, _time = E)][1]
        elif ((y==[])and(E<=0)): return [] #
        if(m==0): return [self.execute_script("return document.getElementsByTagName('%s')[%s]"%(x,idx)) for idx in y]
        for idx in y:
          if m == "click": self.execute_script("document.getElementsByTagName('%s')[%s].click()"%(x,idx))
          else: self.execute_script("document.getElementsByTagName('%s')[%s].value = '%s'"%(x,idx,m))if(tc==False)else(self.execute_script("document.getElementsByTagName('%s')[%s].textContent = '%s'"%(x,idx,m)))
        time.sleep(GLOBAL_BROWSER_STEP_SLEEPTIME)
        return self
      def jns(self, x, m, kws, _time = GLOBAL_BROWSER_ELEMENT_WAIT_TIME, tc=False):
        S = datetime.now()
        # kws = dict(zip(args[0::2], args[1::2]))
        t = self.execute_script("return document.getElementsByName('%s')"%(x))
        l = []
        for idx in list(range(len(t))):
          for a,b in kws.items():
            v = None
            if a == "text": v = Strip(self.execute_script("return document.getElementsByName('%s')[%s].%s"%(x,idx,"textContent"if("text"==a)else("textContent"))))
            else: v = self.execute_script("return document.getElementsByName('%s')[%s].getAttribute('%s')"%(x,idx,a))
            if v!=b:
              l.append(idx)
        r = len(t)
        y = sorted(set(range(r)) - set(l)) #
        E = (_time-((datetime.now()-S).total_seconds()))
        redprint(E)
        if ((y==[])and(E>0)): return [redprint("again,%s"%E),self.jns(x, m, kws, _time = E)][1]
        elif ((y==[])and(E<=0)): return [] #
        if(m==0): return [self.execute_script("return document.getElementsByName('%s')[%s]"%(x,idx)) for idx in y]
        for idx in y:
          if m == "click": self.execute_script("document.getElementsByName('%s')[%s].click()"%(x,idx))
          else: self.execute_script("document.getElementsByName('%s')[%s].value = '%s'"%(x,idx,m))if(tc==False)else(self.execute_script("document.getElementsByName('%s')[%s].value = '%s'"%(x,idx,m)))
        time.sleep(GLOBAL_BROWSER_STEP_SLEEPTIME)
        return self
      def captcha_check(self):

        lol = [i for i in self.ftns("iframe") if True == tryreturn(lambda: "https://www.google.com/recaptcha/api2" in i.get_attribute("src") )]
        F = False
        for i in lol:
          self.frame(i)
          try:
            if "fail"==self.fcn("recaptcha-checkbox-checkmark",_time=2):
              0/0
            F= True
            blueprint("F TRUE")
          except:
            self.dc()
            continue
          self.dc()
        #if tryreturn(lambda: self.fcns("g-recaptcha",_time=4)) == 0:
        if F:
          OSA.display_dialog("There is a Google ReCaptcha on this page. Please complete the captcha and after the captcha is completed, click OK in this prompt. The captcha is complete when the check appears.\n\nIf there is no captcha, please ignore this message.",text_prompt=False)
        return self
      #bind = lambda obj,name,method: setattr(obj, name, MethodType(method,obj))
      def tp(self, func, *args, **kwargs):
        import multiprocessing
        t = multiprocessing.Process(target=func, args=args, kwargs=kwargs)
        #t = multiprocessing.Process(target=func)#, args=args, kwargs=kwargs)
        try:
          t.run()
          return self
        except Exception as e:
          #OSA.notify("%s, %s, %s" %  (str(func), str(args), str(kwargs)))
          #OSA.notify("tryprocess: " + str(e))
          #pyperclip.copy(str(e))
          return self

      def sp(self, x):
        time.sleep(x)
        return self

      for k,v in locals().items():
        try:    bind(wd, k, v)
        except: pass
      [wd.set_window_index(window_index[0],window_index[1],window_index[2],window_index[3]),setattr(wd,"zoom_level_idx",GLOBAL_BROWSER_PAGEGOT_ZOOM_LEVEL)]if(window_index!=None and type(window_index)is(list))else(setattr(wd,"zoom_level_idx",window_index))if(window_index!=None and type(window_index)is(int))else(setattr(wd,"zoom_level_idx",GLOBAL_BROWSER_PAGEGOT_ZOOM_LEVEL))
      # :tmp bricks:
      #if window_index and type(window_index) is list:
      #  wd.set_window_index(window_index[0],window_index[1],window_index[2],window_index[3])
      #  wd.zoom_level_idx = GLOBAL_BROWSER_PAGEGOT_ZOOM_LEVEL
      #elif window_index and type(window_index) is int:
      #  wd.zoom_level_idx = window_index
      #else:
      #  wd.zoom_level_idx = GLOBAL_BROWSER_PAGEGOT_ZOOM_LEVEL
      def p(self,*args,**kwargs):
        distinct_print(*args,**kwargs)
        return self
      bind3(wd,p)
      def get_element_attributes(self, element):
        attrs = self.execute_script('var items = {}; for (index = 0; index < arguments[0].attributes.length; ++index) { items[arguments[0].attributes[index].name] = arguments[0].attributes[index].value }; return items;', element)
        return binded_list(attrs)(webdriver = self)
      bind3(wd, get_element_attributes)
      wd.execute_script1 = wd.execute_script
      # :tmp bricks:
      # def execute_script(self, script):
      #   return [self.execute_script1(script), self][1]
      # bind3(self, execute_script) # you can return a string with this. so, don't bind
      wd.es = wd.execute_script
      wd.refresh1 = wd.refresh
      def refresh(self):
        try:
          self.refresh1()
          self.zoom_level(level=self.zoom_level_idx)
        except Exception as e:
          e
          # timeout
          self.ftn("body").send_keys(Keys.ESCAPE)
        return self
      bind3(wd, refresh)
      wd.get1 = wd.get
      wd
      wd.delete_all_cookies1 = wd.delete_all_cookies
      delete_all_cookies = lambda self: [self.delete_all_cookies1(), self][1]
      bind3(wd, delete_all_cookies)
      def dc(self):
        self.switch_to_default_content()
        return self
      bind3(wd, dc)
      def frame(self, x):
        self.switch_to_frame(x)
        return self
      bind3(wd, frame)
      wd.switch_to_frame1 = wd.switch_to_frame
      def switch_to_frame(self, x):
        self.switch_to_frame1(x)
        return self
      wd.batterypack = []
      wd.imko_on = False
      wd.SHADOW = SHADOW
      for i in wd.Keys.__dict__:
        if not i.startswith("_"):
          setattr(wd, i, eval("""lambda element: element.send_keys("%s")""" %(Keys.__dict__[i])) )
      def get(self, url, timeout = GLOBAL_BROWSER_GET_PAGE_WAIT_TIME, **kwargs):
        """
        if self.current_url == url:
          tryprocess(lambda: self.ftn("body").send_keys(Keys.ESCAPE))
          self.refresh()
          return self
        """
        # Proc return so not load page twice
        if(0==url.startswith("http")): url="https://%s"%url
        try:
          self.set_page_load_timeout(timeout)
          # [may not require] self.set_page_load_timeout(timeout) # so also have to deset it or else every get 
          start_time = datetime.now()
          get_url_process = multiprocessing_process(lambda: self.get1(url))
          # A. Get the url, do not wait.
          # B. Start a sleep checker that terminates and ends.
          # C. 
          # timeout_checker = multiprocessing_process(lambda: [time.sleep(timeout), get_url_process.terminate(), self.ftn("body").send_keys(self.Keys.ESCAPE)])
          while True:
            print("running while true anyways")
            if get_url_process.is_alive() == True and ((datetime.now()-start_time).seconds < timeout):
              time.sleep(0.25)
              None
              print(":A", (datetime.now()-start_time).seconds)
            elif get_url_process.is_alive() == True and ((datetime.now()-start_time).seconds >= timeout):
              time.sleep(0.25)
              redprint("Terminating")
              get_url_process.terminate()
              redprint("get url process status: %s" % get_url_process.is_alive())
              redprint("sending keys")
              self.ftn("body").send_keys(Keys.ESCAPE)
              redprint("sent keys")
              print(":B", (datetime.now()-start_time).seconds)
            elif get_url_process.is_alive() == False and ((datetime.now()-start_time).seconds < timeout):
              time.sleep(0.25)
              None
              break
              print(":C", (datetime.now()-start_time).seconds)
            elif get_url_process.is_alive() == False and ((datetime.now()-start_time).seconds >= timeout):
              time.sleep(0.25)
              None
              break
              print(":D", (datetime.now()-start_time).seconds)
        except Exception as e:
          #redprint("[page_stop timeout][%s]"%e)
          redprint("pageload escape")
          while True:
            if 0 == tryprocess(lambda: self.ftn("body").send_keys(Keys.ESCAPE)):
              self.pagestop_timeout()
              return self.get(url, timeout=timeout, **kwargs)

        time.sleep(GLOBAL_BROWSER_PAGEGOT_WAIT_TIME)
        self.zoom_level(level = self.zoom_level_idx)

        # add image_compare_image here just to ensure pagegot rules
        # if self.imko_checker == True:
        #  self.imko(part = kwargs.get("imko_part", 0))
        
        return self
      globalise(wd,"ss_v")
      bind3(wd, get)
      if "ch" in profile:
        wd.delete_all_cookies()
      if GLOBAL_BROWSER_REQUIRE_SPEEDTEST == True:
        speedtest.result()
      return wd
  class Browser(Bowser):
    ""
  class DecisionTree(object):
    def init(self):
      if hasattr(self, 'functions_sorted'):
        self.functions = [getattr(self, i) for i in self.functions_sorted]
        return
      self.functions = []
      for i in dir(self):
        v = getattr(self, i)
        from types import MethodType,ModuleType,FunctionType
        if type(v) is MethodType and '__' not in i and i not in ['exec', 'show', 'run', 'init']:
          self.functions.append(i)
      self.functions = sorted(self.functions)
      self.functions = [getattr(self, i) for i in self.functions]
    def exec(self, command):
      command = eval(command)
      for i in dir(self):
        try: locals().update(getattr(self,i).__globals__)
        except: pass
      for i in sorted(locals()):
        print(i)
      import pyperclip
      pyperclip.copy(command)
      exec(command)
    def show(self):
      print('\n'*2)
      print('='*42)
      for idx, i in zip([i for i in range(1000) if i <= 12 or i >= 14], self.functions, ):
        if i.__name__ != "<lambda>": print("%s. %s"%(idx, i.__name__))
        else:                        print("%s. %s"%(idx, get_lambda_name(i)))

    def run(self):
      self.init()
      while True:
        try:
          self.show()
          now_what = input("\nNow what?\n: ")
          if now_what == 'q':
            print("QUITTING")
            return
          args = now_what
          if args[:4] == 'exec':
            self.exec(args[4:])
            continue
          args = now_what.split(' ')
          func_idx = int(args.pop(0))
          func = dict(zip([i for i in range(1000) if i <= 12 or i >= 14], self.functions, ))[func_idx]
          if len(args) == 0:
            call = func.__call__()
          elif len(args) > 0:
            call = func.__call__(*args)
          if call != None:
            return call
        except Exception as e:
          print("There was an error: %s"%e)
  class CH:
    def __call__(self, p, shop=None):
      shop = or_list(lambda:Shop()(Get(Product,id=p.id).shop),lambda:Shop()(shop))
      collection = None
      if(0==len([i for i in apilimitcall(lambda:shop.shopify.CustomCollection.find(title=p.product_type)) if i.title==p.product_type])):
        (shop.shopify.CustomCollection(dict(OrderedDict([ ["title",p.product_type],  ["body_html", ""],  ["image",{"src":p.image.src,  "alt":p.product_type }],  ["published",True],  ["sort_order","manual"],  ["published_scope","global"],    ]))).save())
        collection = (apilimitcall(lambda:[i for i in shop.shopify.CustomCollection.find(title=p.product_type) if i.title == p.product_type][0]))
      else:
        collection = (apilimitcall(lambda:[i for i in shop.shopify.CustomCollection.find(title=p.product_type) if i.title == p.product_type][0]))
      apilimitcall(lambda:shop.shopify.Collect({"position":0,"collection_id":collection.id,"product_id":p.id,}).save())
    def mcc(self, shop, title):
      shop = Shop()(shop)
      collection = [(CH().mcc(shop.shop_abbreviation,title))if(False==(shop.shopify.CustomCollection(dict(OrderedDict([ ["title",title],  ["body_html", ""],  ["image",None],  ["published",True],  ["sort_order","manual"],  ["published_scope","global"],    ]))).save()))else(),(shop.shopify.CustomCollection.find(title=title)[0])][1]if(0==len([i for i in shop.shopify.CustomCollection.find(title=title) if i.title==title]))else(shop.shopify.CustomCollection.find(title=title)[0])
    def create_collect(self,shop,product=None,handle=None,position=None,):
      product=shop.shopify.Product.find(handle=handle)[0]if(product==None)else(product)
      try:
        0/shop.shopify.Collect({
        "collection_id":shop.shopify.CustomCollection.find(title=product.product_type)[0].id  ,  
        "position":min([max([len(shop.shopify.CustomCollection.find(title=product.product_type)[0].products())/2,len(shop.shopify.CustomCollection.find(title=product.product_type)[0].products())]),30])  if(None==position)else(position),  
        "product_id":product.id  ,  
        }).save()
      except Exception as e:
        redprint(e)
        redprint("MAJOR ERROR: COLLECT NOT SAVING... CHECK FOR IF THIS OCCURS")
    def remove(self,product,product_type):
      shop = Shop()(product.shop)
      product = product.p()
      l = shop.shopify.CustomCollection.find(title=Get(Product,id=product.id).product_type)
      l = [i for i in l if i.title == product_type][0]
      product.product_type = product_type
      product.save()
      l.remove_product(product)
      CH()(product)
      Update(Get(Product,id=product.id),product_type=product_type)
    def whole_collection_resort(self,shop):
      if type(shop) == str:shop = Shop()(shop)
      products = getshopifyproducts(shop.shop_abbreviation)
      product_types = sorted(set(key("product_type",products)))
      collections = shop.shopify.CustomCollection.find(status="any",limit=250)
      for i in product_types:
        product_type = i
        print(product_type)
        collection_ = [i for i in collections if i.title == product_type]
        print(collection_)
        try:
          collection_ = collection_[0]
        except:
          print("could not find one")
          continue
        products_ = [i for i in products if i.product_type == product_type]
        coll_prods = shop.pfind(collection_id=collection_.id,limit=250)
        for j in products_:
          if j not in coll_prods:
            product_to_add = j
            # collection_.add_product(product_to_add)
            CH()(product_to_add,shop.shop_abbreviation)
            print("adding one product %s to %s"%(j.product_type,product_type))
            time.sleep(0.5)
        coll_prods = shop.pfind(collection_id=collection_.id,limit=250)
        for j in coll_prods:
          if j.product_type != product_type:
            product_to_remove = j
            collection_.remove_product(product_to_remove)
            print("removing one product %s from %s"%(j.product_type,product_type))
            time.sleep(0.5)

      total_product_count = 0
      for i in collections:
        coll_prods = shop.pfind(collection_id=i.id,limit=250)
        total_product_count = total_product_count + len(coll_prods)
        assert len(set(sud("product_type",coll_prods))) == 1
        assert list(set(sud("product_type",coll_prods)))[0] == i.title
        len_products = len([j for j in products if j.product_type == i.title])
        assert len_products == len(coll_prods)
        print("%s products for %s, %s in collection"%(len_products,i.title,len(coll_prods)))
      assert total_product_count == len(products)
      print("%s total product count for %s products"%(total_product_count,len(products)))
    def assign_plus_size_tags(self):
      for i in All(Product):
        L=set(flatten(keymulti(["option1","option2","option3"],i.variants),1))
        if "3XL" in L:
          print(L)
          i.product_tags = add_tag(i.product_tags,"Plus Size")
          print(i.product_tags)
          i.save()
          Q=Shop()(i.shop).pfind(id_=i.id)
          Q.tags=i.product_tags
          Q.save()
    def get_compare_at_price(self,new_price):
      multiplier = 0.01 * random.randrange(150, 220)
      compare_at_price = multiplier * new_price
      compare_at_price = int(compare_at_price)
      compare_at_price = compare_at_price - 0.05
      return compare_at_price
    def free_plus_ship(self,product_id):
      product = None
      if(Product==type(product_id)): 1
      else: product = Product.objects.get(id=product_id)
      shop = Shop()( product.shop)
      shop
      shop
      product = apilimitcall(lambda:shop.shopify.Product.find(id_=product_id))
      for variant in product.variants:
        price = float(variant.price)
        import math
        variant.grams = math.ceil(price/10) * 100
        variant.weight = 0.1
        variant.compare_at_price = ((variant.weight*10)*9.95) * (random.randrange(14,18)/10)
        variant.price = 0.00
        redprint("variant weight: %s" % variant.weight)
        redprint("variant compare_at_price: %s" % variant.compare_at_price)
        redprint("variant price: %s" % variant.price)
        print("")
      varsave(product)
    def adjust_weights(self,shop):
      try: shop = Shop()(shop)
      except: pass
      products = getshopifyproducts(shop)
      for i in products:
        for j in i.variants:
          weight_unit = "kg"
          weight = None
          price = None
          price = float(j.price)
          weight = float(j.weight)

          if j.weight_unit == "kg" and price != 0.0 and weight == 0:
            None
          else:
            if price == 0.0:
              weight = 0.1
            else:
              weight = 0.0

            j.weight = weight
            j.price = price
            j.weight_unit = weight_unit
            j.save()
            print("[%s][%s][%s][%s][%s]"%(j.weight_unit, j.weight, j.price, j.title, i.id))
            time.sleep(0.5)
    def price_change(self,old_price,shop):
      old_price = round(old_price,2)
      if "%s_price_list"%(shop) in key("w",All(ExecutableText)):
        price_list = ExecutableText().export("%s_price_list"%(shop))
        if old_price not in price_list:
          return (int(old_price * 1.7) - 0.05)
        else:
          return price_list[old_price]
      else:
        if len(Filter(PriceChange,shop=shop)): return (old_price*2) - 0.05
        x = PriceChange().price_change(old_price,shop)
        return x
      return
      new_price = 0
      if 0 <= old_price < 5:
        new_price = old_price + 10
      elif 5 <= old_price < 10:
        new_price = old_price + 8
      elif 10 <= old_price < 15:
        new_price = old_price * 2
      elif 15 <= old_price < 20:
        new_price = old_price * 2
      elif 20 <= old_price < 40:
        new_price = old_price * 2
      elif 40 <= old_price < 60:
        new_price = old_price * 1.8
      elif 60 <= old_price < 80:
        new_price = old_price * 1.65
      elif 80 <= old_price < 100:
        new_price = old_price * 1.6
      elif 100 <= old_price < 1000:
        new_price = old_price * 1.59
      new_price = int(new_price)
      new_price = new_price - 0.05
      print("old price: %s, new price: %s" % (old_price, new_price))
      if new_price <= 14 and new_price >= 10 and old_price <= 7:
        new_price = 9.95

      return new_price
    def reset_weight_on_priced_product(self,product):
      if type(product) is Product:
        product = Shop()(product.shop).shopify.Product.find(id_=product.id)
      changed = False
      for v in product.variants:
        if float(v.price) != 0 and float(v.weight) != 0:
          v.weight = 0
          changed = True
          distinct_print("[reset_weight_on_priced_product][changed = True] [%s]"%product.id)
        if float(v.price) == 0 and float(v.weight) == 0:
          os.system("touch ~/%s_v_price_and_v_weight==0____vendor_%s"%(product.id,product.vendor))
      if changed == True: product.save()
  class Chatter:
    def get_texts(self):
      thoughts = (thought for i in range(500))
      for i in thoughts:
        if talking_about_programming_for_timeframe_until_february_7th_2019(i):
          dont_talk()
  class CommandReceiver:
    def __init__(self):
      # 'email = CommandEmail()()\nemailer = Emailer().set_services_initiate_2(email.email)\nmsgs = emailer.set_messages(10)\nx = sudby(lambda i:"UNREAD" in i.labelIds,filter(msgs,subject="command",sender=email.receiving_email))\nnew = x[-1]\ncommand,data="twirl1",SOUP(new.hidden_message_3.decode()).text\ncommands = {"twirl1":lambda x:([setattr(g,"Z",x.strip()),pool(lambda:tp(lambda:Product().add_product(caption=x.split("\\n")[1],url=x.split("\\n")[0]),ep=1))])}\ncommands[command](data)\n'
      posts = get_feed()
      commands = {
                  "postit":lambda x:([setattr(g,"Z","twirl1: caption"),pool(lambda:tp(lambda:Product().add_product(post_caption=x.split("\n",1)[1],url=x.split("\n")[0]),ep=1))]),
                  "changeshop":lambda x:Update(Muta()(),store_abbre=x.split(",")[0],page=x.split(",")[1])
                  }
      posts = sudby(lambda i:str(i.get("message")).split("\n")[0] in commands.keys(),tcer(posts))
      lmap(lambda i:tp(lambda:FacebookNewsFeedPosts().add(created_time=Date().parse_date(i["created_time"],localize_timezone=True),message=i["message"])),posts)
      if not Filter(FacebookNewsFeedPosts,posted=0): return
      new = list(Filter(FacebookNewsFeedPosts,posted=0))[0]
      command,data = new.message.split("\n")[0],new.message.split("\n",1)[1]
      commands[command](data)
      Update(list(Filter(FacebookNewsFeedPosts,posted=0))[0],posted=1)
  class CSV(DecisionTree):
    exec("from csv import *")
    def DictRead(self, fn, fields=None, delimiter='\t'):
      import codecs
      if not fields:
        with open(fn,'r') as f:
          try: fields = list(csv.reader(f,delimiter=delimiter))[0]
          except: fields = list(csv.DictReader(codecs.open(fn, 'rU', 'utf-16', errors='ignore'), dialect='excel', delimiter=delimiter))[0]
      with open(fn,'r') as f:
        try: pay = list(csv.DictReader(f,delimiter=delimiter))
        except: pay = list(csv.DictReader(codecs.open(fn, 'rU', 'utf-16', errors='ignore'), dialect='excel', delimiter=delimiter))
        pay= pay if not fields else \
              [{a:b for a,b in _dict.items() if a in fields} for _dict in pay]
        return pay
    def DictReadWithDelimiterGuess(self, fn, fields=None):
      A=flatten(lmap(list,keycall("values",CSV().DictRead(fn,delimiter="\t"))),1)
      B=flatten(lmap(list,keycall("values",CSV().DictRead(fn,delimiter=","))),1)
      delimiter = 0
      if len(B)>=len(A):
        delimiter = ","
      else:
        delimiter = "\t"
      return CSV().DictRead(fn, fields=fields, delimiter = delimiter)
    def DictWriteWithHeaders(self, fn, _dictlist, headers, delimiter='\t'):
      with open(fn, 'w', newline='\n') as csvfile:
        writer = csv.writer(csvfile, delimiter=delimiter)
        writer.writerow(headers)
        for row in _dictlist:
          targetrow = []
          for key in headers:
            try:targetrow.append(row[key])
            except:targetrow.append(getattr(row, key))
          writer.writerow(targetrow)
    def DictWrite(self, fn, _dictlist, delimiter = '\t'):
      with open(fn, 'w') as f:
        import csv
        f=csv.DictWriter(f = f, fieldnames=_dictlist[0].keys(), delimiter=delimiter)
        f.writeheader()
        f.writerows(_dictlist)
    def DictAppend(self, fn, _dictlist, delimiter = '\t'):
      with open(fn, 'a') as f:
        import csv
        f=csv.DictWriter(f = f, fieldnames=_dictlist[0].keys(), delimiter=delimiter)
        f.writeheader()
        f.writerows(_dictlist)
    def pick_data(self, data, fields, returntype="OrderedDict"): 
      payload = []
      for i in data:
        d = OrderedDict() if returntype == "OrderedDict" else AttrDict()
        for j in fields:
          try: d[j] = getattr(i, j, None) # prefer pick_data from an attritem     .  
          except: d[j] = i.get(j, None) # 2ndprefer pick_data from a  dictionary
        payload.append(d)
      return payload
    def transpose_csv(self,fn,delimiter='\t'):
      a = zip(*csv.reader(open(fn, "r"),delimiter=delimiter))
      csv.writer(open(fn, "w")).writerows(a)
    def excel_open(self, fn):
      system('/Applications/Microsoft\ Excel_2016.app/Contents/MacOS/Microsoft\ Excel %s &'%os.path.abspath(fn))
    def xlsx_to_csv(self, workbook, sheet, as_dict=True):
      import csv
      import openpyxl
      wb = openpyxl.load_workbook(workbook)
      ws = wb[sheet]
      data = [key("value",i) for i in list(ws.rows)]
      if as_dict == False:
        return data
      if as_dict == True:
        dictlist = [AttrDict(dict(zip(data[0],i))) for i in data[1:]]
        return dictlist
    def dictlist_to_xlsx(self, dictlist, headers, workbook, sheet):
      CSV().DictWriteWithHeaders(fn="tmp.csv", _dictlist = dictlist, headers = headers)
      CSV().csv_to_xlsx(infile="tmp.csv", workbook=workbook, sheet=sheet, rm_infile = True)
    def xlsx_column_to_images(self, workbook, sheet, column):
      import openpyxl
      column = int(column) # in case this is being run via class DecisionTree
      wb = openpyxl.load_workbook(workbook)
      ws = wb[sheet]
      count_rows = len(list(ws.rows))
      for i in range(count_rows):
        ws.row_dimensions[i].height = 100


      column_letter = list(ws.columns)[column - 1][0].coordinate[0]
      print(column_letter)
      ws.column_dimensions[column_letter].width = 100


      column = list(ws.columns)[column - 1] # Column B -> Column 2 -> list(ws.columns)[1] ; 2->1
      for cell in column[1:20]:
        value = cell.value
        cell.value = "" # Keeping the URL inside widens the row.
        cyanprint("value: %s" % value)
        if value == None:
          continue
        if cell.row == 1:
          continue

        image_path = None
        if "https://" in value:
          redprint("Downloading %s" % value)
          try:image_path = Images().download(value, )
          except Exception as e : print("%s,%s"%(image_path,e)); continue
          #while os.path.exists(image_path) == False: [redprint("waiting for image"), time.sleep(1)]
        else:
          redprint("image path = value %s" % value)
          image_path = value

        if os.path.exists(image_path) == False:
          redprint("[Does not exist][%s]"%image_path); continue
        img = openpyxl.drawing.image.Image(image_path)
        img.height = 100
        img.width = 100
        ws.add_image(img, cell.coordinate)

        #column_letter = cell.coordinate[0]
      os.system("rm %s/tmp.jpg &>/dev/null"%os.getcwd())
      wb.save(workbook)
    def csv_to_xlsx(self, infile, workbook, sheet, rm_infile = False, delimiter="\t"):
      print("""[Solved] One limitation of csv_to_xlsx currently is that it fills in x&y based on your infile's data size. if it's overwriting a smaller.""")
      import csv
      import openpyxl
      assert openpyxl.__version__ == "2.5.4"
      try:
        wb = openpyxl.load_workbook(workbook)
      except:
        wb = openpyxl.Workbook()
      try:
        ws = wb[sheet]
      except Exception as e:
        print(e, "creating sheet")
        ws = wb.create_sheet(sheet)
        tp(lambda:wb.remove_sheet(wb.get_sheet_by_name("Sheet")))
      ### first, clear all data so the event of data smaller leaving duplicates does not occur
      for i in list(ws.rows):
        for j in i:
          j.value = None
      with open(infile,"r") as f:
        data = list(csv.reader(f, delimiter=delimiter))
        for idx, i in enumerate(data):
          for idx2, j in enumerate(i):
            # i think if you make it a thread, the workbook may not save before all threads finish, and there may be overlap
            try: ws.cell(row=idx+1, column=idx2+1).value = j 
            except: ws.cell(row=idx+1, column=idx2+1).value = "ERROR_VALUE"
      wb.save(workbook)
      if rm_infile:
        os.remove(infile)
    @staticmethod
    def csvprint(data, width=1, colnames=None, spacer="|"):
      import django
      if type(data) == django.db.models.query.QuerySet:
        data = [OrderedDict([[a,str(getattr(x,a))] for a in list(sorted(x.__dict__.keys())) if not a.startswith("_")]) for x in data]

      if len(data) == 0:
        redprint("[no data][exitting]")
        return

      if colnames:
        payload = []
        for i in data:
          tmp = OrderedDict()
          for j in colnames:
            try: tmp[j] = getattr(i, j)
            except: tmp[j] = i[j]
          payload.append(tmp)
        data = payload
      if not colnames:
        colnames = data[0].keys()
      column_dict = dict(zip(colnames, [i.upper() for i in colnames]))
      data.insert(0, column_dict)
      text = []
      for i in colnames:
        max_len = max(listmap(len, listmap(str, key(data, key=i))))
        for idx, j in enumerate(data):
          try: addition = str(j[i])
          except: addition = str(getattr(j, i))
          number_of_spaces = max_len - len(addition)
          addition += (spacer*(number_of_spaces+width))
          try: text[idx] += addition
          except: text.append(addition)
      data.pop(0)
      distinct_print('\n'.join(text))
    def get_workbook_sheet_styles(self, workbook_path):
      import _pickle
      import openpyxl
      workbook_sheet_styles = {}
      wb = openpyxl.load_workbook(workbook_path)
      sheetnames = wb.sheetnames
      sheetnames.pop(sheetnames.index("Sheet"))
      for sheetname in sheetnames:
        ws = wb[sheetname]
        columns = list(ws.columns)
        column_names = [i[0].value for i in columns]
        sheet_styles = {}
        for column_name, column in zip(column_names,columns):
          sheet_styles[column_name] = {
          "fill": _pickle.dumps(copy.copy(column[1].fill)),
          "font": _pickle.dumps(copy.copy(column[1].font)),
          "width": _pickle.dumps(copy.copy(column[1].parent.column_dimensions[column[1].column].width)),
          "alignment": _pickle.dumps(copy.copy(column[1].alignment)),
          "border": _pickle.dumps(copy.copy(column[1].border))
          }
        workbook_sheet_styles[sheetname] = sheet_styles
      _pickle.dump(workbook_sheet_styles, open(homepath("~/tavern/tavern/bag/.workbook_sheet_styles.pkl"), "wb"))
      return workbook_sheet_styles
    def xlsx_filter(self, ws):
      import openpyxl
      maxcolumnletter = openpyxl.utils.get_column_letter(ws.max_column)
      ws.auto_filter.ref = 'A1:'+maxcolumnletter+str(len(ws['A']))
    def xlsx_cell(self, cell, fgColor="000000", font_color="000000", column_width=None, font_size=5, font_name="Calibri", shrink_to_fit=True, vertical="top", border_style="hair", number_format="0.00"):
      import openpyxl
      import decimal
      [setattr(cell,"fill",openpyxl.styles.PatternFill(fgColor=fgColor, fill_type="solid"))     ,     setattr(cell, "font", openpyxl.styles.Font(size=font_size,name=font_name,color=font_color))     ,    setattr(cell.parent.column_dimensions[cell.column],"width",column_width) if column_width != None else None    ,     setattr(cell, "alignment", openpyxl.styles.Alignment(shrink_to_fit=shrink_to_fit,vertical=vertical,horizontal="general",wrap_text=False,indent=0,text_rotation=0))     ,     setattr(cell,"border",openpyxl.styles.borders.Border(left=openpyxl.styles.borders.Side(style=border_style),right=openpyxl.styles.borders.Side(style=border_style),top=openpyxl.styles.borders.Side(style=border_style),bottom=openpyxl.styles.borders.Side(style=border_style)))    ,    setattr(cell, "number_format", "0.00")]# if 1 == tryprocess(lambda i: 1/0 if decimal.Decimal(str(i)).as_tuple().exponent.__abs__() >= 5 else 1, i=cell.value) else 1    ]
  class Date(object):
    def __init__(self, _str=None, b=None):
      if _str is None: _str = datetime.now()
      self.datestr = self.autodate(_str)
      self.dateobj = self.autodateobj(_str).replace(tzinfo=None)
      self.datetime = datetime
      self.now = datetime.now
    def myTimedelta(self, years=0, days=0, hours=0, minutes=0, seconds=0, ):
      seconds = seconds
      seconds = seconds + (minutes*60)
      seconds = seconds + (hours*3600)
      seconds = seconds + (days*86400)
      seconds = seconds + (years*31536000)
      seconds = seconds + (86400*len([i for i in list(range(datetime.now().date().year,datetime.now().date().year+29)) if i%4==0]))
      return timedelta(seconds=seconds)
    def autodate(self, _str):
      _str = _str.split(' ')[0] if type(_str) == str and ' '  in _str else _str
      try:_str = datetime.strftime(_str,'%Y-%m-%d') if type(_str) != str else _str
      except: _str = datetime.strftime(_str.dateobj,'%Y-%m-%d') if type(_str) != str else _str
      import re
      m,d,Y='06','06','2006'
      Ymd = re.findall(r'(....[/:-].*[/:-].*)',_str)
      mdY = re.findall(r'(.*[/:-].*[:/-]....)',_str)
      if len(Ymd) > 0:
        Ymd = re.sub(r'([:/-])','#',Ymd[0])
        Y,m,d = Ymd.split('#')
      elif len(mdY) > 0:
        mdY = re.sub(r'([:/-])','#',mdY[0])
        m,d,Y = mdY.split('#')
      try:
        if len(m) == 1:
          m = '0%s' % m
        if len(d) == 1:
          d = '0%s' % d
      except Exception as e:
          print(e)
      return '-'.join([Y,m,d])
    def autodateobj(self, _str):
      return datetime.strptime(self.autodate(_str),'%Y-%m-%d')
    def strftime(self, srftime_string):
      return self.dateobj.strftime(srftime_string)
    def __repr__(self):
      return self.datestr
    def __sub__(self, _str):
      if type(_str) == int:
        return Date(self.dateobj - timedelta(_str))
      else:
        return (self.dateobj - Date(_str).dateobj).days
    def __add__(self, _str):
      if type(_str) == int:
        return Date(self.dateobj + timedelta(_str))
    def __lt__(self, _str):
      return self.dateobj < Date(_str).dateobj
    def __gt__(self, _str):
      return self.dateobj > Date(_str).dateobj
    def __eq__(self, _str):
      if tryprocess(lambda:Date(_str)) == 0:
        return False
      return self.dateobj == Date(_str).dateobj
    def __call__(self):
      return self.dateobj
    def datelist(self, x):
      return [Date(datetime.today() - timedelta(i*1)) for i in sorted(range(x),reverse=True)]
    def dt(self=None, x=0, strf='%Y-%m-%d'):
      return (datetime.now() + timedelta(x)).strftime(strf)
    @staticmethod
    def myDate():
      x = datetime.now()
      y = datetime.now().year
      d1_of_year = datetime(y, 1, 1)
      z = (datetime.today() - d1_of_year).days
      return z
    @staticmethod
    def myDatetimenow(dateobj = None, round_count = 4):
      #print("hello, myDatetimenow is running now")
      dateobj = datetime.now() if dateobj == None else dateobj.replace(tzinfo=None)                                                                                           
      dateobj_year_str = str(dateobj.year)[-2:]
      a = int(dateobj_year_str) * 1000                                                                            
      mydatetimenow_inside_the_day =  ((dateobj.hour * 60 * 60) + (dateobj.minute*60) + dateobj.second)/(24*60*60)
      mydatetimenow_from_yearstart = (dateobj - datetime(dateobj.year-1, 12, 31)).days
      mydatetimenow = a + mydatetimenow_inside_the_day + mydatetimenow_from_yearstart
      mydatetimenow = round(mydatetimenow, round_count) #
      #print("%s->%s"%(dateobj,mydatetimenow))
      return mydatetimenow
    @staticmethod
    def myUndatetimenow(x):
      year = int(x/1000) + 2000
      datetime_ = datetime(year,1,1)
      seconds = (x - int(x)) * (24*60*60)
      days = int(x - int(x/1000) * 1000)
      return datetime_+timedelta(days=days-1, seconds=seconds)
    def Now(self):
      return datetime.now()
    @staticmethod
    def date(self):
      return self.dateobj
    def str(self):
      return self.datestr
    def get_month_range(self,x,year):
      y = {1:[Date("01/01/%s"%(year)),Date("01/31/%s"%(year))],2:[Date("02/01/%s"%(year)),Date("02/29/%s"%(year))if(year%4 == 0)else(Date("02/28/%s"%(year)))],3:[Date("03/01/%s"%(year)),Date("03/31/%s"%(year))],4:[Date("04/01/%s"%(year)),Date("04/30/%s"%(year))],5:[Date("05/01/%s"%(year)),Date("05/31/%s"%(year))],6:[Date("06/01/%s"%(year)),Date("06/30/%s"%(year))],7:[Date("07/01/%s"%(year)),Date("07/31/%s"%(year))],8:[Date("08/01/%s"%(year)),Date("08/31/%s"%(year))],9:[Date("09/01/%s"%(year)),Date("09/30/%s"%(year))],10:[Date("10/01/%s"%(year)),Date("10/31/%s"%(year))],11:[Date("11/01/%s"%(year)),Date("11/30/%s"%(year))],12:[Date("12/01/%s"%(year)),Date("12/31/%s"%(year))]}
      return y[datetime.strptime(x,"%B").month]
    @staticmethod
    def friendlydate(x, only_date=False,**kwargs):
      return swamp([lambda:datetime.strftime(x,"%A, %b %d"),
                     lambda:datetime.strftime(x,"%A, %b %d'%y"),
                     lambda:datetime.strftime(x,("%A, %b %d'%y at %I:%M %p")),
                     lambda:datetime.strftime(x,("%A, %b %d'%y at %I:%M:%S %p")),
                     lambda:datetime.strftime(x,("%A, %b %d' at %I:%M:%S %p")),
                     lambda:datetime.strftime(x,("%A, %b %d at %I:%M %p")),
                     ],
                    [lambda:only_date==True and "with_year" not in kwargs,
                    lambda:only_date==True and "with_year" in kwargs,
                    lambda:only_date==False and "with_year" in kwargs and "seconds" not in kwargs ,
                    lambda:only_date==False and "with_year" in kwargs and "seconds" in kwargs,
                    lambda:only_date==False and "with_year" not in kwargs and "seconds" in kwargs,
                    lambda:only_date==False and "with_year" not in kwargs and "seconds" not in kwargs ,],)
      """
      assert Date().friendlydate(datetime(2019,1,21,1,11)) == 'Monday, Jan 21 at 01:11 AM'
      assert Date().friendlydate(datetime(2019,1,21,1,11),with_year=True) == "Monday, Jan 21'19 at 01:11 AM"
      assert Date().friendlydate(datetime(2019,1,21,1,11),seconds=True) == "Monday, Jan 21' at 01:11:00 AM"
      assert Date().friendlydate(datetime(2019,1,21,1,11),seconds=True,with_year=True) == "Monday, Jan 21'19 at 01:11:00 AM"
      assert Date().friendlydate(datetime(2019,1,21,1,11),only_date=True) == 'Monday, Jan 21'
      assert Date().friendlydate(datetime(2019,1,21,1,11),only_date=True,with_year=True) == "Monday, Jan 21'19"
      """
    def seconds_to_text(self,x,days=True,hours=True,minutes=True,seconds=True):
      x = int(x)
      days_ = None
      days_r = None
      if days:
        q = 24*60*60
        days_ = int(x/q)
        days_r = x%q
        x = days_r
      hours_ = None
      hours_r = None
      if hours:
        q = 60*60
        hours_ = int(x/q)
        hours_r = x%q
        x = hours_r
      minutes_ = None
      minutes_r = None
      if minutes:
        q = 60
        minutes_ = int(x/q)
        minutes_r = x%q
        x = minutes_r
      seconds_ = None
      seconds_r = None
      if seconds:
        q = 1
        seconds_ = int(x/q)
        seconds_r = x%q
        x = seconds_r
      r = ""
      if days:
        r += "%s Days"%(days_)
        r += ", "
      if hours:
        r += "%s Hours"%(hours_)
        r += ", "
      if minutes:
        r += "%s Minutes"%(minutes_)
        r += ", "
      if seconds:
        r += "%s Seconds"%(seconds_)
        r += ", "
      if r.endswith(", "):
        r = r[:-2]
      return r
    def adjust_mydatetimenow__(self, data, field):
      for x in data:
        i = getattr(x, field)
        if i < 200:
          ii=i
          #b.append(len(str(i)))
          i = str(i)
          d = str(i)[:2]
          if len(i) == 5:
            i = i + "0"
          i = i[2:]
          #print(i)
          dd = (float(d)*1000)+float(i)
          #print(dd)
          setattr(x, field, dd)
          x.save();print("saving %s->%s" %(ii,dd))
        elif i < 10000:
          ii=i
          #print(i)
          d = str(i)[:2]
          i=str(i)
          if len(i) != 7:
            while True:
              i = i+"0"
              if len(i)==7:
                break
          
          i = i[2:]
          dd = (float(d)*1000) + float(i)
          print(dd)


          setattr(x, field, dd)
          x.save();print("saving %s->%s" %(ii,dd))
    @staticmethod
    def pastmonthdays(x):
      from calendar import monthrange
      count = 0
      count += ((datetime.now())- datetime(datetime.now().year,datetime.now().month,1)).days
      year = datetime.now().year
      month = datetime.now().month
      for i in range(x):
        month -= 1
        if month == 0:
          year -= 1
          month = 12
        count += monthrange(year, month)[1]
        print(year, month, count)
        print(count)
        time.sleep(0.2)
      return count
    def parse_date(self,w,remove_tzinfo=True,localize_timezone=False):
      import dateutil.parser
      x = dateutil.parser.parse(w)
      y = x.astimezone()if(localize_timezone==True)else(x)
      z = y.replace(tzinfo=None)if(remove_tzinfo==True)else(y)
      return z
  class DefensiveProgrammingBot:
    @staticmethod
    def defend_DefensiveProgrammingBot(io):
      formats = [io, io==io]
      redprint("""\nio:{}\nio==io:{}""".format(*formats))
      returnable = None
      assert None == returnable
      return returnable
  class Emailer(object):
    def get_credentials(self):
      #os.makedirs(credential_path, exist_ok=True)
      q = "." + "|".join([self.user, "Client_Secret_2", "GSuite"]) + ".json"
      qq = "." + "|".join([self.user, "Client_Secret", "GSuite"]) + ".json"
      store = oauth2client.file.Storage(homepath("~/tavern/tavern/soda/%s"%q))
      print("store: %s" % store)
      if q in key("filename", All(Binarydata)):
        Binarydata().export(q, homepath("~/tavern/tavern/soda/%s"%q))
      try:
        credentials = store.get()
        print("credentials: %s"%credentials)
      except Exception as e:
        print(e)
      if 'credentials' not in locals().keys():
        # the credentials here must be downloaded
        Binarydata().export(qq, homepath("~/tavern/tavern/soda/%s"%(qq)))
        flow = client.flow_from_clientsecrets(homepath("~/tavern/tavern/soda/%s"%(qq)), 'https://mail.google.com/')
        flow.user_agent = 'Gmail API Python Send Email'
        OSA.display_dialog("Your browser will be opened to authenticate credentials for gmail api. Please click OK here, your browser will open a new window. Please sign in, you will see a window that says \"%s wants to access your Google Account\". Please click Allow.\n\nNote: The same process will occur again to authenticate credentials to the google drive api." % (self.user), text_prompt = False, buttons = ["OK"])
        credentials = tools.run_flow(flow, store)
        print('Storing credentials to %s'%homepath("~/tavern/tavern/soda"))
      if not credentials or credentials.invalid:
        # the credentials here must be downloaded
        Binarydata().export(qq, homepath("~/tavern/tavern/soda/%s"%(qq)))
        flow = client.flow_from_clientsecrets(homepath("~/tavern/tavern/soda/%s"%(qq)), 'https://mail.google.com/')
        flow.user_agent = 'Gmail API Python Send Email'
        OSA.display_dialog("Your browser will be opened to authenticate credentials for gmail api. Please click OK here, your browser will open a new window. Please sign in, you will see a window that says \"%s wants to access your Google Account\". Please click Allow." % (self.user), text_prompt = False, buttons = ["OK"])
        credentials = tools.run_flow(flow, store)
        print('Storing credentials to %s'%homepath("~/tavern/tavern/soda"))
      if q not in key("filename", All(Binarydata)):
        os.chdir(homepath("~/tavern/tavern/soda/"))
        Binarydata().update_or_create(q)
      self.credentials = credentials
    def set_service(self):
      http = self.credentials.authorize(httplib2.Http())
      service = discovery.build('gmail', 'v1', http=http)
      self.service = service
    def init(self, user):
      from email.mime.text import MIMEText
      from email.mime.multipart import MIMEMultipart
      from oauth2client.file import Storage
      from oauth2client import client, tools
      from apiclient import discovery
      import oauth2client
      import mimetypes
      import httplib2
      globals().update(locals())


      self.user = user
      #self.credential_path = '%s/%s.json' % (credential_path, user.split('.com')[0])
      #print(self.credential_path)
      try:
        self.__dict__.update(locals())
        self.get_credentials()
        self.set_service()
        self.m = self.service.users().messages()
        self.a = self.service.users().messages().attachments()
        self.t = self.service.users().threads()
        print(self.m,self.a,self.t)
      except:
        if GLOBAL_EMAILER_INITIALIZE_ERROR_MESSAGE:
          OSA.log("Unable to initiate Emailer.",tp=False)
        else:
          return
    def initiate_2(self,user):
      user = "support@steampunkstop.com"
      file = ".%s|Gmail_Client_Secret.pickle"%(user)

      # below commented out
      # from __future__ import print_function
      import pickle
      import os.path
      from googleapiclient.discovery import build
      from google_auth_oauthlib.flow import InstalledAppFlow
      from google.auth.transport.requests import Request
      from email.mime.text import MIMEText
      from email.mime.multipart import MIMEMultipart
      from oauth2client.file import Storage
      from oauth2client import client, tools
      from apiclient import discovery
      import oauth2client
      import mimetypes
      import httplib2
      import base64
      # If modifying these scopes, delete the file token.pickle.
      SCOPES = ['https://mail.google.com/']

      def main():
          """Shows basic usage of the Gmail API.
          Lists the user's Gmail labels.
          """
          creds = None
          # The file token.pickle stores the user's access and refresh tokens, and is
          # created automatically when the authorization flow completes for the first
          # time.
          # Try To Export The File
          tp(lambda:Binarydata().export(file))
          """ Here, use file as the file address """
          if os.path.exists(file):
              """ Here, use file as the file address """
              with open(file, 'rb') as token:
                  creds = pickle.load(token)
          # If there are no (valid) credentials available, let the user log in.
          # if not creds or not creds.valid:
          if not creds:
              """ Here, make sure you have the credentials file. ~/tavern/tavern/credentials.json """
              OSA().log("Here, make sure you have the credentials file. ~/tavern/tavern/credentials.json.")
              shop = OSA().log("Which shop is this for? Enter the shop abbreviation")
              Shop()(shop).GET_GOOGLE_API_PROJECT(user) # saves the credentials.json first and then calls Emailer which will use the credentials.json and save the authenticated pickle file.
              return Emailer().initiate_2(user)
              if creds and creds.expired and creds.refresh_token:
                  creds.refresh(Request())
              else:
                  flow = InstalledAppFlow.from_client_secrets_file(
                      'credentials.json', SCOPES)
                  creds = flow.run_local_server(port=0)
              # Save the credentials for the next run
              """ Here, use file as the file address """
              with open(file, 'wb') as token:
                  pickle.dump(creds, token)
              """ Here, use file as the file address """
              Binarydata().update_or_create(file)

          service = build('gmail', 'v1', credentials=creds)

          # Call the Gmail API
          results = service.users().labels().list(userId='me').execute()
          labels = results.get('labels', [])

          if not labels:
              print('No labels found.')
          else:
              print('Labels:')
              for label in labels:
                  print(label['name'])

          return service
      return main()
    def set_services_initiate_2(self,user):
      service = self.initiate_2(user)
      self.service = service
      self.m = self.service.users().messages()
      self.a = self.service.users().messages().attachments()
      self.t = self.service.users().threads()
      print(self.m,self.a,self.t)
      return self
    def remove_labels(self, id, labels=['UNREAD']):
      return self.m.modify(userId='me', id=id, body={'removeLabelIds':labels}).execute()
    def delete_message(self, id):
      x = self.t.delete(userId='me', id=id).execute()
      blueprint("deleted: %s" % x)
      return x
    def set_messages(self, count = 50):
      messages = []
      original_messages = []
      data = []
      nextpagetoken = None
      idx = 0
      msg_datas = None
      try:
        while True:
          print(nextpagetoken)
          if nextpagetoken is not None:
            msg_datas = self.m.list(userId='me', pageToken=nextpagetoken).execute()
          elif nextpagetoken is None:
            msg_datas = self.m.list(userId='me').execute()
            if msg_datas == {'resultSizeEstimate': 0}:
              self.messages = []
              OSA.notify("No messages")
              return
          print(msg_datas['messages'])
          print("getting more messages... idx: %s" % idx)
          data.extend(msg_datas.pop('messages', []))
          if 'nextPageToken' not in msg_datas.keys():
            break
          else:
            nextpagetoken = msg_datas['nextPageToken']
          idx += 1
          break # works better w/ this ? 
      except Exception as e:
        print("error: %s" % (e))
      print("len data: %s" % len(data))
      

      """ ::: Ticket is removed as of now ::: """
      #existing_threads = [i.id for i in Ticket.objects.all()]
      #data = [i for i in data if i['id'] not in existing_threads]
      print("len new data: %s" % len(data))

      print("len data: %s"% len(data))
      errors = 0
      """
                        count=100
                        """
      data = data[:count]
      true_ids = set()
      messages_in_without = []
      messages_in_without2 = []
      for idx, msg in enumerate(data):
        #@risky to pool api calls.
        try:
          # try:
          #   x = Emit.objects.get(true_id=msg['id'])
          #   redprint("[Emit.objects.get(true_id=msg['id'])]   [Exists] -- ending set more messages  [%s]"%msg['id'])
          #   #return
          # except Exception as e:
          #   redprint("[current message id][%s][not found in Emit.objects.all()][so saving this message as a new Emit], %s"%(msg["id"],e))



          print("getting message %s out of %s" % (idx+1, len(data)))
          initial_data = self.m.get(userId='me',id=msg['id']).execute()
          original_messages.append(initial_data)
          self.original_messages = original_messages
          header_data = initial_data['payload']['headers']
          msg_data   = {}
          msg_data['id'] = initial_data['id']


          msg_data['labelIds'] = initial_data['labelIds']
          # skip any drafts.
          if "DRAFT" in msg_data["labelIds"]:
            redprint("Skipping Draft")
            continue


          if "SENT" in msg_data["labelIds"]:
            msg_data["direction"] = 1
          elif "SENT" not in msg_data["labelIds"]:
            msg_data["direction"] = 0
          try:
            try:
              msg_data['sender'] = keyequals('name', 'Return-Path', header_data)[0]['value']
            except:
              msg_data['sender'] = keyequals('name', 'From', header_data)[0]['value']
            try:
              msg_data['sender'] = re.findall(r'<(.*)>', msg_data['sender'])[0]
            except:
              pass
            try:
              msg_data['sender'] = keyequals('name', 'Reply-To', header_data)[0]['value']
              msg_data['sender'] = re.findall('<(.*?@.*?>)',msg_data['sender'])[0]
              print("found a reply to")
            except:
              pass
            msg_data['receiver'] = keyequals('name', 'To', header_data)[0]['value']
            try:
              msg_data['receiver'] = re.findall(r'<(.*)>', msg_data['receiver'])[0]
            except:
              pass
          except:
            try:
              msg_data['receiver'] = keyequals('name', 'To', header_data)[0]['value']
            except:
              pass

          emailer_name = or_list(lambda:findall(keyequals("name","From",header_data)[0]["value"],"(.*?) <.*?@.*?>")[0],lambda:findall(keyequals("name","From",header_data)[0]["value"],"^.*$")[0])
          msg_data["emailer_name"] = emailer_name

          try:
            msg_data['subject'] = keyequals('name', 'Subject', header_data)[0]['value']
          except:
            print("header data")
            print(header_data)
            msg_data["subject"] = "No subject"
          msg_data['date'] = or_list(lambda:keyequals('name', 'Received', header_data)[-1]['value'].split(';')[-1].strip(),lambda:keyequals("name","Date",header_data)[0]["value"])
          if re.findall(r" \(.*?<.*?@.*?\.com.*?>.*?\)",msg_data["date"]):
            msg_data["date"] = msg_data["date"].replace(re.findall(r" \(.*?<.*?@.*?\.com.*?>.*?\)",msg_data["date"])[0],"")
          if re.findall(r"^from.*?HTTP.*?id .*? ",msg_data["date"]):
            msg_data["date"] = msg_data["date"].replace(re.findall(r"^from.*?HTTP.*?id .*? ",msg_data["date"])[0],"")
          msg_data["date"] = Date().parse_date(msg_data["date"],remove_tzinfo=True,localize_timezone=True)

          try: msg_data['parts'] = initial_data['payload']['parts']
          except: pass
          
          pay = self.m.get(userId='me',id=msg['id'], format='raw').execute()
          pay_2 = self.m.get(userId='me',id=msg['id'], format='full').execute()
          import base64
          message = base64.urlsafe_b64decode(pay['raw'].encode('ASCII')).decode("utf-8", "ignore")
          message_2 = base64.urlsafe_b64decode(pay['raw'].encode('ASCII'))
          message = message

          msg_data["hidden_message"] = message
          msg_data["hidden_message_2"] = message_2
          msg_data["hidden_message_pay_raw"] = pay["raw"]
          try:
            msg_data["hidden_message_3"] = base64.urlsafe_b64decode(pay_2["payload"]["parts"][-1]["body"]["data"])
            msg_data["hidden_message_3"] = (findall(  msg_data["hidden_message_3"].encode(errors="ignore"),r"(?s)<.*>")[0]).encode() if msg_data["hidden_message_3"].encode(errors="ignore").startswith("<") else msg_data["hidden_message_3"]
          except:
            try:
              msg_data["hidden_message_3"] = base64.urlsafe_b64decode(pay_2["payload"]["body"]["data"])
              msg_data["hidden_message_3"] = (findall(  msg_data["hidden_message_3"].encode(errors="ignore"),r"(?s)<.*>")[0]).encode() if msg_data["hidden_message_3"].encode(errors="ignore").startswith("<") else msg_data["hidden_message_3"]
            except:
              try:
                msg_data["hidden_message_3"] = base64.urlsafe_b64decode(pay_2["payload"]["parts"][-1]["parts"][-1]["body"]["data"])
                msg_data["hidden_message_3"] = (findall(  msg_data["hidden_message_3"].encode(errors="ignore"),r"(?s)<.*>")[0]).encode() if msg_data["hidden_message_3"].encode(errors="ignore").startswith("<") else msg_data["hidden_message_3"]
              except:
                try:
                  rf=lmap(lambda i:base64.urlsafe_b64decode(i),findall(json.dumps(pay_2,indent=4),r'"data": ".*?"'))
                  rf=lmap(lambda i:i.decode(errors="ignore"), rf)
                  s=findall(  ("\n\n\n".join(rf)).strip()  ,  "(?s)<.*>" ) [ 0] if(tryprocess(lambda:findall(  ("\n\n\n".join(rf)).strip()  ,  "(?s)<.*>" ) [ 0])==1)else(("\n\n\n".join(rf)).strip())
                  s = s.encode()
                  #hidden_message_3 = SOUP(s).text
                  msg_data["hidden_message_3"] = s
                except:
                  0/0

          #if "Content-Type: text/plain" not in message:
          #  assert False
          if "Content-Type: text/plain" in message:

            content_types = re.findall(r"Content-Type:.*;", message)
            scan_1 = re.findall(r"(?s)Content-Type: text/plain.*", message)[0]

            content_types = re.findall(r"Content-Type:.*;", message)
            scan_2 = None
            if len(content_types) > 1:
              try:scan_2 = re.findall(r"(?s)(Content-Type: text/plain.*)Content-Type", scan_1)[0]
              except: scan_2 = scan_1
            elif len(content_types) == 1:
              scan_2 = scan_1

            print("[tentative] re.sub urls. -- ")
            scan_3 = re.sub(r"(?s)http.*? ","<url>", scan_2)

            print("[morecleans] -- ")
            scan_4 = re.sub(r"[\n]+", "\n", scan_3)

            scan_5 = re.sub(r"(?s)Content-Type.*?\n","",scan_4)
            scan_6 = re.sub(r"(?s)Content-Transfer-Encoding.*?\n","",scan_5)
            scan_7 = re.sub(r"(?s)Mime-Version.*?\n","",scan_6)
            scan_8 = re.sub(r"(?s)Date.*?\n","",scan_7)
            scan_9 = re.sub(r"(?s)\n--.*","",scan_8)
            scan_10 = scan_9.replace("\r", "\n")

            #print(scan_4)
            msg_str = ("Subject: %s\n"%msg_data["subject"]) + scan_10
            #msg_str = msg_str.replace("=", "")
            #msg_str = BeautifulSoup(msg_str, 'lxml').text
            #msg_str = msg_str[msg_str.find('From: '):]
            #for i in range(25):
            #  msg_str = msg_str.replace('\n\n','\n').replace('\r','').replace('\t','').replace(' ',' ').replace(' \n','').replace('\n ','\n')
            msg_data['message'] = msg_str
          def save_message_as_emit(l):
            locals().update(l)

            an_emit = Emit()
            if len(Emit.objects.filter(true_id=msg_data["id"])) == 1:
              emit = Emit.objects.get(true_id=msg_data["id"])
              print("found emit with true id of %s existing.." % msg_data["id"])
            an_emit.direction = msg_data["direction"]
            point_a = None
            point_b = None
            print(json.dumps(msg_data, indent=4))
            if an_emit.direction == 0:
              point_a = msg_data["receiver"]
              point_b = msg_data["sender"]
            elif an_emit.direction == 1:
              #print("direction is 1, receiver is point_b")
              point_a = msg_data["sender"]
              point_b = msg_data["receiver"]
            moment = None
            try: moment = Date().myDatetimenow(        datetime.strptime( re.findall(r"(.*) [+-]", msg_data["date"])[0].split(".")[0], "%a, %d %b %Y %H:%M:%S" )  , round_count = 6) #  """ Out[6]: datetime.datetime(2018, 7, 30, 0, 38, 55)->18210.027025|datetime.datetime(2018, 7, 30, 0, 38, 56)->18210.027037 """
            except Exception as e: redprint("error in setting moment for Emit... %s"%e)  ;   print(msg_data['date'])
            print("moment: %s," % moment)
            true_id = msg_data["id"]
            payload = msg_data["message"]
            print("saving an emit\n")
            #print(json.dumps(an_emit.__dict__, indent=4))
            an_emit.__dict__.update(locals())
            true_ids.add(an_emit.true_id)
            try:
              print("saving an emit..")
              an_emit.save()
            except Exception as e:
              an_emit = Emit.objects.get(true_id=an_emit.true_id)
              None
          #save_message_as_emit(l=locals())

          msg_data.pop('parts', None)
          messages.append(msg_data)
          self.sent_messages = [i for i in messages if i.get("receiver",None)!=None and "SENT" in i["labelIds"]]
          self.messages = [i for i in messages if i.get("receiver",None)!=None and "SENT" not in i["labelIds"]]
          # receiver will default to None if emailer sends email to emailer.(self).{test}
          for i in self.messages:
            i = AttrDict(i)

          #except Exception as e:                                                        # ._. - " (?) "
          #  print(e)                                                                    # /> - > . <
          #  print("\n\n\n\n\nWHY IS THERE AN ERROR?")
          #  print(json.dumps(msg_data, indent=4))
          #  input("take this out when checked. why there is an errors . unknown errors here in Emailer.")
          #  errors += 1
        except Exception as e:
          redprint(e)
          messages_in_without.append(msg_data)
          self.messages_in_without = messages_in_without
          messages_in_without2.append(msg)
          self.messages_in_without2 = messages_in_without2

      if tryprocess(lambda: self.messages) == 0:
        self.messages = []
      redprint(messages_in_without)
      self.errors = messages_in_without
      self.messages = [AttrDict(i) for i in self.messages]
      #distinct_print(ordered_json_dumps(messages_in_without))
      redprint("\n\n")
      redprint(messages_in_without)
      #distinct_print(ordered_json_dumps(messages_in_without))
      print("%s errors" % errors)
      print("%s true ids" % len(true_ids))
      blueprint("%s messages, (%s+%s), errors:(%s)"%(len(data),(len(self.messages)),len(self.sent_messages),len(self.errors)))
      redprint("This now updates to latest existing msg['id']")
      return self.messages
    def create_tickets_from_message(self, i):
      i['date'] = i['date'].replace(' +', ' -')
      i['date'] = i['date'].split(' -')[0]
      i['date'] = i['date'].split('.')[0]
      try:
        i['datetime'] = datetime.strptime(i['date'], "%a, %d %b %Y %H:%M:%S")
      except:
        i['datetime'] = datetime.strptime(i['date'], "%d %b %Y %H:%M:%S")

      i['text'] = i['message']
      try:
        email_accounts_in_message = [i['receiver'], i['sender']]
        i['email'] = [j for j in email_accounts_in_message if 'support@' not in j][0]
      except:
        return
      print("creating... \n%s"%i)

    def set_attachments(self, subject=''):
      filtered_messages = keyequals('subject', subject, self.messages)
      filtered_messages = [i for i in filtered_messages if 'UNREAD' in i['labelIds']]
      for msg_data in filtered_messages:
        msg_data['attachments'] = []
        for part in msg_data['parts']:
          if '.csv' in part['filename'] or '.txt' in part['filename']:
            attachmentId = part['body']['attachmentId']
            attachment = self.a.get(userId='me', messageId=msg_data['id'], id=attachmentId).execute()
            msg_data['attachments'].append({'filename': part['filename'],
                            'data': attachment['data']})
        self.remove_labels(id=msg_data['id'], labels=['UNREAD'])
    def dump_attachments(self, outdir='./'):
      for msg_data in self.messages:
        if 'attachments' in msg_data:
          for attachment in msg_data['attachments']:
            print('writing... %s' % outdir+attachment['filename'])
            with open(outdir+attachment['filename'], 'wb') as f:
              import base64
              f.write(base64.urlsafe_b64decode(attachment['data'].encode('UTF-8')))
      try: return outdir+attachment['filename']
      except: return None
    def reply_to_message(self, thread_id, msg):
      ss = Browser()("sele")
      ss.get("https://gmail.com")
      ss.fcns('gbii')[-1].click()
      print("discovering the slot")
      BASE_EMAIL_STRING = "https://mail.google.com/mail/u/0/#inbox"
      if ss.fcns("gb_Cb")[-1].text != self.user:
        slot = None
        users = ss.fcns("gb_Zb") 
        for idx, user_slot in enumerate(users):
          print(user_slot.text.strip().replace(" (default)", ""))
          if self.user == user_slot.text.strip().replace(" (default)", ""):
            slot = user_slot
            self.slot_idx = idx
            BASE_EMAIL_STRING = "https://mail.google.com/mail/u/%s/#inbox" % self.slot_idx
      thread_url = BASE_EMAIL_STRING + '/' + thread_id
      print("getting %s" % thread_url)
      ss.get(thread_url)
      print("clicking open the last response box")
      ss.fcns('bkH')[-1].click()
      print("typing msg in boxbox..")
      ss.ffs("div","contenteditable","true").send_keys(msg)
      print("sending message...")
      ss.fcns("L3")[-2].click()
      print("sleeping .")
      time.sleep(7)
      ss.quit()
    def get_major_thread_from_one_thread(self, thread_id):
      threads = self.get_all_threads()
      for thread in threads:
        tdata = self.service.users().threads().get(userId="me", id=thread['id']).execute()
        for i in tdata['messages']:
          if i['id'] == thread_id:
            print('match', thread['id'] == thread_id, "if matched True, then the mini thread Id you replied to was the Major one. ^-^")
            print("but this requires extensive in depth testing. would recommend doing 1 by 1.")
    def get_all_threads(self):
      idx = 0
      data = []
      nextpagetoken = None
      while True:
        if nextpagetoken is not None:
          threads = self.service.users().threads().list(userId='me', pageToken=nextpagetoken).execute()
        elif nextpagetoken is None:
          threads = self.service.users().threads().list(userId='me').execute()
        print("getting more messages... idx: %s" % idx)
        data.extend(threads.pop('threads', []))
        if 'nextPageToken' not in threads.keys():
          break
        else:
          nextpagetoken = threads['nextPageToken']
        idx += 1
      return data
    def send_reply(self, msgHtml, threadId, ):
      payload = self.m.get(userId='me',id=threadId).execute().get("payload")
      headers = payload.get("headers")
      headers_dict = dict(zip(key("name", headers), key("value", headers)))

      msgHtml = msgHtml.replace("\n", "<br>")

      
      references = []
      for i in headers:
        if i["name"] in ["In-Reply-To", "References", "Message-ID"]:
          references.extend(i["value"].split(" "))
      redprint(references)
      references = " ".join(references)
      redprint(references)

      subject = headers_dict["Subject"]
      print(headers_dict["From"])
      to = re.findall("[a-z0-9]*@.*?\.[a-z0-9]*", headers_dict["From"])[0]
      from_ = self.user
      threadId = threadId

      print("references: %s" % references)
      print("subject: %s" % subject)
      print("to: %s" % to)
      print("from_: %s" % from_)
      print("threadId: %s" % threadId)


      msg = MIMEMultipart('alternative')
      msg['Subject'] = subject
      msg["To"] = to
      msg['From'] = from_
      msg['threadId'] = threadId


      msg.attach(MIMEText('msgPlain', 'plain'))
      msg.attach(MIMEText(msgHtml, 'html'))
      import base64
      raw = base64.urlsafe_b64encode(msg.as_bytes())
      raw = raw.decode()
      message = {'raw': raw}
      sent_message = self.m.send(userId="me", body=message).execute()
      print("sent message id: %s" % sent_message.get('id', "error"))
      self.modify_as_read(id = threadId)
    def modify_as_read(self, id, star=True):
      if(True==star):
        self.m.modify(userId="me",id=id,body={"addLabelIds":["STARRED"],"removeLabelIds":["UNREAD"]}).execute()
      elif(False==star):
        self.m.modify(userId="me",id=id,body={"removeLabelIds":["UNREAD"]}).execute()
    def send_message(self, subject, to, msgHtml, threadId=None):
      from email.mime.multipart import MIMEMultipart
      msg = MIMEMultipart('alternative')
      msg['Subject'] = subject
      msg['To'] = to
      msg['From'] = self.user



      msg.attach(MIMEText('msgPlain', 'plain'))
      msg.attach(MIMEText(msgHtml, 'html'))
      import base64
      raw = base64.urlsafe_b64encode(msg.as_bytes())
      raw = raw.decode()
      message = {'raw': raw}
      try:
        sent_message = self.m.send(userId="me", body=message).execute()
        print(sent_message['id'])
        return sent_message
      except Exception as e:
        print(e)
        return str(e)
    def send_message_with_attachment(self, subject, to, message_text='', file=''):
      """ ::: the fat frog 2 ::: """
      from email.mime.base import MIMEBase
      from email.mime.image import MIMEImage
      from email.mime.audio import MIMEAudio
      from email.mime.text import MIMEText
      from email.mime.multipart import MIMEMultipart
      import mimetypes
      message = MIMEMultipart()
      message['to'] = to
      # message['from'] = self.user
      message['subject'] = subject
      msg = MIMEText(message_text)
      message.attach(msg)
      content_type, encoding = mimetypes.guess_type(file)
      #if content_type.split("/")[0] == 'text':
      #  redprint("text")
      #  fp = open(file, 'rb')
      #  msg = MIMEText(fp.read(), _subtype=content_type.split("/")[1]) # [AttributeError: 'bytes' object has no attribute 'encode']
      #  fp.close()
      #  filename = os.path.basename(file)
      #  msg.add_header('Content-Disposition', 'attachment', filename=filename)
      #  message.attach(msg)
      if content_type is None or encoding is not None:
        content_type = 'application/octet-stream'
        main_type, sub_type = content_type.split('/', 1)
      if content_type == "application/pdf":
        main_type, sub_type = content_type.split("/")
        fp = open(file, 'rb')
        msg = MIMEBase(main_type, sub_type)
        msg.set_payload(fp.read())
        fp.close()
        filename = os.path.basename(file)
        import email.encoders
        msg.add_header('Content-Disposition', 'attachment', filename=filename)
        email.encoders.encode_base64(msg)
        message.attach(msg)
      elif content_type.split("/")[0] == 'image':
        redprint("image")
        fp = open(file, 'rb')
        msg = MIMEImage(fp.read(), _subtype=content_type.split("/")[1])
        fp.close()
        filename = os.path.basename(file)
        msg.add_header('Content-Disposition', 'attachment', filename=filename)
        message.attach(msg)
      elif content_type.split("/")[0] == 'audio':
        redprint("audio")
        fp = open(file, 'rb')
        msg = MIMEAudio(fp.read(), _subtype=content_type.split("/")[1])
        fp.close()
        filename = os.path.basename(file)
        msg.add_header('Content-Disposition', 'attachment', filename=filename)
        message.attach(msg)
      else:
        redprint("elsed")
        fp = open(file, 'rb')
        msg = MIMEBase(content_type.split("/")[0], content_type.split("/")[1])
        msg.set_payload(fp.read())
        fp.close()
        filename = os.path.basename(file)
        msg.add_header('Content-Disposition', 'attachment', filename=filename)
        message.attach(msg)
      import base64
      created_message = {'raw': base64.urlsafe_b64encode(message.as_bytes()).decode()}
      sent_message = self.m.send(userId='me', body=created_message).execute()
      print(sent_message)
      return sent_message
    def failsafe_gmail_api_quickstart():
        # below commented out
        # from __future__ import print_function
        import pickle
        import os.path
        from googleapiclient.discovery import build
        from google_auth_oauthlib.flow import InstalledAppFlow
        from google.auth.transport.requests import Request

        # If modifying these scopes, delete the file token.pickle.
        SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

        def main():
            """Shows basic usage of the Gmail API.
            Lists the user's Gmail labels.
            """
            creds = None
            # The file token.pickle stores the user's access and refresh tokens, and is
            # created automatically when the authorization flow completes for the first
            # time.
            if os.path.exists('token.pickle'):
                with open('token.pickle', 'rb') as token:
                    creds = pickle.load(token)
            # If there are no (valid) credentials available, let the user log in.
            if not creds or not creds.valid:
                if creds and creds.expired and creds.refresh_token:
                    creds.refresh(Request())
                else:
                    flow = InstalledAppFlow.from_client_secrets_file(
                        'credentials.json', SCOPES)
                    creds = flow.run_local_server(port=0)
                # Save the credentials for the next run
                with open('token.pickle', 'wb') as token:
                    pickle.dump(creds, token)

            service = build('gmail', 'v1', credentials=creds)

            # Call the Gmail API
            results = service.users().labels().list(userId='me').execute()
            labels = results.get('labels', [])

            if not labels:
                print('No labels found.')
            else:
                print('Labels:')
                for label in labels:
                    print(label['name'])

        if __name__ == '__main__':
            main()
  class Explain_It(object):
    def explain_it(self):
      simplest_reason = input("simplest reason")
      most_complicated_reason = input("most complicated reason")
      reasons = [simplest_reason,most_complicated_reason]
      while True:
        reasons.insert(1,input("reasons going from simplest to most complicated"))
        print(reasons)
  class Firefox_Porter:
    def __init__(self, io = None):
      if Exists(io):
        rm(GLOBAL_FIREFOX_PROFILE_PATH)
        os.makedirs(GLOBAL_FIREFOX_PROFILE_PATH, exist_ok = False)
        lmap(lambda i: os.system("/Applications/Firefox\ 46.app/Contents/MacOS/firefox-bin -CreateProfile %s" % i), lmap(lambda i: i.split(".")[-1], os.listdir(io)))
        lmap(lambda i: os.system("rm -rf %s"%(Join("/",address_backslash(GLOBAL_FIREFOX_PROFILE_PATH),i,"*"))), os.listdir(GLOBAL_FIREFOX_PROFILE_PATH))
        lmap(lambda i: os.system("cp -r %s %s" % (Join("/", io, i, "*"),Join("/",address_backslash(GLOBAL_FIREFOX_PROFILE_PATH),[j for j in os.listdir(GLOBAL_FIREFOX_PROFILE_PATH) if j.split(".")[-1]==i.split(".")[-1]][0],""))), os.listdir(io))
      else:
        io = (lmap(lambda i: i.split(".")[-1], os.listdir(GLOBAL_FIREFOX_PROFILE_PATH)))if(io==None)else(io)
        io = lmap(lambda i: [j for j in os.listdir(GLOBAL_FIREFOX_PROFILE_PATH) if j.split(".")[-1]==i][0], io)
        os.makedirs("Firefox_Port", exist_ok = False)
        lmap(lambda i: os.system("cp -r '%s' '%s'" % (Join("/",GLOBAL_FIREFOX_PROFILE_PATH,i),Join("/","Firefox_Port",i))), io)
        zipUtil("Firefox_Port")
      """
      Firefox_Porter(io = None) # Port Out
      redprint("\n".join(os.listdir("Firefox_Port")))
      Firefox_Porter("Firefox_Port") # Port In

      Firefox_Porter(io = ["sele2", "main_panels", "emails", "default"]) # Port One
      redprint("\n".join(os.listdir("Firefox_Port")))
      Firefox_Porter("Firefox_Port") # Port In
      """
  class Firefox_Profile:
    def __init__(self, profile):
      [rm(Join("/", GLOBAL_FIREFOX_PROFILE_PATH, i)) for i in os.listdir(GLOBAL_FIREFOX_PROFILE_PATH) if i.split(".")[-1] == profile]
      os.system("/Applications/Firefox\ 46.app/Contents/MacOS/firefox-bin -CreateProfile %s" % (profile))
      R = [i for i in os.listdir(GLOBAL_FIREFOX_PROFILE_PATH) if i.split(".")[-1] == profile][0]
      # open(Join("/", GLOBAL_FIREFOX_PROFILE_PATH, R, "prefs.js"), "w").write('// Mozilla User Preferences\n\n// DO NOT EDIT THIS FILE.\n//\n// If you make changes to this file while the application is running,\n// the changes will be overwritten when the application exits.\n//\n// To change a preference value, you can either:\n// - modify it via the UI (e.g. via about:config in the browser); or\n// - set it within a user.js file in your profile.\n\nuser_pref("app.normandy.first_run", false);\nuser_pref("app.normandy.user_id", "06ce59be-456c-b540-9a47-0941c6043180");\nuser_pref("app.update.auto", false);\nuser_pref("app.update.enabled", false);\nuser_pref("app.update.lastUpdateTime.addon-background-update-timer", 0);\nuser_pref("app.update.lastUpdateTime.background-update-timer", 1550635354);\nuser_pref("app.update.lastUpdateTime.blocklist-background-update-timer", 0);\nuser_pref("app.update.lastUpdateTime.browser-cleanup-thumbnails", 1550633597);\nuser_pref("app.update.lastUpdateTime.recipe-client-addon-run", 0);\nuser_pref("app.update.lastUpdateTime.search-engine-update-timer", 1550635039);\nuser_pref("app.update.lastUpdateTime.services-settings-poll-changes", 1550635420);\nuser_pref("app.update.lastUpdateTime.telemetry_modules_ping", 0);\nuser_pref("app.update.lastUpdateTime.xpi-signature-verification", 0);\nuser_pref("browser.bookmarks.restore_default_bookmarks", false);\nuser_pref("browser.cache.disk.capacity", 1048576);\nuser_pref("browser.cache.disk.filesystem_reported", 1);\nuser_pref("browser.cache.disk.smart_size.first_run", false);\nuser_pref("browser.cache.disk.smart_size.use_old_max", false);\nuser_pref("browser.cache.frecency_experiment", 1);\nuser_pref("browser.contentblocking.category", "standard");\nuser_pref("browser.download.importedFromSqlite", true);\nuser_pref("browser.laterrun.bookkeeping.profileCreationTime", 1550633567);\nuser_pref("browser.laterrun.bookkeeping.sessionCount", 12);\nuser_pref("browser.laterrun.enabled", true);\nuser_pref("browser.migrated-sync-button", true);\nuser_pref("browser.migration.version", 77);\nuser_pref("browser.newtabpage.activity-stream.feeds.section.highlights", false);\nuser_pref("browser.newtabpage.activity-stream.feeds.section.topstories", false);\nuser_pref("browser.newtabpage.activity-stream.feeds.section.topstories.rec.impressions", "{"34054":1550633569243,"34079":1550633569243,"34084":1550633569243}");\nuser_pref("browser.newtabpage.activity-stream.feeds.section.topstories.spoc.impressions", "{"787":[1550634723461,1550634727923,1550634732355],"1099":[1550635011420]}");\nuser_pref("browser.newtabpage.activity-stream.feeds.snippets", false);\nuser_pref("browser.newtabpage.activity-stream.feeds.topsites", false);\nuser_pref("browser.newtabpage.activity-stream.impressionId", "{c85341b3-f663-9243-bac9-83b8e7427423}");\nuser_pref("browser.newtabpage.activity-stream.migrationLastShownDate", 1550552400);\nuser_pref("browser.newtabpage.activity-stream.migrationRemainingDays", 3);\nuser_pref("browser.newtabpage.activity-stream.prerender", false);\nuser_pref("browser.newtabpage.activity-stream.section.highlights.includeBookmarks", false);\nuser_pref("browser.newtabpage.activity-stream.section.highlights.includeDownloads", false);\nuser_pref("browser.newtabpage.activity-stream.section.highlights.includePocket", false);\nuser_pref("browser.newtabpage.activity-stream.section.highlights.includeVisited", false);\nuser_pref("browser.newtabpage.activity-stream.showSearch", false);\nuser_pref("browser.newtabpage.activity-stream.showSponsored", false);\nuser_pref("browser.newtabpage.enhanced", true);\nuser_pref("browser.newtabpage.storageVersion", 1);\nuser_pref("browser.pageActions.persistedActions", "{"version":1,"ids":["bookmark","bookmarkSeparator","copyURL","emailLink","addSearchEngine","sendToDevice","shareURL","pocket","screenshots_mozilla_org"],"idsInUrlbar":["pocket","bookmark"]}");\nuser_pref("browser.pagethumbnails.storage_version", 3);\nuser_pref("browser.places.smartBookmarksVersion", 7);\nuser_pref("browser.preferences.advanced.selectedTabIndex", 0);\nuser_pref("browser.rights.3.shown", true);\nuser_pref("browser.safebrowsing.provider.google4.lastupdatetime", "1550635400587");\nuser_pref("browser.safebrowsing.provider.google4.nextupdatetime", "1550637198587");\nuser_pref("browser.safebrowsing.provider.mozilla.lastupdatetime", "1550633571752");\nuser_pref("browser.safebrowsing.provider.mozilla.nextupdatetime", "1550637171752");\nuser_pref("browser.search.cohort", "nov17-2");\nuser_pref("browser.search.countryCode", "US");\nuser_pref("browser.search.region", "US");\nuser_pref("browser.sessionstore.upgradeBackup.latestBuildID", "20190211233335");\nuser_pref("browser.shell.checkDefaultBrowser", false);\nuser_pref("browser.shell.didSkipDefaultBrowserCheckOnFirstRun", true);\nuser_pref("browser.slowStartup.averageTime", 855);\nuser_pref("browser.slowStartup.samples", 1);\nuser_pref("browser.startup.homepage_override.buildID", "20190211233335");\nuser_pref("browser.startup.homepage_override.mstone", "65.0.1");\nuser_pref("browser.uiCustomization.state", "{"placements":{"widget-overflow-fixed-list":[],"nav-bar":["back-button","forward-button","stop-reload-button","home-button","customizableui-special-spring1","urlbar-container","customizableui-special-spring2","downloads-button","library-button","sidebar-button","loop-button"],"TabsToolbar":["tabbrowser-tabs","new-tab-button","alltabs-button"],"PersonalToolbar":["personal-bookmarks"]},"seen":["developer-button","loop-button","pocket-button","feed-button"],"dirtyAreaCache":["nav-bar","TabsToolbar","PersonalToolbar"],"currentVersion":15,"newElementCount":2}");\nuser_pref("browser.urlbar.placeholderName", "Google");\nuser_pref("browser.urlbar.timesBeforeHidingSuggestionsHint", 2);\nuser_pref("datareporting.healthreport.uploadEnabled", false);\nuser_pref("datareporting.policy.dataSubmissionPolicyAcceptedVersion", 2);\nuser_pref("datareporting.policy.dataSubmissionPolicyNotifiedTime", "1550633570624");\nuser_pref("datareporting.sessions.current.activeTicks", 7);\nuser_pref("datareporting.sessions.current.clean", true);\nuser_pref("datareporting.sessions.current.firstPaint", 664);\nuser_pref("datareporting.sessions.current.main", 73);\nuser_pref("datareporting.sessions.current.sessionRestored", 2511);\nuser_pref("datareporting.sessions.current.startTime", "1550633939369");\nuser_pref("datareporting.sessions.current.totalTime", 37);\nuser_pref("devtools.onboarding.telemetry.logged", true);\nuser_pref("distribution.iniFile.exists.appversion", "65.0.1");\nuser_pref("distribution.iniFile.exists.value", false);\nuser_pref("dom.apps.reset-permissions", true);\nuser_pref("dom.forms.autocomplete.formautofill", true);\nuser_pref("dom.mozApps.used", true);\nuser_pref("e10s.rollout.cohort", "unsupportedChannel");\nuser_pref("experiments.activeExperiment", false);\nuser_pref("extensions.blocklist.pingCountVersion", -1);\nuser_pref("extensions.bootstrappedAddons", "{"firefox@getpocket.com":{"version":"1.0","type":"extension","descriptor":"/Applications/Firefox.app/Contents/Resources/browser/features/firefox@getpocket.com.xpi","multiprocessCompatible":false,"runInSafeMode":true},"loop@mozilla.org":{"version":"1.2.6","type":"extension","descriptor":"/Applications/Firefox.app/Contents/Resources/browser/features/loop@mozilla.org.xpi","multiprocessCompatible":false,"runInSafeMode":true},"e10srollout@mozilla.org":{"version":"1.0","type":"extension","descriptor":"/Applications/Firefox.app/Contents/Resources/browser/features/e10srollout@mozilla.org.xpi","multiprocessCompatible":false,"runInSafeMode":true}}");\nuser_pref("extensions.databaseSchema", 28);\nuser_pref("extensions.e10sBlockedByAddons", false);\nuser_pref("extensions.enabledAddons", "%7B972ce4c6-7e08-4474-a285-3208198ce6fd%7D:46.0");\nuser_pref("extensions.getAddons.cache.lastUpdate", 1550633941);\nuser_pref("extensions.getAddons.databaseSchema", 5);\nuser_pref("extensions.lastAppBuildId", "20190211233335");\nuser_pref("extensions.lastAppVersion", "65.0.1");\nuser_pref("extensions.lastPlatformVersion", "65.0.1");\nuser_pref("extensions.pendingOperations", false);\nuser_pref("extensions.systemAddonSet", "{"schema":1,"addons":{}}");\nuser_pref("extensions.webcompat.perform_injections", true);\nuser_pref("extensions.webcompat.perform_ua_overrides", true);\nuser_pref("extensions.webextensions.uuids", "{"formautofill@mozilla.org":"2b4f0ede-b4d9-6545-9ac0-e1660f03296f","screenshots@mozilla.org":"a1a637bf-7c5f-f446-908f-d12e4f77d811","webcompat-reporter@mozilla.org":"9bf34646-9ad4-954f-9c4e-1063d8c70d25","webcompat@mozilla.org":"b79d04e0-3f7f-3b44-a76a-3cdbecb89a81"}");\nuser_pref("extensions.xpiState", "{"app-system-defaults":{"firefox@getpocket.com":{"d":"/Applications/Firefox.app/Contents/Resources/browser/features/firefox@getpocket.com.xpi","e":true,"v":"1.0","st":1540071218000},"loop@mozilla.org":{"d":"/Applications/Firefox.app/Contents/Resources/browser/features/loop@mozilla.org.xpi","e":true,"v":"1.2.6","st":1540071218000},"e10srollout@mozilla.org":{"d":"/Applications/Firefox.app/Contents/Resources/browser/features/e10srollout@mozilla.org.xpi","e":true,"v":"1.0","st":1540071218000}},"app-global":{"{972ce4c6-7e08-4474-a285-3208198ce6fd}":{"d":"/Applications/Firefox.app/Contents/Resources/browser/extensions/{972ce4c6-7e08-4474-a285-3208198ce6fd}.xpi","e":true,"v":"46.0","st":1540071218000}}}");\nuser_pref("font.internaluseonly.changed", true);\nuser_pref("gecko.buildID", "20160421124000");\nuser_pref("gecko.mstone", "46.0");\nuser_pref("lightweightThemes.persisted.headerURL", false);\nuser_pref("lightweightThemes.usedThemes", "[]");\nuser_pref("media.gmp.storage.version.observed", 1);\nuser_pref("network.cookie.prefsMigrated", true);\nuser_pref("network.predictor.cleaned-up", true);\nuser_pref("pdfjs.enabledCache.state", false);\nuser_pref("pdfjs.migrationVersion", 2);\nuser_pref("pdfjs.previousHandler.alwaysAskBeforeHandling", true);\nuser_pref("pdfjs.previousHandler.preferredAction", 4);\nuser_pref("places.history.expiration.transient_current_max_pages", 112348);\nuser_pref("plugin.disable_full_page_plugin_for_types", "application/pdf");\nuser_pref("privacy.cpd.offlineApps", true);\nuser_pref("privacy.cpd.siteSettings", true);\nuser_pref("privacy.sanitize.migrateClearSavedPwdsOnExit", true);\nuser_pref("privacy.sanitize.pending", "[{"id":"newtab-container","itemsToClear":[],"options":{}}]");\nuser_pref("privacy.sanitize.timeSpan", 0);\nuser_pref("security.sandbox.content.tempDirSuffix", "d0b0a17d-ddae-9c44-bb41-7cfca103ccd5");\nuser_pref("security.sandbox.plugin.tempDirSuffix", "9ad5aae9-5dc2-ac4f-9263-0195647a6ab7");\nuser_pref("services.blocklist.addons.checked", 1550635565);\nuser_pref("services.blocklist.onecrl.checked", 1550635565);\nuser_pref("services.blocklist.plugins.checked", 1550635565);\nuser_pref("services.settings.clock_skew_seconds", -145);\nuser_pref("services.settings.last_update_seconds", 1550635565);\nuser_pref("services.settings.main.language-dictionaries.last_check", 1550635565);\nuser_pref("services.settings.main.onboarding.last_check", 1550635565);\nuser_pref("services.settings.main.sites-classification.last_check", 1550635565);\nuser_pref("services.sync.clients.lastSync", "0");\nuser_pref("services.sync.clients.lastSyncLocal", "0");\nuser_pref("services.sync.declinedEngines", "");\nuser_pref("services.sync.engine.addresses.available", true);\nuser_pref("services.sync.globalScore", 0);\nuser_pref("services.sync.migrated", true);\nuser_pref("services.sync.nextSync", 0);\nuser_pref("services.sync.tabs.lastSync", "0");\nuser_pref("services.sync.tabs.lastSyncLocal", "0");\nuser_pref("signon.importedFromSqlite", true);\nuser_pref("toolkit.startup.last_success", 1550635390);\nuser_pref("toolkit.telemetry.cachedClientID", "c0ffeec0-ffee-c0ff-eec0-ffeec0ffeec0");\nuser_pref("toolkit.telemetry.previousBuildID", "20190211233335");\nuser_pref("toolkit.telemetry.reportingpolicy.firstRun", false);\n')
      open(Join("/", GLOBAL_FIREFOX_PROFILE_PATH, R, "prefs.js"), "w").write('// Mozilla User Preferences\n\n// DO NOT EDIT THIS FILE.\n//\n// If you make changes to this file while the application is running,\n// the changes will be overwritten when the application exits.\n//\n// To change a preference value, you can either:\n// - modify it via the UI (e.g. via about:config in the browser); or\n// - set it within a user.js file in your profile.\n\nuser_pref("app.normandy.first_run", false);\nuser_pref("app.normandy.user_id", "06ce59be-456c-b540-9a47-0941c6043180");\nuser_pref("app.update.auto", false);\nuser_pref("app.update.elevate.version", "66.0.3");\nuser_pref("app.update.enabled", false);\nuser_pref("app.update.lastUpdateTime.addon-background-update-timer", 1553728744);\nuser_pref("app.update.lastUpdateTime.background-update-timer", 1550635354);\nuser_pref("app.update.lastUpdateTime.blocklist-background-update-timer", 1553728915);\nuser_pref("app.update.lastUpdateTime.browser-cleanup-thumbnails", 1550633597);\nuser_pref("app.update.lastUpdateTime.recipe-client-addon-run", 0);\nuser_pref("app.update.lastUpdateTime.search-engine-update-timer", 1550635039);\nuser_pref("app.update.lastUpdateTime.services-settings-poll-changes", 1550635420);\nuser_pref("app.update.lastUpdateTime.telemetry_modules_ping", 0);\nuser_pref("app.update.lastUpdateTime.xpi-signature-verification", 1553729321);\nuser_pref("app.update.silent", true);\nuser_pref("app.update.url", "xxxhttps://xxxaus5.mozilla.org/update/6/%PRODUCT%/%VERSION%/%BUILD_ID%/%BUILD_TARGET%/%LOCALE%/%CHANNEL%/%OS_VERSION%/%SYSTEM_CAPABILITIES%/%DISTRIBUTION%/%DISTRIBUTION_VERSION%/update.xml");\nuser_pref("browser.bookmarks.restore_default_bookmarks", false);\nuser_pref("browser.cache.disk.capacity", 1048576);\nuser_pref("browser.cache.disk.filesystem_reported", 1);\nuser_pref("browser.cache.disk.smart_size.first_run", false);\nuser_pref("browser.cache.disk.smart_size.use_old_max", false);\nuser_pref("browser.cache.frecency_experiment", 1);\nuser_pref("browser.contentblocking.category", "standard");\nuser_pref("browser.ctrlTab.recentlyUsedOrder", false);\nuser_pref("browser.download.importedFromSqlite", true);\nuser_pref("browser.laterrun.bookkeeping.profileCreationTime", 1550633567);\nuser_pref("browser.laterrun.bookkeeping.sessionCount", 13);\nuser_pref("browser.migrated-sync-button", true);\nuser_pref("browser.migration.version", 77);\nuser_pref("browser.newtabpage.activity-stream.asrouter.userprefs.cfr", false);\nuser_pref("browser.newtabpage.activity-stream.feeds.section.highlights", false);\nuser_pref("browser.newtabpage.activity-stream.feeds.section.topstories", false);\nuser_pref("browser.newtabpage.activity-stream.feeds.snippets", false);\nuser_pref("browser.newtabpage.activity-stream.feeds.topsites", false);\nuser_pref("browser.newtabpage.activity-stream.impressionId", "{c85341b3-f663-9243-bac9-83b8e7427423}");\nuser_pref("browser.newtabpage.activity-stream.migrationExpired", true);\nuser_pref("browser.newtabpage.activity-stream.migrationLastShownDate", 1553659200);\nuser_pref("browser.newtabpage.activity-stream.migrationRemainingDays", 2);\nuser_pref("browser.newtabpage.activity-stream.prerender", false);\nuser_pref("browser.newtabpage.activity-stream.section.highlights.includeBookmarks", false);\nuser_pref("browser.newtabpage.activity-stream.section.highlights.includeDownloads", false);\nuser_pref("browser.newtabpage.activity-stream.section.highlights.includePocket", false);\nuser_pref("browser.newtabpage.activity-stream.section.highlights.includeVisited", false);\nuser_pref("browser.newtabpage.activity-stream.showSearch", false);\nuser_pref("browser.newtabpage.activity-stream.showSponsored", false);\nuser_pref("browser.newtabpage.enabled", false);\nuser_pref("browser.newtabpage.enhanced", true);\nuser_pref("browser.newtabpage.storageVersion", 1);\nuser_pref("browser.pageActions.persistedActions", "{"version":1,"ids":["bookmark","bookmarkSeparator","copyURL","emailLink","addSearchEngine","sendToDevice","shareURL","pocket"],"idsInUrlbar":["pocket","bookmark"]}");\nuser_pref("browser.pagethumbnails.storage_version", 3);\nuser_pref("browser.places.smartBookmarksVersion", 7);\nuser_pref("browser.preferences.advanced.selectedTabIndex", 0);\nuser_pref("browser.preferences.defaultPerformanceSettings.enabled", false);\nuser_pref("browser.rights.3.shown", true);\nuser_pref("browser.safebrowsing.provider.google4.lastupdatetime", "1557288602301");\nuser_pref("browser.safebrowsing.provider.google4.nextupdatetime", "1557290413301");\nuser_pref("browser.safebrowsing.provider.mozilla.lastupdatetime", "1557288602720");\nuser_pref("browser.safebrowsing.provider.mozilla.nextupdatetime", "1557292202720");\nuser_pref("browser.search.cohort", "nov17-2");\nuser_pref("browser.search.countryCode", "US");\nuser_pref("browser.search.hiddenOneOffs", "Google,Bing,Amazon.com,DuckDuckGo,eBay,Twitter,Wikipedia (en)");\nuser_pref("browser.search.region", "US");\nuser_pref("browser.search.suggest.enabled", false);\nuser_pref("browser.sessionstore.upgradeBackup.latestBuildID", "20190211233335");\nuser_pref("browser.shell.checkDefaultBrowser", false);\nuser_pref("browser.shell.didSkipDefaultBrowserCheckOnFirstRun", true);\nuser_pref("browser.slowStartup.averageTime", 975);\nuser_pref("browser.slowStartup.samples", 1);\nuser_pref("browser.startup.homepage", "about:blank");\nuser_pref("browser.startup.homepage_override.buildID", "20190124174741");\nuser_pref("browser.startup.homepage_override.mstone", "65.0");\nuser_pref("browser.uiCustomization.state", "{"placements":{"widget-overflow-fixed-list":[],"nav-bar":["back-button","forward-button","stop-reload-button","home-button","customizableui-special-spring1","urlbar-container","customizableui-special-spring2","downloads-button","library-button","sidebar-button"],"TabsToolbar":["tabbrowser-tabs","new-tab-button","alltabs-button"],"PersonalToolbar":["personal-bookmarks"]},"seen":["developer-button"],"dirtyAreaCache":["nav-bar"],"currentVersion":15,"newElementCount":2}");\nuser_pref("browser.urlbar.placeholderName", "Google");\nuser_pref("browser.urlbar.searchSuggestionsChoice", false);\nuser_pref("browser.urlbar.suggest.bookmark", false);\nuser_pref("browser.urlbar.suggest.openpage", false);\nuser_pref("browser.urlbar.suggest.searches", false);\nuser_pref("browser.urlbar.timesBeforeHidingSuggestionsHint", 1);\nuser_pref("datareporting.healthreport.uploadEnabled", false);\nuser_pref("datareporting.policy.dataSubmissionPolicyAcceptedVersion", 2);\nuser_pref("datareporting.policy.dataSubmissionPolicyNotifiedTime", "1550633570624");\nuser_pref("datareporting.sessions.current.activeTicks", 7);\nuser_pref("datareporting.sessions.current.clean", true);\nuser_pref("datareporting.sessions.current.firstPaint", 664);\nuser_pref("datareporting.sessions.current.main", 73);\nuser_pref("datareporting.sessions.current.sessionRestored", 2511);\nuser_pref("datareporting.sessions.current.startTime", "1550633939369");\nuser_pref("datareporting.sessions.current.totalTime", 37);\nuser_pref("devtools.onboarding.telemetry.logged", true);\nuser_pref("distribution.iniFile.exists.appversion", "65.0");\nuser_pref("distribution.iniFile.exists.value", false);\nuser_pref("dom.apps.reset-permissions", true);\nuser_pref("dom.forms.autocomplete.formautofill", true);\nuser_pref("dom.mozApps.used", true);\nuser_pref("e10s.rollout.cohort", "unsupportedChannel");\nuser_pref("experiments.activeExperiment", false);\nuser_pref("extensions.blocklist.lastModified", "Tue, 26 Mar 2019 17:13:55 GMT");\nuser_pref("extensions.blocklist.pingCountVersion", -1);\nuser_pref("extensions.databaseSchema", 28);\nuser_pref("extensions.e10sBlockedByAddons", false);\nuser_pref("extensions.enabledAddons", "%7B972ce4c6-7e08-4474-a285-3208198ce6fd%7D:46.0");\nuser_pref("extensions.getAddons.cache.lastUpdate", 1553728744);\nuser_pref("extensions.getAddons.databaseSchema", 5);\nuser_pref("extensions.lastAppBuildId", "20190124174741");\nuser_pref("extensions.lastAppVersion", "65.0");\nuser_pref("extensions.lastPlatformVersion", "65.0");\nuser_pref("extensions.pendingOperations", false);\nuser_pref("extensions.webcompat.perform_injections", true);\nuser_pref("extensions.webcompat.perform_ua_overrides", true);\nuser_pref("extensions.webextensions.uuids", "{"formautofill@mozilla.org":"fd82627d-7029-df44-854c-65997238f507","screenshots@mozilla.org":"1b26d190-485a-3a41-991d-cbdbedab016b","webcompat-reporter@mozilla.org":"cdb30fdf-9916-544d-9ae5-be2506ea93c1","webcompat@mozilla.org":"f3f59ad4-5a24-054e-9a2d-8807fc628a8e"}");\nuser_pref("font.internaluseonly.changed", false);\nuser_pref("gecko.buildID", "20160421124000");\nuser_pref("gecko.mstone", "46.0");\nuser_pref("layers.acceleration.disabled", true);\nuser_pref("lightweightThemes.persisted.headerURL", false);\nuser_pref("lightweightThemes.usedThemes", "[]");\nuser_pref("media.gmp.storage.version.observed", 1);\nuser_pref("network.cookie.prefsMigrated", true);\nuser_pref("network.predictor.cleaned-up", true);\nuser_pref("pdfjs.enabledCache.state", false);\nuser_pref("pdfjs.migrationVersion", 2);\nuser_pref("pdfjs.previousHandler.alwaysAskBeforeHandling", true);\nuser_pref("pdfjs.previousHandler.preferredAction", 4);\nuser_pref("places.history.expiration.transient_current_max_pages", 112348);\nuser_pref("plugin.disable_full_page_plugin_for_types", "application/pdf");\nuser_pref("privacy.cpd.offlineApps", true);\nuser_pref("privacy.cpd.siteSettings", true);\nuser_pref("privacy.sanitize.migrateClearSavedPwdsOnExit", true);\nuser_pref("privacy.sanitize.pending", "[]");\nuser_pref("privacy.sanitize.timeSpan", 0);\nuser_pref("security.sandbox.content.tempDirSuffix", "d0b0a17d-ddae-9c44-bb41-7cfca103ccd5");\nuser_pref("security.sandbox.plugin.tempDirSuffix", "9ad5aae9-5dc2-ac4f-9263-0195647a6ab7");\nuser_pref("services.blocklist.addons.checked", 1550635565);\nuser_pref("services.blocklist.onecrl.checked", 1550635565);\nuser_pref("services.blocklist.plugins.checked", 1550635565);\nuser_pref("services.settings.clock_skew_seconds", -145);\nuser_pref("services.settings.last_update_seconds", 1550635565);\nuser_pref("services.settings.main.language-dictionaries.last_check", 1550635565);\nuser_pref("services.settings.main.onboarding.last_check", 1550635565);\nuser_pref("services.settings.main.sites-classification.last_check", 1550635565);\nuser_pref("services.sync.clients.lastSync", "0");\nuser_pref("services.sync.clients.lastSyncLocal", "0");\nuser_pref("services.sync.declinedEngines", "");\nuser_pref("services.sync.engine.addresses.available", true);\nuser_pref("services.sync.globalScore", 0);\nuser_pref("services.sync.migrated", true);\nuser_pref("services.sync.nextSync", 0);\nuser_pref("services.sync.tabs.lastSync", "0");\nuser_pref("services.sync.tabs.lastSyncLocal", "0");\nuser_pref("signon.importedFromSqlite", true);\nuser_pref("signon.rememberSignons", false);\nuser_pref("toolkit.startup.last_success", 1557288598);\nuser_pref("toolkit.telemetry.cachedClientID", "c0ffeec0-ffee-c0ff-eec0-ffeec0ffeec0");\nuser_pref("toolkit.telemetry.previousBuildID", "20190124174741");\nuser_pref("toolkit.telemetry.reportingpolicy.firstRun", false);\n')
      Binarydata().export("places.sqlite", Join("/", GLOBAL_FIREFOX_PROFILE_PATH, R, "places.sqlite"))
  class Freelancer:
    def Description(self, a):
      pass
      """ """
    def SizeChart(self, a, html=True):
      # OSA.log(a)

      if "Alg1:" in a:
        xz = ""
        if a.endswith("&cm"):
          xz = a
        #a='Waist,Bust,Hips&Alg1:S-6XL,34-50,24-42,34-52'
        #a='Waist,Bust,Hips&Alg1:S-6XL,34-50,24-42,34-52&cm'
        # not for floats
        #shints = ["Size"]+[i+" (in)" for i in eval(a.split("&")[0])]
        # x-y, x-y, x-y, x-y
        shints = ["Size"]+[i for i in a.split("&")[0].split(",")]
        r = ["XS","S","M","L","XL","2XL","3XL","4XL","5XL","6XL"]
        chus = r[r.index(a.split("&")[1].replace("Alg1:","").split(",")[0].split("-")[0]):r.index(a.split("&")[1].replace("Alg1:","").split(",")[0].split("-")[1])+1]
        ZAMUS = []
        F = a.split("&")[1].replace("Alg1:","").split(",",1)[1].split(",")        
        vorts = []
        for idx, vax in enum(F):
          quas = Integer(vax.split("-")[1]) - Integer(vax.split("-")[0])
          stol = Integer(quas /  len(chus))
          h = Integer(vax.split("-")[0])
          lp = len(chus)
          qince = []
          for i in range(lp):
            print(h+(stol*i), h+(stol * (i+1)))
            print(h+(stol*i), h+(stol * (i+1)))
            #qince.append("-".join(lmap(str,[h+(stol*i), h+(stol * (i+1))])))
            qince.append(" - ".join(lmap(str,[ str(h+(stol*i))+'"', str(h+(stol * (i+1)))+'"' ])))
          vorts.append(["%s"%shints[idx+1]]+qince)
        vorts.insert(0, ["Size"]+chus)
        if xz.endswith("&cm"):
          for idx,i in enum(vorts):
            for idx2,j in enum(i):
              if j.endswith('"'):
                q = re.findall("[\d\.]+",j)
                for l in q:
                  ll = round(float(l)/2.54,2)
                  if str(ll).endswith(".0"):
                    ll = str(int(ll))
                  else:
                    ll = str(float(ll))
                  j = j.replace(l, ll)
                vorts[idx][idx2] = j


        import numpy as np
        vorts = np.transpose(vorts)
        vorts = [list(i) for i in vorts]
        if len(oset(lmap(len,vorts))) != 1:
          print("Error with Size Chart")
          assert False
        if html==True:
          vorts = csv_table_to_html(vorts)
        return vorts
      if "Alg2" in a:
        # a = "Bust,Waist,Length&Alg2:S-2XL,88-104,72-88,104-108"
        # a = "Bust,Waist,Length&Alg2:S-2XL,88-104,72-88,104-108&cm"
        # a = "Bust,Waist,Length&Alg2:S-2XL,88.5-104.5,72.5-88.5,104.5-108.5&cm"
        # x, x, x, x
        xz = ""
        if a.endswith("&cm"):
          xz = a


        shints = ["Size"]+[i for i in a.split("&")[0].split(",")]
        r = ["XS","S","M","L","XL","2XL","3XL","4XL","5XL","6XL"]
        chus = r[r.index(a.split("&")[1].replace("Alg2:","").split(",")[0].split("-")[0]):r.index(a.split("&")[1].replace("Alg2:","").split(",")[0].split("-")[1])+1]
        ZAMUS = []
        F = a.split("&")[1].replace("Alg2:","").split(",",1)[1].split(",")     
        vorts = []
        for idx, i in enum(F):
          a,b = i.split("-")
          a = float(a)
          b = float(b)
          t = b- a
          tt = t / (len(chus) - 1)
          ly = a
          o = []
          for j in range(len(chus)):
            if str(ly).endswith(".0"):
              lyy = str(int(ly)) + '"'
            else:
              lyy = str(round(ly,1)) + '"'
            o.append(lyy)
            ly += tt
          o.insert(0, shints[idx+1])
          vorts.append(o)
        vorts.insert(0, ["Size"] + chus)
        if xz.endswith("&cm"):
          for idx,i in enum(vorts):
            for idx2,j in enum(i):
              if j.endswith('"'):
                q = str(round(float(re.findall("[\d\.]+",j)[0])/2.54,2))
                if q.endswith(".0"):
                  q = int(q)
                else:
                  q = float(q)
                q = str(q)
                vorts[idx][idx2] = q + '"'

        import numpy as np
        vorts = np.transpose(vorts)
        vorts = [list(i) for i in vorts]
        if len(oset(lmap(len,vorts))) != 1:
          print("Error with Size Chart")
          assert False
        if html==True:
          vorts = csv_table_to_html(vorts)
        return vorts

      if "Alg3" in a:
        # a = 'Bust,Waist,Hips&Alg3:S-6XL,80+5*5+7+5+5+5,60+5*5+7+5*2+5,80+5*5+7+5*2+5&cm'
        # a = 'Waist,Hips,Length&Alg3:S-6XL,67+5+5+5+5+5+5+5+5,93+5+5+5+5+5+5+5+5,72.5+0.5+0.5+0.5+0.5+0.5+0.5+0.5+0.5&cm'
        # x-y, x-y, x-y, x-y

        xz = ""
        if a.endswith("&cm"):
          xz = a

        shints = ["Size"]+[i for i in a.split("&")[0].split(",")]
        r = ["XS","S","M","L","XL","2XL","3XL","4XL","5XL","6XL"]
        chus = r[r.index(a.split("&")[1].replace("Alg3:","").split(",")[0].split("-")[0]):r.index(a.split("&")[1].replace("Alg3:","").split(",")[0].split("-")[1])+1]
        ZAMUS = []
        F = a.split("&")[1].replace("Alg3:","").split(",",1)[1].split(",")     
        vorts = []
        for idx, i in enum(F):
          q = []
          start = re.findall("[\d\.]+",i)[0]
          i = re.sub(start,"",i,count=0)
          l = []
          l.extend(re.findall("\+[\d\.]+(?:\*[\d\.]+|)",i))
          start = float(start)
          if str(start).endswith(".0"):
            start = int(start)
          q.append(start)
          for j in l:
            if "*" not in j:
              y = re.findall("\+([\d\.]+)",j)[0]
              y = float(y)
              start += y
              if str(start).endswith(".0"):
                start = int(start)
              q.append(start)
            else:
              x = re.findall("\*([\d\.]+)",j)[0]
              y = re.findall("\+([\d\.]+)",j)[0]
              x = float(x)
              y = float(y)
              for r in range(x):
                start += y
                if str(start).endswith(".0"):
                  start = int(start)
                q.append(start)
          vorts.append(q)
        for idx, i in enum(vorts):
          for idx2, j in enum(i[:-1]):
            if "&cm" in a:
              j = round(float(j/2.54),2)
              if str(j).endswith(".0"):
                j = str(int(j))
              else:
                j = str(float(j))
            r = i[idx2+1]
            if "&cm" in a:
              r = round(float(r/2.54),2)
              if str(r).endswith(".0"):
                r = str(int(r))
              else:
                r = str(float(r))
            vorts[idx][idx2] = '%s" - %s"'%(j,r)
          vorts[idx].pop(-1)

        import numpy as np
        vorts = np.transpose(vorts)
        vorts = [list(i) for i in vorts]
        for idx, i in enum(vorts):
          i.insert(0, chus[idx])
        vorts = [shints] + vorts
        if len(oset(lmap(len,vorts))) != 1:
          print("Error with Size Chart")
          assert False
        if html==True:
          vorts = csv_table_to_html(vorts)
        return vorts

      if "Alg4" in a:
        # a = 'Bust,Waist,Hips&Alg4:S-6XL,80+5*5+7+5+5,60+5*5+7+5*2,80+5*5+7+5*2&cm'
        # a = 'Waist,Hips,Length&Alg4:S-6XL,67+5+5+5+5+5+5+5+5,93+5+5+5+5+5+5+5+5,72.5+0.5+0.5+0.5+0.5+0.5+0.5+0.5+0.5&cm'
        # x, x, x, x
        xz = ""
        if a.endswith("&cm"):
          xz = a

        shints = ["Size"]+[i for i in a.split("&")[0].split(",")]
        r = ["XS","S","M","L","XL","2XL","3XL","4XL","5XL","6XL"]
        chus = r[r.index(a.split("&")[1].replace("Alg4:","").split(",")[0].split("-")[0]):r.index(a.split("&")[1].replace("Alg4:","").split(",")[0].split("-")[1])+1]
        ZAMUS = []
        F = a.split("&")[1].replace("Alg4:","").split(",",1)[1].split(",")     
        vorts = []
        for idx, i in enum(F):
          q = []
          start = re.findall("[\d\.]+",i)[0]
          i = re.sub(start,"",i,count=0)
          l = []
          l.extend(re.findall("\+[\d\.]+(?:\*[\d\.]+|)",i))
          start = float(start)
          if str(start).endswith(".0"):
            start = int(start)
          q.append(start)
          for j in l:
            if "*" not in j:
              y = re.findall("\+([\d\.]+)",j)[0]
              y = float(y)
              start += y
              if str(start).endswith(".0"):
                start = int(start)
              q.append(start)
            else:
              x = re.findall("\*([\d\.]+)",j)[0]
              y = re.findall("\+([\d\.]+)",j)[0]
              x = float(x)
              y = float(y)
              for r in range(x):
                start += y
                if str(start).endswith(".0"):
                  start = int(start)
                q.append(start)
          vorts.append(q)
        for idx, i in enum(vorts):
          for idx2, j in enum(i):
            if "&cm" in a:
              j = round(float(j/2.54),2)
              if str(j).endswith(".0"):
                j = str(int(j))
              else:
                j = str(float(j))
            vorts[idx][idx2] = '%s"'%(j)

        import numpy as np
        vorts = np.transpose(vorts)
        vorts = [list(i) for i in vorts]
        if len(oset(lmap(len,vorts))) != 1:
          print("Error with Size Chart")
          assert False
        for idx, i in enum(vorts):
          i.insert(0, chus[idx])
        vorts = [shints] + vorts
        if html==True:
          vorts = csv_table_to_html(vorts)
        return vorts


      #a = '["waist", "chest", "shoulders"]\nS:10,20,30\nM:11,22,33\nL:12,24,35'
      #a = 'waist,chest,shoulders&S:10,20,30&M:11,22,33&L:12,24,35'
      #a = 'Diameter&Adjustable Size:17mm'
      strom = dict(zip(re.findall("(&(?:[0-9]+|[0-9]+[\w]+)):",a), set([generate_one_alphabetical_string() for i in range(10000)]))) # ie &2XL.
      for zeknos, zsadf in strom.items():
        a = a.replace(zeknos, "%s:"%(zsadf))  
      a = Replacements(a, "XXXXXXL", "6XL", "XXXXXL", "5XL", "XXXXL", "4XL", "XXXL", "3XL", "XXL", "2XL")

      #@[2018.12.31 12:05:33 PM]tcer strom
      for zeknos, zsadf in strom.items():
        a = a.replace("%s:"%(zsadf), zeknos, )
      #shints = ["Size"]+[i+" (in)" for i in eval(a.split("&")[0])]
      shints = ["Size"]+[i for i in a.replace("&cm","").split("&")[0].split(",")]
      #stromus = [ [xe.split(":")[0]]+(list(eval(xe.split(":")[1]))) for xe in a[1:]]
      # OSA.log(a)
      stromus = [ [xe.split(":")[0]]+[((i)if("-" not in i)else(i.split("-")[0].strip()+'"' + (" - ") + i.split("-")[1].strip() ))+(ifelseget(lambda:("mm" in i),lambda:"",lambda:'"')) for i in list(map(str,xe.split(":")[1].split(",")))] for xe in a.replace("&cm","").split("&")[1:] ]

      vorts = [shints]+stromus
      if len(oset(lmap(len,vorts))) != 1:
        print("Error with Size Chart")
        assert False


      if a.endswith("&cm"):
        for idx,i in enum(vorts):
          for idx2,j in enum(i):
            if j.endswith('"'):
              q = re.findall("[\d\.]+",j)
              for l in q:
                ll = round(float(l)/2.54,2)
                if str(ll).endswith(".0"):
                  ll = str(int(ll))
                else:
                  ll = str(float(ll))
                j = j.replace(l, ll)
              vorts[idx][idx2] = j
      #@decidedly inappreciate, csv_table_to_png(vorts)
      if html==True:
        vorts = csv_table_to_html(vorts)
      return vorts
  class GitHub:
    def get(self,url):
      print("git clone %s" % url)
      os.system("git clone %s" % url)
    def pull(self,url):
      os.system("git pull %s" % (url))
    def push(self,username,repository):
      os.system("git remote set-url origin 'https://%s@github.com/%s/%s.git'; gitpush"%(username,username,repository))
  class Google_Drive:
    def __init__(self, Email_Address):
      #https://developers.google.com/drive/api/v3/quickstart/python
      # FIRST, EXPORT THE CREDS NO.1.
      # YEAH, THEN IT JAX THAT TO NOW GET TOKEN.PICKLE!!!!
      import os
      ADDY = "." + "|".join([Email_Address, "Client_Secret", "GSuite"]) + ".json"
      Binarydata().export(ADDY)
      GDRIVE_PICKLE_ADDRESS = "." + "|".join([Email_Address, "Client_Secret_3", "GSuite"]) + ".pickle"
      if GDRIVE_PICKLE_ADDRESS not in os.listdir():
        if GDRIVE_PICKLE_ADDRESS in key("filename", All(Binarydata)):
          Binarydata().export(GDRIVE_PICKLE_ADDRESS)
        else:
          1

      import pickle
      import os.path
      from googleapiclient.discovery import build
      from google_auth_oauthlib.flow import InstalledAppFlow
      from google.auth.transport.requests import Request

      # If modifying these scopes, delete the file GDRIVE_PICKLE_ADDRESS.
      SCOPES = ['https://www.googleapis.com/auth/drive']

      """Shows basic usage of the Drive v3 API.
      Prints the names and ids of the first 10 files the user has access to.
      """
      creds = None
      # The file GDRIVE_PICKLE_ADDRESS stores the user's access and refresh tokens, and is
      # created automatically when the authorization flow completes for the first
      # time.
      if os.path.exists(GDRIVE_PICKLE_ADDRESS):
        with open(GDRIVE_PICKLE_ADDRESS, 'rb') as token:
          creds = pickle.load(token)
      # If there are no (valid) credentials available, let the user log in.
      if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
          creds.refresh(Request())
        else:
          OSA().display_dialog("A browser will open and you will be asked to log in and accept permissions to use the Google Drive API. Click OK to continue.",text_prompt=False)
          flow = InstalledAppFlow.from_client_secrets_file(
            ADDY, SCOPES)
          creds = flow.run_local_server()
        # Save the credentials for the next run
        with open(GDRIVE_PICKLE_ADDRESS, 'wb') as token:
          pickle.dump(creds, token)

      service = build('drive', 'v3', credentials=creds)
      self.service = service
      # Call the Drive v3 API
      results = service.files().list(
        pageSize=10, fields="nextPageToken, files(id, name)").execute()
      items = results.get('files', [])

      if not items:
        print('No files found.')
      else:
        print('Files:')
        for item in items:
          print(u'{0} ({1})'.format(item['name'], item['id']))

      Binarydata().update_or_create(GDRIVE_PICKLE_ADDRESS)
      Binarydata().export(GDRIVE_PICKLE_ADDRESS)
    def create(self, address, public = True):
      service = self.service
      ext_dict = {".doc": "application/msword",".dot": "application/msword",".docx": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",".dotx": "application/vnd.openxmlformats-officedocument.wordprocessingml.template",".docm": "application/vnd.ms-word.document.macroEnabled.12",".dotm": "application/vnd.ms-word.template.macroEnabled.12",".xls": "application/vnd.ms-excel",".xlt": "application/vnd.ms-excel",".xla": "application/vnd.ms-excel",".xlsx": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",".xltx": "application/vnd.openxmlformats-officedocument.spreadsheetml.template",".xlsm": "application/vnd.ms-excel.sheet.macroEnabled.12",".xltm": "application/vnd.ms-excel.template.macroEnabled.12",".xlam": "application/vnd.ms-excel.addin.macroEnabled.12",".xlsb": "application/vnd.ms-excel.sheet.binary.macroEnabled.12",".ppt": "application/vnd.ms-powerpoint",".pot": "application/vnd.ms-powerpoint",".pps": "application/vnd.ms-powerpoint",".ppa": "application/vnd.ms-powerpoint",".pptx": "application/vnd.openxmlformats-officedocument.presentationml.presentation",".potx": "application/vnd.openxmlformats-officedocument.presentationml.template",".ppsx": "application/vnd.openxmlformats-officedocument.presentationml.slideshow",".ppam": "application/vnd.ms-powerpoint.addin.macroEnabled.12",".pptm": "application/vnd.ms-powerpoint.presentation.macroEnabled.12",".potm": "application/vnd.ms-powerpoint.template.macroEnabled.12",".ppsm": "application/vnd.ms-powerpoint.slideshow.macroEnabled.12",".mdb": "application/vnd.ms-access"}
      ext = "." + address.split(".")[-1]
      if ext not in ext_dict:
        OSA.display_dialog("extension %s not in ext_dict.\n Please add it." % (ext), text_prompt = False)
      import googleapiclient
      media = googleapiclient.http.MediaFileUpload(address,
                              mimetype=ext_dict[ext],
                              resumable=False)
      file_metadata = {
          'name': address.replace("_", " "),
          'mimeType': ext_dict[ext],
      }
      file = service.files().create(body=file_metadata,
                                          media_body=media,
                                          fields='id').execute()
      print('File ID: %s' % file.get('id'))
      ID = file.get("id")
      if public == True:
        service.permissions().create(body={"role":"reader", "type":"anyone"}, fileId=ID).execute()
      URL = "https://drive.google.com/file/d/{}/view".format(ID)
      return URL
    @staticmethod
    def tests():
      Email_Address = a_shop().Business_Email_Address
      ADDY = "." + "|".join([Email_Address, "Client_Secret", "GSuite"]) + ".json"
      assert ADDY in key("filename", All(Binarydata))
      R = Google_Drive(Email_Address = Email_Address)
      Test_Address = "Test.docx"
      text_to_docx("Test", Test_Address)
      R.create(address = Test_Address, public = True)
      rm("Test.docx")
  class Google_Places_Search:
    def google_places_search(x="40.7532616",y="-73.9839516",radius=3500,name="restaurant"):
      # from https://stackoverflow.com/questions/50573658/python-google-places-api
      # This covers from Houston Street to 79th St at these coordinates with radius 3500 meters
      import requests
      import json

      APIKEY = "AIzaSyBFx8hqftDOlrSWRTiOSowjwfeS1OQtBpw"

      def findPlaces(loc,radius, pagetoken = None):
        lat, lng = loc
        type = "restaurant"
        #url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={lat},{lng}&radius={radius}&type={type}&key={APIKEY}{pagetoken}".format(lat = lat, lng = lng, radius = radius, type = type,APIKEY = APIKEY, pagetoken = "&pagetoken="+pagetoken if pagetoken else "")
        url = "https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={lat},{lng}&radius={radius}&name={name}&key={APIKEY}{pagetoken}".format(lat = lat, lng = lng, radius = radius, name = name,APIKEY = APIKEY, pagetoken = "&pagetoken="+pagetoken if pagetoken else "")
        print(url)
        response = requests.get(url)
        res = json.loads(response.text)
        # print(res)
        print("here results ---->>> ", len(res["results"]))

        for result in res["results"]:
          info = ";".join(map(str,[result["name"],result["geometry"]["location"]["lat"],result["geometry"]["location"]["lng"],result.get("rating",0),result["place_id"]]))
          print(info)
        pagetoken = res.get("next_page_token",None)

        print("here -->> ", pagetoken)

        return pagetoken, res["results"]

      # pagetoken = "CpQFhwIAADQWOcVI1wll-B869Z24El48rXw18gKoab_keD65V18zFEvPjKIfrS79Pc_vXJcZQtOuF0RObQG20ph-GE3ssP3k1fu8zsYbw5g3UPbSjAvQLdXkdD1qAWztXj7hc5Kxc4pYRyGM1_ljVOHg3Py_zSlYscnoNjCvRua2MDQgusCsEquNqGREFdvhjDkbeMhEFYxHucTnIn96OxIJEpamePTHsBooYyPBaa_ejGZ_C99QeDjpSkSKBgEe3aL1uWKlYhsGKh7biQUR5rKsKPodwccLIrW8Gr5tag3NH0sLPExHHvqzlpkj--KIuydTVjPH7u2zHxmPByServ2S5xjXYUBRr-ly3e1xPsVMhZZH9TxfttCIHLscBvpvCswIfaGYdl3bEzsrFISfpp0rpKtlp9gWGY7Tbk2n6s3etCHQEHn2qmM8bsJwkZV81pUWN0j9C9RX-ywOyIKY2yp1w_Iq1mRwOwY4mckbicOoooHiV6JER4xe7Kizw9hbXOnezn_NMk15TLwRoXlfL1s73uwogo-VWE8c-V1HqRpWQSyudRhLwhOEclrICXIdxICOgTgYO1z57xCEerw3QUL_7MPDrlbbh_AlX8I6Jfe8IhQ1Fkqu_njatm6aBTjkp2CSqlvZJpI_Lrv330VcyFEqBkGn7NJew3I9xofSrBaXFa8ABi6DXQm6-yC32OEyf7GHNXINjT1IB0yh6KR6c0qzaqiqOzKcuuai9XqEMQNNKyi6EuhzH5TP9YA56N3JhnXRFhs2aWHZhLlieVI6_uqzpZSgYjUem8aQrMTlmHw0kIYU8I-Ca041C4Zm2gMezwygRrhzsOoAmbmu96nft0KuIWTB3A_xGVKYQ2qjb2KRM7nsglnSEhDoNs8EhvuIm0FQs30YSCp5GhRO3b3Tn5rsLuwiWgu8hwEGhL0S1A"
      pagetoken = None

      results = []
      while True:
        pagetoken, results_ = findPlaces(loc=(x,y),radius=radius,pagetoken=pagetoken)
        results.extend(results_)
        import time
        # time.sleep(5)
        time.sleep(10)
        if not pagetoken:
          break
      return results
      """
      assert len(google_places_search(name="trader joes")) == 6
      assert len(google_places_search(name="park")) == 0
      assert len(google_places_search(name="central park")) == 3
      """
    def getinfo(placeid):
      APIKEY="AIzaSyBFx8hqftDOlrSWRTiOSowjwfeS1OQtBpw"
      fields=["formatted_address","formatted_phone_number","opening_hours","name","rating","website"]
      #url= "https://maps.googleapis.com/maps/api/place/details/json?key={}&placeid={}&fields={}".format(
      #      APIKEY,placeid,",".join(fields))
      url= "https://maps.googleapis.com/maps/api/place/details/json?placeid={}&key={}&fields={}".format(
            placeid,APIKEY,",".join(fields))
      r = requests.get(url)
      #return url
      data = json.loads(r.text)
      return data
  class Graph(object):
    def __init__(self, *args, plot_type='scatterplot',**kwargs):
      import matplotlib.pyplot as plt
      ifdo(lambda:not os.path.exists(homepath("~/.matplotlib")),lambda:os.system("mkdir ~/.matplotlib && touch ~/.matplotlib/matplotlibrc && echo 'backend: agg' >> ~/.matplotlib/matplotlibrc"))
      ifdo(lambda:kwargs.get("newplot")==True,lambda:plt.subplot(self.plot_number))
      ifdo(lambda:plot_type=="lineplot",lambda:plt.plot(*args, "-", label=kwargs.get("label",None)))
      ifdo(lambda:plot_type=="scatterplot",lambda:plt.plot(*args, "."))
      ifdo(lambda:plot_type=="histogram",lambda:plt.hist(*args, bins=20))
      plt.xlabel(kwargs.get("xlabel","x")), plt.ylabel(kwargs.get("ylabel","y")), plt.title(kwargs.get("title","title")), plt.legend()
      plt.show()
  class Handles:
    # Basically, it shows the day's sales for all shops, as well and if clicked, shows the adsets.
    def __init__(self):
      import rumps
      from rumps import MenuItem as M
      from rumps import MenuItem
      self.app = rumps.App("🚀",quit_button=Null)
      globals().update(locals())


      self.set_menu()
      #process(  lambda: [time.sleep(6.15), self.set_menu()]  )
      time.sleep(6)
      self.app.run()


    def set_menu(self):
      keys = list(self.app.menu.keys())
      redprint(keys)
      for i in keys:
        self.app.menu.pop(i)
      keycall("Icon",All(Adset))
      keycall("post_handle",All(Adset))
      self.app.menu = [MenuItem("/",callback=lambda _=None:[keycall("post_handle",All(Adset)),keycall("__call__",All(Handle)),self.set_menu()])]+\
                      [
                        MenuItem("[%s]"%(i.reach),icon=Filter(Adset,handle=i.handle)[0].Icon()) for i in keysort("reach",All(Handle),tcer=True)
                      ]
  class ImageComp:
    def __call__(self,i1,i2,verbose = False):
      self.verbose = verbose
      # B = pool(Images().download,key("src",product.images))
      # [[[i,j] for j in B if j!=i] for i in B]
      from PIL import Image
      from skimage.measure import compare_ssim as ssim
      import argparse
      import cv2
      import imutils
      import matplotlib.pyplot as plt
      import numpy as np
      g().update(locals())
      self.fn1 = i1
      self.fn2 = i2
      self.i1 = cv2.imread(i1)
      self.i2 = cv2.imread(i2)
      self.resize()
      self.test_pass_score = GLOBAL_IMAGE_COMPARISON_TEST_SCORE
      return self.compare_images()
    def resize(self):
      shape1 = list(self.i1.shape)[:2]
      if self.verbose: redprint("shape1: %s" % shape1)
      shape2 = list(self.i2.shape)[:2]
      if self.verbose: redprint("shape2: %s" % shape2)
      if sum(shape1) > sum(shape2):
        Images().resize_disregard_proportion(shape1[1], shape1[0], self.fn2, self.fn2)
        if self.verbose: redprint("shape1: %s -> %s" % (shape2, (shape1[1], shape1[0])))
        self.i2 = cv2.imread(self.fn2)
        if self.verbose: redprint("reinitializing image %s" % "self.fn2")
        shape2 = list(self.i2.shape)[:2]
        if self.verbose: redprint("shape1: %s, shape2: %s" % (shape1, shape2))
      if sum(shape1) < sum(shape2):
        Images().resize_disregard_proportion(shape2[1], shape2[0], self.fn1, self.fn1)
        if self.verbose: redprint("shape1: %s -> %s" % (shape1, (shape2[1], shape2[0])))
        self.i1 = cv2.imread(self.fn1)
        if self.verbose: redprint("reinitializing image %s" % "self.fn1")
        shape1 = list(self.i1.shape)[:2]
        if self.verbose: redprint("shape1: %s, shape2: %s" % (shape1, shape2))
      else:
        if self.verbose: redprint("images already same size: %s %s" % (shape1, shape2))
    def mse(self):
      import numpy as np
      err = np.sum((self.i1.astype("float") - self.i2.astype("float")) ** 2)
      err /= float(self.i1.shape[0] * self.i1.shape[1])
      return err
    def compare_images_2014(self):
      m = self.mse()
      s = None
      try:s = ssim(self.i1, self.i2)
      except: s = ssim(self.i1, self.i2, multichannel=True)
      if self.verbose: redprint("m, %s s, %s" % (m, s))
      return True if s > self.test_pass_score else False
    def compare_images_2017(self):
      grayA = cv2.cvtColor(self.i1, cv2.COLOR_BGR2GRAY)
      grayB = cv2.cvtColor(self.i2, cv2.COLOR_BGR2GRAY)

      (score, diff) = ssim(grayA, grayB, full=True)
      diff = (diff * 255).astype("uint8")
      if self.verbose: redprint("s: {}".format(score))
      return True if score > self.test_pass_score else False
    def compare_images(self):
      alg1 = self.compare_images_2014()
      alg2 = self.compare_images_2017()
      if self.verbose: redprint("alg1: %s | alg2: %s" % (alg1, alg2))
      return True if(True==alg1==alg2)else(False)
  class Images(object):
    def flexor_and_tenor(self, address, size, logo_scaling_dimension_size):
      import cv2, numpy as np

      pic = cv2.imread(address)
      t1, t2 = pic.shape[0]*(size[0]/logo_scaling_dimension_size[0]), pic.shape[1]*(size[1]/logo_scaling_dimension_size[1])
      t1, t2 = int(t1,), int(t2,)
      pic[0:t1,0:t2,0:,] = np.array([255,255,255])
      cv2.imwrite(address, pic)
      return address
      for i in os.listdir(homepath("~/Desktop")):
        os.system("mv '/Users/$USER/Desktop/%s' '/Users/$USER/tavern/tavern/soda/dls/'"%(i))
    def image_base64(self, address):
      import base64
      return base64.b64encode(open(address,"rb").read())
    def vstack(self, images= ["hot.png"]*3, destination_address=None):
      imgs       =  pool(Image.open,images).result()
      widths = set(lmap(lambda i: Image.open(i).size[0],images))
      print(widths)
      
      min_shape = sorted( [(np.sum(i.size), i.size ) for i in imgs])[0][1]

      x = list((np.asarray( i ) for i in imgs ))
      
      imgs_comb  = np.vstack( (np.asarray( i ) for i in x ) )
      import scipy.misc
      print(imgs_comb.shape)
      scipy.misc.imsave(input("destination address?: ") if destination_address == None else destination_address,imgs_comb)
      return destination_address
    def slow_vstack(self, images, destination_address=None):
      imgs =  pool(Image.open,images).result()
      min_shape = sorted( [(np.sum(i.size), i.size ) for i in imgs])[0][1]
      arrays = pool(np.asarray,imgs).result()
      jaxpel = arrays[0]
      for idx,i in enum(arrays[:-1]):
        try:
          jaxpel = np.vstack([jaxpel, arrays[idx+1]])
          redprint(idx, jaxpel.shape)
        except Exception as e:
          redprint("some error.")
      imgs_comb  = Image.fromarray( jaxpel)
      imgs_comb.save(input("destination address?: ") if destination_address == None else destination_address )
      return destination_address
    def hstack(self, images):
      import numpy as np
      """
      imgs = []
      import numpy as np
      imgs.append(np.full((1000,100,3),255,dtype=np.uint8))
      imgs.append(np.full((1000,100,3),255,dtype=np.uint8))
      imgs.append(np.full((800,100,3),255,dtype=np.uint8))
      import cv2
      addresses = [get_random_address(homepath("~/tavern/tavern/soda/dls")).png() for i in range(3)]
      for address,i in zip(addresses,imgs):
        cv2.imwrite(address,i)
      images = addresses
      """
      imgs       =  pool(Image.open,images).result()
      
      min_shape = sorted( [(np.sum(i.size), i.size ) for i in imgs])[0][1][1]
      min_shape_2 = sorted( [(np.sum(i.size), i.size ) for i in imgs])[0][1][0]
      max_shape = sorted( [(np.sum(i.size), i.size ) for i in imgs],reverse=True)[0][1][1]
      for idx,i in enum(imgs):
        if i.size[1] != max_shape:
          x = cv2.imread(images[idx])
          import numpy as np
          new = np.full((max_shape,min_shape_2,3),0,dtype=np.uint8)
          new[0:i.size[1],0:min_shape_2,] = x
          cv2.imwrite(images[idx],new)
      imgs       =  pool(Image.open,images).result()

      imgs_comb  = np.hstack( (np.asarray( i ) for i in imgs ) )
      import scipy.misc
      print(imgs_comb.shape)
      destination_address = get_random_address(homepath("~/tavern/tavern/soda/dls")).png()
      scipy.misc.imsave(destination_address,imgs_comb)
      return destination_address
    def __init__(self):
      import urllib.request
      from PIL import Image
      from PIL import ImageEnhance, ImageFilter
      import cv2
      import numpy as np
      from moviepy.editor import VideoFileClip
      globals().update(locals())
    def download(self, url="http://www.gunnerkrigg.com//comics/00000001.jpg", save_path=None):
      if not save_path:
        save_folder    = os.path.expanduser("~/tavern/tavern/soda/dls")
        os.makedirs(save_folder, exist_ok=True)
        save_path = get_random_address(save_folder).jpg()
        print('Saving to.. %s'%save_path)
      try:
        import urllib
        urllib.request.urlretrieve(url, save_path)
        #open(save_path,"wb").write(requests.get(url).raw)
      except Exception as e:
        redprint("%s, url: %s"%(e, url))
        time.sleep(5)
        return Images().download(url,save_path)
      return save_path
    def resize_disregard_proportion(self, width, height, infile, outfile):
      from PIL import Image
      x = Image.open(infile)
      x = x.resize((width, height), Image.ANTIALIAS)
      x.save(outfile)
      return outfile
    @staticmethod
    @timeit
    def images_to_video(images, width, height, framerate, outfile):
      """[Annotation] if you edit this, it doesn't look like it makes sense, but that's usual for this stuff. [assume it works]"""
      from PIL import Image
      import cv2
      import os
      """[Hard-Add B] emitting"""
      print("initiating Images().images_to_video")
      print("[Emit] Verifying image_paths are Images --")
      """[Annotation] [Hard-Add A] (part of a compilation of hard-adds)"""
      images = sudby(lambda i: tp(lambda:Image.open(i)), images)
      """[Annotation] here, i had to change the names to .png and do some complicated thing with blips in it """
      olds, news = ["%s.png"%(".".join(i.split(".")[:-1])) for i in images], images
      [Image.open(old).save(new) for old,new in zip(olds,news) if old.endswith(".png") == False and old != new] #chx4if!=png\|undeeded
      images = ["%s.png"%(".".join(i.split(".")[:-1])) for i in images]
      """[Hard-Add B] emitting"""
      print("[Emit] Changed all image_paths to PNG format")
      print("[Emit] Resizing all images now -- ")
      """[Annotation] here, resize """    
      for IMAGE_FILENAME_TO_SIZE in images:
        print(IMAGE_FILENAME_TO_SIZE)
        x = Image.open(IMAGE_FILENAME_TO_SIZE)
        x = x.resize((width, height), Image.ANTIALIAS)
        x.save(IMAGE_FILENAME_TO_SIZE)
      """[Hard-Add B] emitting"""
      print("[Emit] Adding images to outfile %s -- "%outfile)
      """[Annotation] here, took this code from stackoverflow; basically it makes an `out` and adds images to it."""
      out = cv2.VideoWriter(outfile, cv2.VideoWriter_fourcc(*"mp4v"), framerate, (width, height))
      def add_images_to_out(out, images):
        for image in images:
          frame = cv2.imread(image)
          out.write(frame) # Write out frame to video
          cv2.imshow("video",frame)
          if (cv2.waitKey(1) & 0xFF) == ord("q"): # Hit `q` to exit
            break
        return out
      add_images_to_out(out, images).release()
      """[Hard-Add B] emitting"""
      print("[Emit] Video file successfully created. cv2 cleaning up --")
      """[Annotation] [No-annotation]"""
      cv2.destroyAllWindows()
      """[Annotation] [No-annotation]"""
      print("The output video is {}".format(outfile))
      """[Hard-Add B] emitting"""
      print("[Emit] End of images_to_video --*")
      return outfile
      """ [A Test] \"\"\"
      import os
      test_photos_path = os.path.expanduser("~/Documents/photos/test")
      if not os.path.exists(test_photos_path):
        print("you must create a photo directory with images at ~/Documents/photos/test")
        print("ending test..")
      os.chdir(test_photos_path)
      images_to_video(os.listdir(), 1920, 1080, 60, "out.mp4")  
      """
    def images_to_video2(self, images, frames_per_image = 60):
      framerate = 30
      # images = ["image1.jpg"]
      out_location = get_random_address(homepath("~/tavern/tavern/soda/dls")).mp4()
      images = sudby(lambda i: tp(lambda:Image.open(i)), images)
      width, height, layers = cv2.imread(images[0]).shape
      out = cv2.VideoWriter(out_location, cv2.VideoWriter_fourcc(*"mp4v"), framerate, (width, height))
      images = lmap(lambda i: cv2.imread(i), images)
      for i in images:
        for j in range(frames_per_image):
          out.write(i)
      out.release()
      r = VideoFileClip(out_location)
      print(r.duration)
      os.system("open %s"%(out_location))
      return out_location
    @staticmethod
    def image_show(images):
      # final = concatenate([VideoFileClip(clips[0]),
      #                      VideoFileClip(clips[1]).crossfadein(0.5),
      #                      VideoFileClip(clips[2]).crossfadein(0.5),
      #                      ],
      #              padding=-1, method="compose")
      frames_per_image = int(OSA.log("frames per image?"))
      crossfadein = 0.5
      extra_frames = int(30 * crossfadein)
      frames_per_image = frames_per_image + 30 + extra_frames
      # clips = [Images().images_to_video2([images[0]], frames_per_image - 30)] + lmap(lambda i: Images().images_to_video2([i], frames_per_image), images[1:])
      clips = [Images().images_to_video2([images[0]], frames_per_image - extra_frames)] + lmap(lambda i: Images().images_to_video2([i], frames_per_image), images[1:])
      # clips = lmap(lambda i: Images().images_to_video2([i], frames_per_image), images)
      from moviepy.editor import VideoFileClip
      from moviepy.editor import concatenate
      # 'final = VideoFileClip(clips[0])\nfor i in clips[1:]:\n  final = concatenate([final,\n                        VideoFileClip(i).crossfadein(0.5)],\n             padding=-1, method="compose")'
      final = concatenate([VideoFileClip(clips[0]),
                          *lmap(lambda i: VideoFileClip(i).crossfadein(crossfadein), clips[1:])],
                   padding=-1, method="compose")
      out_location = get_random_address(homepath("~/tavern/tavern/soda/dls")).mp4()
      final.write_videofile(out_location)
      os.system("open '{}'".format(out_location))
      return out_location
    def resize(self, fn, size=1200):
      if not size:
        return fn
      im = Image.open(fn)
      import numpy as np
      image_size = np.array(im.size)
      # ratio = max(image_size)/size
      ratio = image_size[0]/size
      new_size = image_size / ratio 
      new_size = [int(round(i)) for i in new_size]
      im = im.resize(new_size)
      im.save(fn)
      return fn
    def resize_via_width(self, address, desired_width=1200):
      # Always Resize The Bitch.
      im = Image.open(address)
      aspect_ratio = im.size[1]/im.size[0]
      im = im.resize((desired_width,Integer(desired_width*aspect_ratio) ))
      im.save(address)
      return address
    def resize_over_background(self, address, size):
      img = cv2.imread(address)
      size_ = size
      size = list(tcer(img.shape[:2]))
      larger_side = max(size)
      x = np.full((larger_side,larger_side,3),77,dtype=np.uint8)
      to_subtract = 0
      if size[0] > size[1]:
        diff = int(larger_side - size[1])
        if diff % 2 == 1: 
          to_subtract = 1
        diff = int(diff / 2)
        diff1 = diff
        x[diff:int(larger_side-diff)-to_subtract,0:larger_side] = img
      elif size[1] > size[0]:
        diff = int(larger_side - size[0])
        if diff % 2 == 1: 
          to_subtract = 1
        diff = int(diff / 2)
        diff1 = diff
        x[0:larger_side,diff:int(larger_side-diff1)-to_subtract] = img
      else:
        x[0:larger_side,0:larger_side] = img
      cv2.imwrite(address,x)
      address = Images().resize(address,size_)
      return address
    def get_image_size(self, address):
      return Image.open(address).size
    def image_size(x):
      import PIL
      if type(x) == PIL.JpegImagePlugin.JpegImageFile:
        return x.size
      else:
        return tuple(tcer(x.shape[:2]))
    def download_and_resize(self, url, size=1200, save_path = None):
      save_path = self.download(url, save_path=save_path)
      im = Image.open(save_path).convert("RGB")
      import numpy as np
      image_size = np.array(im.size)
      ratio = max(image_size)/size
      new_size =  image_size / ratio 
      new_size = [int(i) for i in new_size]
      im = im.resize(new_size)
      im.save(save_path)
      return save_path
    def black_and_white(self, address):
      from PIL import Image
      image_file = Image.open(address) # open colour image
      image_file = image_file.convert("L") # convert image to black and white
      image_file.save(address)
      return address
    def fb_image_upload(self, x, init_shop=None, hash=False):
      if init_shop == None:
        init_shop = All(Shop)[0].shop_abbreviation
      if not os.path.exists(x):
        x = Images().download(x)
      shop = Shop()( All(Shop)[0].shop_abbreviation)
      image = AdImage(parent_id='act_%s'%shop.Facebook_Business_Ad_Account_ID)
      image[AdImage.Field.filename] = x
      image.remote_create()
      time.sleep(1.2)
      return image['url'] if hash == False else image['hash']
    def bitly_url(self,url):
      return json.loads(requests.get("https://api-ssl.bitly.com/v3/shorten?access_token={}&longUrl={}".format(Muta()().bitly_access_token, url)).text)["data"]["url"]
      """
      bitly_url("https://google.com")
      """
    def sharpen(self,x):
      img = Image.open(x)
      img = img.convert("RGB")
      img_sharp = img.filter(ImageFilter.SHARPEN)
      #img_sharp.show()
      img_sharp.save(x)
      return x
    def contrast(self,x):
      im = Image.open(x)
      enhancer = ImageEnhance.Contrast(im)
      enhanced_im = enhancer.enhance(1.2)
      enhanced_im.save(x)
      return x
    def contrast_sharpen(self,x,sharpen=True,contrast=True):
      im = Image.open(x)
      img_contrast = ImageEnhance.Contrast(im)
      if contrast:
        im = img_contrast.enhance(1.05)
      if sharpen:
        im = im.convert("RGB")
        im = im.filter(ImageFilter.SHARPEN)
      im.save(x, optimize=True)
      return x
    def compress(self, fn):
      from PIL import Image
      if os.path.getsize(fn) > 153600:
        img = Image.open(fn)
        img = img.resize(img.size,Image.ANTIALIAS)
        img.save(fn,optimize=True,quality=80)
      return fn
  class Inheritance:
    class Inheritor:
      __call__=lambda self,x:[exec("from types import MethodType,ModuleType,FunctionType",globals()),[(bind3(self,b))if(type(b)==FunctionType)else(setitem(self.__dict__,a,b))for a,b in(B.__dict__.items())]]
      pram=lambda self: print("a")
      poof=lambda self: print("AA")
    class B:
      pram=lambda self: print("b")
      poof=lambda self: print("BB")
    """
    a = Inheritor()
    a.pram()
    a.poof()
    a(B)
    a.pram()
    a.poof()
    """
  class InstagramBot:
    def __init__(self):
      self.bot = ExecutableText().export("InstagramBot")
  class InventoryLevel:
    def adjust(self, shop, variant, available_adjustment):
      original = (variant.inventory_quantity if(dict!=type(variant))else(variant["inventory_quantity"]))
      calls =  ((Shop()(shop) if(str==type(shop))else(shop)).shopify.InventoryLevel.adjust(location_id=(Shop()(shop) if(str==type(shop))else(shop)).location_id, inventory_item_id = (variant.inventory_item_id if(dict!=type(variant))else(variant["inventory_item_id"])),available_adjustment = available_adjustment))
      
      while True:
        ensurement = ((Shop()(shop) if(str==type(shop))else(shop)).shopify.Variant.find(id_=(variant.id if(dict!=type(variant))else(variant["id"])))).inventory_quantity
        # here, use another call of the variant's inventory_quantity and compare it to the first; ensuring the original has increased or decreased by a quantity over the ladder.
        changed_amount = available_adjustment
        twine = (changed_amount) == ( ( ensurement.__sub__  ( original ) ))
        redprint( "changed_amount:%s\nensurement-original:%s"%((changed_amount), ( ( ensurement.__sub__  ( original ) ))))
        if twine == True:
          break
        else:
          redprint("||Waiting for updated inventory amount..")
          time.sleep(0.5)
      redprint("--end")
      assert (changed_amount) == ( ( ensurement.__sub__  ( original ) ))
      time.sleep(0.25)
      return calls
  class Itertools:
    def __init__(self):
      import itertools
      import string
      globals().update(locals())
      globals().update({a:getattr(self,a) for a in dir(self)})
    def set_of_ordered_set(self,x,ordered_set_size):
      return list(itertools.permutations(x,ordered_set_size))
      """ test """
      """x = list(range(10))
            ordered_set_size = 3
            a = set_of_ordered_set(x,ordered_set_size)
            print(len(a))
            720"""
    def set_of_unordered_set(self,x,unordered_set_size):
      return list(itertools.combinations(x,unordered_set_size))
      """ test """
      """x = list(range(10))
            unordered_set_size = 3
            b = set_of_unordered_set(x,unordered_set_size)
            print(len(b))
            120"""
    def set_of_unordered_set_with_replacement(self,x,unordered_set_with_replacement_set_size):
      return list(itertools.combinations_with_replacement(x,unordered_set_with_replacement_set_size))
      """ test """
      """x = list(range(10))
            unordered_set_with_replacement_set_size = 3
            c = set_of_unordered_set_with_replacement(x,unordered_set_with_replacement_set_size)
            print(len(c))
            220"""
    def set_of_ordered_and_unordered_and_unordered_with_replacement_set(self,x,ordered_and_unordered_and_unordered_with_replacement_set_size):
      ordered_set = set_of_ordered_set(x,ordered_set_size=ordered_and_unordered_and_unordered_with_replacement_set_size)
      unordered_set = set_of_unordered_set(x,unordered_set_size=ordered_and_unordered_and_unordered_with_replacement_set_size)
      unordered_set_with_replacement = set_of_unordered_set_with_replacement(x,unordered_set_with_replacement_set_size=ordered_and_unordered_and_unordered_with_replacement_set_size)
      x = sum([ordered_set,unordered_set,unordered_set_with_replacement],[])
      # x = set(x)
      x = set(x)
      return x
    def set_of_ordered_and_unordered_and_unordered_with_replacement_set_for_alphabet(self,):
      import string
      x = " ".join(string.ascii_lowercase).split(" ")
      y = set_of_ordered_and_unordered_and_unordered_with_replacement_set(x,ordered_and_unordered_and_unordered_with_replacement_set_size=4)
      z = set(y)
      a = ["".join(i) for i in z]
      return a
      """ test """
      """x = set_of_ordered_and_unordered_and_unordered_with_replacement_set_for_alphabet()
                  In [45]: len(x)
                  Out[45]: 367601"""
    def set_product(self,x,repeat_set_size):
      """ ::: lol try out [1,2,3,2,1],3 . your first thing, it had 25, this has 27. This seems to be that thing which you would have wanted. ::: """
      x = list(itertools.product(x,repeat=repeat_set_size))
      return x
  class LinReg:
    def __init__(self):
      from sklearn.linear_model import LinearRegression
      globals().update(locals())
    def fit(self, X, y):
      self.X = X
      self.y = y
      self.LinReg = LinearRegression()
      self.LinReg.fit(X,y)
    def score(self):
      print(  self.LinReg.score(self.X,self.y)  )
    def predict(self, x):
      y = self.LinReg.predict([[x]])
      return y
    def dictlist_predict(self,x,fields,y_field):
      X = []
      for i in x:
        X.append([i[v] for v in fields])
      y = [i[y_field] for i in x]
      new = LinReg()
      new.fit(X,y)
      return new
  class Locations:
    states = { 'AK': 'Alaska', 'AL': 'Alabama', 'AR': 'Arkansas', 'AS': 'American Samoa', 'AZ': 'Arizona', 'CA': 'California', 'CO': 'Colorado', 'CT': 'Connecticut', 'DC': 'District of Columbia', 'DE': 'Delaware', 'FL': 'Florida', 'GA': 'Georgia', 'GU': 'Guam', 'HI': 'Hawaii', 'IA': 'Iowa', 'ID': 'Idaho', 'IL': 'Illinois', 'IN': 'Indiana', 'KS': 'Kansas', 'KY': 'Kentucky', 'LA': 'Louisiana', 'MA': 'Massachusetts', 'MD': 'Maryland', 'ME': 'Maine', 'MI': 'Michigan', 'MN': 'Minnesota', 'MO': 'Missouri', 'MP': 'Northern Mariana Islands', 'MS': 'Mississippi', 'MT': 'Montana', 'NA': 'National', 'NC': 'North Carolina', 'ND': 'North Dakota', 'NE': 'Nebraska', 'NH': 'New Hampshire', 'NJ': 'New Jersey', 'NM': 'New Mexico', 'NV': 'Nevada', 'NY': 'New York', 'OH': 'Ohio', 'OK': 'Oklahoma', 'OR': 'Oregon', 'PA': 'Pennsylvania', 'PR': 'Puerto Rico', 'RI': 'Rhode Island', 'SC': 'South Carolina', 'SD': 'South Dakota', 'TN': 'Tennessee', 'TX': 'Texas', 'UT': 'Utah', 'VA': 'Virginia', 'VI': 'Virgin Islands', 'VT': 'Vermont', 'WA': 'Washington', 'WI': 'Wisconsin', 'WV': 'West Virginia', 'WY': 'Wyoming'}
    _country_code_dict = {
      'c0': 'US',
      'c1': 'CA,AU,UK,NZ',
      'c2': 'CN,TW,HK,SG,JP,UA,RU',
      'c3': 'AE,QA,SA,GU,BH,AF,GU,IQ,TT,MC,PR,LB,TR,DM,MV,KH,MT,KW',
      'c4': 'AT,CH,DK,SK,CZ,BE,FR,NO,SE'}
    country_code_dict = {
      'AD': 'Andorra', 'AE': 'United Arab Emirates', 'AF': 'Afghanistan', 'AG': 'Antigua and Barbuda', 'AI': 'Anguilla', 'AL': 'Albania', 'AM': 'Armenia', 'AO': 'Angola', 'AQ': 'Antarctica', 'AR': 'Argentina', 'AS': 'American Samoa', 'AT': 'Austria', 'AU': 'Australia', 'AW': 'Aruba', 'AX': 'Aland Islands', 'AZ': 'Azerbaijan', 'BA': 'Bosnia and Herzegovina', 'BB': 'Barbados', 'BD': 'Bangladesh', 'BE': 'Belgium', 'BF': 'Burkina Faso', 'BG': 'Bulgaria', 'BH': 'Bahrain', 'BI': 'Burundi', 'BJ': 'Benin', 'BL': 'Saint Barthélemy', 'BM': 'Bermuda', 'BN': 'Brunei Darussalam', 'BR': 'Brazil', 'BS': 'Bahamas', 'BT': 'Bhutan', 'BV': 'Bouvet Island', 'BW': 'Botswana', 'BY': 'Belarus', 'BZ': 'Belize', 'CA': 'Canada', 'CC': 'Cocos (Keeling) Islands', 'CF': 'Central African Republic', 'CG': 'Congo', 'CH': 'Switzerland', 'CI': "Côte d'Ivoire", 'CK': 'Cook Islands', 'CL': 'Chile', 'CM': 'Cameroon', 'CN': 'China', 'CO': 'Colombia', 'CR': 'Costa Rica', 'CU': 'Cuba', 'CV': 'Cape Verde', 'CW': 'Curaçao', 'CX': 'Christmas Island', 'CY': 'Cyprus', 'CZ': 'Czech Republic', 'DE': 'Germany', 'DJ': 'Djibouti', 'DK': 'Denmark', 'DM': 'Dominica', 'DO': 'Dominican Republic', 'DZ': 'Algeria', 'EC': 'Ecuador', 'EE': 'Estonia', 'EG': 'Egypt', 'EH': 'Western Sahara', 'ER': 'Eritrea', 'ES': 'Spain', 'ET': 'Ethiopia', 'FI': 'Finland', 'FJ': 'Fiji', 'FK': 'Falkland Islands (Malvinas)', 'FO': 'Faroe Islands', 'FR': 'France', 'GA': 'Gabon', 'GB': 'United Kingdom', 'GD': 'Grenada', 'GE': 'Georgia', 'GF': 'French Guiana', 'GG': 'Guernsey', 'GH': 'Ghana', 'GI': 'Gibraltar', 'GL': 'Greenland', 'GM': 'Gambia', 'GN': 'Guinea', 'GP': 'Guadeloupe', 'GQ': 'Equatorial Guinea', 'GR': 'Greece', 'GS': 'South Georgia and the South Sandwich Islands', 'GT': 'Guatemala', 'GU': 'Guam', 'GW': 'Guinea-Bissau', 'GY': 'Guyana', 'HK': 'Hong Kong', 'HM': 'Heard Island and McDonald Islands', 'HN': 'Honduras', 'HR': 'Croatia', 'HT': 'Haiti', 'HU': 'Hungary', 'ID': 'Indonesia', 'IE': 'Ireland', 'IL': 'Israel', 'IM': 'Isle of Man', 'IN': 'India', 'IO': 'British Indian Ocean Territory', 'IQ': 'Iraq', 'IS': 'Iceland', 'IT': 'Italy', 'JE': 'Jersey', 'JM': 'Jamaica', 'JO': 'Jordan', 'JP': 'Japan', 'KE': 'Kenya', 'KG': 'Kyrgyzstan', 'KH': 'Cambodia', 'KI': 'Kiribati', 'KM': 'Comoros', 'KN': 'Saint Kitts and Nevis', 'KW': 'Kuwait', 'KY': 'Cayman Islands', 'KZ': 'Kazakhstan', 'LA': "Lao People's Democratic Republic", 'LB': 'Lebanon', 'LC': 'Saint Lucia', 'LI': 'Liechtenstein', 'LK': 'Sri Lanka', 'LR': 'Liberia', 'LS': 'Lesotho', 'LT': 'Lithuania', 'LU': 'Luxembourg', 'LV': 'Latvia', 'LY': 'Libya', 'MA': 'Morocco', 'MC': 'Monaco', 'ME': 'Montenegro', 'MF': 'Saint Martin (French part)', 'MG': 'Madagascar', 'MH': 'Marshall Islands', 'ML': 'Mali', 'MM': 'Myanmar', 'MN': 'Mongolia', 'MO': 'Macao', 'MP': 'Northern Mariana Islands', 'MQ': 'Martinique', 'MR': 'Mauritania', 'MS': 'Montserrat', 'MT': 'Malta', 'MU': 'Mauritius', 'MV': 'Maldives', 'MW': 'Malawi', 'MX': 'Mexico', 'MY': 'Malaysia', 'MZ': 'Mozambique', 'NA': 'Namibia', 'NC': 'New Caledonia', 'NE': 'Niger', 'NF': 'Norfolk Island', 'NG': 'Nigeria', 'NI': 'Nicaragua', 'NL': 'Netherlands', 'NO': 'Norway', 'NP': 'Nepal', 'NR': 'Nauru', 'NU': 'Niue', 'NZ': 'New Zealand', 'OM': 'Oman', 'PA': 'Panama', 'PE': 'Peru', 'PF': 'French Polynesia', 'PG': 'Papua New Guinea', 'PH': 'Philippines', 'PK': 'Pakistan', 'PL': 'Poland', 'PM': 'Saint Pierre and Miquelon', 'PN': 'Pitcairn', 'PR': 'Puerto Rico', 'PT': 'Portugal', 'PW': 'Palau', 'PY': 'Paraguay', 'QA': 'Qatar', 'RE': 'Réunion', 'RO': 'Romania', 'RS': 'Serbia', 'RU': 'Russian Federation', 'RW': 'Rwanda', 'SA': 'Saudi Arabia', 'SB': 'Solomon Islands', 'SC': 'Seychelles', 'SD': 'Sudan', 'SE': 'Sweden', 'SG': 'Singapore', 'SI': 'Slovenia', 'SJ': 'Svalbard and Jan Mayen', 'SK': 'Slovakia', 'SL': 'Sierra Leone', 'SM': 'San Marino', 'SN': 'Senegal', 'SO': 'Somalia', 'SR': 'Suriname', 'SS': 'South Sudan', 'ST': 'Sao Tome and Principe', 'SV': 'El Salvador', 'SX': 'Sint Maarten (Dutch part)', 'SY': 'Syrian Arab Republic', 'SZ': 'Swaziland', 'TC': 'Turks and Caicos Islands', 'TD': 'Chad', 'TF': 'French Southern Territories', 'TG': 'Togo', 'TH': 'Thailand', 'TJ': 'Tajikistan', 'TK': 'Tokelau', 'TL': 'Timor-Leste', 'TM': 'Turkmenistan', 'TN': 'Tunisia', 'TO': 'Tonga', 'TR': 'Turkey', 'TT': 'Trinidad and Tobago', 'TV': 'Tuvalu', 'UA': 'Ukraine', 'UG': 'Uganda', 'UM': 'United States Minor Outlying Islands', 'US': 'United States', 'UY': 'Uruguay', 'UZ': 'Uzbekistan', 'VA': 'Holy See (Vatican City State)', 'VC': 'Saint Vincent and the Grenadines', 'VN': 'Viet Nam', 'VU': 'Vanuatu', 'WF': 'Wallis and Futuna', 'WS': 'Samoa', 'YE': 'Yemen', 'YT': 'Mayotte', 'ZA': 'South Africa', 'ZM': 'Zambia', 'ZW': 'Zimbabwe'}
    canada_province_codes = {
      'AB' : 'Alberta', 'BC' : 'British Columbia', 'MB' : 'Manitoba', 'NB' : 'New Brunswick', 'NL' : 'Newfoundland and Labrador', 'NS' : 'Nova Scotia', 'NT' : 'Northwest Territories', 'NU' : 'Nunavut', 'ON' : 'Ontario', 'PE' : 'Prince Edward Island', 'QC' : 'Quebec', 'SK' : 'Saskatchewan', 'YT' : 'Yukon'}
    def get_state(self,io):
      return self.states[io]if(2==len(io))else(dict(zip(self.states.values(),self.states.keys()))[io])
    def get_country(self,io):
      return self.country_code_dict[io]if(2==len(io))else(dict(zip(self.country_code_dict.values(),self.country_code_dict.keys()))[io])
    def get_canada_provinces(self,io):
      return self.canada_province_codes[io]if(2==len(io))else(dict(zip(self.canada_province_codes.values(),self.canada_province_codes.keys()))[io])
    globals().update(locals())
    """
    print("AK -> %s" % (Locations().get_state("AK")))
    print("Alaska -> %s" % (Locations().get_state("Alaska")))
    print("AD -> %s" % (Locations().get_country("AD")))
    print("Andorra -> %s" % (Locations().get_country("Andorra")))
    print("AB -> %s" % (Locations().get_canada_provinces("AB")))
    print("Alberta -> %s" % (Locations().get_canada_provinces("Alberta")))
    """
  class Menulet_Timer:
    def __init__(self):
      """
      Stepone: ^--
      Drofdown: Repeat_Setting|Yeah
      """
      import rumps
      from rumps import MenuItem as M
      from rumps import MenuItem
      self.app = rumps.App("0:00",quit_button=Null)
      globals().update(locals())


      self.is_repeat = False
      self.set_menu()
      time.sleep(6)
      self.app.run()


    def set_menu(self):
      keys = list(self.app.menu.keys())
      redprint(keys)
      for i in keys:
        self.app.menu.pop(i)
      self.notify=False
      self.app.menu = [
                        MenuItem("Is_Repeat %s"%("On"if(self.is_repeat)else("Off")),callback=lambda _=None:[setattr(self,"is_repeat",not self.is_repeat),self.set_menu()]),
                        MenuItem("1:00",callback=lambda _=None:process(lambda: [[[setattr(self.app,"title","%s:%s" % (int((60-i)/60), str((60-i)%60).zfill(2) )),zz(1)] for i in range(61)] for i in range(1 if self.is_repeat == False else WHILE_TRUE)])),
                        MenuItem("2:00",callback=lambda _=None:process(lambda: [[[setattr(self.app,"title","%s:%s" % (int((120-i)/60), str((120-i)%60).zfill(2) )),OSA.notify("%s:%s" % (int((120-i)/60), str((120-i)%60).zfill(2) )) if self.notify == 1 else(),zz(1)] for i in range(121)] for i in range(1 if self.is_repeat == False else WHILE_TRUE)])),
                        MenuItem("4:00",callback=lambda _=None:process(lambda: [[[setattr(self.app,"title","%s:%s" % (int((240-i)/60), str((240-i)%60).zfill(2) )),OSA.notify("%s:%s" % (int((240-i)/60), str((240-i)%60).zfill(2) )) if self.notify == 1 else(),zz(1)] for i in range(241)] for i in range(1 if self.is_repeat == False else WHILE_TRUE)])),
                        MenuItem("10:00",callback=lambda _=None:process(lambda: [[[setattr(self.app,"title","%s:%s" % (int((600-i)/60), str((600-i)%60).zfill(2) )),OSA.notify("%s:%s" % (int((600-i)/60), str((600-i)%60).zfill(2) )) if self.notify == 1 else(),zz(1)] for i in range(601)] for i in range(1 if self.is_repeat == False else WHILE_TRUE)])),
                        MenuItem("Set Timer", callback = lambda _=None: process(lambda: [globalise(datetime.strptime(OSA.display_dialog("Alarm Timer? In format Day of week, Hour of day, Minute of the hour, AM/PM")+ (", ") + ("%s, %s, %s"%(datetime.now().year,datetime.now().month,datetime.now().day)),"%A, %I, %M, %p, %Y, %m, %d"),"menulet_timer_alarm"),[[([[os.system("osascript -e 'set Volume 10'"),os.system("afplay /System/Library/Sounds/Submarine.aiff -v 10 &"),time.sleep(0.5)] for i in range(WHILE_TRUE)]) if( ((globe("menulet_timer_alarm").weekday()==datetime.now().weekday())and(globe("menulet_timer_alarm").hour==datetime.now().hour)and(globe("menulet_timer_alarm").minute==datetime.now().minute)) )else(),time.sleep(30)] for i in range(WHILE_TRUE)],self.set_menu()])),
                      ]
      self.app.menu = [[1, [
                        MenuItem("Is_Repeat %s"%("On"if(self.is_repeat)else("Off")),callback=lambda _=None:[setattr(self,"is_repeat",not self.is_repeat),self.set_menu()]),
                        MenuItem("1:00",callback=lambda _=None:process(lambda: [[[setattr(self.app,"title","%s:%s" % (int((60-i)/60), str((60-i)%60).zfill(2) )),zz(1)] for i in range(61)] for i in range(1 if self.is_repeat == False else WHILE_TRUE)])),
                        MenuItem("2:00",callback=lambda _=None:process(lambda: [[[setattr(self.app,"title","%s:%s" % (int((120-i)/60), str((120-i)%60).zfill(2) )),OSA.notify("%s:%s" % (int((120-i)/60), str((120-i)%60).zfill(2) )) if self.notify == 1 else(),zz(1)] for i in range(121)] for i in range(1 if self.is_repeat == False else WHILE_TRUE)])),
                        MenuItem("4:00",callback=lambda _=None:process(lambda: [[[setattr(self.app,"title","%s:%s" % (int((240-i)/60), str((240-i)%60).zfill(2) )),OSA.notify("%s:%s" % (int((240-i)/60), str((240-i)%60).zfill(2) )) if self.notify == 1 else(),zz(1)] for i in range(241)] for i in range(1 if self.is_repeat == False else WHILE_TRUE)])),
                        MenuItem("10:00",callback=lambda _=None:process(lambda: [[[setattr(self.app,"title","%s:%s" % (int((600-i)/60), str((600-i)%60).zfill(2) )),OSA.notify("%s:%s" % (int((600-i)/60), str((600-i)%60).zfill(2) )) if self.notify == 1 else(),zz(1)] for i in range(601)] for i in range(1 if self.is_repeat == False else WHILE_TRUE)])),
                        MenuItem("Set Timer", callback = lambda _=None: process(lambda: [globalise(datetime.strptime(OSA.display_dialog("Alarm Timer? In format Day of week, Hour of day, Minute of the hour, AM/PM")+ (", ") + ("%s, %s, %s"%(datetime.now().year,datetime.now().month,datetime.now().day)),"%A, %I, %M, %p, %Y, %m, %d"),"menulet_timer_alarm"),[[([[os.system("osascript -e 'set Volume 10'"),os.system("afplay /System/Library/Sounds/Submarine.aiff -v 10 &"),time.sleep(0.5)] for i in range(WHILE_TRUE)]) if( ((globe("menulet_timer_alarm").weekday()==datetime.now().weekday())and(globe("menulet_timer_alarm").hour==datetime.now().hour)and(globe("menulet_timer_alarm").minute==datetime.now().minute)) )else(),time.sleep(30)] for i in range(WHILE_TRUE)],self.set_menu()])),
                      ]]]
  class My_Matplotlib(object):
    def __init__(self):
      import matplotlib.pyplot as plt
      globals().update(locals())
      self.plot_number = 211
    def plot(self, *args, plot_type='scatterplot',**kwargs):
      plt.subplot(self.plot_number)if(True==kwargs.get("newplot",False))else(None)
      if plot_type == 'lineplot':
        plt.plot(*args, '-', label=kwargs.get("label",None))
      elif plot_type == 'scatterplot':
        plt.plot(*args, '.')
      elif plot_type == 'histogram':
        plt.hist(*args, bins=20)

      plt.xlabel(kwargs.get("xlabel","x"))
      plt.ylabel(kwargs.get("ylabel","y"))
      plt.title(kwargs.get("title","title"))
      plt.legend()

      if kwargs.get("newplot",False) == True: self.plot_number = self.plot_number + 1

      return
      """ ::: Caffeine example (12 hours) ::: """
      x = My_Matplotlib()
      x.plot([100, 200, 180, 140, 120, 110, 100, 100, 100, 100, 100, 100], newplot=False, label="alertness")
      x.show()

    def histogram_example(self):
      population_ages = list(range(18,65))
      ids = [x for x in range(len(population_ages))]
      bins = list(range(10,100, 10))
      plt.hist(population_ages, bins=10, histtype="bar", rwidth=0.8)
      plt.show()
    def pairplot(self, data, headers):
      import pandas as pd
      import seaborn as sb
      import matplotlib.pyplot as plt
      # %matplotlib tk
      CSV().DictWriteWithHeaders("tmp.csv", data, headers, delimiter = "\t")
      data = pd.read_csv("tmp.csv", delimiter = "\t")
      sb.pairplot(data)
      plt.show()
      os.system("rm tmp.csv")
    def barchart(self, x_indices=[0,1,2,3,4], y_indices=[10,5,10,5,10], **kwargs):
      #x_indices=[0,1,2,3,4]
      #y_indices=[10,5,10,5,10],
      import matplotlib.pyplot as plt
      plt.bar(x_indices, y_indices)

      plt.ylabel(kwargs.get("ylabel"))if("ylabel" in kwargs)else(1)
      plt.xticks(list(range(len(kwargs.get("xticks")))), kwargs.get("xticks"))if("xticks" in kwargs)else(1)
      plt.title(kwargs.get("title"))if("title" in kwargs)else(1)

      plt.show()
      # kwargs may include:
      # 1. align="center"
      # 2. alpha="0.5"
    def show(self):
      plt.show()
  class My_Meditations:
    def __init__(self):
      self.fuckboi = Browser()("sele",65)
    def wtf(self):
      OSA.log("LOL",tp=1-0)
  class My_Requests:
    process_ = False
    help = lambda self: redprint("""  def request(self,process_count=4,timeout=10,notInUrl="ø",notInText="ø",proxy=True):  """)
    requesting = lambda self: process(lambda: [self.request(no_return=True),self.requesting()if(0!=len(Filter(Request,x=False)))else([-1,redprint("Empty")])])
    def request(self,process_count=10,timeout=10,notInUrl="ø",notInText="ø",proxy=True,url=None,helper_count = 500,no_return = False):
      #url = "https://google.com"
      #timeout=10
      #notInUrl="ø"
      #notInText="ø"


      not_requested = Filter_Get_Randoms(Request,x=False,count=helper_count)if(None==url)else( [setitem(globals(),"url_specified_request",Create(Request,w=url)),Filter(Request,id=globals()["url_specified_request"].id)][1] )
      not_requested = list(not_requested)

      __special_metric__ = len(not_requested) + 1
      for idx_z, i in enumerate(range(helper_count)):
        __special_metric__ = __special_metric__ - 1
        redprint("__special_metric__: %s, idx_z: %s" % (__special_metric__,idx_z))
        if __special_metric__ == 0:
          return "None"
        self.new = not_requested.pop(0)
        magentaprint("self.new: %s" % self.new)
        if self.new.notInText: notInText = self.new.notInText
        if self.new.notInUrl: notInUrl = self.new.notInUrl


        if not self.new.cookies_label:
          a = requests.get(self.new.w)
          distinct_print(a.status_code)
          """ ::: hnsr y ts in hr. tk out. amazon_add gv me EROR. ::: """ #   ({[({[[[\\Took\\it\\out\\and\\it\\was\\fine.]]]]]}})})
          """ ::: Upon inspection, the ABOVE THING, i said, well.       if amazon in url, and a's status_code was 503... LOL. ::: """
          if((self.new.w.find("amazon")>-1)and(503==a.status_code)): return self.request(process_count=process_count,timeout=timeout,notInUrl=notInUrl,notInText=notInText,proxy=proxy,url=None,helper_count=helper_count,no_return=no_return)
          if (0!=a) and (-1!=getattr(a,"status_code",-1)) and (notInUrl not in getattr(a,"url",notInUrl)) and (notInText not in getattr(a,"text",notInText)):
            if no_return == True:
              Update(self.new,y=a.text,x=True,time_added=datetime.now()).y
              continue
            else:
              """ ::: Not sure why I took this out. ::: """
              #1
              return Update(self.new,y=a.text,x=True,time_added=datetime.now()).y

        print("here")
        #magentaprint(self.new.y)
        """ """
        s = None
        if self.new.cookies_label:
          s = requests.Session()
          s.headers = session_headers
          cookies = None
          cookies = cookies_to_database(username=self.new.cookies_label.split("|")[0],website_name=self.new.cookies_label.split("|")[1],reverse=True)
          s = cookies_to_session(cookies, s)
          a = s.get(self.new.w)
          redprint("[%s][%s]"% (a.status_code, self.new.w))

          if (0!=a) and (-1!=getattr(a,"status_code",-1)) and (notInUrl not in getattr(a,"url",notInUrl)) and (notInText not in getattr(a,"text",notInText)):
            redprint("[ensuring] `%s` not in `a.text`: %s" % (notInText, notInText not in a.text))
            redprint("[ensuring] `%s` not in `a.url`: %s" % (notInUrl, notInUrl not in a.text))
            if no_return == True:
              Update(self.new,y=a.text,x=True,time_added=datetime.now()).y
              continue
            else:
              return Update(self.new,y=a.text,x=True,time_added=datetime.now()).y
          else:
            redprint("[ensuring] `%s` in `a.text`: %s" % (notInText, notInText in a.text))
            redprint("[ensuring] `%s` in `a.url`: %s" % (notInUrl, notInUrl in a.text))




          """ if self.new.cookies_label, you're not gonna get it without the cookies, ie you must continue at the end of this if statement """
          continue
        """ """
        magentaprint("[url][%s]" % self.new.w)
        proxies = Proxy().get_random_proxy()if(1==proxy)else(None)
        processes = []
        for i in range(process_count):
          def run_once():
            if Get(Request,id=self.new.id).y == None:
              magentaprint(Get(Request,id=self.new.id).y)
              #a = tryreturn(requests.get,self.new.w,timeout=10,headers=session_headers,proxies=proxies,ep=True)
              #a = tryreturn(requests.get,self.new.w,timeout=10,headers=session_headers,proxies=proxies,ep=True)
              a = None
              try:
                if "amazon" in self.new.w:
                  a = requests.get(self.new.w,timeout=10,proxies=proxies,headers=amazon_headers)
                else:
                  a = requests.get(self.new.w,timeout=10,proxies=proxies,headers=session_headers)
              except Exception as e:
                redprint(e)
                time.sleep(10)
              print(a)
              print(a)
              print("going")
              if (0!=a) and (-1!=getattr(a,"status_code",-1)) and (notInUrl not in getattr(a,"url",notInUrl)) and (notInText not in getattr(a,"text",notInText)):
                if Get(Request,id=self.new.id).y != None:
                  if no_return == True:
                    Update(self.new,y=a.text,x=True,time_added=datetime.now()).y
                  else:
                    return Update(self.new,y=a.text,x=True,time_added=datetime.now()).y
              else:
                  return run_once()
          print("appending process")
          processes.append(process_(run_once)if(1==self.process_)else(process(run_once)))
        while True:
          time.sleep(1/4)
          if Get(Request,id=self.new.id).y != None:
            magentaprint(Get(Request,id=self.new.id).y)
            if self.process_ == True: keycall("terminate",processes)
            return Get(Request,id=self.new.id).y
        """ if notInUrl set to partial correct url, it will request x/second And Likely 443. """
  class Nemulet:
    def __call__(self):
      os.system("cd ~/tavern/tavern && ~/tavern/bin/python3.5 -c 'from soda.can import *; Nemulet().results()' &")
      os.system("cd ~/tavern/tavern && ~/tavern/bin/python3.5 -c 'from soda.can import *; Nemulet().suggestions()' &")
      os.system("cd ~/tavern/tavern && ~/tavern/bin/python3.5 -c 'from soda.can import *; Nemulet().interest_box()' &")
    def change_mutaliskconfig_title(self):
      x = OSA().display_dialog("Title|image_url?: ")
      #x = pyperclip.paste()
      x.split("|") # in case you pressed the hotkeys by accident, it will erried here.
      title, image_url = x.split("|")
      a = Muta.objects.all()[0]
      a.title = title;
      a.image_url = image_url;
      setattr(a,"amplitude",-1)
      a.save() #;;
      OSA().notify("spear - ")
      #assert Muta.objects.all()[0].title == title
      #assert Muta.objects.all()[0].image_url == image_url
      #Nemulet().interest_box_spear()
    @staticmethod
    def change_mutaliskconfig_store():    Update(Muta.objects.all()[0],         store_abbre=  OSA.display_dialog("🎪", dropdown_options=[i.shop_abbreviation for i in keysort("shop_abbreviation",All(Shop),tcer=False)],  is_dropdown=True )                           )
    """ store_abbre = CharField()
        niche = CharField()
        page = CharField()
        add_thumbnails = CharField()
        is_free_plus_ship = CharField()
    """
    @staticmethod
    def change_mutaliskconfig_niche():    Update(Muta.objects.all()[0],         niche=  OSA.display_dialog("Pick Your 🔮", dropdown_options=[i.niche for i in keysort("niche",All(Niche),tcer=False)],  is_dropdown=True )                           )
    @staticmethod
    # basically obselete
    def change_mutaliskconfig_page():    Update(Muta.objects.all()[0],         page= OSA.display_dialog("Page 🤒 😌 😗", dropdown_options=[i.name for i in keysort("name",All(Facebookpage),tcer=False)],  is_dropdown=True )                           )
    @staticmethod
    def fudge():
      1
      OSA().notify("FUDGE")
  class On_Exec:
    """ shows that if you use exec whilst locals are there, post-exec locals stay as pre-exec, even if used in exec. so exec needs to use new keys. """
    "pre-exec"
    def versioncheck(x):
      exec("import selenium; bprint(selenium.__version__); x = selenium.__version__",globals())
      return x
    def quadim1(x):
      exec("y = 5",globals())
      print(y)
      return y
    def quadim2(x):
      exec("x = 5",globals())
      print(x)
      return x
    def quadim3(x):
      exec("y = 5",globals())
      print(y)
      return y
  class OSA(object):
    def domain_tests(self):
      OSA("Terminal", ["cmd_n", "delay 2", "nettop", "delay 2", "return"])
      OSA("Google Chrome 70", ["cmd_q"])
      OSA("Google Chrome 70", )
      OSA("Google Chrome 70", ["cmd_l", "delay 2", "cmd_l", "aliexpress.com", "delay 2", "return"])
      redinput("visit 5 items in each category")
      OSA("Google Chrome 70", ["cmd_q"])
      OSA("Google Chrome 70", )
      OSA("Google Chrome 70", ["cmd_q"])
      OSA("Google Chrome 70", )
      OSA("Google Chrome 70", ["cmd_l", "delay 2", "cmd_l", "facebook.com", "delay 2", "return"])
      redinput("scroll down the homepage")
      OSA("Google Chrome 70", ["cmd_q"])
      OSA("Google Chrome 70", )
      OSA("Google Chrome 70", ["cmd_l", "delay 2", "cmd_l", "business.facebook.com", "delay 2", "return"])
      redinput("load the ads manager, the business settings page, the page posts page, and the audience insights page")
      OSA("Google Chrome 70", ["cmd_q"])
      OSA("Google Chrome 70", )
      OSA("Google Chrome 70", ["cmd_l", "delay 2", "cmd_l", "messenger.com", "delay 2", "return"])
      redinput("load messenger.com")
      OSA("Google Chrome 70", ["cmd_l", "delay 2", "cmd_l", "google.com", "delay 2", "return"])
      OSA("Google Chrome 70", ["cmd_l", "delay 2", "cmd_l", "us-proxy.com", "delay 2", "return"])
      OSA("Google Chrome 70", ["cmd_l", "delay 2", "cmd_l", "whensend.com", "delay 2", "return"])
      OSA("Google Chrome 70", ["cmd_q"])
      OSA("Google Chrome 70", )
      OSA("Google Chrome 70", ["cmd_l", "delay 2", "cmd_l", "17track.net", "delay 2", "return"])
      redinput("load the page")
      OSA("Google Chrome 70", ["cmd_q"])
      OSA("Google Chrome 70", )
      OSA("Google Chrome 70", ["cmd_l", "delay 2", "cmd_l", "usps.com", "delay 2", "return"])
      redinput("load the page")
      OSA("Google Chrome 70", ["cmd_q"])
      OSA("Google Chrome 70", )
      OSA("Google Chrome 70", ["cmd_l", "delay 2", "cmd_l", "idcloak.com", "delay 2", "return"])
      redinput("load the page")
      OSA("Google Chrome 70", ["cmd_q"])
      OSA("Google Chrome 70", )
      OSA("Google Chrome 70", ["cmd_l", "delay 2", "cmd_l", "bitly.com", "delay 2", "return"])
      redinput("load the page")
      OSA("Google Chrome 70", ["cmd_l", "delay 2", "https://gmail.com", "delay 2", "return"])
      redinput("log into http://my.jetpack")
    def help(self):
      list(map(redprint, ["arrow","mousepoints","mouserelease","mousesteps_","rightclick_","doubleclick_","click_","brightness","shift_","cmd_","ctrl_","delay","keycode_control","keycode","notify",]))
    def __init__(self, app=None, chain=None):
      from os import system
      self.keycode_map = d = {"esc":"53","f1":"122","f2":"120","f3":"99","f4":"118","f5":"96","f6":"97","f7":"98","f8":"100","f9":"101","f10":"109","f11":"103","f12":"111","~":"50","1":"18","2":"19","3":"20","4":"21","5":"23","6":"22","7":"26","8":"28","9":"25","0":"29","-":"27","=":"24","delete":"51","tab":"48","~":"50","{":"33","}":"30","|":"42",":":"41","\"":"39","_":"27","+":"24","<":"43",">":"47","?":"44","N":"45","M":"46","Q":"12","W":"13","E":"14","R":"15","T":"17","Y":"16","U":"32","I":"34","O":"31","P":"35","A":"0","S":"1","D":"2","F":"3","G":"5","H":"4","J":"38","K":"40","L":"37","Z":"6","X":"7","C":"8","V":"9","B":"11",}
      system("""osascript -e 'tell application "System Events" to activate application "%s"'"""%app) if app != None else None
      if chain is not None:
        for c in chain:
          if 'arrow_' in c:
            self.arrow(c.split('_')[-1], cmd=True) if "cmd" in c else self.arrow(c.split('_')[-1], ctrl=True) if "ctrl" in c else self.arrow(c.split('_')[-1],)
          elif 'mousepoints' == c:
            self.mousepoints()
          elif 'mouserelease' == c:
            self.mouserelease()
          elif 'mousesteps_' in c:
            self.mousesteps(c.split('_')[1], c.split('_')[2], c.split('_')[3])
          elif 'rightclick_' in c:
            self.rightclick(c.split('_')[1], c.split('_')[2])
          elif 'doubleclick_' in c:
            self.doubleclick(c.split('_')[1], c.split('_')[2])
          elif 'click_' in c:
            self.click(c.split('_')[1], c.split('_')[2])
          elif 'activeclick_' in c:
            self.activeclick(c.split('_')[1], c.split('_')[2])
          elif 'brightness' in c:
            self.brightness(c.split(' ')[-1])
          elif 'shift_' in c:
            self.shift_key(c.split('_')[1])
          elif 'cmd_' in c:
            self.cmd_key(c.split('_')[-1])
          elif 'ctrl_' in c:
            self.ctrl_key(c.split('_')[-1])
          elif 'delay' in c:
            self.delay(c.split(' ')[-1])
          elif 'keycode_control_option' in c:
            self.keycode_control_option(c.split('_')[-1])
          elif 'keycode_control' in c:
            self.keycode_control(c.split('_')[-1])
          elif 'keycode_command' in c:
            self.keycode_command(c.split('_')[-1])
          elif 'keycode' in c:
            self.keycode(c.split('_')[-1])
          elif 'notify' in c:
            self.notify(" ".join(c.split(" ")[1:]))
          elif 'systemcommand' in c:
            self.systemcommand("_".join(c.split("_")[1:]))
          elif 'tab' == c:
            self.keystroke_key('tab')
          elif 'return' == c:
            self.keystroke_key('return')
          else:
            pyperclip.copy(c); time.sleep(0.3); self.cmd_key("v"); time.sleep(0.2); strand(lambda: [time.sleep(2), pyperclip.copy("\n")])
            #pyperclip.copy("\n")
            #self.key(c)
    def keycode_control_option(self, x):
      system("""osascript -e 'tell application "System Events" to key code %s using {control down, option down}'""" % self.keycode_map.get(x) )
    def keycode_control(self, x):
      system("""osascript -e 'tell application "System Events" to key code %s using control down'""" % self.keycode_map.get(x) )
    def keycode_command(self, x):
      system("""osascript -e 'tell application "System Events" to key code %s using command down'""" % self.keycode_map.get(x) )
    def keycode(self, x):
      system("""osascript -e 'tell application "System Events" to key code %s'""" % self.keycode_map.get(x) ) # system("""osascript -e 'tell application "System Events" \n key code %s \n end tell'""" % x)
    def arrow(self, direction, cmd=False, ctrl = False):
      if direction == 'left':
        system("""osascript -e 'tell application "System Events" to key code 123%s'"""%(" using command down" if cmd == True else " using control down" if ctrl == True else ""  ))
      if direction == 'right':
        system("""osascript -e 'tell application "System Events" to key code 124%s'"""%(" using command down" if cmd == True else " using control down" if ctrl == True else ""  ))
      if direction == 'up':
        system("""osascript -e 'tell application "System Events" to key code 126%s'"""%(" using command down" if cmd == True else " using control down" if ctrl == True else ""  ))
      if direction == 'down':
        system("""osascript -e 'tell application "System Events" to key code 125%s'"""%(" using command down" if cmd == True else " using control down" if ctrl == True else ""  ))
    def brightness(self, lvl):
      lvl = int(lvl)
      upbrightness = """osascript -e 'tell application "System Events" to key code 144'"""
      downbrightness = """osascript -e 'tell application "System Events" to key code 145'"""
      for i in range(32):
        system(upbrightness)
        time.sleep(0.02)
      time.sleep(1)
      for i in range(32-lvl*2):
        system(downbrightness)
        time.sleep(0.02)
    def delay(self, t):
      system("""osascript -e 'tell application "System Events" to delay %s'"""%t)
    def cmd_key(self, y):
      system("""osascript -e 'tell application "System Events" to keystroke "%s" using {command down}'"""%y)
    def ctrl_key(self, y):
      system("""osascript -e 'tell application "System Events" to keystroke "%s" using {control down}'"""%y)
    def shift_key(self, y):
      system("""osascript -e 'tell application "System Events" to keystroke %s using {shift down}'"""%y)
    def keystroke_key(self, y):
      system("""osascript -e 'tell application "System Events" to keystroke %s'"""%y)
    def key(self, y):
      if y in ['tab', 'return']:
        system("""osascript -e 'tell application "System Events" to keystroke %s'"""%y)
      else:
        system("""osascript -e 'tell application "System Events" to keystroke "%s"'"""%y)
    def mousepoints(self):
      return list(map(int,subprocess.getoutput('~/tavern/tavern/.MouseTools -location').split("\n")))
    def mouserelease(self):
      system('~/tavern/tavern/.MouseTools -releaseMouse')
    def mousesteps(self, steps, x, y):
      system('~/tavern/tavern/.MouseTools -mouseSteps %s -x %s -y %s'%(steps,x,y))
    def rightclick(self, x, y):
      system('~/tavern/tavern/.MouseTools -x %s -y %s -leftClick -controlKey'%(x,y))
    def doubleclick(self, x, y):
      system('~/tavern/tavern/.MouseTools -x %s -y %s -doubleLeftClick'%(x, y))
    def click(self, x, y):
      system('~/tavern/tavern/.MouseTools -x %s -y %s -leftClick'%(x, y))
    def activeclick(self, x, y):
      system('~/tavern/tavern/.MouseTools -x %s -y %s -leftClick'%(x, y))
      system('~/tavern/tavern/.MouseTools -x %s -y %s -leftClick'%(x+1, y))
      system('~/tavern/tavern/.MouseTools -x %s -y %s -leftClick'%(x, y))
    def mousemove(self, x, y):
      a = subprocess.getoutput('~/tavern/tavern/.MouseTools -x %s -y %s'%(x, y))
      if "Error" in a:
        magentaprint(x,y)
    @staticmethod
    def notify(a, b=" ",sound=None, x=True):
      process(lambda: print("OSA() notification: %s"%a))
      a = a.replace("'","’").replace('"',"“")
      b = b.replace("'","’").replace('"',"“")
      if sound == None: process(lambda: system('''osascript -e 'display notification "{}" with title "{}"' '''.format(b,a.replace("'", ""))))
      else: process(lambda: system('''osascript -e 'display notification "{}" with title "{}" sound name "default"' '''.format(b,a.replace("'", ""))))
      process(lambda:[time.sleep(2.5),OSA().clear_all_notifications()])if(x)else()
    @staticmethod
    def display_dialog(q="default dialog prompt", buttons=[ "OK"], text_prompt=True, default_answer="\n\n\n\n\n\n\n\n\n\n\n\n\n", dropdown_options=None, hidden=False, many_options=False):
      # OSA("Finder")


      """ ::: Normally OSAX commands never times out but since you have targeted display dialog to another application OSAX command do timeout. By default when you send an event to another application your script waits for an reply. When there is no reply from the other application within two minutes an timeout error will be returned. However there are events that can take longer than two minutes, so you can lengthen or shorten the wait time of your script before it returns an error. - From Stackoverflow ::: """
      default_answer = default_answer.replace("'","’").replace('"',"“")
      q = q.replace("'","’").replace('"',"“")

      is_dropdown = True if dropdown_options != None else False
      if is_dropdown==True:
        """ ::: HAD TO SLIP THIS IN | ::: """
        option_list = ",".join([ ('"%s"'%i.replace("'","’").replace('"',"“").replace(",","，"))          for i in dropdown_options])
        # `giving up after 200000` failed... syntactically unable tto sure where to upload it.
        #xom = """ osascript -e 'choose from list {%s} with prompt "%s" with multiple selections allowed' """ %  ( option_list , q  ,     ) 
        #xom = 'tell application (path to frontmost application as text)\n    with timeout of 30000 seconds -- wait 500 minutes\n        choose from list {%s} with prompt "%s" with multiple selections allowed\n    end timeout\nend tell'%(option_list,q)
        # process(lambda: [sp(0.00), OSA("Finder"), sp(0.1), OSA("Finder"), sp(0.1), OSA("Finder"), sp(0.1), OSA("Finder"), sp(0.1), OSA("Finder"), sp(0.1), OSA("Finder")])
        
        # process(lambda: [sp(0.00), OSA("Finder")if(OSA().getforemostwindowapp()!="Finder")else(), sp(0.1),  OSA("Finder")if(OSA().getforemostwindowapp()!="Finder")else(), sp(0.1)])
        # OSA("Finder") # permission issues with #
        
        #dropdown_option = subprocess.getoutput("""osascript -e 'tell application (path to frontmost application as text)' -e 'with timeout of 30000 seconds -- wait 500 minutes' -e 'choose from list {%s} with prompt "%s" with multiple selections allowed' -e 'end timeout' -e 'end tell'"""%(option_list,q))
        x = subprocess.check_output("""osascript -e 'tell application (path to frontmost application as text)' -e 'with timeout of 30000 seconds -- wait 500 minutes' -e 'choose from list {%s} with prompt "%s\n\n(Note that for display purposes, any commas in your dropdown options have been replaced with fullwidth commas)" %s' -e 'end timeout' -e 'end tell'"""%(option_list,q,"with multiple selections allowed"if(many_options==True)else("")),shell=True).decode()[:-1]
        ()if(x!="false")else((0/0))
        return lmap(lambda i:i.replace("，",","),x.replace("’","'").replace("“",'"').split(", ")) if many_options==True else x.replace("’","'").replace("“",'"').split("，")[0]
      if text_prompt == False: # BUTTON PROMPT (which may as well be dropdown list prompt)
        # Terminal requires you to focus on the 
        #x = subprocess.getoutput("""osascript -e 'tell application (path to frontmost application as text) to display dialog "%s" default answer "%s" buttons {%s}  giving up after 99969'  """ % (q, default_answer, ",".join(['"%s"'%i for i in buttons])))
        #x = subprocess.getoutput("""osascript -e 'tell application (path to frontmost application as text) to display dialog "%s" default answer "%s" buttons {%s}  giving up after 99969'  """ % (q, default_answer, ",".join(['"%s"'%i for i in buttons])))
        # process(lambda: [sp(0.00), OSA("Finder"), sp(0.1), OSA("Finder"), sp(0.1), OSA("Finder"), sp(0.1), OSA("Finder"), sp(0.1), OSA("Finder"), sp(0.1), OSA("Finder")])
        
        # process(lambda: [sp(0.00), OSA("Finder")if(OSA().getforemostwindowapp()!="Finder")else(), sp(0.1),  OSA("Finder")if(OSA().getforemostwindowapp()!="Finder")else(), sp(0.1)])
        # OSA("Finder")
        
        x=subprocess.check_output("""osascript -e 'tell application (path to frontmost application as text)' -e 'with timeout of 30000 seconds -- wait 500 minutes' -e 'display dialog "%s" buttons {%s}' -e 'end timeout' -e 'end tell'""" % ( q,",".join(['"%s"'%i for i in buttons]) ),shell=True).decode()[:-1]
        x = x.split("button returned:")[1]
        return x        
      else:
        #@find the error
        #try:
        #x = subprocess.getoutput("""osascript -e 'tell application (path to frontmost application as text) to display dialog "%s" default answer "%s" with icon stop buttons {%s} default button "%s" giving up after 99969' """ %(q, default_answer, ",".join(['"%s"'%i for i in buttons]), buttons[-1]))
        #except Exception as e:
        #  OSA.notify(str(e))
        #    f.write(str(e))

        #x = subprocess.getoutput("""osascript -e 'tell application (path to frontmost application as text) to display dialog "%s" default answer "%s" with icon stop buttons {%s} default button "%s" giving up after 99969' """ %(q, default_answer, ",".join(['"%s"'%i for i in buttons]), buttons[-1]))
        #button_returned = x.replace(", gave up:false","").replace(", gave up:true","").split(", text returned:",1)[0].split("button returned:",1)[0]
        #text_returned = x.replace(", gave up:false","").replace(", gave up:true","").split("text returned:",1)[1]
        #OSA().notify(text_returned)
        # process(lambda: [sp(0.00), OSA("Finder"), sp(0.1), OSA("Finder"), sp(0.1), OSA("Finder"), sp(0.1), OSA("Finder"), sp(0.1), OSA("Finder"), sp(0.1), OSA("Finder")])
        
        # process(lambda: [sp(0.00), OSA("Finder")if(OSA().getforemostwindowapp()!="Finder")else(), sp(0.1),  OSA("Finder")if(OSA().getforemostwindowapp()!="Finder")else(), sp(0.1)])
        # OSA("Finder")
        
        x=subprocess.check_output("""osascript -e 'tell application (path to frontmost application as text)' -e 'with timeout of 30000 seconds -- wait 500 minutes' -e 'display dialog "%s" default answer "%s" buttons {%s} %s' -e 'end timeout' -e 'end tell'""" % ( q,default_answer,",".join(['"%s"'%i for i in buttons]), "with hidden answer" if hidden==True else ""),shell=True).decode()[:-1]

        #xom='tell application (path to frontmost application as text)\n    with timeout of 30000 seconds -- wait 500 minutes\n        display dialog "%s" default answer "%s" buttons {%s}\n    end timeout\nend tell'%(q,default_answer,",".join(['"%s"'%i for i in buttons]))
        #open(address,"w").write(xom)
        #os.system("ls {}".format(address))
        #a = subprocess.getoutput("/usr/bin/osascript {}".format(address))
        text_return = x.replace("’","'").replace("“",'"')
        try:
          text_return = text_return.split("text returned:")[1]
        except Exception as e:
          OSA.notify("DisplayDialog Error")
          OSA.notify(text_return)
          pyperclip.copy(text_return)
          0/0
        return text_return
    @staticmethod
    def log(q="default dialog prompt", buttons=[ "OK"], tp=True, df="", do=None, hidden=False, mo=False):
      return OSA().display_dialog(q=q,buttons=buttons,text_prompt=tp,default_answer=df,dropdown_options=do,hidden=hidden,many_options=mo)
    def systemcommand(self, x):
      system(x)
    def exit_preview_windows(self):
      os.system("""osascript -e 'tell application "Preview"' -e 'set mainID to id of front window' -e 'close (every window)' -e 'end tell'""")
    def getforemostwindowtitle(self):
      window_title = subprocess.getoutput('osascript -e \'global frontApp, frontAppName, windowTitle\n\nset windowTitle to ""\ntell application "System Events"\n    set frontApp to first application process whose frontmost is true\n    set frontAppName to name of frontApp\n    tell process frontAppName\n        tell (1st window whose value of attribute "AXMain" is true)\n            set windowTitle to value of attribute "AXTitle"\n        end tell\n    end tell\nend tell\'')
      #print(window_title)
      return window_title
    def getforemostwindowapp(self):
      app_title = subprocess.getoutput("""osascript -e 'tell application "System Events" to set frontApp to name of first application process whose frontmost is true'""")
      #print(app_title)
      return app_title
    def getwindowarrangement(self, app):
      window_position = subprocess.getoutput("""osascript -e 'tell application "System Events" to tell application process "%s" to get position of window 1'""" % app).split(", ")
      window_size = subprocess.getoutput("""osascript -e 'tell application "System Events" to tell application process "%s" to get size of window 1'""" % app).split(", ")
      window_position = list(map(int, window_position))
      window_size = list(map(int, window_size))
      window_size[0] = window_size[0] + window_position[0]
      window_size[1] = window_size[1] + window_position[1]
      window_arrangement = window_position + window_size
      #print(window_arrangement)
      return window_arrangement
    def getwindowsize(self, app):
      x = subprocess.getoutput("""osascript -e 'tell application "System Events" to tell application process "%s" to get size of window 1'""" % app).split(", ")
      if "Can’t get application process %s"%(app) in x:
        return self.getwindowsize(app)
      return x
    def getwindowarrangements(self):
      window_arrangements = []
      redprint("||  Return on foremost window app 'Finder'")
      while True:
        foremostwindowtitle = self.getforemostwindowtitle()
        window_arrangement = self.getwindowarrangement(self.getforemostwindowapp())
        info = [foremostwindowtitle] + window_arrangement
        if info not in window_arrangements:
          window_arrangements .  append( info)
          print(window_arrangements)
        if self.getforemostwindowapp() == "Finder":
          return window_arrangements
    def setforemostwindowarrangement(self, app, x, y, w, h):
      system("""osascript -e 'tell application "%s" to set bounds of front window to {%s, %s, %s, %s}'""" % (app, x, y, w, h))
    def setwindowdesktop(self, app, desktop):
      pass
    def clear_all_notifications(self):
      os.system("""osascript -e 'tell application "System Events"' -e 'tell process "NotificationCenter"' -e 'set numwins to (count windows)' -e 'repeat with i from numwins to 1 by -1' -e 'try' -e 'click button "Close" of window i' -e 'end try' -e 'end repeat' -e 'end tell' -e 'end tell' &> /dev/null &""")
    def new_terminal(self):
      OSA("Terminal", ["cmd_n", "delay 1"])
    def shrink(self):
      app = OSA().getforemostwindowapp()
      OSA().setforemostwindowarrangement(app, 0, 0, 35, 35)
  class Peewee:
    def __init__(self):
      import peewee
      globals().update(locals())
    def create_database(self,name):
      peewee.SqliteDatabase(name)
    def create_table(self,x):
      x.create_table()
    def drop_table(self,x):
      x.drop_table()
    def fields(self):
      return {"foreignkey":peewee.ForeignKeyField,"manytomany":peewee.ManyToManyField,"primarykey":peewee.PrimaryKeyField,"autofield":peewee.AutoField,"char":peewee.CharField,"int":peewee.IntegerField,"float":peewee.FloatField,"bigint":peewee.BigIntegerField,"datetime":peewee.DateTimeField,"json":JSONField,"blob":peewee.BlobField,}
    """
    class Peewee:
      def __init__(self):
        import peewee
        globals().update(locals())
      def create_database(self,name):
        return peewee.SqliteDatabase(name)
      def create_table(self,x):
        x.create_table()
      def drop_table(self,x):
        x.drop_table()
      def fields(self):
        return {"foreignkey":peewee.ForeignKeyField,"manytomany":peewee.ManyToManyField,"primarykey":peewee.PrimaryKeyField,"autofield":peewee.AutoField,"char":peewee.CharField,"int":peewee.IntegerField,"float":peewee.FloatField,"bigint":peewee.BigIntegerField,"datetime":peewee.DateTimeField,"json":JSONField,"blob":peewee.BlobField,}
    db = Peewee().create_database("LONG HART.db")
    class Bamboozle(peewee.Model):
      id,fighter_stat=Peewee().fields()["autofield"](),Peewee().fields()["int"]()
      class Meta:
        database = db
    Peewee().create_table(Bamboozle)
    Bamboozle(fighter_stat=20).save()
    assert len(list(Bamboozle.select())) == 1
    """
  class Product_Handles:
    # Basically, it shows the day's sales for all shops, as well and if clicked, shows the adsets.
    def __init__(self):
      import rumps
      from rumps import MenuItem as M
      from rumps import MenuItem
      self.app = rumps.App("Product_Handles",quit_button=Null)
      globals().update(locals())


      self.set_menu()
      #process(  lambda: [time.sleep(6.15), self.set_menu()]  )
      time.sleep(4)
      self.app.run()


    def set_menu(self):
      keys = list(self.app.menu.keys())
      redprint(keys)
      for i in keys:
        self.app.menu.pop(i)
      keycall("Icon",All(Adset))
      self.app.menu = [MenuItem("/",callback=lambda _=None:[])]+[
                        MenuItem("") for i in All(Handle)
                      ]
  class ProductUpdates:
    def run(self,shop):
      for i in Filter(Product,shop=shop):
        i.Refresh()
  class Psutil(DecisionTree):
    def tests(self):
      builtin_print(        "net_connections #1: %s" % str(self.net_connections()[0])                                   )
      builtin_print(        "net_io_counters: %s" % str(self.net_io_counters())                                         )
      builtin_print(        "sensors_battery: %s" % str(self.sensors_battery())                                         )
      builtin_print(        "boot_time: %s" % str(self.boot_time())                                                     )
      builtin_print(        "virtual_memory: %s" % str(self.virtual_memory())                                           )
      builtin_print(        "cpu_count: %s" % str(self.cpu_count())                                                     )
      builtin_print(        "disk_partitions: %s" % str(self.disk_partitions())                                         )
      builtin_print(        "disk_usage: %s" % str(self.disk_usage())                                                   )
      builtin_print(        "GetHumanReadable: %s" % str(self.GetHumanReadable(self.disk_usage().total))                )
    def get_network_interface(self):
      x = subprocess.getoutput("route get 10.10.10.10")
      redprint("route get 10.10.10.10\n==RESULT==\n\n{}\n\n".format(x))
      return re.findall(r"interface: (.*)", x)[0]
    def get_mac_lan_ip_address(self):
      w = "ipconfig getifaddr {}".format(self.get_network_interface())
      x = subprocess.getoutput(w)
      redprint("{}\n==RESULT==\n\n{}\n\n".format(w,x))
      return x
    def nmap(self):
      w = "sudo nmap -sP {}.1/24".format(Join(".",self.get_mac_lan_ip_address().split(".")[:3]))
      x = subprocess.getoutput(w)
      z = re.findall(r"Nmap scan report for (.*) .*\((.*)\)",x)
      redprint("{}\n==result\n\n{}\n\n{}\n\n".format(w,x,json.dumps(z,indent=4)))
      return z
    def nonsudo_nmap(self):
      w = "nmap -sP {}.1/24".format(Join(".",self.get_mac_lan_ip_address().split(".")[:3]))
      x = subprocess.getoutput(w)
      z = re.findall(r"Nmap scan report for (.*) .*\((.*)\)",x)
      redprint("{}\n==result\n\n{}\n\n{}\n\n".format(w,x,json.dumps(z,indent=4)))
      return z
    def nmap_consistent(self,c=1):
      while True:
        if(len(self.nonsudo_nmap())) != c:
          OSA().notify("lol")
    def net_connections(self):
      return psutil.net_connections(kind='inet')
    def net_io_counters(self):
      return psutil.net_io_counters(pernic=False, nowrap=True)
    def sensors_battery(self):
      return psutil.sensors_battery()
    def boot_time(self):
      psutil.boot_time()
      import datetime
      datetime.datetime.fromtimestamp(psutil.boot_time()).strftime("%Y-%m-%d %H:%M:%S")
      """ '2018-08-29 04:23:28' """
    def virtual_memory(self):
      mem = psutil.virtual_memory()
      return mem
    def cpu_count(self):
      return psutil.cpu_count()
      """ 8 """
    def disk_partitions(self):
      return psutil.disk_partitions()
    def disk_usage(self):
      return psutil.disk_usage("/")
    @staticmethod
    def GetMachineReadable(HumanReadable):
      suffixes=['B','KB','MB','GB','TB']
      x = int(re.findall("[0-9]+",HumanReadable)[0])
      y = re.findall(r"[a-zA-Z]+",HumanReadable)[0]
      z = suffixes.index(y)
      for i in range(z):
        x = x*1024
      return x
    @staticmethod
    def GetHumanReadable(size,precision=2):
      suffixes=['B','KB','MB','GB','TB']
      suffixIndex = 0
      while size > 1024 and suffixIndex < 4:
        suffixIndex += 1 #increment the index of the suffix
        size = size/1024.0 #apply the division
      return "%.*f%s"%(precision,size,suffixes[suffixIndex])
    def GetLetterReadable(self,v):
      return v if v<= 999 else(str(int(v/1000)) + "K")if(1000 <= v <= 999999)else(str(int(v/1000000)) + "M")if(1000000 <= v <= 999999999)else(str(int(v/1000000000)) + "B")if(1000000000 <= v <= 999999999999)else("?")
      """ tests """
      for i in [0,999,1000,50000,500000,5000000,5000000000,50000000,50000000000,5000000000000,6456498098,123491823,123123]:
        print(x(i))
    def SpeedTest(self, download = True, upload = True, verbose = True):
      start_time = datetime.now()

      import speedtest

      servers = []
      # If you want to test against a specific server
      # servers = [1234]

      s = speedtest.Speedtest()
      s.get_servers(servers)
      s.get_best_server()
      if download == True:
        s.download()
      if upload == True:
        s.upload()
      s.results.share()

      results_dict = s.results.dict()
      results_dict = AttrDict(results_dict)

      end_time = datetime.now()
      elapsed_time = end_time.__sub__(start_time)
      elapsed_time_seconds = elapsed_time.seconds
      elapsed_time_microseconds = elapsed_time.microseconds / 1000000
      elapsed_time_full = elapsed_time_seconds + elapsed_time_microseconds
      elapsed_time_full = round(elapsed_time_full, 2)
      time.sleep(1)
      if verbose == True:
        greenprint("speed test results time taken: %s seconds" % elapsed_time_full)
      if verbose == True:
        greenprint("")
      time.sleep(1)
      if verbose == True:
        greenprint(":Results:")

      download_speed = None
      download_speed_readable = None
      if download == True:
        download_speed = results_dict.download
        download_speed_readable = Psutil().GetLetterReadable(download_speed)
        if verbose == True:
          greenprint("download speed: %s" % download_speed_readable)

      upload_speed = None
      upload_speed_readable = None
      if upload == True:
        upload_speed = results_dict.upload
        upload_speed_readable = Psutil().GetLetterReadable(upload_speed)
        if verbose == True:
          greenprint("upload speed: %s" % upload_speed_readable)

      if download == True and upload == True:
        return download_speed_readable, upload_speed_readable
      elif download == True and upload == False:
        return download_speed_readable
      elif download == False and upload == True:
        return upload_speed_readable
      else:
        return None
      """ :Test:
      results = []
      results.append(Psutil().SpeedTest(download = True, upload = True))
      results.append(Psutil().SpeedTest(download = True, upload = False))
      results.append(Psutil().SpeedTest(download = False, upload = True))
      results.append(Psutil().SpeedTest(download = False, upload = False))
      assert len(results[0]) == 2
      assert results[1]
      assert results[2]
      assert results[3] == None
      greenprint(results)
      """
  class RandomWord:
    def __init__(self):
      x = get_random_word()
      print(x)
      os.system("say '[[volm 0.35]] %s'"%(x))
      [os.system("say '[[volm 0.35]] %s'"%(i)) for i in " ".join(x).split(" ")]
      try:
        y = dictionarymeaning(x)
        print(y)
        os.system('say """[[volm 0.35]] %s"""'%(y))
      except Exception as e:
        pass
      RandomGeneratedWords().add(x)
      print("")
  class Recaptcha:
    def __init__(self):
      # Attempt No.1
      # Attempt No.1
      # Attempt No.1
      # Attempt No.1
      # Attempt No.1
      # Attempt No.1
      os.system("brew install pocketsphinx")
      os.system("brew install ffmpeg")
      os.system("pip install moviepy")
      os.system("pip install gtts")
      OSA.display_dialog("Download the audio from the recaptcha.", text_prompt = False)

      os.remove("audio.mp3")
      os.remove("audio.wav")
      os.system("mv ~/Downloads/audio.mp3 audio.mp3")
      Slime().mp3_to_wav("audio.mp3", "audio.wav")
      a = Speech_Recognition().recognize_sphinx("audio.wav")
      b = Speech_Recognition().recognize_google("audio.wav")
      c = Speech_Recognition().recognize_google_cloud("audio.wav")
      print(a, b, c)
  class Ryle:
    def __init__(self):
      import rumps
      from rumps import MenuItem as M
      from rumps import MenuItem
      self.app = rumps.App("🍃", quit_button=Null)
      globals().update(locals())


      self.set_menu()
      time.sleep(0)
      self.app.run()

    def set_menu(self):
      keys = list(self.app.menu.keys())
      redprint(keys)
      for i in keys:
        self.app.menu.pop(i)
      globals()["ryle"] = self
      self.app.title = "Setup"
      def helper(func,folder_name=None):
        L=multiprocessing_process(lambda:[[OSA.notify("%s, Running"%(str(datetime.now())),x=False),sp(1)] for i in range(WHILE_TRUE)])
        try:
          func()
          L.terminate()
          OSA.notify("%s: SUCCESS"%(datetime.now()))
        except Exception as e:
          L.terminate()
          OSA.notify("%s: ERROR"%(datetime.now()))
          OSA.log("Sorry, this part of setup has broken down due to lack of testing or a change in the website) this is a list of the urls and a folder with the screenshots and any shop information to update. please go thtrough them yourself to cotinue the setup.",tp=False)
          tryprocess(lambda:impreview(folder_name))
      get_cards = lambda: oset(listminus(flatten(keymulti(["AliExpress_Financial_Card_Information","GSuite_Financial_Card_Information","Shopify_Financial_Card_Information","Facebook_Financial_Card_Information",], All(Shop)),1),[None]))
      self.app.menu = [
      M("+", callback=lambda _=None: [Save(Shop,shop_abbreviation=OSA.display_dialog("Shop abbreviation [for example: qwe]?",default_answer=""),Fields_To_Update=[],Street_Address_Line_2=""),globals()["ryle"].set_menu()])] + [
      [i.shop_abbreviation,
      # [[M("Methods"),
      # eval("""[
      # M("Important Notifications", callback=lambda _=None:OSA.log("Notifications:\\n1. This will turn off Auto Update for Google Chrome.\\n2. Only Metric system is supported (kg).\\n3. Products not created through the product creater (so it will be in the files) will not be saved or managed.\\n4. The only type of 2fa supported is text message.\\n5. The street address will appear on https://<Administrative_Url>.myshopify.com/pages/privacy-policy\\n6. There was some intermediate pages which require completion of an account signup so these pages can\'t be tested daily. For example: To continually test the G Suite account creation flow daily would require numerous phone numbers per week. To test the purchasing of a domain name would require an actual domain name purchase every time, which is not possible.\\n7. Orders with note will be skipped and must be manually fulfilled.\\n8. Mac OS permission buttons and captchas and verification codes will have to be entered manually in the setup.\\n9. This program will not save products not created within the program. This program will also not order items in the orders for products not created within the program.\\n10. The time zone is set to EST, so between 12AM to 5:59:59AM (EST), any adset will begin at 6AM (EST) the same day. any other hours, it will begin the next day at 6AM (EST).\\n11. This will add products, order orders, update and display emails, and create ads. There should be a limited number of errors solved. Therefore, a csv file is supplied with each set of items in regards to the business and it should be read, and checks be made so that another party is making sure things are aligning properly. These files can be gotten from 'Run Exports'\\n12. You do not have to manage your finances with this.\\n13. Routing helps to keep track of the order status after the sale including time of sale, time order placed to AliExpress supplier, time tracking was posted, time order arrived to the customer. You don\'t need to use routing. You can get the tracking number inside your AliExpress account\'s order page.\\n14. Country codes that are not US will require manual address fill in during checkout\\n15. Only ePacket is supported for adding items and ordering items.\\n16. If you are on a prompt from the menulet and want to exit the prompt, use the hotkeys to reset everything and then answer the prompts with anything to exit the prompts.\\n")),
      # M("Get Gmail Account", callback=lambda _=None:helper(lambda:(Get(Shop,shop_abbreviation="%s").GET_GMAIL_ACCOUNT ()) )),
      # M("Get Shopify Store", callback=lambda _=None:helper(lambda:(Get(Shop,shop_abbreviation="%s").GET_SHOPIFY_STORE ()) )),
      # M("Get Shopify App", callback=lambda _=None:helper(lambda:(Get(Shop,shop_abbreviation="%s").GET_SHOPIFY_APP ()) )),
      # M("Get GSuite Account", callback=lambda _=None:helper(lambda:(Get(Shop,shop_abbreviation="%s").GET_GSUITE_ACCOUNT ()) )),
      # M("Get Google API Project - Gmail Account", callback=lambda _=None:helper(lambda:(Get(Shop,shop_abbreviation="%s").GET_GOOGLE_API_PROJECT ("%s") ))),
      # M("Get Google API Project - GSuite Account", callback=lambda _=None:helper(lambda:(Get(Shop,shop_abbreviation="%s").GET_GOOGLE_API_PROJECT ("%s") ))),
      # M("Get Facebook Account", callback=lambda _=None:helper(lambda:(Get(Shop,shop_abbreviation="%s").GET_FACEBOOK_ACCOUNT ()) )),
      # M("Get Facebook Business Manager Account", callback=lambda _=None:helper(lambda:(Get(Shop,shop_abbreviation="%s").GET_FACEBOOK_BUSINESS_MANAGER_ACCOUNT ()) )),
      # # call biz manager acc
      # M("Get Facebook Ad Account", callback=lambda _=None:helper(lambda:(Get(Shop,shop_abbreviation="%s").GET_FACEBOOK_AD_ACCOUNT ()) )),
      # M("Get Facebook Pixel", callback=lambda _=None:helper(lambda:(Get(Shop,shop_abbreviation="%s").GET_FACEBOOK_PIXEL ()) )),
      # # call get dev acc, always get acc/app
      # M("Get Facebook Developer Account", callback=lambda _=None:helper(lambda:(Get(Shop,shop_abbreviation="%s").GET_FACEBOOK_DEVELOPER_ACCOUNT ()) )),
      # M("Get Facebook Api", callback=lambda _=None:helper(lambda:(Get(Shop,shop_abbreviation="%s").GET_FACEBOOK_MARKETING_APP_IF_HAVE_DEVELOPER_ACCOUNT ()) )),
      # M("Get AliExpress Account", callback=lambda _=None:helper(lambda:(Get(Shop,shop_abbreviation="%s").GET_ALIEXPRESS_ACCOUNT ()) )),
      # M("Get AliPay Account", callback=lambda _=None:helper(lambda:(Get(Shop,shop_abbreviation="%s").GET_ALIPAY_ACCOUNT ()) )),
      # M("Run Rest Of Setup", callback=lambda _=None: OSA.log("At the end, select site payment plan, disable password page, pick a website theme, and edit the website menu, and choose your payment gateways. (\\n1. https://<Administrative_Url>.myshopify.com/admin/settings/account/plan \\n2. https://<Administrative_Url>.myshopify.com/admin/online_store/preferences, \\n3. https://<Administrative_Url>.myshopify.com/admin/themes, \\n4. https://<Administrative_Url>.myshopify.com/admin/menus, \\n5. https://<Administrative_Url>.myshopify.com/admin/settings/payments)") ),
      # ]"""%(i.shop_abbreviation, i.shop_abbreviation, i.shop_abbreviation, i.shop_abbreviation, i.shop_abbreviation, i.Gmail_Email_Address, i.shop_abbreviation, i.Business_Email_Address, i.shop_abbreviation, i.shop_abbreviation, i.shop_abbreviation, i.shop_abbreviation, i.shop_abbreviation, i.shop_abbreviation, i.shop_abbreviation, i.shop_abbreviation))
      # ]] + \
      # eval("""[[M("Has_Gmail_Account"), [(True)if(Get(Shop, shop_abbreviation="%s").Has_Gmail_Account)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Has_Gmail_Account=(True)if(OSA.display_dialog("Do you have a Gmail account?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Has_Shopify_Store"), [(True)if(Get(Shop, shop_abbreviation="%s").Has_Shopify_Store)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Has_Shopify_Store=(True)if(OSA.display_dialog("Do you have a Shopify Store?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Has_Namecheap_Account"), [(True)if(Get(Shop, shop_abbreviation="%s").Has_Namecheap_Account)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Has_Namecheap_Account=(True)if(OSA.display_dialog("Do you have a Namecheap Account?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Has_GSuite_Account"), [(True)if(Get(Shop, shop_abbreviation="%s").Has_GSuite_Account)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Has_GSuite_Account=(True)if(OSA.display_dialog("Do you have a GSuite Account?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Has_Facebook_Account"), [(True)if(Get(Shop, shop_abbreviation="%s").Has_Facebook_Account)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Has_Facebook_Account=(True)if(OSA.display_dialog("Do you have a Facebook Account?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Has_Facebook_Business_Manager_Account"), [(True)if(Get(Shop, shop_abbreviation="%s").Has_Facebook_Business_Manager_Account)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Has_Facebook_Business_Manager_Account=(True)if(OSA.display_dialog("Do you have a Facebook Business Manager Account?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Has_Facebook_Ad_Account_ID"), [(True)if(Get(Shop, shop_abbreviation="%s").Has_Facebook_Ad_Account_ID)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Has_Facebook_Ad_Account_ID=(True)if(OSA.display_dialog("Do you have a Facebook Ad Account?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Has_Facebook_Pixel"), [(True)if(Get(Shop, shop_abbreviation="%s").Has_Facebook_Pixel)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Has_Facebook_Pixel=(True)if(OSA.display_dialog("Do you have a Facebook Ad Account Pixel?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Has_Facebook_Developer_Account"), [(True)if(Get(Shop, shop_abbreviation="%s").Has_Facebook_Developer_Account)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Has_Facebook_Developer_Account=(True)if(OSA.display_dialog("Do you have a Facebook Developer Account?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Has_AliExpress_Account"), [(True)if(Get(Shop, shop_abbreviation="%s").Has_AliExpress_Account)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Has_AliExpress_Account=(True)if(OSA.display_dialog("Do you have an AliExpress Account?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Gmail_Email_Address"), [(Get(Shop, shop_abbreviation="%s").Gmail_Email_Address), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Gmail_Email_Address=(OSA.display_dialog("Gmail email address?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Gmail_Password"), [("".join(["•" for i in rangelen(Get(Shop, shop_abbreviation="%s").Gmail_Password)]))if(Get(Shop,shop_abbreviation="%s").Gmail_Password)else(None), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Gmail_Password=(OSA.display_dialog('Gmail password [note: As per https://support.google.com/accounts/answer/32040?hl=en, the accepted characters are: "any combination of letters, numbers, and symbols (ASCII characters)". There may be more rules such as repeating letters, etc that prevent certain passwords.]?',default_answer="",hidden=True))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Number_To_Receive_Videocalls_And_Messages"), [(True)if(Get(Shop, shop_abbreviation="%s").Number_To_Receive_Videocalls_And_Messages)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Number_To_Receive_Videocalls_And_Messages=(True)if(OSA.display_dialog("Do you want to use this phone number to receive video calls and messages with this Gmail account?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Business_Name"), [(Get(Shop, shop_abbreviation="%s").Business_Name), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Business_Name=(OSA.display_dialog("Business Name?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Employee_Count"), [(Get(Shop, shop_abbreviation="%s").Employee_Count), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Employee_Count=(OSA.display_dialog("How many employees are in this company [Has To Be Greater Than 0]?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Country_Of_Business"), [(Get(Shop, shop_abbreviation="%s").Country_Of_Business), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Country_Of_Business=(OSA.display_dialog("Country Of Business [Only United States is supported currently. Put United States as your answer. Make sure to capitalize correctly.]?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("First_Name"), [(Get(Shop, shop_abbreviation="%s").First_Name), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),First_Name=(OSA.display_dialog("First name?",default_answer="").title())),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Last_Name"), [(Get(Shop, shop_abbreviation="%s").Last_Name), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Last_Name=(OSA.display_dialog("Last name?",default_answer="").title())),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Street_Address"), [(Get(Shop, shop_abbreviation="%s").Street_Address), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Street_Address=(OSA.display_dialog("Street address?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Street_Address_Line_2"), [(Get(Shop, shop_abbreviation="%s").Street_Address_Line_2), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Street_Address_Line_2=(OSA.display_dialog("Street address line 2 [Enter in nothing if empty]?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("State"), [(Get(Shop, shop_abbreviation="%s").State), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),State=(OSA.display_dialog("State? [Enter in the state abbreviation]",default_answer="").upper())),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("City"), [(Get(Shop, shop_abbreviation="%s").City), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),City=(OSA.display_dialog("City?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("ZIP_Code"), [(Get(Shop, shop_abbreviation="%s").ZIP_Code), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),ZIP_Code=(OSA.display_dialog("Zip code?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Business_Phone_Number"), [(Get(Shop, shop_abbreviation="%s").Business_Phone_Number), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Business_Phone_Number=(Integer(OSA.display_dialog("Business phone number?",default_answer="")))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Business_Email_Address"), [(Get(Shop, shop_abbreviation="%s").Business_Email_Address), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Business_Email_Address=(OSA.display_dialog("Business email address [note: this will be your GSuite Account username. The business email address can be <Business Email Address>@<Domain Name>.com, for example: support@mystorename.com, or sales@mystorename.com.]?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("GSuite_Password"), [("".join(["•" for i in rangelen(Get(Shop, shop_abbreviation="%s").GSuite_Password)]))if(Get(Shop,shop_abbreviation="%s").GSuite_Password)else(None), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),GSuite_Password=(OSA.display_dialog('GSuite password [note: As per https://support.google.com/accounts/answer/32040?hl=en, the accepted characters are: "any combination of letters, numbers, and symbols (ASCII characters)". There may be more rules such as repeating letters, etc that prevent certain passwords.]?',default_answer="",hidden=True))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Product_Return_Address"), [(Get(Shop, shop_abbreviation="%s").Product_Return_Address), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Product_Return_Address=(OSA.display_dialog("Product Return Address [for example: 111 Xyz Street, Anytown, AB 36016, United States]?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Shopify_Email"), [(Get(Shop, shop_abbreviation="%s").Shopify_Email), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Shopify_Email=(OSA.display_dialog("Shopify email [note: if you are creating a Shopify store, input your Gmail email address.]?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Shopify_Password"), [("".join(["•" for i in rangelen(Get(Shop, shop_abbreviation="%s").Shopify_Password)]))if(Get(Shop,shop_abbreviation="%s").Shopify_Password)else(None), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Shopify_Password=(OSA.display_dialog("Shopify password [note: accepted characters include all punctuation marks, letters, and numbers. There may be more rules such as repeating letters, etc that prevent certain passwords.]?",default_answer="",hidden=True))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Administrative_Url"), [M("Help", callback=lambda _=None:OSA.display_dialog("Shopify administrative url [note: this is the url to log into the shop. It will be in the format of https://<Personal Store URL>.myshopify.com/admin. Please only enter in letters, numbers, and dashes. For example: https://mystorename.myshopify.com/admin.]?",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").Administrative_Url), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Administrative_Url=(OSA.display_dialog("Shopify administrative url [note: this is the url to log into the shop. It will be in the format of https://<Administrative Url>.myshopify.com/admin. Please only enter in letters, numbers, and dashes. For example: https://mystorename.myshopify.com/admin.]?",default_answer=""))),OSA.display_dialog("This url is taken. If this url does not belong to you, please input a new administrative url.",text_prompt=False)if(("https://app.shopify.com/services/login/identity")in(requests.get(Get(Shop,shop_abbreviation="%s").Administrative_Url).text))else(),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \

      #eval("""[[M("Homepage_Title [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("Homepage title [For Search Engine Optimization]?",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").Homepage_Title), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Homepage_Title=(OSA.display_dialog("Homepage title [For Search Engine Optimization]?",default_answer="")),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Homepage_Title"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Homepage_Meta_Description [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("Homepage meta description [For Search Engine Optimization]?",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").Homepage_Meta_Description), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Homepage_Meta_Description=(OSA.display_dialog("Homepage meta description [For Search Engine Optimization]?")),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Homepage_Meta_Description"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Metric_System [Has to be Metric system. Imperial system is not supported as of now.]"), [M("Help", callback=lambda _=None:OSA.display_dialog("Metric system [Only Metric system is supported (kg)]?",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").Metric_System), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Metric_System=(OSA.display_dialog("Metric system [Only Metric system is supported (kg)]?",default_answer="").capitalize()),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Metric_System"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Facebook_Pixel_ID"), [M("Help", callback=lambda _=None:OSA.display_dialog("Facebook pixel id?",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").Facebook_Pixel_ID), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Facebook_Pixel_ID=(Integer(OSA.display_dialog("Facebook pixel id?",default_answer=""))),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Facebook_Pixel_ID"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Checkout_With_Account [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("Should the customer check out with a store account [options are: disabled, optional, required]?",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").Checkout_With_Account), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Checkout_With_Account=(OSA.display_dialog("Should the customer check out with a store account [options are: disabled, optional, required]?",default_answer="")),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Checkout_With_Account"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Checkout_With_Identifier [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("What contact information should the customer check out with [options are: phone_or_email, email]?",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").Checkout_With_Identifier), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Checkout_With_Identifier=(OSA.display_dialog("What contact information should the customer check out with [options are: phone_or_email, email]?",default_answer="")),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Checkout_With_Identifier"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Receive_Shipping_Updates [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("Send the customer shipping updates after their order?",text_prompt=False)), (False)if(Get(Shop, shop_abbreviation="%s").Receive_Shipping_Updates==False)else(True), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Receive_Shipping_Updates=((True)if(OSA.display_dialog("Send the customer shipping updates after their order?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Receive_Shipping_Updates"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Checkout_With_Name [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("During checkout, require the customer to enter in their full name or last name only [options are: require_last_only, require_first_and_last]?",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").Checkout_With_Name), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Checkout_With_Name=(OSA.display_dialog("During checkout, require the customer to enter in their full name or last name only [options are: require_last_only, require_first_and_last]?",default_answer="")),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Checkout_With_Name"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Checkout_With_Company [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("During checkout, should the customer be prompted for the company in their shipping and billing address [options are: hidden, optional, required]?",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").Checkout_With_Company), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Checkout_With_Company=(OSA.display_dialog("During checkout, should the customer be prompted for the company in their shipping and billing address [options are: hidden, optional, required]?",default_answer="")),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Checkout_With_Company"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Checkout_With_Address_Line_2 [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("During checkout, should the customer be prompted for the shipping address line 2 in their shipping and billing address [options are: hidden, optional, required]?",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").Checkout_With_Address_Line_2), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Checkout_With_Address_Line_2=(OSA.display_dialog("During checkout, should the customer be prompted for the shipping address line 2 in their shipping and billing address [options are: hidden, optional, required]?",default_answer="")),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Checkout_With_Address_Line_2"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Checkout_With_Phone_Number [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("During checkout, should the customer be prompted for their phone number in their shipping and billing information [options are: hidden, optional, required]?",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").Checkout_With_Phone_Number), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Checkout_With_Phone_Number=(OSA.display_dialog("During checkout, should the customer be prompted for their phone number in their shipping and billing information [options are: hidden, optional, required]?",default_answer="")),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Checkout_With_Phone_Number"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Checkout_With_Shipping_As_Billing [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("During checkout, should the billing address for the customer's payment information be the shipping address by default?",text_prompt=False)), (False)if(Get(Shop, shop_abbreviation="%s").Checkout_With_Shipping_As_Billing==False)else(True), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Checkout_With_Shipping_As_Billing=((True)if(OSA.display_dialog("During checkout, should the billing address for the customer's payment information be the shipping address by default?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Checkout_With_Shipping_As_Billing"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Checkout_Enable_Address_Autocomplete [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("During checkout, enable address autocompletion?",text_prompt=False)), (True)if(Get(Shop, shop_abbreviation="%s").Checkout_Enable_Address_Autocomplete)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Checkout_Enable_Address_Autocomplete=((True)if(OSA.display_dialog("During checkout, enable address autocompletion?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Checkout_Enable_Address_Autocomplete"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Show_Email_Signup_Option_At_Checkout [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("Show email signup option at checkout?",text_prompt=False)), (True)if(Get(Shop, shop_abbreviation="%s").Show_Email_Signup_Option_At_Checkout)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Show_Email_Signup_Option_At_Checkout=((True)if(OSA.display_dialog("Show email signup option at checkout?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Show_Email_Signup_Option_At_Checkout"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Preselect_Email_Signup_Option_At_Checkout [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("Preselct the email signup option at checkout [This only applies if Show email signup option at checkout is on]?",text_prompt=False)), (True)if(Get(Shop, shop_abbreviation="%s").Preselect_Email_Signup_Option_At_Checkout)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Preselect_Email_Signup_Option_At_Checkout=((True)if(OSA.display_dialog("Preselct the email signup option at checkout [This only applies if Show email signup option at checkout is on]?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Preselect_Email_Signup_Option_At_Checkout"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Use_Free_Plus_Shipping [Fill this out if you plan on using Free + Ship]"), [M("Help", callback=lambda _=None:OSA.display_dialog("Use free plus shipping rates in your store [Set this to yes if you plan on using free plus shipping to price products. This only applies to products sold in AliExpress for under $9.95, so on the store, the product will be priced at $0 and the shipping will be $9.95]?",text_prompt=False)), (True)if(Get(Shop, shop_abbreviation="%s").Use_Free_Plus_Shipping)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Use_Free_Plus_Shipping=((True)if(OSA.display_dialog("Use free plus shipping rates in your store [Set this to yes if you plan on using free plus shipping to price products. This only applies to products sold in AliExpress for under $9.95, so on the store, the product will be priced at $0 and the shipping will be $9.95]?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Use_Free_Plus_Shipping"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      
      ## eval("""[[M("Shopify_App_API_Key"), [M("Help", callback=lambda _=None:OSA.display_dialog("Shopify app API password?",text_prompt=False)), ("".join(["•" for i in rangelen(Get(Shop, shop_abbreviation="%s").Shopify_App_API_Key)]))if(Get(Shop,shop_abbreviation="%s").Shopify_App_API_Key)else(None), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Shopify_App_API_Key=(OSA.display_dialog("Shopify app API password?",default_answer="",hidden=True))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Shopify_App_API_Password"), [M("Help", callback=lambda _=None:OSA.display_dialog("Shopify app API key?",text_prompt=False)), ("".join(["•" for i in rangelen(Get(Shop, shop_abbreviation="%s").Shopify_App_API_Password)]))if(Get(Shop,shop_abbreviation="%s").Shopify_App_API_Password)else(None), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Shopify_App_API_Password=(OSA.display_dialog("Shopify app API key?",default_answer="",hidden=True))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Shopify_App_API_Secret"), [M("Help", callback=lambda _=None:OSA.display_dialog("Shopify app API secret?",text_prompt=False)), ("".join(["•" for i in rangelen(Get(Shop, shop_abbreviation="%s").Shopify_App_API_Secret)]))if(Get(Shop,shop_abbreviation="%s").Shopify_App_API_Secret)else(None), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Shopify_App_API_Secret=(OSA.display_dialog("Shopify app API secret?",default_answer="",hidden=True))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Shopify_App_API_Url"), [M("Help", callback=lambda _=None:OSA.display_dialog("Shopify App API Url [for example: https://<Shopify App API Key>:<Shopify App API Password>@<Shopify Admin URL>/admin]?",text_prompt=False)), ("".join(["•" for i in rangelen(Get(Shop, shop_abbreviation="%s").Shopify_App_API_Url)]))if(Get(Shop,shop_abbreviation="%s").Shopify_App_API_Url)else(None), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Shopify_App_API_Url=(OSA.display_dialog("Shopify App API Url [for example: https://<Shopify App API Key>:<Shopify App API Password>@<Shopify Admin URL>/admin]?",default_answer="",hidden=True))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Pages [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("Create The Default Pages [This will create the Terms Of Service, Privacy Policy, Refund Policy, DMCA, and Contact Us pages]?",text_prompt=False)), (True)if(Get(Shop, shop_abbreviation="%s").Pages)else(False), M("Update", callback=lambda _=None:([Update(Get(Shop,shop_abbreviation="%s"),Pages=True,Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Pages"])])if(OSA.display_dialog("Create The Default Pages [This will create the Terms Of Service, Privacy Policy, Refund Policy, DMCA, and Contact Us pages]?",text_prompt=False,buttons=["Yes","No"])=="Yes")else())]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Default_Product_Description"), [M("Help", callback=lambda _=None:OSA.display_dialog("Default Product Description in HTML with potential size chart insert as <Size Chart> and potential unique description insert as <Unique Description> and potential unique description insert as <Unique Description> [note: For an HTML editor, visit https://your-shop-name.myshopify.com/admin/pages/new (substitute your-shop-name with your shop's myshopify url) and click the Show HTML button which is above the top right of the text box, or visit: https://html-online.com/editor/. As well, note that if <Size Chart> is included, each time a product is added, if a size chart is specified along with it, the size chart will take the place of <Size Chart>. If <Unique Description> is included, each time a product is added, if a unique product description is specified along with it, the unique product description will take the place of <Unique Description>]?",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").Default_Product_Description), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Default_Product_Description=(OSA.display_dialog("Default Product Description in HTML with potential size chart insert as <Size Chart> and potential unique description insert as <Unique Description> [note: For an HTML editor, visit https://your-shop-name.myshopify.com/admin/pages/new (substitute your-shop-name with your shop's myshopify url) and click the Show HTML button which is above the top right of the text box, or visit: https://html-online.com/editor/. As well, note that if <Size Chart> is included, each time a product is added, if a size chart is specified along with it, the size chart will take the place of <Size Chart>. If <Unique Description> is included, each time a product is added, if a unique product description is specified along with it, the unique product description will take the place of <Unique Description>.]?",default_answer="\\n"*60))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Domain_Name_To_Transfer [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("Do you already own a domain name to transfer to this shop?",text_prompt=False)), (True)if(Get(Shop, shop_abbreviation="%s").Domain_Name_To_Transfer)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Domain_Name_To_Transfer=(True)if(OSA.display_dialog("Do you already own a domain name to transfer to this shop?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Domain_Name"), [M("Help", callback=lambda _=None:OSA.display_dialog("Domain name [for example: domain-name.com. As of now numbers are not supported in the domain name.]?",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").Domain_Name), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Domain_Name=OSA.display_dialog("Domain name [for example: domain-name.com]?",default_answer=""),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Domain_Name"]),check_domain_name_via_shopify(Get(Shop,shop_abbreviation="%s").Domain_Name),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Renew_Domain_Every_Year [**Fill this out if you have to create a shop]"), [M("Help", callback=lambda _=None:OSA.display_dialog("Do you want to renew the domain name every year [this applies if you are purchasing the domain name]?",text_prompt=False)), (True)if(Get(Shop, shop_abbreviation="%s").Renew_Domain_Every_Year)else(False), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Renew_Domain_Every_Year=(True)if(OSA.display_dialog("Do you want to renew the domain name every year [this applies if you are purchasing the domain name]?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Facebook_Email"), [(Get(Shop, shop_abbreviation="%s").Facebook_Email), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Facebook_Email=(OSA.display_dialog("Facebook email?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("Facebook_Password"), [("".join(["•" for i in rangelen(Get(Shop, shop_abbreviation="%s").Facebook_Password)]))if(Get(Shop,shop_abbreviation="%s").Facebook_Password)else(None), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Facebook_Password=(OSA.display_dialog("Facebook password [note: accepted characters include all punctuation marks, letters, and numbers. There may be more rules such as repeating letters, etc that prevent certain passwords.]?",default_answer="",hidden=True))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Date_Of_Birth"), [(Get(Shop, shop_abbreviation="%s").Date_Of_Birth), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Date_Of_Birth=(Integer(OSA.display_dialog("Date of birth [for example: 01011990]?",default_answer="")))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Gender"), [(Get(Shop, shop_abbreviation="%s").Gender), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Gender=(OSA.display_dialog("Gender [options are: female, male]?",default_answer="").lower())),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Facebook_Business_Account_Business_Name"), [(Get(Shop, shop_abbreviation="%s").Facebook_Business_Account_Business_Name), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Facebook_Business_Account_Business_Name=(OSA.display_dialog("Facebook business account name [only letters and numbers are allowed here.]?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Facebook_Business_Manager_ID"), [(Get(Shop, shop_abbreviation="%s").Facebook_Business_Manager_ID), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Facebook_Business_Manager_ID=(Integer(OSA.display_dialog("Facebook business manager ID?",default_answer="")))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Facebook_Business_Ad_Account_Name"), [(Get(Shop, shop_abbreviation="%s").Facebook_Business_Ad_Account_Name), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Facebook_Business_Ad_Account_Name=(OSA.display_dialog("Facebook business ad account name?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Facebook_Business_Ad_Account_Time_Zone"), [(Get(Shop, shop_abbreviation="%s").Facebook_Business_Ad_Account_Time_Zone), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Facebook_Business_Ad_Account_Time_Zone=(OSA.display_dialog("Facebook business ad account time zone?",dropdown_options=["(GMT-10:00) Pacific/Honolulu","(GMT-09:00) America/Anchorage","(GMT-08:00) America/Dawson","(GMT-08:00) America/Los Angeles","(GMT-08:00) America/Tijuana","(GMT-08:00) America/Vancouver","(GMT-07:00) America/Dawson Creek","(GMT-07:00) America/Denver","(GMT-07:00) America/Edmonton","(GMT-07:00) America/Hermosillo","(GMT-07:00) America/Mazatlan","(GMT-07:00) America/Phoenix","(GMT-06:00) Africa/Abidjan","(GMT-06:00) America/Chicago","(GMT-06:00) America/Costa Rica","(GMT-06:00) America/El Salvador","(GMT-06:00) America/Guatemala","(GMT-06:00) America/Managua","(GMT-06:00) America/Mexico City","(GMT-06:00) America/Rainy River","(GMT-06:00) America/Regina","(GMT-06:00) America/Tegucigalpa","(GMT-06:00) Pacific/Galapagos","(GMT-05:00) Africa/Addis Ababa","(GMT-05:00) America/Atikokan","(GMT-05:00) America/Bogota","(GMT-05:00) America/Guayaquil","(GMT-05:00) America/Iqaluit","(GMT-05:00) America/Jamaica","(GMT-05:00) America/Lima","(GMT-05:00) America/Nassau","(GMT-05:00) America/New York","(GMT-05:00) America/Panama","(GMT-05:00) America/Toronto","(GMT-05:00) Pacific/Easter","(GMT-04:00) America/Blanc-Sablon","(GMT-04:00) America/Campo Grande","(GMT-04:00) America/Caracas","(GMT-04:00) America/Halifax","(GMT-04:00) America/La Paz","(GMT-04:00) America/Port of_Spain","(GMT-04:00) America/Puerto Rico","(GMT-04:00) America/Santo Domingo","(GMT-03:30) America/St Johns","(GMT-03:00) America/Argentina/Buenos Aires","(GMT-03:00) America/Argentina/Salta","(GMT-03:00) America/Argentina/San Luis","(GMT-03:00) America/Asuncion","(GMT-03:00) America/Belem","(GMT-03:00) America/Montevideo","(GMT-03:00) America/Santiago","(GMT-03:00) America/Sao Paulo","(GMT-02:00) America/Noronha","(GMT-01:00) Atlantic/Azores","(GMT+00:00) Africa/Accra","(GMT+00:00) Africa/Casablanca","(GMT+00:00) Atlantic/Canary","(GMT+00:00) Atlantic/Reykjavik","(GMT+00:00) Europe/Dublin","(GMT+00:00) Europe/Lisbon","(GMT+00:00) Europe/London","(GMT+01:00) Africa/Lagos","(GMT+01:00) Africa/Tunis","(GMT+01:00) Europe/Amsterdam","(GMT+01:00) Europe/Belgrade","(GMT+01:00) Europe/Berlin","(GMT+01:00) Europe/Bratislava","(GMT+01:00) Europe/Brussels","(GMT+01:00) Europe/Budapest","(GMT+01:00) Europe/Copenhagen","(GMT+01:00) Europe/Ljubljana","(GMT+01:00) Europe/Luxembourg","(GMT+01:00) Europe/Madrid","(GMT+01:00) Europe/Malta","(GMT+01:00) Europe/Oslo","(GMT+01:00) Europe/Paris","(GMT+01:00) Europe/Prague","(GMT+01:00) Europe/Rome","(GMT+01:00) Europe/Sarajevo","(GMT+01:00) Europe/Skopje","(GMT+01:00) Europe/Stockholm","(GMT+01:00) Europe/Vienna","(GMT+01:00) Europe/Warsaw","(GMT+01:00) Europe/Zagreb","(GMT+01:00) Europe/Zurich","(GMT+02:00) Africa/Cairo","(GMT+02:00) Africa/Johannesburg","(GMT+02:00) Asia/Amman","(GMT+02:00) Asia/Beirut","(GMT+02:00) Asia/Gaza","(GMT+02:00) Asia/Jerusalem","(GMT+02:00) Asia/Nicosia","(GMT+02:00) Europe/Athens","(GMT+02:00) Europe/Bucharest","(GMT+02:00) Europe/Helsinki","(GMT+02:00) Europe/Kaliningrad","(GMT+02:00) Europe/Kiev","(GMT+02:00) Europe/Riga","(GMT+02:00) Europe/Sofia","(GMT+02:00) Europe/Tallinn","(GMT+02:00) Europe/Vilnius","(GMT+03:00) Africa/Nairobi","(GMT+03:00) Asia/Baghdad","(GMT+03:00) Asia/Bahrain","(GMT+03:00) Asia/Kuwait","(GMT+03:00) Asia/Qatar","(GMT+03:00) Asia/Riyadh","(GMT+03:00) Europe/Istanbul","(GMT+03:00) Europe/Moscow","(GMT+04:00) Asia/Dubai","(GMT+04:00) Asia/Muscat","(GMT+04:00) Europe/Samara","(GMT+04:00) Indian/Mauritius","(GMT+05:00) Asia/Karachi","(GMT+05:00) Asia/Yekaterinburg","(GMT+05:00) Indian/Maldives","(GMT+05:30) Asia/Colombo","(GMT+05:30) Asia/Kolkata","(GMT+05:45) Africa/Asmara","(GMT+06:00) Asia/Dhaka","(GMT+06:00) Asia/Omsk","(GMT+07:00) Asia/Bangkok","(GMT+07:00) Asia/Ho Chi_Minh","(GMT+07:00) Asia/Jakarta","(GMT+07:00) Asia/Krasnoyarsk","(GMT+08:00) Asia/Hong Kong","(GMT+08:00) Asia/Irkutsk","(GMT+08:00) Asia/Kuala Lumpur","(GMT+08:00) Asia/Makassar","(GMT+08:00) Asia/Manila","(GMT+08:00) Asia/Shanghai","(GMT+08:00) Asia/Singapore","(GMT+08:00) Asia/Taipei","(GMT+08:00) Australia/Perth","(GMT+09:00) Asia/Jayapura","(GMT+09:00) Asia/Seoul","(GMT+09:00) Asia/Tokyo","(GMT+09:00) Asia/Yakutsk","(GMT+10:00) Asia/Vladivostok","(GMT+10:30) Australia/Broken Hill","(GMT+11:00) Africa/Algiers","(GMT+11:00) Asia/Magadan","(GMT+11:00) Australia/Sydney","(GMT+12:00) Asia/Kamchatka","(GMT+13:00) Pacific/Auckland"]))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Facebook_Business_Ad_Account_ID"), [(Get(Shop, shop_abbreviation="%s").Facebook_Business_Ad_Account_ID), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Facebook_Business_Ad_Account_ID=(Integer(OSA.display_dialog("Facebook business ad account ID?",default_answer="")))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Facebook_Business_App_Secret"), [("".join(["•" for i in rangelen(Get(Shop, shop_abbreviation="%s").Facebook_Business_App_Secret)]))if(Get(Shop,shop_abbreviation="%s").Facebook_Business_App_Secret)else(None), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Facebook_Business_App_Secret=(OSA.display_dialog("Facebook business app secret?",default_answer="",hidden=True))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("Facebook_Business_App_Token"), [("".join(["•" for i in rangelen(Get(Shop, shop_abbreviation="%s").Facebook_Business_App_Token)]))if(Get(Shop,shop_abbreviation="%s").Facebook_Business_App_Token)else(None), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Facebook_Business_App_Token=(OSA.display_dialog("Facebook business app token?",default_answer="",hidden=True))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("AliExpress_Email"), [(Get(Shop, shop_abbreviation="%s").AliExpress_Email), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),AliExpress_Email=(OSA.display_dialog("AliExpress email?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      ## eval("""[[M("AliExpress_Password"), [("".join(["•" for i in rangelen(Get(Shop, shop_abbreviation="%s").AliExpress_Password)]))if(Get(Shop,shop_abbreviation="%s").AliExpress_Password)else(None), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),AliExpress_Password=(OSA.display_dialog("AliExpress password [only letters and numbers are allowed in this password, and the password length has to be between 6 and 20.]?",default_answer="",hidden=True))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      eval("""[[M("AliExpress_Most_Recent_Date"), [M("Help", callback=lambda _=None:OSA.display_dialog("Aliexpress Most Recent Date is the most recent date for the orders that are for this shop. If there are AliExpress orders before this date, they will be ignored. If all orders for this shop and time frame are start from one week ago, enter in the date that is one week ago. For example: 01/01/2018",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").AliExpress_Most_Recent_Date), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),AliExpress_Most_Recent_Date=(datetime.strptime(OSA.display_dialog("Aliexpress Most Recent Date is the most recent date for the orders that are for this shop. If there are AliExpress orders before this date, they will be ignored. If all orders for this shop and time frame are start from one week ago, enter in the date that is one week ago. For example: 01/01/2018",default_answer="month/date/year"),"%%m/%%d/%%Y"))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("AliPay_Pin"), [("".join(["•" for i in rangelen(Get(Shop, shop_abbreviation="%s").AliPay_Pin)]))if(Get(Shop,shop_abbreviation="%s").AliPay_Pin)else(None), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),AliPay_Pin=(OSA.display_dialog("AliPay pin [note: please enter a six digit pin. for example: 123456]?",default_answer="",hidden=True))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("AliPay_Security_Question_1 [Fill this out if you have to create an account]"), [(("{}: {}".format((list(Get(Shop, shop_abbreviation="%s").AliPay_Security_Question_1.keys())[0]), (list(Get(Shop, shop_abbreviation="%s").AliPay_Security_Question_1.values())[0])))if(type(Get(Shop, shop_abbreviation="%s").AliPay_Security_Question_1)==dict)else(None)), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),AliPay_Security_Question_1={(OSA.display_dialog("Security Question 1 [note: please pick three unique security questions.]?",dropdown_options=["What is your favorite color?","In which city were you born?","What is the name of your first university?","What is your father's name?","What is your mother's name?","What is your favorite fruit?","Who was your childhood best friend?","What was the name of your first pet?","Who is your favorite author?","Who was your favorite teacher?","Who was your first roommate?","Who was your first boss?"])):(OSA.display_dialog("Answer to security question 1?",default_answer=""))}),(OSA.display_dialog("Security question 1 conflicts with another security question. Please choose a new security question.",text_prompt=False))if((list(Shop()("%s").AliPay_Security_Question_1.keys())[0]) in [or_list(tryreturn(lambda:list(Shop()("%s").AliPay_Security_Question_3.keys())[0]),([])),or_list(tryreturn(lambda:list(Shop()("%s").AliPay_Security_Question_2.keys())[0]),([]))])else(),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("AliPay_Security_Question_2 [Fill this out if you have to create an account]"), [(("{}: {}".format((list(Get(Shop, shop_abbreviation="%s").AliPay_Security_Question_2.keys())[0]), (list(Get(Shop, shop_abbreviation="%s").AliPay_Security_Question_2.values())[0])))if(type(Get(Shop, shop_abbreviation="%s").AliPay_Security_Question_2)==dict)else(None)), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),AliPay_Security_Question_2={(OSA.display_dialog("Security Question 2 [note: please pick three unique security questions.]?",dropdown_options=["What is your favorite color?","In which city were you born?","What is the name of your first university?","What is your father's name?","What is your mother's name?","What is your favorite fruit?","Who was your childhood best friend?","What was the name of your first pet?","Who is your favorite author?","Who was your favorite teacher?","Who was your first roommate?","Who was your first boss?"])):(OSA.display_dialog("Answer to security question 2?",default_answer=""))}),(OSA.display_dialog("Security question 2 conflicts with another security question. Please choose a new security question.",text_prompt=False))if((list(Shop()("%s").AliPay_Security_Question_2.keys())[0]) in [or_list(tryreturn(lambda:list(Shop()("%s").AliPay_Security_Question_3.keys())[0]),([])),or_list(tryreturn(lambda:list(Shop()("%s").AliPay_Security_Question_1.keys())[0]),([]))])else(),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      # eval("""[[M("AliPay_Security_Question_3 [Fill this out if you have to create an account]"), [(("{}: {}".format((list(Get(Shop, shop_abbreviation="%s").AliPay_Security_Question_3.keys())[0]), (list(Get(Shop, shop_abbreviation="%s").AliPay_Security_Question_3.values())[0])))if(type(Get(Shop, shop_abbreviation="%s").AliPay_Security_Question_3)==dict)else(None)), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),AliPay_Security_Question_3={(OSA.display_dialog("Security Question 3 [note: please pick three unique security questions.]?",dropdown_options=["What is your favorite color?","In which city were you born?","What is the name of your first university?","What is your father's name?","What is your mother's name?","What is your favorite fruit?","Who was your childhood best friend?","What was the name of your first pet?","Who is your favorite author?","Who was your favorite teacher?","Who was your first roommate?","Who was your first boss?"])):(OSA.display_dialog("Answer to security question 3?",default_answer=""))}),(OSA.display_dialog("Security question 3 conflicts with another security question. Please choose a new security question.",text_prompt=False))if((list(Shop()("%s").AliPay_Security_Question_3.keys())[0]) in [or_list(tryreturn(lambda:list(Shop()("%s").AliPay_Security_Question_2.keys())[0]),([])),or_list(tryreturn(lambda:list(Shop()("%s").AliPay_Security_Question_1.keys())[0]),([]))])else(),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \

      eval("""[[M("AliExpress_Card_Transaction_Tags"), [M("Help", callback=lambda _=None:OSA.display_dialog("AliExpress card transaction tags [For example: aliexpress, ali if the card transaction tags have aliexpress in the description (enter in the lower case form, separated by ', ')]?",text_prompt=False)), (str(Get(Shop, shop_abbreviation="%s").AliExpress_Card_Transaction_Tags)), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),AliExpress_Card_Transaction_Tags=(lmap(lambda i: i.lower(), OSA.display_dialog("AliExpress card transaction tags [For example: aliexpress, ali if the card transaction tags have aliexpress in the description (enter in the lower case form separated by ', ')]?").split(", ")))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      eval("""[[M("Adspend_Card_Transaction_Tags"), [M("Help", callback=lambda _=None:OSA.display_dialog("Facebook adspend card transaction tags [For example: facebook, fb if the card transaction tags have facebook in the description (enter in the lower case form separated by ', ')]?",text_prompt=False)), (str(Get(Shop, shop_abbreviation="%s").Adspend_Card_Transaction_Tags)), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Adspend_Card_Transaction_Tags=(lmap(lambda i: i.lower(), OSA.display_dialog("Facebook adspend card transaction tags [For example: facebook, fb if the card transaction tags have facebook in the description (enter in the lower case form, separated by ', ')]?").split(", ")))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      eval("""[[M("Payment_Gateway_Payout_Card_Transaction_Tags"), [M("Help", callback=lambda _=None:OSA.display_dialog("Payment gateway payout card transaction tags [For example: stripe if the card transaction tags have stripe in the description (enter in the lower case form separated by ', ')]?",text_prompt=False)), (str(Get(Shop, shop_abbreviation="%s").Payment_Gateway_Payout_Card_Transaction_Tags)), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Payment_Gateway_Payout_Card_Transaction_Tags=(lmap(lambda i: i.lower(), OSA.display_dialog("Payment gateway payout card transaction tags [For example: stripe if the card transaction tags have stripe in the description (enter in the lower case form separated by ', ')]?").split(", ")))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      eval("""[[M("Lineitem_Most_Recent_Date"), [M("Help", callback=lambda _=None:OSA.display_dialog("Lineitem most recent date for getting orders [for example 01/01/2018]?",text_prompt=False)), (Get(Shop, shop_abbreviation="%s").Lineitem_Most_Recent_Date), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Lineitem_Most_Recent_Date=(datetime.strptime(OSA.display_dialog("Lineitem most recent date for getting orders [for example 01/01/2018]?",default_answer="month/date/year"),"%%m/%%d/%%Y"))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \

      ## eval("""[[M("Allow_Additional_Shipping_Methods"), [M("Help", callback=lambda _=None:OSA.display_dialog("Allow additional shipping methods? This will allow adding products with more than just ePacket as a shipping method.",text_prompt=False)), (False)if(Get(Shop, shop_abbreviation="%s").Allow_Additional_Shipping_Methods==False)else(True), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Allow_Additional_Shipping_Methods=((True)if(OSA.display_dialog("Allow additional shipping methods? This will allow adding products with more than just ePacket as a shipping method.",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      eval("""[[M("Send_Tracking_Number"), [M("Help", callback=lambda _=None:OSA.display_dialog("Send tracking numbers? This will send the tracking number if gotten. Otherwise you can look up the tracking number if you have an email and then send it in the email.",text_prompt=False)), (False)if(Get(Shop, shop_abbreviation="%s").Send_Tracking_Number==False)else(True), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Send_Tracking_Number=((True)if(OSA.display_dialog("Send tracking numbers? This will send the tracking number if gotten. Otherwise you can look up the tracking number if you have an email and then send it in the email.",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \

      eval("""[[M("DBC_Username"), [(Get(Shop, shop_abbreviation="%s").DBC_Username), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),DBC_Username=(OSA.display_dialog("Death By Captcha username?",default_answer=""))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      eval("""[[M("DBC_Password"), [("".join(["•" for i in rangelen(Get(Shop, shop_abbreviation="%s").DBC_Password)]))if(Get(Shop,shop_abbreviation="%s").DBC_Password)else(None), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),DBC_Password=(OSA.display_dialog("Death By Captcha password?",default_answer="",hidden=True))),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      ## [[M("GSuite_Financial_Card_Information"),[(eval("""M(("Using Card Ending In {}".format(Get(Shop,shop_abbreviation="%s").GSuite_Financial_Card_Information["Financial_Card_Number"][-4:])),callback=lambda _=None:())if(Get(Shop,shop_abbreviation="%s").GSuite_Financial_Card_Information)else(None)"""%(i.shop_abbreviation,i.shop_abbreviation))),[M("Use Existing"),[eval("""M("%s",callback=lambda _=None:[Update(Get(Shop,shop_abbreviation="%s"),GSuite_Financial_Card_Information=[c for c in oset(listminus(flatten(keymulti(["AliExpress_Financial_Card_Information","GSuite_Financial_Card_Information","Shopify_Financial_Card_Information","Facebook_Financial_Card_Information",], All(Shop)),1),[None])) if c["Financial_Card_Number"][-4:]=="%s"][0]),globals()["ryle"].set_menu()])"""%(a["Financial_Card_Number"][-4:],i.shop_abbreviation,a["Financial_Card_Number"][-4:])) for a in oset(listminus(flatten(keymulti(["AliExpress_Financial_Card_Information","GSuite_Financial_Card_Information","Shopify_Financial_Card_Information","Facebook_Financial_Card_Information",], All(Shop)),1),[None]))]],eval("""M("Add New", callback=lambda _=None:[Update(Get(Shop,shop_abbreviation="%s"),GSuite_Financial_Card_Information = {"Financial_Card_Number": OSA.display_dialog("Financial Card Number?",default_answer="",hidden=True),"Financial_Card_Expiration_Date": OSA.display_dialog("Financial Card Expiration Date [for example: 0125]?",default_answer="",hidden=True),"Financial_Card_CVV": OSA.display_dialog("Financial Card CVV?",default_answer="",hidden=True),"Financial_Card_Billing_First_Name": OSA.display_dialog("Financial Card Billing First Name?",default_answer="").title(),"Financial_Card_Billing_Last_Name": OSA.display_dialog("Financial Card Billing Last Name?",default_answer="").title(),"Financial_Card_Billing_Street_Address": OSA.display_dialog("Financial Card Billing Street Address?",default_answer=""),"Financial_Card_Billing_Street_Address_Line_2": OSA.display_dialog("Financial Card Billing Street Address Line 2 [enter in blank if this does not apply]?",default_answer=""),"Financial_Card_Billing_Country": OSA.display_dialog("Financial Card Billing Country?",default_answer=""),"Financial_Card_Billing_State": OSA.display_dialog("Financial Card Billing State [for example: New York]?",default_answer="").title(),"Financial_Card_Billing_City": OSA.display_dialog("Financial Card Billing City?",default_answer="").title(),"Financial_Card_Billing_ZIP_Code": Integer(OSA.display_dialog("Financial Card Billing ZIP Code?",default_answer="")),}),globals()["ryle"].set_menu()])"""%(i.shop_abbreviation))]]]+\
      ## [[M("Shopify_Financial_Card_Information"),[(eval("""M(("Using Card Ending In {}".format(Get(Shop,shop_abbreviation="%s").Shopify_Financial_Card_Information["Financial_Card_Number"][-4:])),callback=lambda _=None:())if(Get(Shop,shop_abbreviation="%s").Shopify_Financial_Card_Information)else(None)"""%(i.shop_abbreviation,i.shop_abbreviation))),[M("Use Existing"),[eval("""M("%s",callback=lambda _=None:[Update(Get(Shop,shop_abbreviation="%s"),Shopify_Financial_Card_Information=[c for c in oset(listminus(flatten(keymulti(["AliExpress_Financial_Card_Information","GSuite_Financial_Card_Information","Shopify_Financial_Card_Information","Facebook_Financial_Card_Information",], All(Shop)),1),[None])) if c["Financial_Card_Number"][-4:]=="%s"][0]),globals()["ryle"].set_menu()])"""%(a["Financial_Card_Number"][-4:],i.shop_abbreviation,a["Financial_Card_Number"][-4:])) for a in oset(listminus(flatten(keymulti(["AliExpress_Financial_Card_Information","GSuite_Financial_Card_Information","Shopify_Financial_Card_Information","Facebook_Financial_Card_Information",], All(Shop)),1),[None]))]],eval("""M("Add New", callback=lambda _=None:[Update(Get(Shop,shop_abbreviation="%s"),Shopify_Financial_Card_Information = {"Financial_Card_Number": OSA.display_dialog("Financial Card Number?",default_answer="",hidden=True),"Financial_Card_Expiration_Date": OSA.display_dialog("Financial Card Expiration Date [for example: 0125]?",default_answer="",hidden=True),"Financial_Card_CVV": OSA.display_dialog("Financial Card CVV?",default_answer="",hidden=True),"Financial_Card_Billing_First_Name": OSA.display_dialog("Financial Card Billing First Name?",default_answer="").title(),"Financial_Card_Billing_Last_Name": OSA.display_dialog("Financial Card Billing Last Name?",default_answer="").title(),"Financial_Card_Billing_Street_Address": OSA.display_dialog("Financial Card Billing Street Address?",default_answer=""),"Financial_Card_Billing_Street_Address_Line_2": OSA.display_dialog("Financial Card Billing Street Address Line 2 [enter in blank if this does not apply]?",default_answer=""),"Financial_Card_Billing_Country": OSA.display_dialog("Financial Card Billing Country?",default_answer=""),"Financial_Card_Billing_State": OSA.display_dialog("Financial Card Billing State [for example: New York]?",default_answer="").title(),"Financial_Card_Billing_City": OSA.display_dialog("Financial Card Billing City?",default_answer="").title(),"Financial_Card_Billing_ZIP_Code": Integer(OSA.display_dialog("Financial Card Billing ZIP Code?",default_answer="")),}),globals()["ryle"].set_menu()])"""%(i.shop_abbreviation))]]]+\
      ## [[M("Facebook_Financial_Card_Information"),[(eval("""M(("Using Card Ending In {}".format(Get(Shop,shop_abbreviation="%s").Facebook_Financial_Card_Information["Financial_Card_Number"][-4:])),callback=lambda _=None:())if(Get(Shop,shop_abbreviation="%s").Facebook_Financial_Card_Information)else(None)"""%(i.shop_abbreviation,i.shop_abbreviation))),[M("Use Existing"),[eval("""M("%s",callback=lambda _=None:[Update(Get(Shop,shop_abbreviation="%s"),Facebook_Financial_Card_Information=[c for c in oset(listminus(flatten(keymulti(["AliExpress_Financial_Card_Information","GSuite_Financial_Card_Information","Shopify_Financial_Card_Information","Facebook_Financial_Card_Information",], All(Shop)),1),[None])) if c["Financial_Card_Number"][-4:]=="%s"][0]),globals()["ryle"].set_menu()])"""%(a["Financial_Card_Number"][-4:],i.shop_abbreviation,a["Financial_Card_Number"][-4:])) for a in oset(listminus(flatten(keymulti(["AliExpress_Financial_Card_Information","GSuite_Financial_Card_Information","Shopify_Financial_Card_Information","Facebook_Financial_Card_Information",], All(Shop)),1),[None]))]],eval("""M("Add New", callback=lambda _=None:[Update(Get(Shop,shop_abbreviation="%s"),Facebook_Financial_Card_Information = {"Financial_Card_Number": OSA.display_dialog("Financial Card Number?",default_answer="",hidden=True),"Financial_Card_Expiration_Date": OSA.display_dialog("Financial Card Expiration Date [for example: 0125]?",default_answer="",hidden=True),"Financial_Card_CVV": OSA.display_dialog("Financial Card CVV?",default_answer="",hidden=True),"Financial_Card_Billing_First_Name": OSA.display_dialog("Financial Card Billing First Name?",default_answer="").title(),"Financial_Card_Billing_Last_Name": OSA.display_dialog("Financial Card Billing Last Name?",default_answer="").title(),"Financial_Card_Billing_Street_Address": OSA.display_dialog("Financial Card Billing Street Address?",default_answer=""),"Financial_Card_Billing_Street_Address_Line_2": OSA.display_dialog("Financial Card Billing Street Address Line 2 [enter in blank if this does not apply]?",default_answer=""),"Financial_Card_Billing_Country": OSA.display_dialog("Financial Card Billing Country?",default_answer=""),"Financial_Card_Billing_State": OSA.display_dialog("Financial Card Billing State [for example: New York]?",default_answer="").title(),"Financial_Card_Billing_City": OSA.display_dialog("Financial Card Billing City?",default_answer="").title(),"Financial_Card_Billing_ZIP_Code": Integer(OSA.display_dialog("Financial Card Billing ZIP Code?",default_answer="")),}),globals()["ryle"].set_menu()])"""%(i.shop_abbreviation))]]]+\
      ## [[M("AliExpress_Financial_Card_Information"),[(eval("""M(("Using Card Ending In {}".format(Get(Shop,shop_abbreviation="%s").AliExpress_Financial_Card_Information["Financial_Card_Number"][-4:])),callback=lambda _=None:())if(Get(Shop,shop_abbreviation="%s").AliExpress_Financial_Card_Information)else(None)"""%(i.shop_abbreviation,i.shop_abbreviation))),[M("Use Existing"),[eval("""M("%s",callback=lambda _=None:[Update(Get(Shop,shop_abbreviation="%s"),AliExpress_Financial_Card_Information=[c for c in oset(listminus(flatten(keymulti(["AliExpress_Financial_Card_Information","GSuite_Financial_Card_Information","Shopify_Financial_Card_Information","Facebook_Financial_Card_Information",], All(Shop)),1),[None])) if c["Financial_Card_Number"][-4:]=="%s"][0]),globals()["ryle"].set_menu()])"""%(a["Financial_Card_Number"][-4:],i.shop_abbreviation,a["Financial_Card_Number"][-4:])) for a in oset(listminus(flatten(keymulti(["AliExpress_Financial_Card_Information","GSuite_Financial_Card_Information","Shopify_Financial_Card_Information","Facebook_Financial_Card_Information",], All(Shop)),1),[None]))]],eval("""M("Add New", callback=lambda _=None:[Update(Get(Shop,shop_abbreviation="%s"),AliExpress_Financial_Card_Information = {"Financial_Card_Number": OSA.display_dialog("Financial Card Number?",default_answer="",hidden=True),"Financial_Card_Expiration_Date": OSA.display_dialog("Financial Card Expiration Date [for example: 0125]?",default_answer="",hidden=True),"Financial_Card_CVV": OSA.display_dialog("Financial Card CVV?",default_answer="",hidden=True),"Financial_Card_Billing_First_Name": OSA.display_dialog("Financial Card Billing First Name?",default_answer="").title(),"Financial_Card_Billing_Last_Name": OSA.display_dialog("Financial Card Billing Last Name?",default_answer="").title(),"Financial_Card_Billing_Street_Address": OSA.display_dialog("Financial Card Billing Street Address?",default_answer=""),"Financial_Card_Billing_Street_Address_Line_2": OSA.display_dialog("Financial Card Billing Street Address Line 2 [enter in blank if this does not apply]?",default_answer=""),"Financial_Card_Billing_Country": OSA.display_dialog("Financial Card Billing Country?",default_answer=""),"Financial_Card_Billing_State": OSA.display_dialog("Financial Card Billing State [for example: New York]?",default_answer="").title(),"Financial_Card_Billing_City": OSA.display_dialog("Financial Card Billing City?",default_answer="").title(),"Financial_Card_Billing_ZIP_Code": Integer(OSA.display_dialog("Financial Card Billing ZIP Code?",default_answer="")),}),globals()["ryle"].set_menu()])"""%(i.shop_abbreviation))]]]+\
      # eval("""[M("Push Shopify Store Changes", callback=lambda _=None: [firefox65_do('Shop()("%s").Migrate_Shopify_Changes(possible_fields=Shop()("%s").Fields_To_Update,quit=True)'),Update(Shop()("%s"),Fields_To_Change=[])])
      #   ]"""%(i.shop_abbreviation, i.shop_abbreviation, i.shop_abbreviation)) + \
      # eval("""[[M("Run Setup"), M("Run Setup", callback=lambda _=None:[helper(lambda:(Get(Shop,shop_abbreviation="%s").Run_Setup ()) ),Update(Get(Shop,shop_abbreviation="%s"),Fields_To_Update=[]),globals()["ryle"].set_menu()])]]"""%(i.shop_abbreviation,i.shop_abbreviation)) + \
      #eval("""[[M("Delete Shop"), M("Delete Shop", callback=lambda _=None:[([Del(Get(Shop,shop_abbreviation="%s")),globals()["ryle"].set_menu()])if(OSA.display_dialog("Are you sure you want to delete your shop? Please enter in Delete My Shop to delete your shop.",default_answer="")=="Delete My Shop")else()])]]"""%(i.shop_abbreviation)) + \
      eval("""[[M("Active"), [M("Help", callback=lambda _=None:OSA.display_dialog("Is this shop active?",text_prompt=False)), (False)if(Get(Shop, shop_abbreviation="%s").Active==False)else(True), M("Update", callback=lambda _=None:[Update(Get(Shop, shop_abbreviation="%s"),Active=((True)if(OSA.display_dialog("Is this shop active?",text_prompt=False,buttons=["No","Yes"])=="Yes")else(False)),Fields_To_Update=(Get(Shop,shop_abbreviation="%s").Fields_To_Update)+["Active"]),globals()["ryle"].set_menu()]) ]]]"""%(i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation)) + \
      [[M("Price Changes"),eval("""[M("+",callback=lambda _=None:[OSA().display_dialog("Success",text_prompt=0) if tryreturn(lambda:PriceChange.flow(OSA.display_dialog(q='Please enter in either one price change or a list. you can also copy paste from excel.\\nEach line in this dialog should include a price number or range like 0-5 and a colon and then either just a number or an equation with x in it.\\nA range like 0-5 will be 0.01 to 5.00 so 0 will not be included but 5 will be. Anywhere from 0.01 to 5.00 will return a new price that you determine.\\nIf you are copy pasting from Excel, row A should contain the colon (eg: 0-5:) and row B should contain the price or equation (eg: x+5 or 10).\\n\\nThe following are examples:\\n0-5: 10          (between 0.01 and 5, including 5 will return 10.)\\n0-5: (x*2)+5     (multiply it by 2 and then add 5.)\\n0-5: (x+5)*1.5   (add 5 and then multiply it by 1.5)\\n5: x*2           (for 5, multiply it by 2)\\n5: x+2           (add 2 to it)\\n5-15: x+15       (between 5.01 and 15, including 15, add 15)\\n\\n\\nnote: The max price supported is $10000.',default_answer="\\n"*45),shop="%s"))==True else OSA.display_dialog("There was an error. Please try again.",text_prompt=False),self.set_menu()])]"""%(i.shop_abbreviation))  +  eval("""[M("Delete All", callback= lambda _=None: [lmap(Del,Filter(PriceChange,shop="%s")),self.set_menu()])]"""%(i.shop_abbreviation))  +  eval("""[[M("Price Change Rounding"), [M("Help",callback=lambda _=None:OSA.display_dialog("Round the price after changing it? You can round the price up, round the price down, or round the price up if it's over 50 cents and down if it's under 50 cents.",text_prompt=False)),M("Current: %s"),M("Leave Price as is",callback=lambda _=None:[Update(Get(Shop,shop_abbreviation="%s"),Price_Change_Round_Type=None),self.set_menu()]),M("Round Up",callback=lambda _=None:[Update(Get(Shop,shop_abbreviation="%s"),Price_Change_Round_Type="up"),self.set_menu()]),M("Round Down",callback=lambda _=None:[Update(Get(Shop,shop_abbreviation="%s"),Price_Change_Round_Type="down"),self.set_menu()]),M("Round Up if ends with over 0.5",callback=lambda _=None:[Update(Get(Shop,shop_abbreviation="%s"),Price_Change_Round_Type="round"),self.set_menu()])]]]"""%(i.Price_Change_Round_Type,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation,i.shop_abbreviation))  +  eval("""[[M("Price Change Ending Amount"), [M("Help",callback=lambda _=None:OSA.display_dialog("Enter the ending amount. If this is on, it will round the number up and subtract. .99 will make $4.10 $4.99 or $3.98 $3.99 or $4.50 $4.99. An empty field will turn this off. [for example: .99, .95, .90]",text_prompt=False)),M("Change Ending Amount: {}".format("on, %s (click to turn off/adjust)"if(Get(Shop,shop_abbreviation="%s").Price_Change_Ending_Amount!=None)else("off (click to turn on/adjust value)")),callback=lambda _=None:[Update(Get(Shop,shop_abbreviation="%s"),Price_Change_Ending_Amount=[globalise(OSA.display_dialog("Enter the ending amount. If this is on, it will round the number up and subtract. .99 will make $4.10 $4.99 or $3.98 $3.99 or $4.50 $4.99. An empty field will turn this off. [for example: .99, .95, .90]",default_answer=".99"),"price_change_ending_amount"),(None)if(globe("price_change_ending_amount")=="")else(globe("price_change_ending_amount"))][1]),self.set_menu()])]]]"""%(i.Price_Change_Ending_Amount,i.shop_abbreviation,i.shop_abbreviation))  +  eval("""[M("Test A Price",callback = lambda _=None:[OSA.display_dialog("$"+str(CH().price_change(round(float(OSA.display_dialog("Enter a price",default_answer="")),2),"%s")),text_prompt=False)])]"""%(i.shop_abbreviation))  +  eval("""[M("Copy Current Price Change List", callback = lambda _=None: PriceChange().get_current_pricechanges("%s"))]"""%(i.shop_abbreviation))]],

      ]
      
                for i in All(Shop)        ]
  class SalesBar:
    # Basically, it shows the day's sales for all shops, as well and if clicked, shows the adsets.
    def __init__(self):
      import rumps
      from rumps import MenuItem as M
      from rumps import MenuItem
      self.app = rumps.App("🍃",quit_button=Null)
      globals().update(locals())


      self.set_menu()
      #process(  lambda: [time.sleep(6.15), self.set_menu()]  )
      process(lambda: [[time.sleep(60),self.set_menu()] for i in range(WHILE_TRUE)])
      time.sleep(4.5)
      self.app.run()


    def set_menu(self):
      keys = list(self.app.menu.keys())
      redprint(keys)
      for i in keys:
        self.app.menu.pop(i)
      #time.sleep(2)
      keycall("Icon",All(Adset));#@Refresh Icons
      keycall("post_handle",All(Adset))
      self.app.title = "/".join(["%s"%(round(sum(list(map(Float,key("total_price",Filter(Order,created_at__gte=Date()(),shop=i.shop_abbreviation))))),2) ) for i in All(Shop)])
      #@[2018.12.9 4:34 AM]Okay, it seems like if only the source adset shows the duplicates, I need to show all adsets, not only the active ones, so it will be easier to have each instance of the item show a duplicate adset list with metrics; and there will be no overlap of duplicate adset list from any source adset, ie: i have source adset brick, if at any time another adset with this handle and unmatching targeting appears, it will stem from a New source adset, therefore there is no overlap in terms of: filter-getting the adsetinsight by way of: Filter(Adset,source_adset_id=i.adset_id) & then the associated Adsetinsights from those.
      #@[2018.12.9 4:40 AM]This is tested.
      self.app.menu = [MenuItem("/",callback=lambda _=None:[pool(lambda i:July_Adset_Utilities().update_advertisement_all(i.adset_id),Filter(Adset,status="ACTIVE")).result(),self.set_menu()])] + \
                      [setitem(g(),"salesbar_x",self),
                      [
                        [MenuItem(title="%s%s;%s;%s|%s|%s"%("*"if(not i.original_caid and not i.source_adset_id)else "**" if(i.source_adset_id and not i.original_caid) else "",
                          idx+1,1+(-1*(Date()-i.created_time)),
                          round(sum(sud("spend",Filter(Adsetinsight,adset_id=i.adset_id))),2),
                          round(sum(sud("website_purchase_value",Filter(Adsetinsight,adset_id=i.adset_id))),2),
                          round(sum(sud("website_purchase",Filter(Adsetinsight,adset_id=i.adset_id))),2)
                          ),icon="%s"%i.icon), 
                            [
                              [MenuItem("%s;%s|%s|%s"%(sudsort("date",Filter(Adsetinsight,adset_id=i.adset_id),tcer=True)[0].date,
                                                        sudsort("date",Filter(Adsetinsight,adset_id=i.adset_id),tcer=True)[0].spend,
                                                        sudsort("date",Filter(Adsetinsight,adset_id=i.adset_id),tcer=True)[0].website_purchase_value,
                                                        sudsort("date",Filter(Adsetinsight,adset_id=i.adset_id),tcer=True)[0].website_purchase, )), 
                              eval('[MenuItem("+",callback=lambda _=None:[Get(Adset,adset_id=%s).post_duplicate(),g()["salesbar_x"].set_menu()])]'%(i.adset_id),globals())+\
                              [MenuItem("%s|%s|%s|%s|%s"%(b.adset_id,b.date,b.spend,b.website_purchase_value,b.website_purchase)) for a in Filter(Adset,source_adset_id= [i for i in Filter(Adset,handle=i.handle) if (not i.original_caid and not i.source_adset_id)][0].adset_id ) for b in keysort("date",Filter(Adsetinsight,adset_id=a.adset_id),tcer=True)] \
                              if Filter(Adset,source_adset_id=[i for i in Filter(Adset,handle=i.handle) if (not i.original_caid and not i.source_adset_id)][0].adset_id) else \
                              eval('[MenuItem("+",callback=lambda _=None:[Get(Adset,adset_id=%s).post_duplicate(),g()["salesbar_x"].set_menu()])]'%(i.adset_id),globals()) ] if Filter(Adsetinsight,adset_id=i.adset_id)else \
                                      (MenuItem("Waiting For Adsetinsight Data")),

                              [MenuItem(Get(Handle,handle=i.handle).reach),
                                eval('[MenuItem("+",callback=lambda _=None:[Get(Handle,handle="%s").post_lookalike(),g()["salesbar_x"].set_menu()]) if not Get(Handle,handle="%s").has_adset else MenuItem(".")]'%(i.handle,i.handle),globals())+\
                                [MenuItem("%s|%s|%s|%s"%(a,
                                                          sum(sud("spend",Filter(Adsetinsight,adset_id=Get(Adset,original_caid=a).adset_id))),
                                                          sum(sud("website_purchase_value",Filter(Adsetinsight,adset_id=Get(Adset,original_caid=a).adset_id))),
                                                          sum(sud("website_purchase",Filter(Adsetinsight,adset_id=Get(Adset,original_caid=a).adset_id))), )
                                                        ) for a in Get(Handle,handle=i.handle).has_adset if not i.original_caid and \
                                                                                                            # if an adset with custom audience is deleted, then check to include
                                                                                                            a in lmap(int,key("id",flatten(listminus(key("custom_audiences",All(Adset)),None),1)))] ]
                            ]
                        ] \
                        for idx,i in enum(keysort("created_time",Filter(Adset,status="ACTIVE"),tcer=True))
                      ]
                  ][1]
  class Selenium_Firefox_Matrix_Test:
    def some_test_results(self):
      if "geckodriver 18":
        ['quas.py', '3.4.3', '53']
        ['quas.py', '3.4.1', '57']
        ['quas.py', '3.4.3', '52']
        ['quas.py', '3.14.0', '52']
        ['quas.py', '3.6.0', '52']
        ['quas.py', '3.7.0', '52']
        ['quas.py', '3.4.1', '54']
        ['quas.py', '3.7.0', '53']
        ['quas.py', '3.6.0', '53']
        ['quas.py', '3.14.0', '53']
        ['quas.py', '3.14.0', '57']
        ['quas.py', '3.6.0', '57']
        ['quas.py', '3.7.0', '57']
        ['quas.py', '3.4.3', '54']
        ['quas.py', '3.14.0', '54']
        ['quas.py', '3.7.0', '54']
        ['quas.py', '3.6.0', '54']
        ['quas.py', '3.4.1', '53']
        ['quas.py', '3.4.1', '52']
        ['quas.py', '3.4.3', '57']
        ['quas.py', '3.13.0', '57']
        ['quas.py', '3.13.0', '54']
        ['quas.py', '3.12.0', '54']
        ['quas.py', '3.12.0', '52']
        ['quas.py', '3.13.0', '52']
        ['quas.py', '3.13.0', '53']
        ['quas.py', '3.12.0', '53']
        ['quas.py', '3.7.0', '60']
        ['quas.py', '3.6.0', '60']
        ['quas.py', '3.14.0', '60']
        ['quas.py', '3.10.0', '60']
        ['quas.py', '3.11.0', '60']
        ['quas.py', '3.9.0', '60']
        ['quas.py', '3.8.0', '60']
        ['quas.py', '3.4.0', '60']
        ['quas.py', '3.5.0', '60']
        ['quas.py', '3.14.1', '60']
        ['quas.py', '3.4.2', '60']
        ['quas.py', '3.12.0', '57']
      if "geckodriver 19":
        ['quas.py', '3.4.3', '62']
        ['quas.py', '3.11.0', '61']
        ['quas.py', '3.10.0', '61']
        ['quas.py', '3.9.0', '62']
        ['quas.py', '3.8.0', '62']
        ['quas.py', '3.10.0', '62']
        ['quas.py', '3.11.0', '62']
        ['quas.py', '3.8.0', '61']
        ['quas.py', '3.9.0', '61']
        ['quas.py', '3.5.0', '61']
        ['quas.py', '3.4.0', '61']
        ['quas.py', '3.4.0', '62']
        ['quas.py', '3.5.0', '62']
        ['quas.py', '3.4.2', '62']
        ['quas.py', '3.14.1', '61']
        ['quas.py', '3.4.2', '61']
        ['quas.py', '3.14.1', '62']

    def __init__(self):

      exec("from soda.can import *", globals())
      from selenium.webdriver.support.ui import WebDriverWait
      from selenium.webdriver.firefox.firefox_profile import FirefoxProfile
      from selenium.webdriver.firefox.firefox_binary import FirefoxBinary
      from selenium.webdriver.common.keys import Keys
      from selenium.webdriver.common.by import By
      from selenium.webdriver.chrome.options import Options
      from selenium.webdriver import ActionChains
      from selenium import webdriver
      from pyvirtualdisplay import Display
      from selenium.webdriver.common.alert import Alert
      from sys import platform
      import selenium.webdriver.support.expected_conditions as EC

      a = ["3.0.0",
      "3.0.1",
      "3.0.2",
      "3.0.4",
      "3.3.0",
      "3.4.0",
      "3.4.1",
      "3.4.2",
      "3.4.3",
      "3.5.0",
      "3.6.0",
      "3.7.0",
      "3.8.0",
      "3.9.0",
      "3.10.0",
      "3.11.0",
      "3.12.0",
      "3.13.0",
      "3.13.1",
      "3.14.0",
      "3.14.1"]
      b = [
      "/Applications/Firefox 61.app/Contents/MacOS/firefox-bin",
      "/Applications/Firefox 62.app/Contents/MacOS/firefox-bin",
      "/Applications/Firefox 63.app/Contents/MacOS/firefox-bin",
      "/Applications/Firefox 64.app/Contents/MacOS/firefox-bin",
      "/Applications/Firefox 46.app/Contents/MacOS/firefox-bin",
      ]
      if __name__ == "__main__":
        import sys
        sys.argv[1]
        print(sys.argv)

        j = sys.argv[2]
        j = ["/Applications/Firefox %s.app/Contents/MacOS/firefox-bin"%j for i in os.listdir("/Applications") if tryreturn(decimal_re, i) == int(j)][0]
        print(j)
        profile = "sele"
        profile_path = os.path.expanduser("~/Library/Application Support/Firefox/Profiles")
        executable_path = os.path.expanduser("~/tavern/tavern/soda/geckodriver 24")
        firefox_profile = FirefoxProfile(homepath("~/Library/Application Support/Firefox/Profiles/%s" % (( [i for i in os.listdir(os.path.expanduser("~/Library/Application Support/Firefox/Profiles")) if profile == "".join(i.split(".")[1:]) ][0] ))))
        firefox_binary = FirefoxBinary(j) # Make sure selenium is 3.8.0
        wd = webdriver.Firefox(executable_path=executable_path, firefox_profile=firefox_profile, firefox_binary=firefox_binary)

      # TESTER 1 #
      for i in a:
        for j in b:
          F = subprocess.getoutput("pip install selenium==%s"%i)
          greenprint(F)
          if "Could not find a version that satisfies the requirement selenium" in F:
            print("continue-")
            continue
          R = subprocess.getoutput("~/tavern/bin/python3.5 quas.py %s %s"%(i, decimal_re(j)))
          redprint(R)
          with open("%s_%s.txt" % (i, decimal_re(j)) , "w") as f:
            f.write(R)
          os.system("killall firefox-bin")

      # TESTER 2 #
      R = os.listdir()
      for i in R:
        try:
          if "Traceback" not in open(i, "r").read():
            print(i)
            if "DEBUG" not in open(i).read():
              distinct_print(open(i).read())
        except Exception as e:
          # redprint(e)
          pass
  class SelfHelpTip_Menulet:
    def __init__(self):
      import rumps
      from rumps import MenuItem as M
      from rumps import MenuItem
      self.app = rumps.App("Self Help Tip Menulet", quit_button=Null)
      globals().update(locals())


      self.set_menu()
      time.sleep(7)
      self.app.run()

    def set_menu(self):
      keys = list(self.app.menu.keys())
      redprint(keys)
      self.app.title = All(SelfHelpTip)[0].selfhelptip
      self.app.menu = [
                        eval("""M(Get(SelfHelpTip,id=%s).selfhelptip,callback=lambda _=None:[setattr(self.app,"title",Get(SelfHelpTip,id=%s).selfhelptip)])"""%(i.id,i.id)) for i in All(SelfHelpTip)
                  ]
  class Slime(DecisionTree):
    def __init__(self):
      exec("from moviepy.editor import *")
      from moviepy.editor import VideoFileClip
      #from mutagen import MP3
      from pydub import AudioSegment
      from gtts import gTTS
      globals().update(locals())
      print("hello")
      print(" -- most often, youtube_video_download(7) will be used -- ")
      self.functions_sorted = [
                                "youtube_mp3_download",
                                "scdl",
                                "download", 
                                "halfavideo",
                                "resizevideo",
                                "youtube_channel_download", 
                                "youtube_playlist_download", 
                                "youtube_artist_download", 
                                "youtube_subtitle_download",

                                "youtube_proxy_download",


                                "splice", 
                                "youtube_search_download",
                                "mass_videos_to_subtitles", 
                                "download_a_song",
                                "download_en_masse",
                                "convert_current_directory_to_mp3", 
                                "youtube_video_download", 
                                "vaudioop", 
                                "mp3_compile", 
                                "mp3_to_mp4", 
                                "mp4_to_mp3", 
                                "mp3_to_wav",
                                "wav_to_mp3",
                                "wav_to_array",
                                
                                "speak",
                                "speak2",
                                "save",
                                "get_sound_volume_output",
                                ]
    def resizevideo(self,infile,outfile):
      os.system("ffmpeg -i '%s' -s 640x360 -c:a copy '%s' ;"%(infile,outfile))
    def wav_to_array(self, infile):
      from scipy.io.wavfile import read
      a = read(infile)
      return numpy.array(a[1],dtype=float)
    def wav_to_mp3(self, infile, outfile):
      os.system("ffmpeg -i '%s' -codec:a libmp3lame -qscale:a 2 '%s'"%(infile,outfile))
    def mp3_to_wav(self, infile, outfile):
      os.system("ffmpeg -i '%s' -acodec pcm_u8 -ar 22050 '%s'"%(infile,outfile))
    def download_en_masse(self, data):
      data = data.split(',')
      url = data.pop(0)
      outfile = data.pop(0)
      isotimes = data
      for isotime in isotimes:
        start_isotime, end_isotime = isotime.split('-')
        print("downloading %s %s-%s"%(url, start_isotime, end_isotime))
        self.download(url, outfile, 'mp4', start_isotime, end_isotime)
    def mass_videos_to_subtitles(self, word):
      import os, requests
      os.makedirs(word, exist_ok=True)
      os.chdir(word)
      many_urls = []
      for i in range(30):
        x = requests.get("https://www.youtube.com/results?search_query=%s&page=%s"%(word,i))
        urls = re.findall(r'(?s)href="(/watch.*?)"', x.text)
        urls = list(set(urls))
        urls = ["https://youtube.com%s"%i for i in urls]
        many_urls.extend(urls)
        many_urls = list(set(many_urls))
        print("found %s more urls, total of many_urls is %s" % (len(urls), len(many_urls)))
        #os.system("youtube-dl --sub-lang en --sub-format vtt --write-auto-sub --skip-download https://www.youtube.com/results?search_query=%s&page=15"%(word.replace(" ","+")))
        #os.system("youtube-dl --sub-lang en --sub-format vtt --write-auto-sub --skip-download https://www.youtube.com/results?q=%s&page=%s"%(word.replace(" ","+"), i))
        #os.system("youtube-dl --ignore-errors --all-subs -f 18 -cit https://www.youtube.com/results?q=%s&page=%s"%(word, i))
      for i in many_urls:
        os.system("youtube-dl --sub-lang en --sub-format vtt --write-auto-sub --skip-download %s"%i)
      def to_txt(fn):
        with open(fn, "r") as f:
          txt = f.read()
        # <>s
        pattern = r'(<.*?>)'
        txt = re.sub(pattern, "", txt)
        # timestamps
        pattern = r'(.*-->.*)'
        txt = re.sub(pattern, "", txt)
        txt = txt.split("\n")
        load = []
        for i in txt:
          i = i.strip()
          load.append(i)
        txt = "\n".join(load)
        for i in range(20):
          txt = txt.replace("\n\n", "\n")

        txt = txt.split("\n")
        load = []
        # Only append if line is not duplicate.
        for idx, i in enumerate(txt[:-1]):
          try:
            if txt[idx] != txt[idx+1]:
              load.append(i)
          except Exception as e:
            print(e)
        txt = "\n".join(load)
        return txt
      def lineskip(txt):
        lineskips = [" but", " um", " I'm", " I"]
        txt = txt.replace("\n", " ")
        for i in lineskips:
          txt = txt.replace(i, "\n%s"%i)
        return txt

      input("ready to change text on the downloaded srcs?")
      for i in os.listdir():
        if "vtt" not in i:
          continue
        print("working on file '%s'"%i)
        txt = to_txt(i)
        txt = lineskip(txt)
        with open(i, "w") as f:
          f.write(txt)

    def youtube_mp3_download(self, url):
      i = input("artist&track like this: '%s - %s' ||: ")
      self.download(url, outfile=i, format="mp3")
      
      artist_name, track_name = i.split(" - ")
      track_name = track_name + ".mp3"
      print('artist name: %s' % artist_name)
      print('track name: %s' % track_name)
      os.system('mv "%s.mp3" "%s"' % (i, track_name))
      os.system('id3v2 -a "%s" "%s"' % (artist_name,track_name))
      os.system('id3v2 -t "%s" "%s"' % (track_name,track_name))
      print('\n')
      os.system('id3v2 --list "%s"' % track_name)
      os.system('mv "%s" ~/Documents/' % track_name)
    def download_a_song(self, url, song, album, artist):
      #https://www.youtube.com/watch?v=MW1mnujV6eI
      song = song.replace("_", " ")
      album = album.replace("_", " ")
      artist = artist.replace("_", " ")
      system("youtube-dl --extract-audio --audio-format mp3 %s" % url)
      track_name = [i for i in os.listdir() if ".mp3" in i][0]
      system('mv "%s" "%s"'  % (track_name, "%s.mp3"%song))
      system('id3v2 -a "%s" "%s"' % (artist, track_name))
      system('id3v2 -A "%s" "%s"' % (album, track_name))
      system('id3v2 -t "%s" "%s"' % (song, track_name))
      system('mv *.mp3 ~/Documents/')

    def download(self, url, outfile, format, start_isotime=None, end_isotime=None):
      print("url, outfile, format='mp3', start_isotime=None, end_isotime=None");
      if format == 'mp3':
        system("youtube-dl --extract-audio --audio-format mp3 --output '{}.%(ext)s' {}".format(outfile.replace('.mp3',''), url))
        fn = '%s.mp3' % outfile
        while fn not in os.listdir('.'):
          time.sleep(1)
          print("Waiting...")

        if start_isotime:
          sliced_fn = ('%s-%s-%s'%(start_isotime, end_isotime, fn)).replace(':', '')
          sliced = self.splice(fn, start_isotime, end_isotime, 'mp3')
          sliced.export(sliced_fn)
          system('rm %s'%fn)
          return sliced_fn

        return fn

      elif format == 'mp4':
        system("youtube-dl -f 18 --output '{}.%(ext)s' {}".format(outfile.replace('.mp4',''), url))
        time.sleep(5)
        fn = '%s.mp4' % outfile
        while fn not in os.listdir('.'):
          time.sleep(1)
          print("Waiting...")

        if start_isotime:
          print("splicing...")
          sliced = self.splice(fn, start_isotime, end_isotime, format='mp4')
          system('rm %s'%fn)
    def splice(self, fn, start_isotime, end_isotime, format):
      if format == 'mp3':
        sound = AudioSegment.from_mp3(fn)
        start = self.isotime_to_milliseconds(start_isotime)
        end = self.isotime_to_milliseconds(end_isotime)
        spliced_sound = sound[start:end]
        spliced_sound.export("%s-%s_%s"%(start_isotime,end_isotime,fn.split('/')[-1]))
        return spliced_sound 
      elif format == 'mp4':
        video = VideoFileClip(fn)
        start = self.isotime_to_seconds(start_isotime)
        end = self.isotime_to_seconds(end_isotime)
        video = video.subclip(start, end)

        sliced_fn = ('%s-%s-%s'%(start_isotime, end_isotime, fn)).replace(':', '')
        print('sliced_fn: %s'%sliced_fn)
        video.write_videofile(sliced_fn, fps=24)
        return video
    def youtube_search_download(self, query):
      query = query.replace('_','+')
      system("youtube-dl --ignore-errors -f 18 -cit https://www.youtube.com/results?q=%s&page=1"%query)
    def youtube_channel_download(self, url, format, bestquality="False", proxy="False"):
      proxy = eval(proxy)
      bestquality = eval(bestquality)

      print("please specify a format, mp4/m4a, or mp3 || note in future will have need cvrt webm to m4a.. ")
      x = requests.get(url).text
      folder_name = or_list(lambda:SOUPY(x,"h2","class","epic-nav-item-heading")[0].text.strip(),SOUPY(x,"span","class","qualified-channel-title-text")[0].text)
      print("downloading to ~/Documents/%s" % folder_name)
      if format == "mp3":
        ###
        if proxy == False:
          system('mkdir "/Users/$USER/Documents/%s" && cd "/Users/$USER/Documents/%s" && youtube-dl --extract-audio --audio-format mp3 --ignore-errors %s &' % (folder_name,folder_name,url))
        ###
        ###
        elif proxy == True:
          proxy_list = get_us_ip_list() # stored in general-utils
          for idx, proxy in enumerate(proxy_list):
            print("#%s" % idx)
            #response = getoutput("youtube-dl --proxy %s %s" % (proxy, url))
            response = getoutput('mkdir "/Users/$USER/Documents/%s" && cd "/Users/$USER/Documents/%s" && youtube-dl --extract-audio --audio-format mp3 --ignore-errors --proxy %s "%s" & '%(folder_name,folder_name,proxy,url))
            print(response)
            if "[download] Destination:" in response:
              print("found it -- proxy 1")
        ###
      elif format == "m4a" or format == "mp4":
        if proxy == False:
          if bestquality == False:
            system('mkdir "/Users/$USER/Documents/%s" ; cd "/Users/$USER/Documents/%s" && youtube-dl --ignore-errors -f 18 "%s" '%(folder_name,folder_name,url))
          elif bestquality == True:
            bestqualitie = self.get_best_qualitie(url)
            print("bestqualitie: %s" % bestqualitie)
            system('mkdir "/Users/$USER/Documents/%s" ; cd "/Users/$USER/Documents/%s" && youtube-dl --ignore-errors -f %s "%s" '%(folder_name,folder_name, bestqualitie, url))
        elif proxy == True:

          proxy_list = get_us_ip_list() # stored in general-utils
          random.shuffle(proxy_list)
          for idx, proxy in enumerate(proxy_list):
            print("#%s" % idx)
            #response = getoutput("youtube-dl --proxy %s %s" % (proxy, url))
            response = getoutput('mkdir "/Users/$USER/Documents/%s" ; cd "/Users/$USER/Documents/%s" && youtube-dl --ignore-errors --proxy %s "%s" '%(folder_name,folder_name,proxy,url))
            print(response)
            if "[download] Destination:" in response:
              print("found it -- proxy 1")
      try:
        if format == "mp3":
          for i in os.listdir(homepath("~/Documents/%s" % folder_name)):
            system('id3v2 -a "%s" "/Users/$USER/Documents/%s/%s"' % (folder_name,folder_name,i))
            system('id3v2 -t "%s" "/Users/$USER/Documents/%s/%s"' % (i,folder_name,i))
      except:
        # untested
        pass
    def get_best_qualitie(self, url):
      q = getoutput("youtube-dl -F '%s'"% url)
      qualities = {}
      for i in q.split("\n"):
        if " mp4 " in i:
          note=re.findall(r" ([0-9]+p)", i)
          format_=re.findall(r"(^[0-9]+) ", i)
          if note != []:
            qualities[format_[0]] = int(note[0].replace("p",""))
      bestqualitie = -1
      for format_ in qualities:
        if qualities[format_] > bestqualitie:
          bestqualitie = qualities[format_]
      return bestqualitie

    def get_sound_volume_output(self, seconds=10):
      import sounddevice as sd
      import numpy as np
      def print_sound(indata,outdata,frames,time,status):
        volume_norm = np.linalg.norm(indata)*10
        print("|" * int(volume_norm))
      with sd.Stream(callback=print_sound):
        sd.sleep(seconds * 1000)

    def youtube_playlist_download(self, url, format="mp3", folder_name = None):
      print("please specify a format, mp4/m4a, or mp3 || note in future will have need cvrt webm to m4a.. ")
      folder_name = url.split("/")[-1] if folder_name == None else folder_name
      print("downloading to ~/Documents/%s" % folder_name)
      if format == "mp3":
        system("mkdir ~/Documents/%s ; cd ~/Documents/%s && youtube-dl --extract-audio --audio-format mp3 --ignore-errors %s &" % (folder_name,folder_name,url))
      elif format == "m4a" or format == "mp4":
        system('mkdir ~/Documents/%s ; cd ~/Documents/%s && youtube-dl --ignore-errors -f 18 "%s" &'%(folder_name,folder_name,url))


    def youtube_artist_download(self):
      artist = OSA.log("artist?:")
      playlist_urls = []
      while True:
        x = str(pyperclip.paste()).split("&playnext")[0]
        if "playlist" in x and x not in playlist_urls:
          playlist_urls.append(x)
        if x == "end":
          break
      os.makedirs(homepath("~/Documents/%s"%(artist)),exist_ok=True)
      for i in playlist_urls:
        title = SOUP(requests.get(i).text).findAll("h1",attrs={"class":"pl-header-title"})[0].text.strip()
        y = homepath("~/Documents/%s/%s"%(artist,title))
        os.makedirs(y,exist_ok=True)
        os.chdir(y)
        os.system("youtube-dl --extract-audio --audio-format mp3 --ignore-errors %s"%(i))
        os.system("id3v2 -a '%s' *"%(artist))
        os.system("id3v2 -A '%s' *"%(title))

    # def youtube_artist_download(self):
    #   artists = OSA.log("artists (delimited by ', ')?:")
    #   ss = Browser()("ch")
    #   for artist in artists:
    #     ss.get("https://www.youtube.com/results?search_query=%s"%(artist))
    #     ss.fcns("ytd-search-refinement-card-renderer")


    def convert_current_directory_to_mp3(self):
      for fn in os.listdir():
        if '.mp4' == fn[-4:]:
          self.mp4_to_mp3(fn, fn.replace('.mp4','.mp3'))
          os.remove(fn)
    def youtube_video_download(self, url):
      system('youtube-dl -f 18 -citw -v %s'%url)
    def isotime_to_milliseconds(self, isotime):
      minutes, seconds = isotime.split(':')
      milliseconds = 1000 * ((int(minutes)*60)+int(seconds))
      return milliseconds
    def isotime_to_seconds(self, isotime):
      minutes, seconds_ = isotime.split(':')
      seconds = ((int(minutes)*60)+int(seconds_))
      return seconds
    def milliseconds_to_isotime(self, milliseconds):
      seconds = int((milliseconds/1000)%60)
      minutes = int(((milliseconds/1000)-seconds)/60)
      return '%s:%s' % (minutes, seconds)
    def vaudioop(self, audio_file_name, video_file_name, output_file_name):
      audio = (AudioFileClip(audio_file_name))
      clip = (VideoFileClip(video_file_name, audio=False))
      edited_video = (clip.fx(vfx.loop, duration=audio.duration))
      final = (edited_video.set_audio(audio))
      final.write_videofile(output_file_name, fps=clip.fps,
                            audio_bitrate="1000k", bitrate="4000k")
    # [ FINAL ]

    def mp3_compile(self, crossfade=2):
      print("this will compile the mp3 files in this directory... crossfade inputtable")
      out_fn = input("output mp3 filename?: ")
      payload = AudioSegment.from_mp3('silence')
      
      for idx, i in enumerate(os.listdir('.')):
        print('%s. %s'%(idx, i))
      numbers = input("Numbers delimited by ', '?: ") 
      numbers = list(map(int, numbers.split(', ')))
      tracktimes = []
      for i in numbers:
        filename = os.listdir('.')[i]
        payload += AudioSegment.from_mp3(filename)
        tracktimes.append("%s : %s" % (filename, self.milliseconds_to_isotime(len(payload))))
        payload += AudioSegment.from_mp3('silence') * crossfade
      print('\n'.join(tracktimes))
      payload.export(out_fn)
    @timeit
    def mp3_to_mp4(self, picture, mp3, out='final.mp4'):
      Images().resize(picture, 1920)
      system("ffmpeg -loop 1 -i %s -i %s -c:v libx264 -c:a aac -strict experimental -b:a 192k -shortest -preset ultrafast %s" % (picture,mp3,out))
    def mp4_to_mp3(self, fn, outfile):
      clip = VideoFileClip(fn) # .subclip(0,20)
      clip.audio.write_audiofile(outfile)
    def scdl(self, artist, link):
      from mutagen.mp3 import MP3
      os.makedirs(homepath("~/Documents/%s"%(artist)))
      os.chdir(homepath("~/Documents/%s"%(artist)))
      os.system("scdl --onlymp3 -c -t -l %s"%(link))
      os.system('id3v2 -a """%s""" *'%(artist))
      for i in os.listdir():
        audio = MP3(i)
        if audio.info.length < 45:
          print("%s less than 45 seconds in runtime, it is %s. deleting..." % (i, audio.info.length))
          os.remove(i)
    def halfavideo(self, count=8, fn="Test.mp4"):
      print("inputs are count, fn ")
      command = "ffmpeg -i %s -filter:a '%s' -vn %s_slower_%s" \
        % (fn, ("atempo=0.5 "*count).strip().replace(" ", ","), count, fn)

      print(command)
      print("%s Times Slower" % 0.5**count)
      import os
      os.system(command)
    def youtube_proxy_download(self, url):
      # ip_regex = r"\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b"


      proxy_list = get_us_ip_list() # stored in general-utils

      for idx, proxy in enumerate(proxy_list):
        print("#%s" % idx)
        #response = getoutput("youtube-dl --proxy %s %s" % (proxy, url))
        response = getoutput("youtube-dl --sub-lang en --sub-format vtt --write-auto-sub --proxy %s %s" % (proxy, url))
        print(response)

        if "[download] Destination:" in response:
          print("found it -- proxy 1")

          return response


    def youtube_subtitle_download(self, url):
      print("youtube subtitle downloading url: %s" % url)
      def dl(url):
        x = getoutput("youtube-dl --sub-lang en --sub-format vtt --write-auto-sub --skip-download %s" % url)
        x = x.split(": ")[-1]
        getoutput("mv '%s' '%s'" % (x, x.replace(" ", "_")))
        return x.replace(" ", "_")
      def to_txt(fn):
        with open(fn, "r") as f:
          txt = f.read()
        # <>s
        pattern = r'(<.*?>)'
        txt = re.sub(pattern, "", txt)
        # timestamps
        pattern = r'(.*-->.*)'
        txt = re.sub(pattern, "", txt)
        txt = txt.split("\n")
        load = []
        for i in txt:
          i = i.strip()
          load.append(i)
        txt = "\n".join(load)
        for i in range(20):
          txt = txt.replace("\n\n", "\n")

        txt = txt.split("\n")
        load = []
        # Only append if line is not duplicate.
        for idx, i in enumerate(txt[:-1]):
          try:
            if txt[idx] != txt[idx+1]:
              load.append(i)
          except Exception as e:
            print(e)
        txt = "\n".join(load)
        return txt
      def lineskip(txt):
        lineskips = [" but", " um", " I'm", " I"]
        txt = txt.replace("\n", " ")
        for i in lineskips:
          txt = txt.replace(i, "\n%s"%i)
        return txt
      def main(url):
        fn = dl(url)
        txt = to_txt(fn)
        txt = lineskip(txt)
        with open("%s.txt"%fn, "w") as f:
          f.write(txt)
      main(url)
      print("success")


    def speak(self, text = None, lang="en", slow=False):
      if text == None: text = multi_input("Input text to speak: ").replace("\n", ". ")
      tts = gTTS(text, lang=lang, slow=slow)
      tts.save("out.mp3")
      os.system("afplay out.mp3 && rm out.mp3 &")
    def speak2(self, text = None):
      if text == None: text = multi_input("Input text to speak: ").replace("\n", ". ")
      os.system('say """%s""" &' % text)
    def save(self, text, output, lang="en", slow=False):
      text = multi_input("Input text to speak: ").replace("\n", ". ") if text==None else text
      tts = gTTS(text, lang=lang, slow=slow)
      tts.save(output)
    def translate(self, to_translate, to_language="en", from_language="auto"):
      from mtranslate import translate
      return translate(to_translate, to_language, from_language)
    def add_videos(self, files, destination):
      files = lmap(lambda i:("'%s'"%(i)), files)
      os.system("mencoder -forceidx -ovc copy -oac pcm -o '%s' %s"%(destination, Join(" ",files)))
      

    def get_albums_from_wikipedia(self,url="https://en.wikipedia.org/wiki/1969_in_music"):
      """ url = "https://en.wikipedia.org/wiki/1969_in_music" """
      a = read_html(url)
      a = [i for i in a if "Album" in str(i)]
      redprint(len(a))
      a = sum(a,[])
      redprint(len(a))
      return a


    def audio_record(self):
      # Other aliases: record_wav, record_sound, record_self, record_audio, mp3_record, wav_record
      address = greeninput("address?: ")
      (  [redprint("address in os.listdir()"),0/0]  )  if(0!=os.listdir().count(address))    else(  [redprint("address `%s` not in os.listdir()"%address)]  )
      OSA(None, ["cmd_arrow_right"]) # shift aside desktop windows.
      os.system("""/usr/local/bin/sox -d "%s" """ % (address))
    def tests(self):
      test_url = 'https://www.youtube.com/watch?v=PN7HJBodm8o'
      self.download(test_url, outfile='test_download', format='mp3')
      print('test done')
      self.download(test_url, outfile='test_download2', format='mp3', start_isotime='00:10', end_isotime='1:10')
      print('test done')
      self.download(test_url, outfile='test_download3', format='mp4')
      print('test done')
      self.download(test_url, outfile='test_download4', format='mp4', start_isotime='00:10', end_isotime='1:10')
      print('test done')
      self.mp4_to_mp3(input('mp4_to_mp3?:'), input("outfile?: "))
      self.mp3_compile()
  class SkuAlgorithm:
    a1 = lambda self, x, **kwargs: [setitem(kwargs,"a","".join(lmap(str,lmap(ord, shuffled(x))))),exec("assert len(kwargs['a']) <=255"),((kwargs["a"])if(kwargs["a"] not in key("nsku",All(Sku)))else(self.a1(x)) )][2]
    a2 = lambda self, x, **kwargs: [setitem(kwargs,"a","-".join([generate_one_alphabetical_string(3),generate_one_alphabetical_string(4),generate_one_alphabetical_string(4)]).upper()),exec("assert len(kwargs['a']) <=255"),((kwargs["a"])if(kwargs["a"] not in key("nsku",All(Sku)))else(self.a2(x)))][2]
    a3 = lambda self, x, **kwargs: [setitem(kwargs,"a","-".join([generate_one_random_number(3),generate_one_random_number(4),generate_one_random_number(4)]).upper()),exec("assert len(kwargs['a']) <=255"),((kwargs["a"])if(kwargs["a"] not in key("nsku",All(Sku)))else(self.a3(x)))][2]
    a4 = lambda self, x, **kwargs: [setitem(kwargs,"a","-".join([generate_one_random_number(3),generate_one_alphabetical_string(4),generate_one_alphabetical_string(4)]).upper()),exec("assert len(kwargs['a']) <=255"),((kwargs["a"])if(kwargs["a"] not in key("nsku",All(Sku)))else(self.a4(x)))][2]
    a5 = lambda self, x, **kwargs: [setitem(kwargs,"a","-".join([generate_one_random_number(7),generate_one_alphabetical_string(2),generate_one_alphabetical_string(5)]).upper()),exec("assert len(kwargs['a']) <=255"),((kwargs["a"])if(kwargs["a"] not in key("nsku",All(Sku)))else(self.a5(x)))][2]
    a6 = lambda self, x, **kwargs: [setitem(kwargs,"a",(generate_one_alphabetical_string(2)+"{"+generate_one_random_number(4)+"}"+";"+generate_one_alphabetical_string(10)).upper()),exec("assert len(kwargs['a']) <=255"),((kwargs["a"])if(kwargs["a"] not in key("nsku",All(Sku)))else(self.a6(x)))][2]
    a7 = lambda self, x, **kwargs: [setitem(kwargs,"a",("".join(lmap(str,[random.randrange(7,10) for i in range(3)]))+"$"+generate_one_alphanumeric_string(10)).upper()),exec("assert len(kwargs['a']) <=255"),((kwargs["a"])if(kwargs["a"] not in key("nsku",All(Sku)))else(self.a7(x)))][2]
    rnda = lambda self: getattr(self, random.choice([i for i in dir(self) if i.startswith("a")]))
    """
    blueprint(SkuAlgorithm().a1('["sku-1-123", "sku-2-asdfjpmv2912"]'))
    blueprint(SkuAlgorithm().a2('["sku-1-123", "sku-2-asdfjpmv2912"]'))
    blueprint(SkuAlgorithm().a3('["sku-1-123", "sku-2-asdfjpmv2912"]'))
    blueprint(SkuAlgorithm().a4('["sku-1-123", "sku-2-asdfjpmv2912"]'))
    blueprint(SkuAlgorithm().a5('["sku-1-123", "sku-2-asdfjpmv2912"]'))
    blueprint(SkuAlgorithm().a6('["sku-1-123", "sku-2-asdfjpmv2912"]'))
    blueprint(SkuAlgorithm().a7('["sku-1-123", "sku-2-asdfjpmv2912"]'))
    """
  class Speech_Recognition:
    @timeit
    def recognize_sphinx(self, AUDIO_FILE, language="en-US"):
      import speech_recognition as sr

      # obtain path to "english.wav" in the same folder as this script
      from os import path

      #AUDIO_FILE = "out.wav"#path.join(path.dirname(path.realpath(__file__)), "out.wav")
      # AUDIO_FILE = path.join(path.dirname(path.realpath(__file__)), "french.aiff")
      # AUDIO_FILE = path.join(path.dirname(path.realpath(__file__)), "chinese.flac")

      # use the audio file as the audio source
      r = sr.Recognizer()
      with sr.AudioFile(AUDIO_FILE) as source:
        audio = r.record(source) # read the entire audio file

      # recognize speech using Sphinx
      try:
        print("Sphinx thinks you said " + r.recognize_sphinx(audio, language="fr-FR"))
      except sr.UnknownValueError:
        print("Sphinx could not understand audio")
      except sr.RequestError as e:
        print("Sphinx error; {0}".format(e))

    @timeit
    def recognize_google(self, AUDIO_FILE = "out.wav", language="en-US"):
      import speech_recognition as sr

      # obtain path to "english.wav" in the same folder as this script
      from os import path

      #AUDIO_FILE = "out.wav"#path.join(path.dirname(path.realpath(__file__)), "out.wav")

      # use the audio file as the audio source
      r = sr.Recognizer()
      with sr.AudioFile(AUDIO_FILE) as source:
        audio = r.record(source) # read the entire audio file

      # recognize speech using Google Speech Recognition
      try:
        # for testing purposes, we're just using the default API key
        # to use another API key, use `r.recognize_google(audio, key="GOOGLE_SPEECH_RECOGNITION_API_KEY")`
        # instead of `r.recognize_google(audio)`
        print("Google Speech Recognition thinks you said " + r.recognize_google(audio))
      except sr.UnknownValueError:
        print("Google Speech Recognition could not understand audio")
      except sr.RequestError as e:
        print("Could not request results from Google Speech Recognition service; {0}".format(e))
  class SED(DecisionTree):
    def SED_RECURSIVELY(self):
      import glob
      dir = input("dir?: ")
      os.chdir(dir)
      ext = input("ext?: ")
      old = input("old?: ")
      new = input("new?: ")
      os.chdir("../")
      files = glob.glob('**/*%s'%ext, recursive=True)
      print(files)
      old = old.replace("/", "\\/")
      new = new.replace("/", "\\/")
      for fn in files:
        system("sed -i '' -e s/%s/%s/g %s"%(old,new,fn))
    def SED(self):
      file = input("file?: ")
      old = input("old?: ")
      new = input("new?: ")
      os.chdir("../")
      old = old.replace("/", "\\\/")
      new = new.replace("/", "\\\/")
      the_string = "sed -i '' -e s/%s/%s/g %s"%(old,new,file)
      print("the string: %s" % the_string)
      os.system(the_string)
  class SQL(DecisionTree):
    def migrate(self, database, modelstring="on_clipboard"):
      if modelstring == "on_clipboard":
        modelstring = pyperclip.paste()
      modelstrings = [re.findall(r"(?s)(.*):End:", ("class" + modelstring))[0] for modelstring in modelstring.split("\nclass")]
      # [TESTING] return modelstrings
      for modelstring in modelstrings:
        test_modelstring = """
        class Audience(Worksheet):
          id = AutoField()
          name = CharField()
          pcs = FloatField()
          roi = FloatField()
          spent = FloatField()
          pcv = FloatField()
          flex = FloatField()
          state = IntegerField()
          fb_page_id = CharField()
          niche = CharField()
          objects = BaseModelManager()"""
        base = "mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A {} -e '%s'".format(database)
        import string
        q = "\n".join([i for i in modelstring.strip().split("\n") if "Field(" not in i])
        distinct_print(q)

        modelstring = "\n".join([i for i in modelstring.strip().split("\n") if "Field(" in i or i.startswith("class")])

        table = re.findall(r"class (.*)\(", modelstring)[0].lower()
        table = database + "_" + table
        ###
        print(table)
        fieldnames = re.findall(r" ([a-zA-Z0-9_].*?) =", modelstring)
        fieldtypes = re.findall(r"= (.*?\))", modelstring)
        fields = OrderedDict(zip(fieldnames, fieldtypes))
        fields.pop("objects", "")

        def generate_sql_fields(database, fields):
          sql_fields = OrderedDict()
          unique_field_count = 0
          unique_field_names = []
          for k,v in fields.items():
            if ("unique=True") in v:
              unique_field_count = unique_field_count + 1
              unique_field_names.append(k)
          print("unique_field_count: %s | unique_field_names: %s | " % (unique_field_count, unique_field_names))

          for k, v in fields.items():
            dtype = None
            if "AutoField()" in v:
              dtype = " int(11) AUTO_INCREMENT PRIMARY KEY"
            elif ("BigIntegerField" in v) and ("primary_key" in v):
              dtype = "bigint(20) PRIMARY KEY"
            elif ("BigIntegerField" in v) and ("unique=True" in v) and (unique_field_count == 1): # if unique_field_count > 1:, add Constraint @ End.
              dtype = "bigint(20) UNIQUE"
            elif "BigIntegerField" in v:
              dtype = "bigint(20)"
            elif ("IntegerField" in v) and ("primary_key" in v):
              dtype = "int(11) PRIMARY KEY"
            elif ("IntegerField" in v) and ("unique=True" in v) and (unique_field_count == 1): # if unique_field_count > 1:, add Constraint @ End.
              dtype = "int(11) UNIQUE"
            elif "IntegerField" in v:
              dtype = "int(11)"
            elif "DecimalField" in v:
              dtype = "decimal(16,3)"
            elif ("FloatField" in v) and ("unique=True" in v) and (unique_field_count == 1):
              dtype = "double UNIQUE"
            elif "FloatField" in v:
              dtype = "double"
            elif ("DateTimeField" in v) and ("null=True" in v):
              dtype = "datetime null default null"
            elif ("DateTimeField" in v) and ("unique=True" in v):
              dtype = "datetime null default null UNIQUE"
            elif "DateTimeField" in v:
              dtype = "datetime(6)"
            elif ("DateField" in v) and ("unique=True" in v) and (unique_field_count == 1): # if unique_field_count >1:, add Constraint @ End.
              dtype = "date UNIQUE"
            elif "DateField" in v:
              dtype = "date"
            # CharField's length not too long cuz of primary_keys.
            elif ("CharField" in v) and ("primary_key" in v):
              max_length = int(v[v.index("max_length")+len("max_length")+2:v.index("max_length")+len("max_length")+6]) if ("max_length" in v) else 512  ;  dtype = "varchar({}) PRIMARY KEY".format(str(int(max_length)))    if ("unique" in v or "primary_key" in v)  else "varchar({}) PRIMARY KEY".format(str(int(max_length))); #dtype = "varchar({}) PRIMARY KEY".format(str(int(max_length)))
            elif ("CharField" in v) and ("unique" in v) and ("True" in v) and (unique_field_count == 1):
              max_length = int(v[v.index("max_length")+len("max_length")+2:v.index("max_length")+len("max_length")+6]) if ("max_length" in v) else 512  ;  dtype = "varchar({}) UNIQUE".format(str(int(max_length)))    if ("unique" in v or "primary_key" in v)  else "varchar({}) UNIQUE".format(str(int(max_length))); #dtype = "varchar({}) UNIQUE".format(str(int(max_length)))
            elif "CharField" in v:
              max_length = int(v[v.index("max_length")+len("max_length")+2:v.index("max_length")+len("max_length")+6]) if ("max_length" in v) else 512  ;  dtype = "varchar({})".format(str(int(max_length)))    if ("unique" in v or "primary_key" in v)  else "varchar({})".format(str(int(max_length))); #dtype = "varchar({})".format(str(int(max_length)))
            elif "NullBooleanField()" in v:
              dtype = "tinyint(1)"
            #@[2018.11.23 10:03 AM] I had previously not included a  unique=True here OR a if unique_field_count == 1...  Remember that you Must add unique_field_count at End if it is above 1 unique_field,  `oh well.` i woulda not been bustered by BooleanField.  &*I DO NOT HAVE THE THONGS TO TEST THIS RIGHT NOW. LOL. you use-test it.
            elif ("BooleanField" in v) and ("unique=True" in v) and (unique_field_count == 1): # if unique_field_count >1:, add Constraint @ End.
              dtype = ""
            elif ("BooleanField" in v) and ("unique=True" in v) and ("default=True" in v) and (unique_field_count == 1): # if unique_field_count >1:, add Constraint @ End.
              dtype = "tinyint(1) NOT NULL DEFAULT TRUE UNIQUE"
            elif ("BooleanField" in v) and ("unique=True" in v) and ("default=False" in v) and (unique_field_count == 1): # if unique_field_count >1:, add Constraint @ End.
              dtype = "tinyint(1) NOT NULL DEFAULT FALSE UNIQUE"
            elif ("BooleanField" in v) and ("default=True" in v):
              dtype = "tinyint(1) NOT NULL DEFAULT TRUE"
            elif ("BooleanField" in v) and ("default=False" in v):
              dtype = "tinyint(1) NOT NULL DEFAULT FALSE"
            elif ("BooleanField" in v) and ("default" not in v):
              dtype = "tinyint(1) NOT NULL DEFAULT FALSE"
            elif "JSONField()" in v:
              dtype = "longtext DEFAULT NULL" # confused if this works
            elif "BinaryField" in v:
              # can't have unique=True on text or blob fields
              dtype = "blob({})".format(4294967295)
            sql_fields[k] = dtype
          print('sql fields: "%s"' % json.dumps(sql_fields,indent=4))
          if (unique_field_count != 0) and (unique_field_count != 1):
            constraint_name = "_".join(unique_field_names)
            constraint_values = ",".join(unique_field_names)
            sql_fields["unique_constraint"] = "CONSTRAINT %s UNIQUE (%s)" % (constraint_name, constraint_values) #<

          return sql_fields
        sql_fields = generate_sql_fields(database, fields)
        time.sleep(0.1)
        def create_database():
          print("\n\n == Create Database ==")
          sql_str = base % "create database %s;" % database
          print(sql_str)
          os.system(sql_str)
        create_database()
        time.sleep(0.1)

        def create_table():
          print("\n\n == Create Table ==")
          sql_str = "create table {} (%s);".format(table)
          column_strs = ""
          for k,v in sql_fields.items():
            if k != "unique_constraint":
              column_strs += "%s %s," % (k, v)
            elif k == "unique_constraint":
              column_strs += v
          sql_str = sql_str % column_strs
          sql_str = sql_str.replace(",);", ");")
          sql_str = base % sql_str
          print(sql_str)
          os.system(sql_str)
        create_table()
        time.sleep(0.1)

        def add_columns():
          print("\n\n == Add Columns ==")
          for k,v in sql_fields.items():
            if k != "unique_constraint":
              column_str = "alter table %s add column %s %s" % (table, k, v)
              sql_str = base % column_str
              print(sql_str)
              os.system(sql_str)
        add_columns()
        time.sleep(0.1)

        def alter_columns():
          print("\n\n == Alter Columns ==")
          for k,v in sql_fields.items():
            if k != "unique_constraint":
              column_str = "alter table %s modify column %s %s" % (table, k, v)
              sql_str = base % column_str
              print(sql_str)
              os.system(sql_str)
        alter_columns()
        time.sleep(0.1)

        def rearrange_columns():
          print("\n\n == Alter Columns ==")
          for i, j in zip(list(sql_fields.keys())[1:], list(sql_fields.keys())[0:-1] ):
            if i != "unique_constraint":
              column_str = "alter table %s modify column %s %s after %s" % (table, i, sql_fields[i], j)
              print(column_str)
              sql_str = base % column_str
              print(sql_str)
              os.system(sql_str)
        rearrange_columns()
        time.sleep(0.1)

        print("\n\n == Show Columns ==")
        self.showColumns(database, table)
        distinct_print(modelstring)
        time.sleep(0.1)


        # test: migrate("self", "test", modelstring)
    def inclusive_mig(self):
      t = re_findall_overlaps(r"(?s)\nclass.*?(Records|Worksheet|models.Model).*?(\nclass|END)", open(homepath("~/tavern/tavern/soda/can.py")).read())
      a = []
      for i in t:
        v = []
        for j in i.split("\n"):
          if "=" in j and "Field" in j or j.startswith("class") and "class" != j:
            v.append(j)
        a.append("\n".join(v))
        SQL().migrate(database="soda", modelstring = "\n".join(v))
      pyperclip.copy("\n".join(a))     

    def install(self):
      x = '''
      pip install mysqlclient
      pip install mysql-python
      brew install mysql@5.6
      mysqld &
      mysql -u root -e mysql """UPDATE user SET authentication_string=PASSWORD("root") WHERE User='root';"""
      mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A < soda_all_521.sql
      SET PASSWORD FOR 'root'@'localhost' = PASSWORD('root');
      '''
      print(x)
      1
    def dump_db_all(self, outfile):
      system("/usr/local/bin/mysqldump --max_allowed_packet=1000000000M -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A --all-databases > '%s'"%outfile)
    def restore_db_all(self, infile):
      system('mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A < %s'%infile)
    def dump_db_1(self, db, outfile):
      system('/usr/local/bin/mysqldump --max_allowed_packet=1000000000M -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s > "%s"'%(db, outfile))
    def restore_db_1(self, db, infile):
      system('mysql --max_allowed_packet=1000000000M -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s < "%s"'%(db, infile))
    def restore_from_ibd_files(self):
      '      """Take a backup of all .ibd and .frm files.\n      Create the database and tables using the SQL queries from the web app installation script.\n      Delete the newly created files using the DISCARD statement. Eg. ALTER TABLE newdb.table1 DISCARD TABLESPACE;\n      Then copy all the .ibd and .frm files from backup to the database folder, and assign mysql:mysql ownership.\n      Ask MySQL to accept the new files using the IMPORT statement. Eg. ALTER TABLE newdb.table1 IMPORT TABLESPACE;"""\n'
    def remove_all_mysql_files(self):
      os.system("brew remove mysql; brew cleanup; sudo rm /usr/local/mysql; sudo rm -rf /usr/local/var/mysql; sudo rm -rf /usr/local/mysql*; sudo rm ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist; sudo rm -rf /Library/StartupItems/MySQLCOM; sudo rm -rf /Library/PreferencePanes/My*; launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist; rm -rf ~/Library/PreferencePanes/My*; sudo rm -rf /Library/Receipts/mysql*; sudo rm -rf /Library/Receipts/MySQL*; sudo rm -rf /private/var/db/receipts/*mysql*")
    def resolve_error_cant_connect_to_mysql_server(self):
      "ERROR 2003 (HY000): Can't connect to MySQL server on '127.0.0.1' (61)"
      print("ERROR 2003 (HY000): Can't connect to MySQL server on '127.0.0.1' (61)")
      print("Add to this list if more errors are discovered")
      os.system("mysql.server restart; brew services start mysql; brew services restart mysql; echo 'if all else fails, run SQL().remove_all_mysql_files()'")
    def dump_table_1(self, db, table, outfile):
      system('mysqldump -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s %s > %s'%(db, table, outfile))
    def restore_table_1(self, db, infile):
      system('mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s < %s'%(db, infile))
    def showTables(self, db_name):
      system("mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s -e 'show tables;'"%(db_name))
    def getTables(self, db_name):
      return [i for i in getoutput("mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s -e 'show tables;'"%(db_name)).split("\n") if i.startswith("soda")]
    def split_dump_database(self, db_name):
      F = self.getTables(db_name)
      for i in F:
        self.dump_table_1("soda", i, "%s.sql"% i)
    def split_restore_database(self, db_name, files):
      for f in files:
        self.restore_table_1(db_name, f)
    def dump_cols (self, db_name, table, cols, outfile):
        system("mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s -e 'select %s from %s' > %s"%(db_name,cols,table,outfile))
    def colSet(self, db_name, table, col, newval, wherecol, whereval='*'):
      system("mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s -e 'update %s set %s = %s where %s like \"%s\"'"%(db_name, table, col, newval, wherecol, whereval))
    def colSelect (self, db_name, table, cols):
      system("mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s -e 'select %s from %s'"%(db_name, cols, table))
    def colSelectly(self, db_name, table, cols, orderby, direction='asc'):
      system("mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s -e 'select %s from %s order by %s %s'"%(db_name, cols, table, orderby, direction))
    def showColumns(self, db_name, table):
      system("mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s -e 'show columns from %s;'"%(db_name, table))
    def dropCol(self, db_name, table, col):
      system("mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s -e 'alter table %s DROP COLUMN %s;'"%(db_name, table, col))
    def addCol(self, db_name, table, col, newtype):
      system("mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s -e 'alter table %s ADD COLUMN %s %s NOT NULL AFTER id;'"%(db_name, table, col, newtype))
    def alterCol(self, db_name, table, col, newtype):
      system("mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s -e 'alter table %s MODIFY COLUMN %s %s'"%(db_name, table, col, newtype))
    def renameCol(self, db_name, table, col_name, col_name_new):
      system("mysql -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A %s -e 'ALTER TABLE `blog` CHANGE COLUMN `read-more` `read_more` VARCHAR(255) NOT NULL;'")
    def table_to_csv(self, db, table, outfile):
        system('/usr/local/bin/mysql %s -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A -e "select * from %s" -B > %s'%(db, table, outfile))
    def dump_specific_tables(self,db,tables):
      for i in tables:
        SQL().dump_table_1(db,"%s_%s"%(db,i),"%s.sql"%(i))
    def restore_specific_tables(self,db,infiles):
      for i in infiles:
        SQL().restore_table_1(db,i)
    def table_to_xlsx(self, db, table, outfile):
      import openpyxl
      csv_file = outfile.replace("xlsx","csv")
      SQL().table_to_csv(db, "%s_%s"%(db,table), csv_file)
      CSV().csv_to_xlsx(infile=csv_file, workbook=outfile, sheet=table, rm_infile = True, delimiter="\t")
    def mysql_to_dictlist(self,x):
      pickle.dump([{f:getattr(i,f) for f in key("name",Vermose._meta.fields)} for i in All(Vermose)],open("out.pkl","wb"))
    def dictlist_to_mysql(self,x):
      [tryprocess(lambda:x(**i).save()) for i in pickle.load(open("out.pkl","rb"))]
    def mysql_to_xlsx(self, db='soda', outfile='output.xlsx', tables=None):
      import openpyxl
      out = getoutput("mysql %s -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A -e 'show tables'"%db) + '\n'
      if tables:
        existing_tables = re.findall(r'soda_(.*)\n', out)
        tables = [i for i in existing_tables if i in tables]
      else:
        tables = re.findall(r'soda_(.*)\n', out)
      w = openpyxl.workbook.Workbook()
      for t in tables:
        #system('mysql shopify3 -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A -e "select * from manager_%s" -B | tr "\\t" "," > %s.csv'%(i,i))
        system('mysql %s -u root --password=w24uyLMGU2TWdkBdUKMWySQiAcfdjB1A -e "select * from soda_%s" -B > %s'%(db, t,t))
        ws = w.create_sheet(t)
        with open('%s.csv'%t, 'r') as f:
          data = list(csv.reader(f, delimiter='\t'))
          for idx, i in enumerate(data):
            for idx2, j in enumerate(i):
              ws.cell(row=idx+1, column=idx2+1).value = j
        os.remove('%s.csv'%t)
      w.save(outfile)
    def __init__(self):
      self.functions_sorted = ["addCol","alterCol","colSelect","colSelectly","colSet","dropCol","dump_cols","dump_db_1","dump_db_all","dump_table_1","install","migrate","mysql_to_xlsx","renameCol","restore_db_1","restore_db_all","restore_table_1","showColumns","table_to_csv",]
  class SimpleRequester:
    def __init__(self):
      self.proxy_list = get_us_ip_list()
      self.s = requests.Session()
      self.s.headers = {"User-Agent": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.1242123123.com/bot.html)", "authority": "www.aliexpress.com", "upgrade-insecure-requests": "1",}
      self.count_current_tries = 0

    def get(self, url, textNot="ø"*3, urlNot="ø"*3, status_codeNotNot=200, use_proxy=False, cookies={}):
      [self.s.cookies.set(k,v) for k,v in cookies.items()]

      r  = None
      if use_proxy == False:
        try:
          r = self.s.get(url, timeout=4)
          redprint("\nProxy:%s\nUrl:%s\nr.text.find('%s'):%s\nr.url.find('%s'):%s\nstatus_code:%s\nstatus_codeNotNot:%s\ncount_current_tries:%s" % ("ø",url,textNot,r.text.find(textNot),urlNot,r.url.find(urlNot),r.status_code,status_codeNotNot,self.count_current_tries ))
        except Exception as e:
          redprint(str(e)[:100])
  
          ######
          self.proxy_list.append(self.proxy_list.__getitem__(0 ))
          self.proxy_list.__delitem__(0 )
          # this may look confusing. and it is. now. keep in mind. what it looked like before, is this:  'class SimpleRequester:\n  def __init__(self):\n    self.proxy_list = get_us_ip_list()\n    self.s = requests.Session()\n    self.s.headers = {"User-Agent": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.1242123123.com/bot.html)", "authority": "www.aliexpress.com", "upgrade-insecure-requests": "1",}\n\n  def get(self, url, textNot="ø"*3, urlNot="ø"*3, status_codeNotNot=200, use_proxy=False, cookies={}):\n    [self.s.cookies.set(k,v) for k,v in cookies.items()]\n\n    r  = None\n    if use_proxy == False:\n      r = self.s.get(url, timeout=4)\n      redprint("\nProxy:%s\nUrl:%s\nr.text.find(\'%s\'):%s\nr.url.find(\'%s\'):%s\nstatus_code:%s\nstatus_codeNotNot:%s" % (self.proxy_list[0],url,textNot,r.text.find(textNot),urlNot,r.url.find(urlNot),r.status_code,status_codeNotNot ))\n    else:\n      r = self.s.get(url, proxies={"https":self.proxy_list[0]}, timeout=4)\n      redprint("\nProxy:%s\nUrl:%s\nr.text.find(\'%s\'):%s\nr.url.find(\'%s\'):%s\nstatus_code:%s\nstatus_codeNotNot:%s" % (self.proxy_list[0],url,textNot,r.text.find(textNot),urlNot,r.url.find(urlNot),r.status_code,status_codeNotNot ))\n\n    #redprint("textNot in r.text:%s\n"%(textNot in r.text), "urlNot in r.url:%s\n"% (urlNot in r.url), "status_codeNotNot != r.status_code:%s"%(status_codeNotNot != r.status_code))\n    is_good = True\n    if textNot in r.text:\n      is_good = False\n    if urlNot in r.url:\n      is_good = False\n    if status_codeNotNot != r.status_code:\n      is_good = False\n\n    if is_good == True:\n      redprint("success:True")\n\n      return r\n    else:\n      self.proxy_list.append(self.proxy_list.__getitem__(0 ))\n      self.proxy_list.__delitem__(0 )\n      return self.get(url,textNot, urlNot, status_codeNotNot=200, use_proxy=True)'
          self.count_current_tries +=1
          return self.get(url,textNot, urlNot, status_codeNotNot=200, use_proxy=True)
          ######

      else:
        try:
          r = self.s.get(url, proxies={"https":self.proxy_list[0]}, timeout=4)
          redprint("\nProxy:%s\nUrl:%s\nr.text.find('%s'):%s\nr.url.find('%s'):%s\nstatus_code:%s\nstatus_codeNotNot:%s\ncount_current_tries:%s" % (self.proxy_list[0],url,textNot,r.text.find(textNot),urlNot,r.url.find(urlNot),r.status_code,status_codeNotNot,self.count_current_tries ))
        except Exception as e:
          redprint(str(e)[:100])
  
          ######
          self.proxy_list.append(self.proxy_list.__getitem__(0 ))
          self.proxy_list.__delitem__(0 )
          self.count_current_tries +=1
          return self.get(url,textNot, urlNot, status_codeNotNot=200, use_proxy=True)
          ######


      #redprint("textNot in r.text:%s\n"%(textNot in r.text), "urlNot in r.url:%s\n"% (urlNot in r.url), "status_codeNotNot != r.status_code:%s"%(status_codeNotNot != r.status_code))
      is_good = True
      if textNot in r.text:
        is_good = False
      if urlNot in r.url:
        is_good = False
      if status_codeNotNot != r.status_code:
        #if r.status_code == 404: return SOUP("404")
        if r.status_code == 404:
          is_good = False
          return r

      if is_good == True:
        redprint("success:True")
        self.count_current_tries = 0
        return r
      else:
        self.proxy_list.append(self.proxy_list.__getitem__(0 ))
        self.proxy_list.__delitem__(0 )
        self.count_current_tries +=1
        return self.get(url,textNot, urlNot, status_codeNotNot=200, use_proxy=True)
  class Starralla:
    def __init__(self):
      import rumps
      from rumps import MenuItem as M
      from rumps import MenuItem
      self.app = rumps.App("💫", quit_button=Null)
      globals().update(locals())

      self.set_menu()
      time.sleep(14)
      self.app.run()
    def set_menu(self):
      keycall("refrequenciate",All(LearnWord))
      keys = list(self.app.menu.keys())
      redprint(keys)
      for i in keys:
        self.app.menu.pop(i)
      self.app.menu = [
                        MenuItem("%s: %s"%(i.frequency, i.word.title()),callback=lambda _=None:[[Update(Get(LearnWord,word=i.word),starralla=0),self.set_menu()] if "0"==OSA.display_dialog( (":%s:\n(0/*)\n\n"%(i.word.title()))+("\n\n=============================================\n".join( [(Z+"\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^") if idx!=0 else Z for idx, Z in enum([""]+i.occurations)] ))) else()] ) for i in tcer(keysort("frequency",Filter(LearnWord,starralla=1)) )
                      ]
      """
      LearnWord(date_added=datetime.now(),frequency=1,occurations=["a\na"],starralla=1,word="highfeluctant").save()
      LearnWord(date_added=datetime.now(),frequency=1,occurations=["a\na","b\nb"],starralla=1,word="drastic").save()
      LearnWord(date_added=datetime.now(),frequency=1,occurations=["a\na","b\nb","c\nc"],starralla=1,word="hotbox").save()
      """
  class SublimeText_Themes(DecisionTree):
    # (cbf52c (24bc44))
    # (9c8996 (ffffff))
    def __init__(self, ):
      self.hexes = []
      print(" a nice app: http://tmtheme-editor.herokuapp.com/#!/editor/theme/Monokai")
      self.functions_sorted = ["normal", "change_colours", "change_comment_colours", "colorama", "change_background_colour"]
      self.discovered_colours = {
                                  "teal": "00efaf",
                                  "darkteal": "00afaf", }
      self.saved_colour_codes = """
                                    66D9EF
                                    00qfaf
                                    b7e88a # a fun green
                                    3b3d60
                                    c95e46
                                    b6af6c
                                    502846
                                    51c56d
                                    24bc44
                                    a9586a
                                    c1ef4e
                                    c58887
                                    188711
                                    395931 # a nice calm sea green
                                    9d8bcc
                                    83bd5a
                                    e63f57
                                    e343f0
                                    71321a
                                    395931
                                    2a281a
                                    ef6978
                                    02f718 # sharp green
                                    9c8996 # purplish
                                    d4d4ae #
                                    efd2b4 # pinkish
                                    b3e7b2 #
                                    a5ccd7 #
                                    ffffff # white 
                                    db7d5a # sandstone aurauric red
                                    1ebd01 # in the cut green
                                    ff1700 # red
                                    b00e2a # funner red
                                    ebfdb4 # a surreal colour
                                    cbf52c # a stay awake green and yellow
                                    4fe1e5 # mega blue
                                    deeabd # draconian white
                                    c1faea # funny room blue
                                    efc98e # desaddening orange
                                    6f7f84 #                                  
                                    d6ddd5 2bfe16
                                    dbf0f7 3ecefb
                                    96f6ce d97462
                                    f55608 bfaafe
                                    d48ee5 0ecb9f
                                    748054 fe3161
                                    e04023 befbf6
                                    af53f4 6d7d31
                                    f59b00 de1939
                                    78a7b2 400939"""
      list(map(print, self.saved_colour_codes.split("\n")))
      self.theme_path = homepath("~/Library/Application Support/Sublime Text 3/Packages/Color Scheme - Default/Monokai.tmTheme")
      self.blank = '\n          <!-- \x01 Maybe strings should be whitetext \x02 Functions purple? \x03 Variables blue? \x04 Numbers green? \x05 what about a very dark green for functions?-->\n          <?xml version="1.0" encoding="UTF-8"?>\n          <!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n          <plist version="1.0">\n          <dict>\n            <key>name</key>\n            <string>Monokai</string>\n            <key>settings</key>\n            <array>\n              <dict>\n                <key>settings</key>\n                <!--\n                  [[ Original Data ]]\n                <dict>\n                  <key>background</key>\n                  <string>#__blank__</string> \n                  <key>caret</key>\n                  <string>#__blank__</string>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                  <key>invisibles</key>\n                  <string>#__blank__</string>\n                  <key>lineHighlight</key>\n                  <string>#__blank__</string>\n                  <key>selection</key>\n                  <string>#__blank__</string>\n                  <key>findHighlight</key>\n                  <string>#__blank__</string>\n                  <key>findHighlightForeground</key>\n                  <string>#__blank__</string>\n                  <key>selectionBorder</key>\n                  <string>#__blank__</string>\n                  <key>activeGuide</key>\n                  <string>#__blank__</string>\n                  <key>misspelling</key>\n                  <string>#__blank__</string>\n                  <key>bracketsForeground</key>\n                  <string>#__blank__</string>\n                  <key>bracketsOptions</key>\n                  <string>underline</string>\n                  <key>bracketContentsForeground</key>\n                  <string>#__blank__</string>\n                  <key>bracketContentsOptions</key>\n                  <string>underline</string>\n                  <key>tagsOptions</key>\n                  <string>stippled_underline</string>\n                </dict>\n                -->\n                <!--\n                https://html-color-codes.info/old/colorpicker.html\n                -->\n                <dict>\n                  <key>background</key>\n                  <string>#000000</string>\n                  <key>caret</key>\n                  <string>#__blank__</string>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                  <key>invisibles</key>\n                  <string>#__blank__</string>\n                  <key>lineHighlight</key>\n                  <string>#__blank__</string>\n                  <key>selection</key>\n                  <string>#000000</string>\n                  <key>findHighlight</key>\n                  <string>#__blank__</string>\n                  <key>findHighlightForeground</key>\n                  <string>#__blank__</string>\n                  <key>selectionBorder</key>\n                  <string>#__blank__</string>\n                  <key>activeGuide</key>\n                  <string>#__blank__</string>\n                  <key>misspelling</key>\n                  <string>#__blank__</string>\n                  <key>bracketsForeground</key>\n                  <string>#__blank__</string>\n                  <key>bracketsOptions</key>\n                  <string>underline</string>\n                  <key>bracketContentsForeground</key>\n                  <string>#__blank__</string>\n                  <key>bracketContentsOptions</key>\n                  <string>underline</string>\n                  <key>tagsOptions</key>\n                  <string>stippled_underline</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Comment</string>\n                <key>scope</key>\n                <string>comment</string>\n                <key>settings</key>\n                <!--\n                [[ Original Data ]]\n                <dict>\n                  <key>foreground</key>\n                  <string>#{__blank__}</string>\n                </dict>\n                -->\n                <dict>\n                  <key>foreground</key>\n                  <string>#FF1700</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>String</string>\n                <key>scope</key>\n                <string>string</string>\n                <key>settings</key>\n                <!--\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n                -->\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string> <!--"string here" # __blank__ string-->\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Number</string>\n                <key>scope</key>\n                <string>constant.numeric</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n\n              <dict>\n                <key>name</key>\n                <string>Built-in constant</string>\n                <key>scope</key>\n                <string>constant.language</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string> <!-- while (True)-->\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>User-defined constant</string>\n                <key>scope</key>\n                <string>constant.character, constant.other</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string> <!-- %s -->\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Variable</string>\n                <key>scope</key>\n                <string>variable</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string></string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Keyword</string>\n                <key>scope</key>\n                <string>keyword - (source.c keyword.operator | source.c++ keyword.operator | source.objc keyword.operator | source.objc++ keyword.operator), keyword.operator.word</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string> <!-- default #__blank__ import/while/for/try/except/as -->\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Annotation Punctuation</string>\n                <key>scope</key>\n                <string>punctuation.definition.annotation</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>JavaScript Dollar</string>\n                <key>scope</key>\n                <string>variable.other.dollar.only.js</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Storage</string>\n                <key>scope</key>\n                <string>storage</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string></string>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Storage type</string>\n                <key>scope</key>\n                <string>storage.type</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string>italic</string>\n                  <key>foreground</key>\n                  <string>#__blank__</string> <!-- default: __blank__ (class/def) -->\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Entity name</string>\n                <key>scope</key>\n                <string>entity.name - (entity.name.filename | entity.name.section | entity.name.tag | entity.name.label)</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string></string>\n                  <key>foreground</key>\n                  <string>#__blank__</string> <!-- default: A6E22E class/def (function)-->\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Inherited class</string>\n                <key>scope</key>\n                <string>entity.other.inherited-class</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string>italic underline</string>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Function argument</string>\n                <key>scope</key>\n                <string>variable.parameter - (source.c | source.c++ | source.objc | source.objc++)</string>\n                <key>settings</key>\n                <!--\n                <dict>\n                  <key>fontStyle</key>\n                  <string>italic</string>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n                -->\n                <dict>\n                  <key>fontStyle</key>\n                  <string>italic</string>\n                  <key>foreground</key>\n                  <string>#__blank__</string> <!-- def hi( (kw)= ) -->\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Language variable</string>\n                <key>scope</key>\n                <string>variable.language</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string>italic</string>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Tag name</string>\n                <key>scope</key>\n                <string>entity.name.tag</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string></string>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Tag attribute</string>\n                <key>scope</key>\n                <string>entity.other.attribute-name</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string></string>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Function call</string>\n                <key>scope</key>\n                <string>variable.function, variable.annotation</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string></string>\n                  <key>foreground</key>\n                  <string>#__blank__</string> <!--x.stdout.readline()) (readline()) -->\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Library function</string> <!--input("Product_url?: ") #__blank__-->\n                <key>scope</key>\n                <string>support.function, support.macro</string>\n                <key>settings</key>\n                <!--\n                <dict>\n                  <key>fontStyle</key>\n                  <string></string>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n                -->\n                <dict>\n                  <key>fontStyle</key>\n                  <string></string>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Library constant</string>\n                <key>scope</key>\n                <string>support.constant</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string></string>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Library class/type</string>\n                <key>scope</key>\n                <string>support.type, support.class</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string>italic</string>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Library variable</string>\n                <key>scope</key>\n                <string>support.other.variable</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string></string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Invalid</string>\n                <key>scope</key>\n                <string>invalid</string>\n                <key>settings</key>\n                <dict>\n                  <key>background</key>\n                  <string>#000000</string>\n                  <key>fontStyle</key>\n                  <string></string>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>Invalid deprecated</string>\n                <key>scope</key>\n                <string>invalid.deprecated</string>\n                <key>settings</key>\n                <dict>\n                  <key>background</key>\n                  <string>#__blank__</string>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>JSON String</string>\n                <key>scope</key>\n                <string>meta.structure.dictionary.json string.quoted.double.json</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>YAML String</string>\n                <key>scope</key>\n                <string>string.unquoted.yaml</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n\n              <dict>\n                <key>name</key>\n                <string>diff.header</string>\n                <key>scope</key>\n                <string>meta.diff, meta.diff.header</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>markup headings</string>\n                <key>scope</key>\n                <string>markup.heading</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string>bold</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>markup headings</string>\n                <key>scope</key>\n                <string>markup.heading punctuation.definition.heading</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>markup h1</string>\n                <key>scope</key>\n                <string>markup.heading.1 punctuation.definition.heading</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>markup links</string>\n                <key>scope</key>\n                <string>markup.underline.link</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>markup bold</string>\n                <key>scope</key>\n                <string>markup.bold</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string>bold</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>markup italic</string>\n                <key>scope</key>\n                <string>markup.italic</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string>italic</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>markup bold/italic</string>\n                <key>scope</key>\n                <string>markup.italic markup.bold | markup.bold markup.italic</string>\n                <key>settings</key>\n                <dict>\n                  <key>fontStyle</key>\n                  <string>bold italic</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>markup hr</string>\n                <key>scope</key>\n                <string>punctuation.definition.thematic-break</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>markup blockquote</string>\n                <key>scope</key>\n                <string>markup.quote punctuation.definition.blockquote</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>markup bullets</string>\n                <key>scope</key>\n                <string>markup.list.numbered.bullet</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>markup bullets</string>\n                <key>scope</key>\n                <string>markup.list.unnumbered.bullet | (markup.list.numbered punctuation.definition)</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>markup code</string>\n                <key>scope</key>\n                <string>markup.raw</string>\n                <key>settings</key>\n                <dict>\n                  <key>background</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>markup punctuation</string>\n                <key>scope</key>\n                <string>markup.raw punctuation.definition.raw</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>markup punctuation</string>\n                <key>scope</key>\n                <string>text &amp; (punctuation.definition.italic | punctuation.definition.bold | punctuation.definition.raw | punctuation.definition.link | punctuation.definition.metadata | punctuation.definition.image | punctuation.separator.table-cell | punctuation.section.table-header | punctuation.definition.constant)</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>diff.deleted</string>\n                <key>scope</key>\n                <string>markup.deleted</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>diff.inserted</string>\n                <key>scope</key>\n                <string>markup.inserted</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>name</key>\n                <string>diff.changed</string>\n                <key>scope</key>\n                <string>markup.changed</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>scope</key>\n                <string>constant.numeric.line-number.find-in-files - match</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n              <dict>\n                <key>scope</key>\n                <string>entity.name.filename</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n\n              <dict>\n                <key>scope</key>\n                <string>message.error</string>\n                <key>settings</key>\n                <dict>\n                  <key>foreground</key>\n                  <string>#__blank__</string>\n                </dict>\n              </dict>\n            </array>\n          </dict>\n          </plist>'
      self.Monokai_color_scheme = '{\n    "name": "Monokai",\n    "author": "Sublime HQ Pty Ltd, Wimer Hazenberg",\n    "variables":\n    {\n        "text": "#ffffff",\n        "background": "#000000",\n        "comment": "#ff1700",\n    },\n    "globals":\n    {\n        "foreground": "var(text)",\n        "background": "var(background)",\n        "caret": "var(text)",\n        "invisibles": "var(background)",\n        "line_highlight": "var(background)",\n        "selection": "var(background)",\n        "selection_border": "var(text)",\n        "misspelling": "var(background)",\n        "active_guide": "var(text)",\n        "find_highlight_foreground": "var(text)",\n        "find_highlight": "var(text)",\n        "brackets_options": "underline",\n        "brackets_foreground": "var(text)",\n        "bracket_contents_options": "underline",\n        "bracket_contents_foreground": "var(text)",\n        "tags_options": "stippled_underline"\n    },    "rules":\n    [\n        {\n            "name": "Comment",\n            "scope": "comment",\n            "foreground": "var(comment)"\n        },\n        {\n            "name": "String",\n            "scope": "string",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "Number",\n            "scope": "constant.numeric",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "Built-in constant",\n            "scope": "constant.language",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "User-defined constant",\n            "scope": "constant.character, constant.other",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "Variable",\n            "scope": "variable"\n        },\n        {\n            "name": "Keyword",\n            "scope": "keyword - (source.c keyword.operator | source.c++ keyword.operator | source.objc keyword.operator | source.objc++ keyword.operator), keyword.operator.word",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "Annotation Punctuation",\n            "scope": "punctuation.definition.annotation",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "JavaScript Dollar",\n            "scope": "variable.other.dollar.only.js",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "Storage",\n            "scope": "storage",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "Storage type",\n            "scope": "storage.type",\n            "foreground": "var(text)",\n            "font_style": "italic"\n        },\n        {\n            "name": "Entity name",\n            "scope": "entity.name - (entity.name.filename | entity.name.section | entity.name.tag | entity.name.label)",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "Inherited class",\n            "scope": "entity.other.inherited-class",\n            "foreground": "var(text)",\n            "font_style": "italic underline"\n        },\n        {\n            "name": "Function argument",\n            "scope": "variable.parameter - (source.c | source.c++ | source.objc | source.objc++)",\n            "foreground": "var(text)",\n            "font_style": "italic"\n        },\n        {\n            "name": "Language variable",\n            "scope": "variable.language",\n            "foreground": "var(text)",\n            "font_style": "italic"\n        },\n        {\n            "name": "Tag name",\n            "scope": "entity.name.tag",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "Tag attribute",\n            "scope": "entity.other.attribute-name",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "Function call",\n            "scope": "variable.function, variable.annotation",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "Library function",\n            "scope": "support.function, support.macro",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "Library constant",\n            "scope": "support.constant",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "Library class/type",\n            "scope": "support.type, support.class",\n            "foreground": "var(text)",\n            "font_style": "italic"\n        },\n        {\n            "name": "Library variable",\n            "scope": "support.other.variable"\n        },\n        {\n            "name": "Invalid",\n            "scope": "invalid",\n            "foreground": "var(text)",\n            "background": "var(background)"\n        },\n        {\n            "name": "Invalid deprecated",\n            "scope": "invalid.deprecated",\n            "foreground": "var(text)",\n            "background": "var(background)"\n        },\n        {\n            "name": "JSON String",\n            "scope": "meta.structure.dictionary.json string.quoted.double.json",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "YAML String",\n            "scope": "string.unquoted.yaml",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "diff.header",\n            "scope": "meta.diff, meta.diff.header",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "markup headings",\n            "scope": "markup.heading",\n            "font_style": "bold"\n        },\n        {\n            "name": "markup headings",\n            "scope": "markup.heading punctuation.definition.heading",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "markup h1",\n            "scope": "markup.heading.1 punctuation.definition.heading",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "markup links",\n            "scope": "markup.underline.link",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "markup bold",\n            "scope": "markup.bold",\n            "font_style": "bold"\n        },\n        {\n            "name": "markup italic",\n            "scope": "markup.italic",\n            "font_style": "italic"\n        },\n        {\n            "name": "markup bold/italic",\n            "scope": "markup.italic markup.bold | markup.bold markup.italic",\n            "font_style": "bold italic"\n        },\n        {\n            "name": "markup hr",\n            "scope": "punctuation.definition.thematic-break",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "markup blockquote",\n            "scope": "markup.quote punctuation.definition.blockquote",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "markup bullets",\n            "scope": "markup.list.numbered.bullet",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "markup bullets",\n            "scope": "markup.list.unnumbered.bullet | (markup.list.numbered punctuation.definition)",\n            "foreground": "color(var(text)"\n        },\n        {\n            "name": "markup code",\n            "scope": "markup.raw",\n            "background": "color(var(text)"\n        },\n        {\n            "name": "markup punctuation",\n            "scope": "markup.raw punctuation.definition.raw",\n            "foreground": "color(var(text)"\n        },\n        {\n            "name": "markup punctuation",\n            "scope": "text & (punctuation.definition.italic | punctuation.definition.bold | punctuation.definition.raw | punctuation.definition.link | punctuation.definition.metadata | punctuation.definition.image | punctuation.separator.table-cell | punctuation.section.table-header | punctuation.definition.constant)",\n            "foreground": "color(var(text)"\n        },\n        {\n            "name": "diff.deleted",\n            "scope": "markup.deleted",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "diff.inserted",\n            "scope": "markup.inserted",\n            "foreground": "var(text)"\n        },\n        {\n            "name": "diff.changed",\n            "scope": "markup.changed",\n            "foreground": "var(text)"\n        },\n        {\n            "scope": "constant.numeric.line-number.find-in-files - match",\n            "foreground": "color(var(text)"\n        },\n        {\n            "scope": "entity.name.filename",\n            "foreground": "var(text)"\n        },\n        {\n            "scope": "message.error",\n            "foreground": "var(text)"\n        }\n    ]\n}'
    def get_random_color_code(self):
      x = [0,1,2,3,4,5,6,7,8,9,"a","b","c","d","e","f"]
      import random
      y = ""
      for i in range(6):
        y += str(random.sample(x, 1)[0])
      print(y)
      return y
    def colorama(self, specific_colour_code = None, sleeptime=2):
      try:specific_colour_code = eval(specific_colour_code)
      except:pass
      if specific_colour_code == "on_clipboard":
        for idx, i in enumerate(pyperclip.paste().split("\n")):
          with open(self.theme_path, "w") as f:
            f.write(self.blank.replace("__blank__", i))
            os.system("say '%s'"%idx)
          time.sleep(int(sleeptime))
        return
      while True:
        with open(self.theme_path, "w") as f:
          if specific_colour_code == None:
            f.write(self.blank.replace("__blank__", self.get_random_color_code()))
          else:
            f.write(self.blank.replace("__blank__", specific_colour_code))
            return
        time.sleep(int(sleeptime))
    def change_colours(self, color_code = None):
      print(json.dumps(self.discovered_colours, indent=4))
      with open(self.theme_path, "w") as f:
        f.write(self.blank.replace("__blank__", color_code))
    def change_comment_colours(self, color_code = None):
      with open(self.theme_path, "r") as f:
        x = f.read()
      with open(self.theme_path, "w") as f:
        f.write(x.replace("FF1700", color_code))
    def change_background_colour(self, color_code = None):
      with open(self.theme_path, "r") as f:
        x = f.read()
      with open(self.theme_path, "w") as f:
        f.write(x.replace("000000", color_code))
    def normal(self):
      SublimeText_Normal_text = ExecutableText().export("SublimeText_Normal_text")
      with open(self.theme_path, "w") as f:
        f.write(SublimeText_Normal_text)
    def argh_text(self, hex="ffffff"):
      hex=(self.get_random_color_code())if(None==hex)else(hex)
      self.hexes[-1].argh_text = hex
      R = homepath("~/Library/Application Support/Sublime Text 3/Packages/Color Scheme - Default/Monokai.sublime-color-scheme")
      F = re.sub(r'"text": "#.*', '"text": "#%s",' % (hex), open(R,"r").read())
      open(R, "w").write(F)
    def argh2_comments(self, hex="ffffff"):
      hex=(self.get_random_color_code())if(None==hex)else(hex)
      self.hexes[-1].argh2_comments = hex
      R = homepath("~/Library/Application Support/Sublime Text 3/Packages/Color Scheme - Default/Monokai.sublime-color-scheme")
      F = re.sub(r'"comment": "#.*', '"comment": "#%s",' % (hex), open(R,"r").read())
      open(R, "w").write(F)
    def argh_background(self, hex="000000"):
      hex=(self.get_random_color_code())if(None==hex)else(hex)
      self.hexes[-1].argh_background = hex
      R = homepath("~/Library/Application Support/Sublime Text 3/Packages/Color Scheme - Default/Monokai.sublime-color-scheme")
      F = re.sub(r'"background": "#.*', '"background": "#%s",' % (hex), open(R,"r").read())
      open(R, "w").write(F)
    def argh_colorama(self, text = True, comments = True, background = False, direction = None):
      if direction is not None:
        if direction == "left":
          self.current_idx = self.current_idx - 1 if (self.current_idx - 1) >= 0 else self.current_idx
          if text: self.argh_text(self.hexes[self.current_idx].argh_text)
          if comments: self.argh2_comments(self.hexes[self.current_idx].argh2_comments)
          if background: self.argh_background(self.hexes[self.current_idx].argh_background)
        elif direction == "right":
          self.current_idx = self.current_idx + 1 if (self.current_idx + 1) < len(self.hexes) else self.current_idx
          if text: self.argh_text(self.hexes[self.current_idx].argh_text)
          if comments: self.argh2_comments(self.hexes[self.current_idx].argh2_comments)
          if background: self.argh_background(self.hexes[self.current_idx].argh_background)
        return
      self.hexes.append(AttrDict())
      self.current_idx = len(self.hexes) - 1
      if text == True:
        self.argh_text(hex = None)
      elif text != False:
        self.argh_text(hex = text)

      if comments == True:
        self.argh2_comments(hex = None)
      elif comments != False:
        self.argh2_comments(hex = comments)

      if background == True:
        self.argh_background(hex = None)
      elif background != False:
        self.argh_background(hex = background)
        
    def argh_norm(self):
      R = homepath("~/Library/Application Support/Sublime Text 3/Packages/Color Scheme - Default/Monokai.sublime-color-scheme")
      open(R, "w").write(self.Monokai_color_scheme)
  class Tesseract:
    def __init__(self):
      import pytesseract
      import textract
      import pyocr
      from PIL import Image
      globals().update({k:v for k,v in locals().items() if "self" != k})
    def pytesseract(self, x):
      x = Images().download(x) if not os.path.exists(x) else x
      if(None==x):return(None)#@Added Because It Could Be Images.Download Hits 404 Returns None,
      [setitem(globals(), "img", Image.open(x)), setitem(globals(), "img", globals()["img"].convert("L")), globals()["img"].save(x)]
      x = pytesseract.image_to_string(Image.open(x)).strip()
      redprint("[result\n][%s]"%x)
      return x
    def textract(self, x):
      x = Images().download(x) if not os.path.exists(x) else x
      if(None==x):return(None)#@Added Because It Could Be Images.Download Hits 404 Returns None,
      [setitem(globals(), "img", Image.open(x)), setitem(globals(), "img", globals()["img"].convert("L")), globals()["img"].save(x)]
      x = textract.process(x, encoding='ascii', method='tesseract').decode().strip()
      redprint("[result\n][%s]"%x)
      return x
    def pyocr(self, x):
      x = Images().download(x) if not os.path.exists(x) else x
      if(None==x):return(None)#@Added Because It Could Be Images.Download Hits 404 Returns None,
      [setitem(globals(), "img", Image.open(x)), setitem(globals(), "img", globals()["img"].convert("L")), globals()["img"].save(x)]
      x = pyocr.get_available_tools()[0].image_to_string(Image.open(x), builder=pyocr.builders.TextBuilder()).strip()
      redprint("[result\n][%s]"%x)
      return x
  class TestClass(int):
    def __new__(cls, *args, **kwargs):
      return super(TestClass, cls).__new__(cls, 5)
      """
      print(TestClass())
      """
  class Time(object):
    def __init__(self, _str=None):
      if or_list(_str,[],None) == None: _str = datetime.now()
      self.timestr = (self.parse_date(_str).strftime("%Y-%m-%d %H:%M:%S"))if(type(_str)==str)else(_str.strftime("%Y-%m-%d %H:%M:%S"))
      self.timeobj = (self.parse_date(_str))if(type(_str)==str)else(_str)
    def parse_date(self,w,remove_tzinfo=True,localize_timezone=False):
      import dateutil.parser
      x = dateutil.parser.parse(w)
      y = x.astimezone()if(localize_timezone==True)else(x)
      z = y.replace(tzinfo=None)if(remove_tzinfo==True)else(y)
    def strftime(self, srftime_string):
      return self.timeobj.strftime(srftime_string)
    def __repr__(self):
      return self.timestr
    def __sub__(self, _str):
      if type(_str) == int:
        return Time(self.timeobj - timedelta(_str))
      else:
        x = (self.timeobj - _str.timeobj)
        class Timedelta(object):
          def __init__(self, x):
            self.timedelta = x
            self.days = self.timedelta.days#
            self.microseconds = self.timedelta.microseconds#
            self.seconds = self.timedelta.seconds#
          def hours(self):#
            return int(self.total_seconds()  /  3600)
          def minutes(self):#
            return int(self.total_seconds()  /  60)
          def total_seconds(self):#
            return self.timedelta.total_seconds()
          def total_minutes(self):
            return int(self.total_seconds()  /  60) + (round( ((self.total_seconds() % 60)/60),2))
        return Timedelta(x)
    def __add__(self, _str):
      if type(_str) == int:
        return Time(self.timeobj + timedelta(_str))
    def __lt__(self, _str):
      return self.timeobj < _str.timeobj
    def __gt__(self, _str):
      return self.timeobj > _str.timeobj
    def __eq__(self, _str):
      return self.timeobj == _str.timeobj
    def __call__(self):
      return self.timeobj
    def date(self):
      return self.timeobj
    def str(self):
      return self.timestr
  class Tracker_Updates:
    def run(self,shop):
      for i in onyx_lineitems("e1"):
        i.update_tracker_data() # events = self.get_tracking_events()
      for i in onyx_lineitems("e2"):
        if i.ali_order_number:
          i.update_tracker_data()
      for i in onyx_lineitems("e3"):
        if i.ali_order_number:
          i.update_tracker_data()
  class Updater:
    __init__ = lambda self: self.__dict__.update(
      {
      "GhostProductUpdate": lambda: 0==(Time()-Time(max(key("last_check",Filter(GhostProductUpdate,shop=Muta()().store_abbre))+[(Date()-100)()]))).days or GhostProduct().productghosts(Muta()().store_abbre),
      "ProductsFeed": lambda: 0==(Time()-Time(max(key("last_check",Filter(ProductsFeed,shop=Muta()().store_abbre))+[(Date()-100)()]))).days or ProductsFeed().ProductsFeed(Muta()().store_abbre),
      "LineitemsFeed": lambda: 0==(Time()-Time(max(key("last_check",Filter(LineitemsFeed,shop=Muta()().store_abbre))+[(Date()-100)()]))).days or LineitemsFeed().LineitemsFeed(Muta()().store_abbre),
      "AdsetUpdates": lambda: lmap(lambda i: 2>=(Time()-Time(or_list(i.last_check,(Time()-100)()))).hours() or July_Adset_Utilities().update_advertisement_all(id=i.id), Filter(Adset,shop_abbreviation=Muta()().store_abbre)),
      "LineitemUpdates": lambda: lmap(lambda i: 3>=(Time()-Time(or_list(i.last_check,(Time()-100)()))).hours() or Get(Lineitem,id=i.id).update_tracker_data(), Filter(Lineitem,shop=Muta()().store_abbre)),
      "Aliexpressorder_update": lambda: 0==(Time()-Time(max(key("last_check",Filter(Aliexpressorder_update,shop=Muta()().store_abbre))+[(Date()-100)()]))).days or Aliexpressorderpager().get_urls((Date()-7)(),(Date()-0)(),get_order_info=False),
      "ProductUpdates": lambda: lmap(lambda i: 2>=(Time()-Time(or_list(i.last_check,(Time()-100)()))).days or i.Refresh() , Filter(Product,shop=Muta()().store_abbre)),
      "New_EmailUpdates": lambda: New_Email().new_email_set(Muta()().store_abbre),
      "Aliexpressorder_event_update": lambda: Aliexpressorder_event().run(Muta()().store_abbre),
      "Update_TertiaryActions": lambda: TertiaryAction().add(Muta()().store_abbre),
      "Update_Payments": lambda: Payment().add(),
      "Update_Payouts": lambda: Payout().add(),
      })
    def GhostProductUpdate(self):
      for i in All(Shop):
        GhostProduct().productghosts(i.shop_abbreviation)
    def ProductsFeed(self):
      for i in All(Shop):
        ProductsFeed().ProductsFeed(i.shop_abbreviation)
    def LineitemsFeed(self):
      for i in All(Shop):
        LineitemsFeed().LineitemsFeed(i.shop_abbreviation)
    def AdsetUpdates(self):
      for a in All(Shop):
        for b in Filter(Adset,shop_abbreviation=a.shop_abbreviation):
          July_Adset_Utilities().update_advertisement_all(id=b.id)
    def LineitemUpdates(self):
      for a in All(Shop):
        for b in Filter(Lineitem,shop=a.shop_abbreviation):
          Get(Lineitem,id=b.id).update_tracker_data()
    """
    0==(Time()-Time(max(key("last_check",All(GhostProductUpdate))+[(Date()-100)()]))).days or GhostProduct().productghostsall()
    0==(Time()-Time(max(key("last_check",All(Aliexpressorder_update))+[(Date()-100)()]))).days or Aliexpress_Core(ph=False).get_urls(7,0)
    0==(Time()-Time(max(key("last_check",All(ProductsFeed))+[(Date()-100)()]))).days or ProductsFeed().ProductsFeedAll()
    0==(Time()-Time(max(key("last_check",All(LineitemsFeed))+[(Date()-100)()]))).days or LineitemsFeed().LineitemsFeedAll()
    lmap(lambda i: 2>=(Time()-Time(or_list(i.last_check,(Time()-100)()))).days or Aliexpress_Products().refresh_product_inventory(i.id) , All(Product))
    Updater().GhostProductUpdate()
    """
  
  """ Business-Utils-Main """
  def check_domain_name_via_shopify(domain):
    if(0!=len(re.findall(r"\d+",domain))):
      OSA.display_dialog("Numbers are not support in domain in this project. Please try again.", text_prompt = False, buttons=["OK"])
      return
    zo = "https://www.shopify.com/tools/domain-name-generator/search?utf8=%E2%9C%93&query={}&button=&tool=domain_name_generator"
    po = zo.format(domain)
    vo = requests.get(po).text
    zox = re.findall(r"""polling_exact_id.*?value="(.*)" """,vo)
    if len(zox) == 0:
      OSA.display_dialog("domain %s is not available.", text_prompt = False, buttons=["OK"])
    else:
      zox = zox[0]
    idv = 0
    bung = []
    while True:
      idv += 1
      kooks = ""
      def run():
        blech = "https://www.shopify.com/tools/domain-name-generator/poll?pollingID={}&page={}".format(zox, idv)
        kooks = requests.get(blech).text
        distinct_print(kooks)
        if kooks == '{"results":"-PENDING-"}':
          print("something as -pending-")
          return run()
        else:
          return kooks
      kooks = run()
      if """{"results":[]}""" == kooks:
        break
      else:
        bung.append(kooks)
    bang = pool(lambda x: json.loads(x)["results"], bung).result()
    try:beng = sum(bang, [])
    except:print(bang[0])
    nos = pool(lambda x: AttrDict(x), beng).result()
    keycall("__delitem__", nos, "shop_name")
    if not keyequals("domain_name", domain, nos):
      dialog = "domain %s is not available or already purchased.\nIf it is owned by you, please continue normally.\nHere are your other options:\n%s"%(domain, "\n".join(["%s is %s at $%s per year"%(i.domain_name, ("Available")if(True==i.available)else("not available"), i.price) for i in nos]))
    if False == keyequals("domain_name", domain, nos)[0].available:
      dialog = "domainc %s is not available or already purchased.\nIf it is owned by you, please continue normally.\nHere are your other options:\n%s"%(domain, "\n".join(["%s is %s at $%s per year"%(i.domain_name, ("Available")if(True==i.available)else("not available"), i.price) for i in nos]))
    if True == keyequals("domain_name", domain, nos)[0].available:
      dialog = "domain %s is available at $%s per year" % (domain, keyequals("domain_name", domain, nos)[0].price)
    OSA.display_dialog(dialog, text_prompt = False, buttons = ["OK"])
  def create_products_via_csv(infile):
    data = CSV().DictRead(infile)
    [Aliexpress(c=20, verbose=False).create_product(**row) for row in data[350:]]
    affix_product_descriptions()
  def sort_collections():
    pass
  def theme():
    @timedtask
    def theme():
      os.system("/Applications/Google\ Chrome\ 70.app/Contents/MacOS/Google\ Chrome &")
      os.system("/Applications/Adobe\ Photoshop\ CC\ 2018/Adobe\ Photoshop\ CC\ 2018.app/Contents/MacOS/Adobe\ Photoshop\ CC\ 2018 &")
      redinput(" Theme -- ")
  def unpend_orders():
    Order_Unpender().unpend_orders()
  class eCommerce_Item_Enlivener(DecisionTree):
    def wordcount(self, x):
      apostrophes = x.count("'")
      words = len(x.split(" "))
      count = apostrophes + words
      return count
    def wordcount_by_productIds(self, x, shop):
      return [eCommerce_Item_Enlivener().wordcount(Shop()(shop).pfind(id_=i).body_html) for i in x]
    def format_products_feed1(self, shop):
      x = [i.split("/")[-1] for i in get_all_chrome_urls() if "/products/" in i]
      x = [Shop()( shop).pfind(handle=i)[0] for i in x]
      [[setattr(i,"body_html",""),i.save()] for i in x]
      y = ""
      y += "\n"
      for i in x:
        y += "url: " + "https://"+Shop()(shop).Shopify_App_API_Url.split("@")[1]+"/products/%s"%i.id
        y += "\n"
        y += "words: "
        y += "\n"
        y += "\n"
      with open(homepath("~/tavern/tavern/bag/%s"%datetime.now().strftime("%m_%d_%Y_set.txt")), "w") as f:
        f.write(y)
    def format_products_feed(self, io=None):
      io = get_all_chrome_urls() if(None==io) else io
      y = ""
      y += "\n"
      data = []
      if(type(io[0]) == str):
        for i in io:
          SHOP = Get(Shop,Domain_Name__icontains=re.findall("[a-zA-Z]+.com",i)[0])
          p = Shop()( SHOP.shop_abbreviation  ).pfind(handle=i.split("/")[-1])[0]
          data.append(p)
      else:
        data = io


      for p in data:
        SHOP = Shop()(Get(Shop,Business_Name=p.vendor).shop_abbreviation)
        p.body_html = ""; p.save()
        y += "url: " + "https://"+SHOP.Shopify_App_API_Url.split("@")[1]+"/products/%s"%p.id
        y += "\n"
        y += "words: "
        y += "\n"
        y += "\n"
      with open(homepath("~/tavern/tavern/bag/%s"%datetime.now().strftime("%m_%d_%Y_set.txt")), "w") as f:
        f.write(y)
    def read(self):
      address = input("address?: ")
      shop = input("shop?: ")
      wordsum = sum(     [int(i) for i in re.findall("[\n ]([0-9][0-9])[\n ]",open(address).read()+"\n")]      )
      productIds = [int(i) for i in re.findall("[/]([0-9][0-9][0-9][0-9]+)[\n ]",open(address).read()+"\n")]
      wordcount = eCommerce_Item_Enlivener().wordcount_by_productIds(productIds, shop = shop)
      redprint("wordsum: %s" % wordsum, "wordcount: %s" % wordcount, "productIds: %s" % productIds)
  class October_Keyword_Utilities:
    #@[2018.11.23 02:44 PM][I took out the __init__ because i did print the exception in `pool` and i was not able to set the shop that many times in succession. i then got the api call must be set error and then i just set the shop in the beginning]
    t_format_ids = lambda self, ids: [{"interests": [{'id':i} for i in ids]}]
    def t_format_resp(self, resp):
      payload = []
      for i in resp:
        if i.get('valid',True) == True:
          payload.append({'id':i['id'], 'audience_size':i['audience_size'],'name':i['name'],
                          'category':i.get('disambiguation_category',''), 'topic':i.get('topic','')})
      return payload
    def receive_interest_dictlist(self, x, niche):
      """ ::: Problem: (1)Order (2)integer_ids ::: """
      """ ::: Solution: (1)integerify__forloop (2)keysort__id ::: """
      for i in x:   i["id"] = int(i["id"])
      x = keysort("id",x)
      if x not in key("keywordlist",All(Facebookkeywordlist)):
        Facebookkeywordlist(niche=niche, keywordlist=x, audience_size=October_Keyword_Utilities().re(x)).save()
    def re(self, io=None):
      if not io: return 1000000000
      ids = None
      """ ::: if io aint just ids, and its dictlist, ok, make ids the key("id"), else, ids=io(int list) ::: """
      if(type(io[0]) not in [str,int]):
        ids = key("id",io)
      else:
        ids = io
      account = AdAccount("act_%s"%(a_shop().Facebook_Business_Ad_Account_ID))
      t_spec = {'age_max': 65,
               'age_min': 18,
               'audience_network_positions': ['classic', 'instream_video', 'rewarded_video'],
               'device_platforms': ['mobile', 'desktop'],
               'facebook_positions': ['feed', 'right_hand_column', 'instant_article'],
               'geo_locations': {'countries': ['US'], 'location_types': ['home']},
               'publisher_platforms': ['facebook', 'audience_network'],
               'targeting_optimization': 'none',
               'flexible_spec': []
               }
      # automatic placements
      t_spec = {'age_max': 65,
               'age_min': 18,
               'geo_locations': {'countries': ['US'], 'location_types': ['home']},
               'targeting_optimization': 'none',
               'flexible_spec': []
               }
      # added this 2nd t_spec in as this is how based on 10/2018 targeting was by default
      # t_spec = {'age_max': 65,
      #          'age_min': 18,
      #          #'audience_network_positions': ['classic', 'instream_video', 'rewarded_video'],
      #          'device_platforms': ['mobile'],
      #          'facebook_positions': ['feed'],
      #          'geo_locations': {'countries': ['US'],},
      #          'publisher_platforms': ['facebook'],
      #          'targeting_optimization': 'none',
      #          'flexible_spec': []
      #          }
      if ids:
        t_spec['flexible_spec'] = t_format_ids(ids)
      params = {
          #'currency': 'USD',
          #'optimize_for': AdSet.OptimizationGoal.offsite_conversions,
          'targeting_spec': t_spec, }
      reach_estimate = account.get_reach_estimate(params=params)
      return reach_estimate[0]["users"]
    def t_search(self, q, limit=10000):
      resp = TargetingSearch.search(params={'q':q,'type':'adinterest','limit':limit})
      return t_format_resp(resp)
    def t_suggestion(self, names, limit=10000):
      resp = TargetingSearch.search(params={'interest_list':list(names), 'type':'adinterestsuggestion', 'limit':limit})
      return t_format_resp(resp)
    def se(self, q, limit=50):
      #@altered to achieve results with `,` or `\n`
      new = []
      for q in copy.deepcopy(q).replace("\n",",").split(","):
        x = [i for i in json.loads(requests.get(Muta()().targeting_search_url.format(q,limit)).text).get("data",[]) if("interests"==i["type"])      ]
        def pool_target(i):
          x = dict(id=int(i["id"]),name=i["name"],audience_size=Facebookkeyword.re( int(i["id"]) )  )
          return x
        if len(x) == 0:
          OSA.notify("No Results for `{}`".format(q))
          return []
        x = pool(pool_target, x, nodes=2).result()

        x = [Facebookkeyword(**i) for i in x]
        # keycall("save",x)
        for i in x: i.save()
        x = keycall("zone", x)
        new.extend(x)
      return new
    def su(self, ids, limit=50):
      targeting_list = json.dumps([{"id":i,"type":"interests"} for i in ids])
      redprint(targeting_list)
      x = [i for i in json.loads(requests.get(Muta()().targeting_suggestions_url.format(targeting_list,limit)).text).get("data",[]) if("interests"==i["type"]) ]
      def pool_target(i):
        x = dict(id=int(i["id"]),name=i["name"],audience_size=Facebookkeyword.re( int(i["id"]) )  )
        redprint("hello")
        return x
      x = pool(pool_target, x, nodes=15).result()

      x = [Facebookkeyword(**i) for i in x]
      keycall("save",x)
      #return keysort("audience_size", x)
      x = keycall("zone", x)
      return x

  """ Business-Utils-Main """
  class July_Adset_Utilities:
    def __init__(self):
      r""" This is important since looking at it now I forget the parameters and it looks as if i did not write any of it before"""
      #self.shop = shop
      # keep these for storage purposes
      a_shop()
      self.data_all_fields = ["spend","adset_id","date","frequency","impression","impression_cost","impression_rate","post_click","post_click_cost","post_click_rate","click","click_cost","click_rate","add_to_cart","add_to_cart_cost","add_to_cart_rate","website_purchase","website_purchase_cost","website_purchase_rate","spend","website_purchase_value","return_on_investment","reach","reach_cost","reach_rate","landing_page_view","landing_page_view_cost","landing_page_view_rate","fb_pixel_view_content","fb_pixel_view_content_cost","fb_pixel_view_content_rate","fb_pixel_initiate_checkout","fb_pixel_initiate_checkout_cost","fb_pixel_initiate_checkout_rate","page_engagement","page_engagement_cost","page_engagement_rate","post_engagement","post_engagement_cost","post_engagement_rate","post_reaction","post_reaction_cost","post_reaction_rate"]
      self.data_fields = ["spend","adset_id","date","frequency","impression","impression_cost","impression_rate","post_click","post_click_cost","post_click_rate","click","click_cost","click_rate","add_to_cart","add_to_cart_cost","add_to_cart_rate","website_purchase","website_purchase_cost","website_purchase_rate","spend","website_purchase_value","return_on_investment"]
      self.get_insight_fields = ["adset_id", "action_values", "actions", "adset_name", "clicks", "date_start", "date_stop", "frequency", "impressions", "reach", "relevance_score", "spend"]
      self.get_insight_params = {"time_increment": 1, "time_range": {"since": (Date()-0).datestr,"until": (Date()-0).datestr}}
    def get_campaigns(self, limit = 500):
      return self.shop.fb.get_campaigns(params = {"limit": limit})
    def get_adsets(self, campaign_id, limit = 500):
      scope_campaign = Campaign(campaign_id)
      adsets = scope_campaign.get_ad_sets(params = {"limit": limit})
      return adsets
    def pause_adset(self, adset_id):
      input("is this ok?: ")
      shop = Shop()( Adset.objects.get(adset_id=adset_id).shop_abbreviation)
      adset = AdSet(adset_id)
      adset["status"] = "PAUSED"
      status_check = adset.remote_update()
      print("adset %s: %s √"%(adset_id, status_check))
      assert status_check['status'] == 'PAUSED'
      Update(Get(Adset,adset_id=adset_id),status="PAUSED")
    def restart_adset(self, adset_id):
      input("is this ok?: ")
      shop = Shop()( Adset.objects.get(adset_id=adset_id).shop_abbreviation)
      adset = AdSet(adset_id)
      adset["status"] = "ACTIVE"
      status_check = adset.remote_update()
      print("adset %s: %s √"%(adset_id, status_check))
      assert status_check['status'] == 'ACTIVE'
      Update(Get(Adset,adset_id=adset_id),status="ACTIVE")
    def update_adset(self, id):
      new = Get(Adset,adset_id=id)
      data = AdSet(new.adset_id).remote_read(fields=["campaign_id","id"])
      new.campaign_id = data["campaign_id"]
      new.adset_id = data["id"]
      new.save()
    def update_adsetinsight_data(self, id, date_start = 5, date_end = 0, time_increment = 1, fields = ["adset_id", "action_values", "actions", "adset_name", "clicks", "date_start", "date_stop", "frequency", "impressions", "reach", "relevance_score", "spend"]):
      adset = Filter(Adset, adset_id=id)[0]
      self.shop = Shop()( adset.shop_abbreviation)
      data = [AttrDict(i.export_all_data()) for i in AdSet(adset.adset_id).get_insights(fields = fields, params={"time_increment": time_increment, "time_range": {"since": (Date()-date_start).datestr,"until": (Date()-date_end).datestr}})]
      for i in data:
        new = Adsetinsight()
        existing = Adsetinsight.objects.filter(adset_id = adset.adset_id, date = Date().myDatetimenow(Date(i.date_start).dateobj))
        if len(existing) == 1:
          new = existing[0]
          print("an existing")


        actions = i.get("actions", {})
        action_values = i.get("action_values", {})
        actions_dict = AttrDict(dict(zip(key("action_type", actions), key("value", actions))))
        action_values_dict = AttrDict(dict(zip(key("action_type", action_values), key("value", action_values))))

        spend = round(float(i.spend), 4)
        adset_id = adset.adset_id
        date = Date().myDatetimenow(Date(i.date_start).dateobj)
        frequency = round(float(i.frequency), 4)
        impression = int(i.impressions)
        if(0==impression):continue
        impression_cost = round(float(tryreturn(lambda: spend / impression)), 4)
        impression_rate = 0
        post_click = int(i.clicks)
        post_click_cost = round(float(tryreturn(lambda: spend / post_click)), 4)
        post_click_rate = round(float(tryreturn(lambda: post_click / impression)), 4)
        click = int(actions_dict.get("link_click", 0))
        click_cost = round(float(tryreturn(lambda: spend / click)), 4)
        click_rate = round(float(tryreturn(lambda: click / impression)), 4)
        add_to_cart = int(actions_dict.get("offsite_conversion.fb_pixel_add_to_cart", 0))
        add_to_cart_cost = round(float(tryreturn(lambda: spend / add_to_cart)), 4)
        try:add_to_cart_rate = round(float(tryreturn(lambda: add_to_cart / impression)), 4)
        except:add_to_cart_rate = 0 #(?)
        website_purchase = int(actions_dict.get("offsite_conversion.fb_pixel_purchase", 0))
        ##conversion_pixel_purchase = int(actions_dict.get("offsite_conversion", 0))
        ##if website_purchase > 0 and conversion_pixel_purchase == 0:
        ##  website_purchase = website_purchase
        ##if website_purchase > 0 and conversion_pixel_purchase > 0:
        ##  website_purchase = ((website_purchase+conversion_pixel_purchase) / 2)
        ##if website_purchase == 0 and conversion_pixel_purchase > 0:
        ##  website_purchase = conversion_pixel_purchase

        website_purchase_cost = round(float(tryreturn(lambda: spend / website_purchase)), 4)
        website_purchase_rate = round(float(tryreturn(lambda: website_purchase / impression)), 4)
        spend = round(float(i.spend), 4)
        website_purchase_value = round(float(action_values_dict.get("offsite_conversion.fb_pixel_purchase", 0)), 4)
        return_on_investment = round(float(tryreturn(lambda: website_purchase_value / spend)), 4)
        reach = int(i.reach)
        reach_cost = round(float(tryreturn(lambda: spend / reach)), 4)
        reach_rate = 0
        landing_page_view = int(actions_dict.get("landing_page_view", 0))
        landing_page_view_cost = round(float(tryreturn(lambda: spend / landing_page_view)), 4)
        landing_page_view_rate = round(float(tryreturn(lambda: landing_page_view / impression)), 4)
        fb_pixel_view_content = int(actions_dict.get("offsite_conversion.fb_pixel_view_content", 0))
        fb_pixel_view_content_cost = round(float(tryreturn(lambda: spend / fb_pixel_view_content)), 4)
        fb_pixel_view_content_rate = round(float(fb_pixel_view_content / impression), 4)
        fb_pixel_initiate_checkout = int(actions_dict.get("offsite_conversion.fb_pixel_initiate_checkout", 0))
        fb_pixel_initiate_checkout_cost = round(float(tryreturn(lambda: spend / fb_pixel_initiate_checkout)), 4)
        fb_pixel_initiate_checkout_rate = round(float(fb_pixel_initiate_checkout / impression), 4)
        page_engagement = int(actions_dict.get("page_engagement", 0))
        page_engagement_cost = round(float(tryreturn(lambda: spend / page_engagement)), 4)
        page_engagement_rate = round(float(page_engagement / impression), 4)
        post_engagement = int(actions_dict.get("post_engagement", 0))
        post_engagement_cost = round(float(tryreturn(lambda: spend / post_engagement)), 4)
        post_engagement_rate = round(float(post_engagement / impression), 4)
        post_reaction = int(actions_dict.get("post_reaction", 0))
        post_reaction_cost = round(float(tryreturn(lambda: spend / post_reaction)), 4)
        post_reaction_rate = round(float(post_reaction / impression), 4)


        greenprint("[update_adsetinsight_data][spend][%s]"% spend)
        greenprint("[update_adsetinsight_data][adset_id][%s]"% adset_id)
        greenprint("[update_adsetinsight_data][date][%s]"% date)
        greenprint("[update_adsetinsight_data][frequency][%s]"% frequency)
        greenprint("[update_adsetinsight_data][impression][%s]"% impression)
        greenprint("[update_adsetinsight_data][impression_cost][%s]"% impression_cost)
        greenprint("[update_adsetinsight_data][impression_rate][%s]"% impression_rate)
        greenprint("[update_adsetinsight_data][post_click][%s]"% post_click)
        greenprint("[update_adsetinsight_data][post_click_cost][%s]"% post_click_cost)
        greenprint("[update_adsetinsight_data][post_click_rate][%s]"% post_click_rate)
        greenprint("[update_adsetinsight_data][click][%s]"% click)
        greenprint("[update_adsetinsight_data][click_cost][%s]"% click_cost)
        greenprint("[update_adsetinsight_data][click_rate][%s]"% click_rate)
        greenprint("[update_adsetinsight_data][add_to_cart][%s]"% add_to_cart)
        greenprint("[update_adsetinsight_data][add_to_cart_cost][%s]"% add_to_cart_cost)
        greenprint("[update_adsetinsight_data][add_to_cart_rate][%s]"% add_to_cart_rate)
        greenprint("[update_adsetinsight_data][website_purchase][%s]"% website_purchase)
        greenprint("[update_adsetinsight_data][website_purchase_cost][%s]"% website_purchase_cost)
        greenprint("[update_adsetinsight_data][website_purchase_rate][%s]"% website_purchase_rate)
        greenprint("[update_adsetinsight_data][spend][%s]"% spend)
        greenprint("[update_adsetinsight_data][website_purchase][%s]"% website_purchase_value)
        greenprint("[update_adsetinsight_data][offsite_conversion][%s]"% website_purchase_value)
        greenprint("[update_adsetinsight_data][website_purchase_value][%s]"% website_purchase_value)
        greenprint("[update_adsetinsight_data][return_on_investment][%s]"% return_on_investment)
        greenprint("[update_adsetinsight_data][reach][%s]"% reach)
        greenprint("[update_adsetinsight_data][reach_cost][%s]"% reach_cost)
        greenprint("[update_adsetinsight_data][reach_rate][%s]"% reach_rate)
        greenprint("[update_adsetinsight_data][landing_page_view][%s]"% landing_page_view)
        greenprint("[update_adsetinsight_data][landing_page_view_cost][%s]"% landing_page_view_cost)
        greenprint("[update_adsetinsight_data][landing_page_view_rate][%s]"% landing_page_view_rate)
        greenprint("[update_adsetinsight_data][fb_pixel_view_content][%s]"% fb_pixel_view_content)
        greenprint("[update_adsetinsight_data][fb_pixel_view_content_cost][%s]"% fb_pixel_view_content_cost)
        greenprint("[update_adsetinsight_data][fb_pixel_view_content_rate][%s]"% fb_pixel_view_content_rate)
        greenprint("[update_adsetinsight_data][fb_pixel_initiate_checkout][%s]"% fb_pixel_initiate_checkout)
        greenprint("[update_adsetinsight_data][fb_pixel_initiate_checkout_cost][%s]"% fb_pixel_initiate_checkout_cost)
        greenprint("[update_adsetinsight_data][fb_pixel_initiate_checkout_rate][%s]"% fb_pixel_initiate_checkout_rate)
        greenprint("[update_adsetinsight_data][page_engagement][%s]"% page_engagement)
        greenprint("[update_adsetinsight_data][page_engagement_cost][%s]"% page_engagement_cost)
        greenprint("[update_adsetinsight_data][page_engagement_rate][%s]"% page_engagement_rate)
        greenprint("[update_adsetinsight_data][post_engagement][%s]"% post_engagement)
        greenprint("[update_adsetinsight_data][post_engagement_cost][%s]"% post_engagement_cost)
        greenprint("[update_adsetinsight_data][post_engagement_rate][%s]"% post_engagement_rate)
        greenprint("[update_adsetinsight_data][post_reaction][%s]"% post_reaction)
        greenprint("[update_adsetinsight_data][post_reaction_cost][%s]"% post_reaction_cost)
        greenprint("[update_adsetinsight_data][post_reaction_rate][%s]"% post_reaction_rate)


        new.spend = spend
        new.ad_account_id = self.shop.Facebook_Business_Ad_Account_ID
        new.adset_id = adset_id
        new.date = date
        new.frequency = frequency
        new.impression = impression
        new.impression_cost = impression_cost
        new.impression_rate = impression_rate
        new.post_click = post_click
        new.post_click_cost = post_click_cost
        new.post_click_rate = post_click_rate
        new.click = click
        new.click_cost = click_cost
        new.click_rate = click_rate
        new.add_to_cart = add_to_cart
        new.add_to_cart_cost = add_to_cart_cost
        new.add_to_cart_rate = add_to_cart_rate
        new.website_purchase = website_purchase
        new.website_purchase_cost = website_purchase_cost
        new.website_purchase_rate = website_purchase_rate
        new.spend = spend
        new.website_purchase_value = website_purchase_value
        new.return_on_investment = return_on_investment
        new.reach = reach
        new.reach_cost = reach_cost
        new.reach_rate = reach_rate
        new.landing_page_view = landing_page_view
        new.landing_page_view_cost = landing_page_view_cost
        new.landing_page_view_rate = landing_page_view_rate
        new.fb_pixel_view_content = fb_pixel_view_content
        new.fb_pixel_view_content_cost = fb_pixel_view_content_cost
        new.fb_pixel_view_content_rate = fb_pixel_view_content_rate
        new.fb_pixel_initiate_checkout = fb_pixel_initiate_checkout
        new.fb_pixel_initiate_checkout_cost = fb_pixel_initiate_checkout_cost
        new.fb_pixel_initiate_checkout_rate = fb_pixel_initiate_checkout_rate
        new.page_engagement = page_engagement
        new.page_engagement_cost = page_engagement_cost
        new.page_engagement_rate = page_engagement_rate
        new.post_engagement = post_engagement
        new.post_engagement_cost = post_engagement_cost
        new.post_engagement_rate = post_engagement_rate
        new.post_reaction = post_reaction
        new.post_reaction_cost = post_reaction_cost
        new.post_reaction_rate = post_reaction_rate


        new.save()
    # https://developers.facebook.com/docs/marketing-api/click-tags
    def update_adsethourlyinsight_data(self, id, date_start = 5, date_end = 0, time_increment = 1, breakdowns=["hourly_stats_aggregated_by_advertiser_time_zone"], fields = ["adset_id", "action_values", "actions", "adset_name", "clicks", "date_start", "date_stop", "frequency", "impressions", "reach", "relevance_score", "spend"]):
      """
      date_start = 800
      date_end = 0
      time_increment = 1
      breakdowns=["hourly_stats_aggregated_by_advertiser_time_zone"]
      fields = ["adset_id", "action_values", "actions", "adset_name", "clicks", "date_start", "date_stop", "frequency", "impressions", "reach", "relevance_score", "spend"]
      insights = adset.get_insights(fields = fields, params={"time_increment": time_increment, "time_range": {"since": (Date()-date_start).datestr,"until": (Date()-date_end).datestr}}       )
      """
      # used to be date_start = 0 and date_end = 0, it only gets data for `today` but it could end early, ie, @/3hrs, date_start= 1 would have been better
      # 
      adset = Filter(Adset,adset_id=id)[0]
      self.shop = Shop()( adset.shop_abbreviation)
      data = [AttrDict(i.export_all_data()) for i in AdSet(adset.adset_id).get_insights(fields = fields, params={"breakdowns": breakdowns, "time_increment": time_increment, "time_range": {"since": (Date()-date_start).datestr,"until": (Date()-date_end).datestr}})]

      for i in data:
        new = Adsethourlyinsight()
        date = (round((int(i.hourly_stats_aggregated_by_advertiser_time_zone.split(" - ")[0].split(":")[0])/24),2)+Date().myDatetimenow(Date(i.date_start).dateobj)  )
        distinct_print("[%s][%s]"%(date,i.hourly_stats_aggregated_by_advertiser_time_zone))
        for d in range(24):
          tryprocess(Adsethourlyinsight(ad_account_id=self.shop.Facebook_Business_Ad_Account_ID, date=(Date().myDatetimenow(Date(i.date_start).dateobj)+round((d/24),2)), adset_id=i.adset_id ).save)
        existing = Adsethourlyinsight.objects.filter(adset_id = adset.adset_id, date = date)
        if len(existing) == 1:
          new = existing[0]
          print("an existing")


        actions = i.get("actions", {})
        action_values = i.get("action_values", {})
        actions_dict = AttrDict(dict(zip(key("action_type", actions), key("value", actions))))
        action_values_dict = AttrDict(dict(zip(key("action_type", action_values), key("value", action_values))))

        spend = round(float(i.spend), 4)
        adset_id = adset.adset_id
        #date = Date().myDatetimenow(Date(i.date_start).dateobj)
        #frequency = round(float(i.frequency), 4)
        impression = int(i.impressions)
        if(0==impression):continue
        impression_cost = round(float(tryreturn(lambda: spend / impression)), 4)
        impression_rate = 0
        post_click = int(i.clicks)
        post_click_cost = round(float(tryreturn(lambda: spend / post_click)), 4)
        post_click_rate = round(float(tryreturn(lambda: post_click / impression)), 4)
        click = int(actions_dict.get("link_click", 0))
        click_cost = round(float(tryreturn(lambda: spend / click)), 4)
        click_rate = round(float(tryreturn(lambda: click / impression)), 4)
        add_to_cart = int(actions_dict.get("offsite_conversion.fb_pixel_add_to_cart", 0))
        add_to_cart_cost = round(float(tryreturn(lambda: spend / add_to_cart)), 4)
        try:add_to_cart_rate = round(float(tryreturn(lambda: add_to_cart / impression)), 4)
        except:add_to_cart_rate = 0 #(?)
        website_purchase = int(actions_dict.get("offsite_conversion.fb_pixel_purchase", 0))
        #conversion_pixel_purchase = int(actions_dict.get("offsite_conversion", 0))
        #if website_purchase > 0 and conversion_pixel_purchase == 0:
        #  website_purchase = website_purchase
        #if website_purchase > 0 and conversion_pixel_purchase > 0:
        #  website_purchase = ((website_purchase+conversion_pixel_purchase) / 2)
        #if website_purchase == 0 and conversion_pixel_purchase > 0:
        #  website_purchase = conversion_pixel_purchase
        website_purchase_cost = round(float(tryreturn(lambda: spend / website_purchase)), 4)
        website_purchase_rate = round(float(tryreturn(lambda: website_purchase / impression)), 4)
        spend = round(float(i.spend), 4)
        website_purchase_value = round(float(action_values_dict.get("offsite_conversion.fb_pixel_purchase", 0)), 4)
        return_on_investment = round(float(tryreturn(lambda: website_purchase_value / spend)), 4)
        #reach = int(i.reach)
        #reach_cost = round(float(tryreturn(lambda: spend / reach)), 4)
        #reach_rate = 0
        landing_page_view = int(actions_dict.get("landing_page_view", 0))
        landing_page_view_cost = round(float(tryreturn(lambda: spend / landing_page_view)), 4)
        landing_page_view_rate = round(float(tryreturn(lambda: landing_page_view / impression)), 4)
        fb_pixel_view_content = int(actions_dict.get("offsite_conversion.fb_pixel_view_content", 0))
        fb_pixel_view_content_cost = round(float(tryreturn(lambda: spend / fb_pixel_view_content)), 4)
        fb_pixel_view_content_rate = round(float(fb_pixel_view_content / impression), 4)
        fb_pixel_initiate_checkout = int(actions_dict.get("offsite_conversion.fb_pixel_initiate_checkout", 0))
        fb_pixel_initiate_checkout_cost = round(float(tryreturn(lambda: spend / fb_pixel_initiate_checkout)), 4)
        fb_pixel_initiate_checkout_rate = round(float(fb_pixel_initiate_checkout / impression), 4)
        page_engagement = int(actions_dict.get("page_engagement", 0))
        page_engagement_cost = round(float(tryreturn(lambda: spend / page_engagement)), 4)
        page_engagement_rate = round(float(page_engagement / impression), 4)
        post_engagement = int(actions_dict.get("post_engagement", 0))
        post_engagement_cost = round(float(tryreturn(lambda: spend / post_engagement)), 4)
        post_engagement_rate = round(float(post_engagement / impression), 4)
        post_reaction = int(actions_dict.get("post_reaction", 0))
        post_reaction_cost = round(float(tryreturn(lambda: spend / post_reaction)), 4)
        post_reaction_rate = round(float(post_reaction / impression), 4)



        new.spend = spend
        new.ad_account_id = self.shop.Facebook_Business_Ad_Account_ID
        new.adset_id = adset_id
        new.date = date
        #new.frequency = frequency
        new.impression = impression
        new.impression_cost = impression_cost
        new.impression_rate = impression_rate
        new.post_click = post_click
        new.post_click_cost = post_click_cost
        new.post_click_rate = post_click_rate
        new.click = click
        new.click_cost = click_cost
        new.click_rate = click_rate
        new.add_to_cart = add_to_cart
        new.add_to_cart_cost = add_to_cart_cost
        new.add_to_cart_rate = add_to_cart_rate
        new.website_purchase = website_purchase
        new.website_purchase_cost = website_purchase_cost
        new.website_purchase_rate = website_purchase_rate
        new.spend = spend
        new.website_purchase_value = website_purchase_value
        new.return_on_investment = return_on_investment
        #new.reach = reach
        #new.reach_cost = reach_cost
        #new.reach_rate = reach_rate
        new.landing_page_view = landing_page_view
        new.landing_page_view_cost = landing_page_view_cost
        new.landing_page_view_rate = landing_page_view_rate
        new.fb_pixel_view_content = fb_pixel_view_content
        new.fb_pixel_view_content_cost = fb_pixel_view_content_cost
        new.fb_pixel_view_content_rate = fb_pixel_view_content_rate
        new.fb_pixel_initiate_checkout = fb_pixel_initiate_checkout
        new.fb_pixel_initiate_checkout_cost = fb_pixel_initiate_checkout_cost
        new.fb_pixel_initiate_checkout_rate = fb_pixel_initiate_checkout_rate
        new.page_engagement = page_engagement
        new.page_engagement_cost = page_engagement_cost
        new.page_engagement_rate = page_engagement_rate
        new.post_engagement = post_engagement
        new.post_engagement_cost = post_engagement_cost
        new.post_engagement_rate = post_engagement_rate
        new.post_reaction = post_reaction
        new.post_reaction_cost = post_reaction_cost
        new.post_reaction_rate = post_reaction_rate


        #new.save()
        new.save()
    def update_adsetinsight_data_find_which_adset_had_the_order(self, date_start = 0, date_end = 0, time_increment = 1, fields = ["adset_id", "action_values", "actions", "adset_name", "clicks", "date_start", "date_stop", "frequency", "impressions", "reach", "relevance_score", "spend"], is_a_shopify_order_match_check=False, is_a_shopify_order_match_check_orders=[]):
      redprint("Running 'update_adsetinsight_data_find_which_adset_had_the_order' ... ")
      for adset in Adset.objects.filter(is_created=True):
        self.shop = Shop()( adset.shop_abbreviation)
        data = [AttrDict(i.export_all_data()) for i in AdSet(adset.adset_id).get_insights(fields = fields, params={"time_increment": time_increment, "time_range": {"since": (Date()-date_start).datestr,"until": (Date()-date_end).datestr}})]
        adset_shopify_order_matches = []
        for i in data:
          new = Adsetinsight()
          existing = Adsetinsight.objects.filter(adset_id = adset.adset_id, date = Date().myDatetimenow(Date(i.date_start).dateobj))
          if len(existing) == 1:
            new = existing[0]
            print("an existing")


          actions = i.get("actions", {})
          action_values = i.get("action_values", {})
          actions_dict = AttrDict(dict(zip(key("action_type", actions), key("value", actions))))
          action_values_dict = AttrDict(dict(zip(key("action_type", action_values), key("value", action_values))))

          spend = round(float(i.spend), 4)
          adset_id = adset.adset_id
          date = Date().myDatetimenow(Date(i.date_start).dateobj)
          frequency = round(float(i.frequency), 4)
          impression = int(i.impressions)
          if(0==impression):continue
          impression_cost = round(float(tryreturn(lambda: spend / impression)), 4)
          impression_rate = 0
          post_click = int(i.clicks)
          post_click_cost = round(float(tryreturn(lambda: spend / post_click)), 4)
          post_click_rate = round(float(tryreturn(lambda: post_click / impression)), 4)
          click = int(actions_dict.get("link_click", 0))
          click_cost = round(float(tryreturn(lambda: spend / click)), 4)
          click_rate = round(float(tryreturn(lambda: click / impression)), 4)
          add_to_cart = int(actions_dict.get("offsite_conversion.fb_pixel_add_to_cart", 0))
          add_to_cart_cost = round(float(tryreturn(lambda: spend / add_to_cart)), 4)
          try:add_to_cart_rate = round(float(tryreturn(lambda: add_to_cart / impression)), 4)
          except:add_to_cart_rate = 0 #(?)
          website_purchase = int(actions_dict.get("offsite_conversion.fb_pixel_purchase", 0))
          #conversion_pixel_purchase = int(actions_dict.get("offsite_conversion", 0))
          #if website_purchase > 0 and conversion_pixel_purchase == 0:
          #  website_purchase = website_purchase
          #if website_purchase > 0 and conversion_pixel_purchase > 0:
          #  website_purchase = ((website_purchase+conversion_pixel_purchase) / 2)
          #if website_purchase == 0 and conversion_pixel_purchase > 0:
          #  website_purchase = conversion_pixel_purchase
          website_purchase_cost = round(float(tryreturn(lambda: spend / website_purchase)), 4)
          website_purchase_rate = round(float(tryreturn(lambda: website_purchase / impression)), 4)
          spend = round(float(i.spend), 4)
          website_purchase_value = round(float(action_values_dict.get("offsite_conversion.fb_pixel_purchase", 0)), 4)
          return_on_investment = round(float(tryreturn(lambda: website_purchase_value / spend)), 4)
          reach = int(i.reach)
          reach_cost = round(float(tryreturn(lambda: spend / reach)), 4)
          reach_rate = 0
          landing_page_view = int(actions_dict.get("landing_page_view", 0))
          landing_page_view_cost = round(float(tryreturn(lambda: spend / landing_page_view)), 4)
          landing_page_view_rate = round(float(tryreturn(lambda: landing_page_view / impression)), 4)
          fb_pixel_view_content = int(actions_dict.get("offsite_conversion.fb_pixel_view_content", 0))
          fb_pixel_view_content_cost = round(float(tryreturn(lambda: spend / fb_pixel_view_content)), 4)
          fb_pixel_view_content_rate = round(float(fb_pixel_view_content / impression), 4)
          fb_pixel_initiate_checkout = int(actions_dict.get("offsite_conversion.fb_pixel_initiate_checkout", 0))
          fb_pixel_initiate_checkout_cost = round(float(tryreturn(lambda: spend / fb_pixel_initiate_checkout)), 4)
          fb_pixel_initiate_checkout_rate = round(float(fb_pixel_initiate_checkout / impression), 4)
          page_engagement = int(actions_dict.get("page_engagement", 0))
          page_engagement_cost = round(float(tryreturn(lambda: spend / page_engagement)), 4)
          page_engagement_rate = round(float(page_engagement / impression), 4)
          post_engagement = int(actions_dict.get("post_engagement", 0))
          post_engagement_cost = round(float(tryreturn(lambda: spend / post_engagement)), 4)
          post_engagement_rate = round(float(post_engagement / impression), 4)
          post_reaction = int(actions_dict.get("post_reaction", 0))
          post_reaction_cost = round(float(tryreturn(lambda: spend / post_reaction)), 4)
          post_reaction_rate = round(float(post_reaction / impression), 4)

          if is_a_shopify_order_match_check == True:
            if len(existing) == 1:
              if existing[0].website_purchase > website_purchase:
                print("Found a new conversion for this Ad Set. Adding it to ")
                adset_shopify_order_matches.append(existing[0])
          print("\n")
          redprint("adset-shopify-order-matches: %s | is_a_shopify_order_match_check_orders (count of shopify orders): %s" % (len(adset_shopify_order_matches), len(is_a_shopify_order_match_check_orders)) )
          print("\n")
          """ since this is so bad: the factors are   [count_new_purchases, count_new_orders, count_new_adsets, matching_by_order_difference, and how badly this matters,--  of course you can assume 1 order at most per minute]"""
          # run analysis here, -2 indents b/c the assumption is for i in data(of adset) iterates through 1 adset | keep it here, which will be fine for the next since you are saving the variables: order AND adset
          if   (is_a_shopify_order_match_check==True)   and   (len(adset_shopify_order_matches)==1)   and   (len(is_a_shopify_order_match_check_orders)==1)  :
            adset_shopify_order_match = adset_shopify_order_matches[0]
            adset_shopify_order_match.order_ids.append(is_a_shopify_order_match_check_orders[0].id)
            adset_shopify_order_match.save()
          #elif (is_a_shopify_order_match_check==True)   and   (len(adset_shopify_order_matches)!=len(is_a_shopify_order_match_check_orders))  :
          #  """ This will occur if  for example: is_a_shopify_order_match_check_orders > 1, say 2.     if 2 is unequal to count of   adset_shopify_order_matches,;;˚ then you got 2 sales in shopify confirmed, and less than 1/0 adsets   had new orders.                """
          #  """Assuming a 0-10 second Pixel-Update timeframe--   you will want to solve the case of if 0 adset_shopify_order_matches exist, which is simply assuming `should-have-posted` and assuming `nothing-new-purchasesed` """
          #  """ then is the case of a different sort of match: [where you have to choose which order_id of the 2 orders to update to the adset  ]   \route 1: exacting the closer order_created_time(seconds) to the adset_update_time   \route 2: exacting the closer order amount/2 to the adset.  \ """
          #  """ so route 1: can i find the purchase time to the minute or second ( i dont know)"""
          #  for adset in adset_shopify_order_matches:
          #    price_differences = []
          #    for shopify_order in is_a_shopify_order_match_check_orders:
          #      adset_value_increase = website_purchase_value - existing[0].website_purchase_value
          #      price_difference  = adset_value_increase - total_price
          #      price_differences.append([shopify_order, price_difference])
          #    smallest_difference = min(price_differences)
          #    for price_difference in price_differences:
          #      if price_difference[1] == smallest_difference:
          #        print("price_difference of %s == smallest_difference: %s"% (price_difference[1], smallest_difference))
          #        shopify_order = price_difference[0]
          #        adset.order_ids = [] if adset.order_ids == None else adset.order_ids
          #        adset.order_ids.append(shopify.order_id)
          #        print("adset of id: %s which has previous conversion value of %s and now current conversion value of %s now is matched with order id: %s of total amount %s" % (existing[0].adset_id, existing[0].website_purchase_value, website_purchase_value, shopify_order.id, shopify_order.total_amount))
          #elif (is_a_shopify_order_match_check==True)   and   (len(adset_shopify_order_matches)!=len(is_a_shopify_order_match_check_orders))  :
          #  # try to match by price as well. assuming 2 new orders, 2 new adsets with orders.        if the case 2 new orders 1 new adset with orders, then due to the price match -- that 1 new adset will 
          #  for adset in adset_shopify_order_matches:
          #    price_differences = []
          #    for shopify_order in is_a_shopify_order_match_check_orders:
          #      adset_value_increase = website_purchase_value - existing[0].website_purchase_value
          #      price_difference  = adset_value_increase - total_price
          #      price_differences.append([shopify_order, price_difference])
          #    smallest_difference = min(price_differences)
          #    for price_difference in price_differences:
          #      if price_difference[1] == smallest_difference:
          #        print("price_difference of %s == smallest_difference: %s"% (price_difference[1], smallest_difference))
          #        shopify_order = price_difference[0]
          #        adset.order_ids = [] if adset.order_ids == None else adset.order_ids
          #        adset.order_ids.append(shopify.order_id)
          #        print("adset of id: %s which has previous conversion value of %s and now current conversion value of %s now is matched with order id: %s of total amount %s" % (existing[0].adset_id, existing[0].website_purchase_value, website_purchase_value, shopify_order.id, shopify_order.total_amount))


          print("spend: %s"% spend)
          print("adset_id: %s"% adset_id)
          print("date: %s"% date)
          print("frequency: %s"% frequency)
          print("impression: %s"% impression)
          print("impression_cost: %s"% impression_cost)
          print("impression_rate: %s"% impression_rate)
          print("post_click: %s"% post_click)
          print("post_click_cost: %s"% post_click_cost)
          print("post_click_rate: %s"% post_click_rate)
          print("click: %s"% click)
          print("click_cost: %s"% click_cost)
          print("click_rate: %s"% click_rate)
          print("add_to_cart: %s"% add_to_cart)
          print("add_to_cart_cost: %s"% add_to_cart_cost)
          print("add_to_cart_rate: %s"% add_to_cart_rate)
          print("website_purchase: %s"% website_purchase)
          print("website_purchase_cost: %s"% website_purchase_cost)
          print("website_purchase_rate: %s"% website_purchase_rate)
          print("spend: %s"% spend)
          print("website_purchase_value: %s"% website_purchase_value)
          print("return_on_investment: %s"% return_on_investment)
          print("reach: %s"% reach)
          print("reach_cost: %s"% reach_cost)
          print("reach_rate: %s"% reach_rate)
          print("landing_page_view: %s"% landing_page_view)
          print("landing_page_view_cost: %s"% landing_page_view_cost)
          print("landing_page_view_rate: %s"% landing_page_view_rate)
          print("fb_pixel_view_content: %s"% fb_pixel_view_content)
          print("fb_pixel_view_content_cost: %s"% fb_pixel_view_content_cost)
          print("fb_pixel_view_content_rate: %s"% fb_pixel_view_content_rate)
          print("fb_pixel_initiate_checkout: %s"% fb_pixel_initiate_checkout)
          print("fb_pixel_initiate_checkout_cost: %s"% fb_pixel_initiate_checkout_cost)
          print("fb_pixel_initiate_checkout_rate: %s"% fb_pixel_initiate_checkout_rate)
          print("page_engagement: %s"% page_engagement)
          print("page_engagement_cost: %s"% page_engagement_cost)
          print("page_engagement_rate: %s"% page_engagement_rate)
          print("post_engagement: %s"% post_engagement)
          print("post_engagement_cost: %s"% post_engagement_cost)
          print("post_engagement_rate: %s"% post_engagement_rate)
          print("post_reaction: %s"% post_reaction)
          print("post_reaction_cost: %s"% post_reaction_cost)
          print("post_reaction_rate: %s"% post_reaction_rate)


          new.spend = spend
          new.ad_account_id = self.shop.Facebook_Business_Ad_Account_ID
          new.adset_id = adset_id
          new.date = date
          new.frequency = frequency
          new.impression = impression
          new.impression_cost = impression_cost
          new.impression_rate = impression_rate
          new.post_click = post_click
          new.post_click_cost = post_click_cost
          new.post_click_rate = post_click_rate
          new.click = click
          new.click_cost = click_cost
          new.click_rate = click_rate
          new.add_to_cart = add_to_cart
          new.add_to_cart_cost = add_to_cart_cost
          new.add_to_cart_rate = add_to_cart_rate
          new.website_purchase = website_purchase
          new.website_purchase_cost = website_purchase_cost
          new.website_purchase_rate = website_purchase_rate
          new.spend = spend
          new.website_purchase_value = website_purchase_value
          new.return_on_investment = return_on_investment
          new.reach = reach
          new.reach_cost = reach_cost
          new.reach_rate = reach_rate
          new.landing_page_view = landing_page_view
          new.landing_page_view_cost = landing_page_view_cost
          new.landing_page_view_rate = landing_page_view_rate
          new.fb_pixel_view_content = fb_pixel_view_content
          new.fb_pixel_view_content_cost = fb_pixel_view_content_cost
          new.fb_pixel_view_content_rate = fb_pixel_view_content_rate
          new.fb_pixel_initiate_checkout = fb_pixel_initiate_checkout
          new.fb_pixel_initiate_checkout_cost = fb_pixel_initiate_checkout_cost
          new.fb_pixel_initiate_checkout_rate = fb_pixel_initiate_checkout_rate
          new.page_engagement = page_engagement
          new.page_engagement_cost = page_engagement_cost
          new.page_engagement_rate = page_engagement_rate
          new.post_engagement = post_engagement
          new.post_engagement_cost = post_engagement_cost
          new.post_engagement_rate = post_engagement_rate
          new.post_reaction = post_reaction
          new.post_reaction_cost = post_reaction_cost
          new.post_reaction_rate = post_reaction_rate


          #new.save()
          new.save()
    # 2. Stop AdSets based on today- data
    def stop_adset_based_on_today_data(self, id):

      todays_date = int(Date().myDatetimenow())
      # check it out. i filtered adset insights to those which will have the id.
      adsetinsights = Adsetinsight.objects.filter(date=todays_date, adset_id=id)
      #cyanprint("[Count active today][%s]"%len(adsetinsights))
      for adsetinsight in adsetinsights:
        if Adset.objects.get(adset_id=adsetinsight.adset_id).status == "ACTIVE":
          if (adsetinsight.spend >= 20 and adsetinsight.website_purchase == 0):#   or   (adsetinsight.impression_cost > .015 and adsetinsight.website_purchase == 0):
            redprint("[stop_adsets_based_on_today_data][%s][%s][%s] [%s]['!=OK']"%(adsetinsight.adset_id,adsetinsight.spend,adsetinsight.impression_cost,adsetinsight.website_purchase))
            July_Adset_Utilities().pause_adset(adset_id=adsetinsight.adset_id)
          else:
            greenprint("[%s][%s][%s] [%s]['OK']"%(adsetinsight.adset_id,adsetinsight.spend,adsetinsight.impression_cost,adsetinsight.website_purchase))
    # 1. Stop AdSets based on summation data
    def stop_adset_based_on_past_data(self, id):
      # maybe i should print out in sentences?  as when i read the data fields, i'm having to utter words in my head to transmit the data through my brain
      todays_date = int(Date().myDatetimenow())
      # check it out, i filtered adset insights to those containing this id as the adset_id
      adsetinsights = Adsetinsight.objects.filter(date=todays_date, adset_id=id)
      print("[Count active today][%s]"%len(adsetinsights))
      """ this will be a unique iteration for adsetinsights with date(delivery) today AND with adset_id """  
      adset_ids_unique = list(sorted(list(set(key("adset_id", adsetinsights)))))
      for adset_id in adset_ids_unique:
        adsetinsights = Adsetinsight.objects.filter(adset_id = adset_id)
        adsetinsights = keysort("date", adsetinsights)
        spend = 0
        website_purchase = 0
        days = 0
        cyanprint("[%s][activedays][%s]"%(adset_id,len(adsetinsights)))
        for adsetinsight in adsetinsights:
          spend += adsetinsight.spend
          website_purchase += adsetinsight.website_purchase
          days += 1
          #input("? ? ? ? ? ? ? ? ?")
          if Adset.objects.get(adset_id=adsetinsight.adset_id).status == "ACTIVE":
            if (spend >= 20   and   website_purchase == 0):
              redprint("[stop_adsets_based_on_past_data][%s][%s][%s][%s]['!=OK']"%(adsetinsight.date, days, spend, website_purchase))
              July_Adset_Utilities().pause_adset(adset_id=adsetinsight.adset_id)
            else:
              greenprint("[%s][%s][%s][%s]['OK']"%(adsetinsight.date, days, spend, website_purchase))
    def restart_adset_based_on_today_data(self, id):
      # Goal Is Restart If Sale
      #todays_date = int(Date().myDatetimenow())
      #adsetinsights = Adsetinsight.objects.filter(date=todays_date)
      #cyanprint("[Count active today][%s]"%len(adsetinsights))
      #for adsetinsight in adsetinsights:
      #  if Adset.objects.get(adset_id=adsetinsight.adset_id).status == "PAUSED":
      #    print(adsetinsight.id, adsetinsight.website_purchase)
      #    if (adsetinsight.website_purchase > 0):
      #      redprint("[restart_adsets_based_on_today_data][%s][%s][%s] [%s]['!=OK']"%(adsetinsight.adset_id,adsetinsight.spend,adsetinsight.impression_cost,adsetinsight.website_purchase))
      #      July_Adset_Utilities().restart_adset(adset_id=adsetinsight.adset_id)
      #    else:
      #      greenprint("[%s][%s][%s][%s] [%s]['OK']"%(adsetinsight.id,adsetinsight.adset_id,adsetinsight.spend,adsetinsight.impression_cost,adsetinsight.website_purchase))
      todays_date = int(Date().myDatetimenow())
      adsetinsight = tryreturn(Get, Adsetinsight, date=todays_date)
      if(0==adsetinsight): print("No adsetinsight to restart adset on todays data with"); return
      


      print(adsetinsight.id, adsetinsight.website_purchase)
      if (adsetinsight.website_purchase > 0):
        greenprint("[restart_adsets_based_on_today_data][%s][%s][%s] [%s]['!=OK']"%(adsetinsight.adset_id,adsetinsight.spend,adsetinsight.impression_cost,adsetinsight.website_purchase))
        July_Adset_Utilities().restart_adset(adset_id=adsetinsight.adset_id)
      else:
        redprint("[%s][%s][%s][%s] [%s]['OK']"%(adsetinsight.id,adsetinsight.adset_id,adsetinsight.spend,adsetinsight.impression_cost,adsetinsight.website_purchase))
        todays_date = int(Date().myDatetimenow())
            
      print(adsetinsight.id, adsetinsight.website_purchase)
      adsetinsight.save()
    def update_ad_keyword_data(self, id):
      time.sleep(2)
      distinct_print("\nupdate_ad_keyword_data\n")
      fields = ["actions", "clicks", "frequency", "impressions", "reach", "spend",]
      #if (Adset.objects.get(adset_id=adset_id).date_last_requested_keyword_stats != None) and ( (int(Date().myDatetimenow()) - Adset.objects.get(adset_id=adset_id).date_last_requested_keyword_stats) < 7):
      #  # (default is 0 for date_last_requested_keyword_stats); continue if Previously requested keyword stats, and  timerange since: < 7 days. <7 since.   200 is last day requested. on 208 it will send 201-207. 208-200 = 8. 8>7.
      #  continue

      adset = Filter(Adset,adset_id=id)[0]
      adset_id = id
      if Adset.objects.get(adset_id=adset_id).date_last_requested_keyword_stats == None:
        adset = Adset.objects.get(adset_id=adset_id); adset.date_last_requested_keyword_stats = 0; adset.save()
      date_last_requested_keyword_stats_time_length = ((int(Date().myDatetimenow()-1) - Adset.objects.get(adset_id=adset_id).date_last_requested_keyword_stats))
      distinct_print("date last requested keyword stats time length: %s" % date_last_requested_keyword_stats_time_length)
      if (date_last_requested_keyword_stats_time_length >= 1) == False:
        return None
      Shop()(Adset.objects.get(adset_id=adset_id).shop_abbreviation)
      adset = AdSet(adset_id)

      ad = None
      ads = adset.get_ads()
      if len(ads) == 0:
        return
      ad = ads[0]


      q=[]
      data = []
      dates = lmap(lambda i: (Date()-i)().strftime("%Y-%m-%d"), [8,7,6,5,4,3,2])
      for i in dates:
        keyword_stats = ad.get_keyword_stats(fields=fields,params={"date":i})
        # print(keyword_stats)
        if len(keyword_stats) > 0:
          q.append(keyword_stats)
          keyword_stat = keyword_stats[0].export_all_data()
          for a in keyword_stat:
            keyword_stat[a]["date"] = Date().myDatetimenow(Date(i)())
            x = keyword_stat[a]
            distinct_print(":Keyword Stat:\nImpressions:%s, Reach: %s, Spend: %s, Date: %s, Name: %s"%(x["impressions"], x["reach"], x["spend"], x["date"], a))
          keyword_stat = AttrDict(keyword_stat)
          data.append(keyword_stat)
          #[2018.12.18 8:03:55 AM]Removed for ascii errordistinct_print("adset id, %s, len data, %s" % (adset_id, len(data)))
          #[2018.12.18 8:03:55 AM]Removed for ascii errordistinct_print(data[-1])
          print("\n\n")
          #input("continue")



      for keyword_stat in data:
        for name,values in keyword_stat.items():
          new = Interestinsight()
          existing = Interestinsight.objects.filter(adset_id = adset_id, date = values.date, interest_name = name)
          if len(existing) == 1:
            new = existing[0]
            #asciidistinct_print("[existing][adset_id][date][interest_name][%s][%s][%s]"%(adset_id,values.date,name))
            ""
          elif len(existing) == 0:
            #asciidistinct_print("[addition][adset_id][date][interest_name][%s][%s][%s]"%(adset_id,values.date,name))
            ""

          new.adset_id = adset_id
          new.date = values.date
          new.interest_name = name

          try:actions = AttrDict(keyword_stat[name]).actions
          except: actions = {}
          try:actions_dict = AttrDict(dict(zip(key("action_type", actions), key("value", actions))))
          except:actions_dict = {}

          interest_id = int(values.id)
          interest_name = name
          spend = getattr(new,"spend",0) + float(values.get("spend",0))
          reach = getattr(new,"reach",0) + int(values.get("reach",0))
          impression = getattr(new,"impression",0) + int(values.get("impressions",0))
          click = getattr(new,"click",0) + int(actions_dict.get("link_click",0))
          post_click = getattr(new,"post_click",0) + int(values.get("clicks", 0))
          add_to_cart = getattr(new,"add_to_cart",0) + int(actions_dict.get("offsite_conversion.fb_pixel_add_to_cart",0))
          website_purchase = getattr(new,"website_purchase",0) + int(actions_dict.get("offsite_conversion.fb_pixel_purchase", 0))
          page_engagement = getattr(new,"page_engagement",0) + int(actions_dict.get("page_engagement",0))
          photo_view = getattr(new,"photo_view",0) + int(actions_dict.get("photo_view",0))
          post_engagement = getattr(new,"post_engagement",0) + int(actions_dict.get("post_engagement",0))
          post_like = getattr(new,"post_like",0) + int(actions_dict.get("post_like",0))
          

          new.interest_id = interest_id
          new.interest_name = interest_name
          new.spend = spend
          new.reach = reach
          new.impression = impression
          new.click = click
          new.post_click = post_click
          new.add_to_cart = add_to_cart
          new.website_purchase = website_purchase
          new.page_engagement = page_engagement
          new.photo_view = photo_view
          new.post_engagement = post_engagement
          new.post_like  = post_like

          new.save()
        adset = Adset.objects.get(adset_id=adset_id)
        adset.date_last_requested_keyword_stats = int(Date().myDatetimenow()-1)
        #print("[%s][%s][%s]" % (adset_id, interest_name, adset.date_last_requested_keyword_stats))
        adset.save()








        #input("?: ")
    def update_adset_targeting_data(self, id):
      adset_id = id
      adset = AdSet(adset_id)
      Shop()(Adset.objects.get(adset_id=adset_id).shop_abbreviation)
      data = AttrDict(adset.remote_read(fields=["daily_budget", "created_time","effective_status","targeting","attribution_spec","promoted_object","billing_event","optimization_goal","recommendations","bid_info","name","source_adset_id"]).export_all_data())

      attribution_spec_dict = dict(zip(key("event_type", data.attribution_spec), key("window_days", data.attribution_spec)))

      flexible_spec1 = None
      flexible_spec2 = None
      flexible_spec3 = None
      flexible_spec4 = None
      flexible_spec5 = None

      created_time = datetime.strptime('-'.join(data.get("created_time").split("-")[:-1]), '%Y-%m-%dT%H:%M:%S')
      click_attribution = attribution_spec_dict.get("CLICK_THROUGH", 0)
      view_attribution = attribution_spec_dict.get("VIEW_THROUGH", 0)
      custom_event_type = data.promoted_object.custom_event_type
      billing_event = data.billing_event
      optimization_goal = data.optimization_goal
      recommendations = data.get("recommendations", "")
      bid_info = data.get("bid_info", "")
      device_platforms = list(sorted(data.targeting.get("device_platforms", [])))
      publisher_platforms = list(sorted(data.targeting.get("publisher_platforms", [])))
      facebook_positions = list(sorted(data.targeting.get("facebook_positions", [])))
      print(data)
      targeting_optimization = data.targeting.get("targeting_optimization","none")
      user_device = list(sorted(data.targeting.get("user_device", [])))
      user_os = list(sorted(data.targeting.get("user_os", [])))
      age_min = data.targeting.age_min
      age_max = data.targeting.age_max
      genders = data.targeting.get("genders", [0])[0] # 2 is F, 1 is M, 0 is Both?
      geo_locations = list(sorted(data.targeting.geo_locations.countries))
      status = data.get("effective_status")
      name = data.get("name")
      daily_budget = float(data.get("daily_budget")) / 100
      source_adset_id = data.get("source_adset_id", None)
      custom_audiences = data.targeting.get("custom_audiences", None)
      #body = Null
      #try:
      #  try:
      #    v = AdSet(adset_id).get_ads()[0].get_ad_creatives()[0].remote_read(fields=["effective_object_story_id", "body"])
      #    body = v["body"]
      #    effective_object_story_id = v["effective_object_story_id"]
      #    body_url = re.findall(r"[a-zA-Z]*.com.*",body)
      #    distinct_print(body_url)
      #
      #
      #  except:
      #    """ an error here means an ad or creative was deleted and database needs to delete adset, """
      #    magentaprint("[adset_id][%s]"%adset_id)
      #    try:mysql_delete(Adset.objects.get(id=adset_id)) # continue # ( no effective object story id )
      #    except:pass
      #  if body == Null: 0/0
      #except Exception as e:
      #  redprint(e)
      # F L E X I B L E S P E C 
      flexible_specs_ordered_list = []
      interest_dicts = {}
      """ ::: Add Friendly Part In Here, you want to save the Facebookkeywordlist for all things 1 len ::: """
      ## testing
      #return data
      #return data.targeting.flexible_spec
      ## testing
      if "flexible_spec" in data.targeting: # here add line say, only if flexible_spec in targeting
        if(1==len(data.targeting.flexible_spec)):
          x = data.targeting.flexible_spec[0]
          October_Keyword_Utilities().receive_interest_dictlist(x.get("interests"), niche=getattr(Get(Adset,adset_id=adset_id),"niche",None))
      """ ::: Add Friendly Part In Here, you want to save the Facebookkeywordlist for all things 1 len ::: """

      try:
        for idx,i in enumerate(data.targeting.flexible_spec):
          interest_dictlist = i["interests"]
          interest_dict = dict(zip(list(map(int, key("id", interest_dictlist))), list(map(str, key("name", interest_dictlist)))))
          interest_dict_id_sum = sum(list(map(int, interest_dict.keys())))
          interest_dicts[interest_dict_id_sum] = interest_dict
        for idx, id_sum in enumerate(list(sorted(interest_dicts.keys()))):
          flexible_specs_ordered_list.append(interest_dicts[id_sum])
        for idx,flexible_spec in enumerate(flexible_specs_ordered_list):
          sorted_interest_ids = list(sorted(flexible_spec.keys()))
          ordered_interests = []
          for interest_id in sorted_interest_ids:
            interest_name = flexible_spec[interest_id]
            ordered_interests.append([interest_id, interest_name])
          flexible_specs_ordered_list[idx] = ordered_interests
        if len(flexible_specs_ordered_list) > 0:
          flexible_spec1 = flexible_specs_ordered_list[0]
        if len(flexible_specs_ordered_list) > 1:
          flexible_spec2 = flexible_specs_ordered_list[1]
        if len(flexible_specs_ordered_list) > 2:
          flexible_spec3 = flexible_specs_ordered_list[2]
        if len(flexible_specs_ordered_list) > 3:
          flexible_spec4 = flexible_specs_ordered_list[3]
        if len(flexible_specs_ordered_list) > 4:
          flexible_spec5 = flexible_specs_ordered_list[4]
      except Exception as e:
        redprint("[no interests][error: %s]"%e)
      # F L E X I B L E S P E C 

      redprint("[%s][update_adset_targeting_data][created_time][%s]" % (adset["id"],created_time))
      redprint("[%s][update_adset_targeting_data][attribution_spec_dict][%s]" % (adset["id"],attribution_spec_dict))
      redprint("[%s][update_adset_targeting_data][click_attribution][%s]" % (adset["id"],click_attribution))
      redprint("[%s][update_adset_targeting_data][view_attribution][%s]" % (adset["id"],view_attribution))
      redprint("[%s][update_adset_targeting_data][custom_event_type][%s]" % (adset["id"],custom_event_type))
      redprint("[%s][update_adset_targeting_data][billing_event][%s]" % (adset["id"],billing_event))
      redprint("[%s][update_adset_targeting_data][optimization_goal][%s]" % (adset["id"],optimization_goal))
      redprint("[%s][update_adset_targeting_data][recommendations][%s]" % (adset["id"],recommendations))
      redprint("[%s][update_adset_targeting_data][bid_info][%s]" % (adset["id"],bid_info))
      redprint("[%s][update_adset_targeting_data][device_platforms][%s]" % (adset["id"],device_platforms))
      redprint("[%s][update_adset_targeting_data][publisher_platforms][%s]" % (adset["id"],publisher_platforms))
      redprint("[%s][update_adset_targeting_data][facebook_positions][%s]" % (adset["id"],facebook_positions))
      redprint("[%s][update_adset_targeting_data][targeting_optimization][%s]" % (adset["id"],targeting_optimization))
      redprint("[%s][update_adset_targeting_data][user_device][%s]" % (adset["id"],user_device))
      redprint("[%s][update_adset_targeting_data][user_os][%s]" % (adset["id"],user_os))
      redprint("[%s][update_adset_targeting_data][age_min][%s]" % (adset["id"],age_min))
      redprint("[%s][update_adset_targeting_data][age_max][%s]" % (adset["id"],age_max))
      redprint("[%s][update_adset_targeting_data][genders][%s]" % (adset["id"],genders))
      redprint("[%s][update_adset_targeting_data][geo_locations][%s]" % (adset["id"],geo_locations))
      redprint("[%s][update_adset_targeting_data][name][%s]" % (adset["id"],name))
      #redprint("[%s][update_adset_targeting_data][body][%s]" % (adset["id"],body))
      #redprint("[%s][update_adset_targeting_data][effective_object_story_id][%s]" % (adset["id"],effective_object_story_id))
      redprint("[%s][update_adset_targeting_data][daily_budget][%s]" % (adset["id"],daily_budget))
      #@[2018.12.17 12:25 AM]for ascii redprint("[%s][update_adset_targeting_data][flexible_spec1][%s]" % (adset["id"],flexible_spec1))
      #@[2018.12.17 12:25 AM]for ascii redprint("[%s][update_adset_targeting_data][flexible_spec2][%s]" % (adset["id"],flexible_spec2))
      #@[2018.12.17 12:25 AM]for ascii redprint("[%s][update_adset_targeting_data][flexible_spec3][%s]" % (adset["id"],flexible_spec3))
      #@[2018.12.17 12:25 AM]for ascii redprint("[%s][update_adset_targeting_data][flexible_spec4][%s]" % (adset["id"],flexible_spec4))
      #@[2018.12.17 12:25 AM]for ascii redprint("[%s][update_adset_targeting_data][flexible_spec5][%s]" % (adset["id"],flexible_spec5))


      adset = Adset.objects.get(adset_id=adset_id)
      adset.created_time = created_time
      adset.click_attribution = click_attribution
      adset.view_attribution = view_attribution
      adset.custom_event_type = custom_event_type
      adset.billing_event = billing_event
      adset.optimization_goal = optimization_goal
      adset.recommendations = recommendations
      adset.bid_info = dict(bid_info)
      adset.device_platforms = device_platforms
      adset.publisher_platforms = publisher_platforms
      adset.facebook_positions = facebook_positions
      adset.targeting_optimization = targeting_optimization
      adset.user_device = user_device
      adset.user_os = user_os
      adset.age_min = age_min
      adset.age_max = age_max
      adset.genders = genders
      adset.geo_locations = geo_locations
      adset.status = status
      adset.name = name
      adset.daily_budget = daily_budget
      #adset.body = body
      #adset.effective_object_story_id = effective_object_story_id
      adset.source_adset_id = source_adset_id
      adset.custom_audiences = custom_audiences
      adset.flexible_spec1 = flexible_spec1
      adset.flexible_spec2 = flexible_spec2
      adset.flexible_spec3 = flexible_spec3
      adset.flexible_spec4 = flexible_spec4
      adset.flexible_spec5 = flexible_spec5


      adset.save()
    def database_fields_to_data(self, adset_id):

      adset = Adset.objects.get(adset_id=adset_id)
      x = {}
      x = AttrDict(x)
      if adset.click_attribution:
        x.attribution_spec = [] if "attribution_spec" not in x else x.attribution_spec
        x.attribution_spec.append({'event_type': 'CLICK_THROUGH', 'window_days': adset.click_attribution})
      if adset.view_attribution:
        x.attribution_spec = [] if "attribution_spec" not in x else x.attribution_spec
        x.attribution_spec.append({'event_type': 'VIEW_THROUGH', 'window_days': adset.view_attribution})
      if adset.custom_event_type:
        x.promoted_object = {} if "promoted_object" not in x else x.promoted_object
        x.promoted_object.custom_event_type = adset.custom_event_type
        x.promoted_object.pixel_id = Shop.objects.get(shop_abbreviation = adset.shop_abbreviation).Facebook_Pixel_ID
        x.promoted_object.pixel_rule = '{"event":{"eq":"%s"}}' % adset.custom_event_type.title()
      if adset.billing_event:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.billing_event = adset.billing_event
      if adset.optimization_goal:
        x.optimization_goal = adset.optimization_goal
      if adset.recommendations:
        None
      if adset.bid_info:
        None
        redprint("[No information set on what to do in event of a bid_info field as of 7/20/18]")
      if adset.device_platforms:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.device_platforms = adset.device_platforms
      if adset.facebook_positions:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.facebook_positions = adset.facebook_positions
      if adset.publisher_platforms:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.publisher_platforms = adset.publisher_platforms
      if adset.targeting_optimization:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.targeting_optimization = adset.targeting_optimization
      if adset.user_device:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.user_device = adset.user_device
      if adset.user_os:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.user_os = adset.user_os
      if adset.age_min:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.age_min = adset.age_min
      if adset.age_max:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.age_max = adset.age_max
      if adset.genders:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.genders = [adset.genders]
      if adset.geo_locations:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.geo_locations = {'countries': adset.geo_locations, 'location_types': ['home', 'recent']} 
      if adset.status:
        x.status = adset.status
      if adset.flexible_spec1:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.flexible_spec = []
        x.targeting.flexible_spec.append({})
        x.targeting.flexible_spec[-1]["interests"] = []
        for i,j in adset.flexible_spec1:
          x.targeting.flexible_spec[-1]["interests"].append({"name":i, "id":j})
      if adset.flexible_spec2:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.flexible_spec = []
        x.targeting.flexible_spec.append({})
        x.targeting.flexible_spec[-1]["interests"] = []
        for i,j in adset.flexible_spec2:
          x.targeting.flexible_spec[-1]["interests"].append({"name":i, "id":j})
      if adset.flexible_spec3:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.flexible_spec = []
        x.targeting.flexible_spec.append({})
        x.targeting.flexible_spec[-1]["interests"] = []
        for i,j in adset.flexible_spec3:
          x.targeting.flexible_spec[-1]["interests"].append({"name":i, "id":j})
      if adset.flexible_spec4:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.flexible_spec = []
        x.targeting.flexible_spec.append({})
        x.targeting.flexible_spec[-1]["interests"] = []
        for i,j in adset.flexible_sspec4:
          x.targeting.flexible_spec[-1]["interests"].append({"name":i, "id":j})
      if adset.flexible_spec5:
        x.targeting = {} if "targeting" not in x else x.targeting
        x.targeting.flexible_spec = []
        x.targeting.flexible_spec.append({})
        x.targeting.flexible_spec[-1]["interests"] = []
        for i,j in adset.flexible_spec5:
          x.targeting.flexible_spec[-1]["interests"].append({"name":i, "id":j})
      x.targeting = dict(x.targeting)
      try:x.promoted_object = dict(x.promoted_object)
      except Exception as e:print(e)
      x = dict(x)
      return x
    def algorithm4(self,id):
      a_shop()
      adset = Get(Adset,adset_id=id)
      if adset.status=="ACTIVE":
        data = keysort("date", Adsethourlyinsight.objects.filter(adset_id=adset.adset_id), tcer=False)
        impressions = 0; sales = 0
        for x in data:

          impressions+=x.impression
          sales+=x.website_purchase


          print(impressions, sales)
          if impressions > 500:
            if sales < 1:
              print("stop")
              print("[adset_id][%s]"%adset.adset_id)
              input("please check it, impressions: %s, sales: %s" % (impressions, sales))
              AdSet(adset.adset_id).remote_update(params={"status":"PAUSED"})
              break
    def update_advertisement_all(self, id):
      # OSA.log("1")
      July_Adset_Utilities().update_adset(id=id)
      # OSA.log("2")
      July_Adset_Utilities().update_adset_targeting_data(id=id)
      # OSA.log("3")
      July_Adset_Utilities().update_adsetinsight_data(id=id)
      # OSA.log("4")
      July_Adset_Utilities().update_adsethourlyinsight_data(id=id)
      # OSA.log("5")
      July_Adset_Utilities().stop_adset_based_on_today_data(id=id)
      # OSA.log("6")
      July_Adset_Utilities().stop_adset_based_on_past_data(id=id)
      # OSA.log("7")
      July_Adset_Utilities().restart_adset_based_on_today_data(id=id)
      # OSA.log("8")
      July_Adset_Utilities().algorithm4(id=id)
      # OSA.log("I")
      July_Adset_Utilities().update_ad_keyword_data(id=id)
      # OSA.log("J")
      x = datetime.now()
      Update(Get(Adset,adset_id=id),last_check=datetime.now())
      # OSA.log("L")
      return x.strftime("%Y,%m,%d,%H,%M,%S")
    def update_advertisements(self,shop):
      for i in Filter(Adset,shop_abbreviation=shop):
        July_Adset_Utilities().update_advertisement_all(i.adset_id)
    def tests(self):
      #July_Adset_Utilities().update_adsets()
      #July_Adset_Utilities().update_adsetinsight_data(date_start = 30, date_end = 0)
      #data = CSV().pick_data(Adsetinsight.objects.all(), ["spend","adset_id","date","frequency","impression","impression_cost","impression_rate","post_click","post_click_cost","post_click_rate","click","click_cost","click_rate","add_to_cart","add_to_cart_cost","add_to_cart_rate","website_purchase","website_purchase_cost","website_purchase_rate","spend","website_purchase_value","return_on_investment","reach","reach_cost","reach_rate","landing_page_view","landing_page_view_cost","landing_page_view_rate","fb_pixel_view_content","fb_pixel_view_content_cost","fb_pixel_view_content_rate","fb_pixel_initiate_checkout","fb_pixel_initiate_checkout_cost","fb_pixel_initiate_checkout_rate","page_engagement","page_engagement_cost","page_engagement_rate","post_engagement","post_engagement_cost","post_engagement_rate","post_reaction","post_reaction_cost","post_reaction_rate"])
      #CSV().DictWriteWithHeaders("out.csv", data, headers=["spend","adset_id","date","frequency","impression","impression_cost","impression_rate","post_click","post_click_cost","post_click_rate","click","click_cost","click_rate","add_to_cart","add_to_cart_cost","add_to_cart_rate","website_purchase","website_purchase_cost","website_purchase_rate","spend","website_purchase_value","return_on_investment","reach","reach_cost","reach_rate","landing_page_view","landing_page_view_cost","landing_page_view_rate","fb_pixel_view_content","fb_pixel_view_content_cost","fb_pixel_view_content_rate","fb_pixel_initiate_checkout","fb_pixel_initiate_checkout_cost","fb_pixel_initiate_checkout_rate","page_engagement","page_engagement_cost","page_engagement_rate","post_engagement","post_engagement_cost","post_engagement_rate","post_reaction","post_reaction_cost","post_reaction_rate"])
      CSV().dictlist_to_xlsx(Adsetinsight.objects.all(), ["spend","adset_id","date","frequency","impression","impression_cost","impression_rate","post_click","post_click_cost","post_click_rate","click","click_cost","click_rate","add_to_cart","add_to_cart_cost","add_to_cart_rate","website_purchase","website_purchase_cost","website_purchase_rate","spend","website_purchase_value","return_on_investment","reach","reach_cost","reach_rate","landing_page_view","landing_page_view_cost","landing_page_view_rate","fb_pixel_view_content","fb_pixel_view_content_cost","fb_pixel_view_content_rate","fb_pixel_initiate_checkout","fb_pixel_initiate_checkout_cost","fb_pixel_initiate_checkout_rate","page_engagement","page_engagement_cost","page_engagement_rate","post_engagement","post_engagement_cost","post_engagement_rate","post_reaction","post_reaction_cost","post_reaction_rate"],
          workbook  =  ".xlsx", sheet="sheet" )

      July_Adset_Utilities().stop_adsets_based_on_today_data()
      July_Adset_Utilities().stop_adsets_based_on_past_data()
      July_Adset_Utilities().restart_adsets_based_on_today_data()
  class Product_Manager:
    def __init__(self, sleeptime = 3600 * 3):
      Aliexpress_Products().refresh_product_inventories()
      blueprint("[sleeping][%s]"%sleeptime)
      time.sleep(sleeptime)
      self.__init__(sleeptime)
  class Product_Unpender:
    def __init__(self):
      strand( Aliexpress_Products().create_product )

  """ Business-Utils-Ad-Utils """
  def Ads(shop):
    active_ads = adsFeed(shop, date_range=100, bd=True, filters='active')
    paused_ads = adsFeed(shop, date_range=7, bd=True, filters='paused')
    _ads_utils_daily_stop(adsets = active_ads)
    _ads_utils_daily_restart(adsets = paused_ads)
    try: shop.ff.quit()
    except: pass
  def Ads_Duplicate(shop):
    """
    Download All Ad Sets
    Get All Campaigns via API
    For each Campaign:
      Get All Ads
      Targeting_Spec_Dict keying Ads Targeting_Specs
      
      For Each Targeting_Spec:
        Create a current_budget_list
        Discover count new_budgets
        Duplicate the $5 ad set Accordingly to the count_new_budgets & current_budget_list
    """
    count_of_newly_created_adsets = 0
    sum_of_newly_created_adsets_budget = 0

    #Download All Ad Sets
    csv_adsets = None
    if datetime.now().hour in [0,1,2]:
      csv_adsets = adsFeed(shop, date_range=1, bd=True, filters=None)
    else:
      csv_adsets = adsFeed(shop, date_range=0, bd=True, filters=None)

    errors=0

    #Create a Group of Active Campaign IDs
    campaigns = shop.fb.get_campaigns(params={'limit':9000})
    for campaign in campaigns:
      major_dict = {}
      adsets = campaign.get_ad_sets()
      for adset in adsets:
        targeting_spec = '%s' % adset.remote_read(fields=['targeting', 'daily_budget'])['targeting']._json
        print('targeting spec:\n%s\n\n\n'%targeting_spec)
        if targeting_spec not in major_dict.keys():
          major_dict[targeting_spec] = []
          major_dict[targeting_spec].append(adset)
        elif targeting_spec in major_dict.keys():
          major_dict[targeting_spec].append(adset)

      targeting_spec_count = len(major_dict.keys())
      print("targeting spec count: %s" % targeting_spec_count)
      for targeting_spec, adsets in major_dict.items():
        current_budget_list = sorted(list(map(int, key('daily_budget', adsets))), reverse=False)
        print("current budget list: %s" % current_budget_list)

        original_adset = None
        roi_list = []
        for adset in adsets:
          if adset['daily_budget'] == "500":
            original_adset = adset
          for csv_adset in csv_adsets:
            if csv_adset['Ad Set ID'] == adset['id']:
              roi_list.append(csv_adset['roi'])

        print("original_adset: %s" % original_adset['id'])
        print("roi_list: %s, count: %s" % (roi_list, len(roi_list)))

        count_of_good_rois = len([i for i in roi_list if i > 2])
        print("count of good rois: %s" % count_of_good_rois)
        new_budgets = list(range(max(current_budget_list) + 500, 40000, 500))[:count_of_good_rois]    
        print("new rois: %s" % new_budgets)


        for new_budget in new_budgets:
          try:
            new_adset, new_ad = Copy(shop, original_adset['id'])
            print("making a copy")
            new_adset['daily_budget'] = new_budget
            new_adset.remote_read(fields=['name', 'start_time', 'effective_status', ])
            new_adset.remote_update()
            print('new adset: %s\n' % new_adset)
            time.sleep(12)
            count_of_newly_created_adsets += 1
            sum_of_newly_created_adsets_budget += new_budget
          except:
            errors+=1
    print("error with duplication count is: %s"%errors)


    print('\n\n\n\n\n')
    print("sum of current_budget_today: %s" % (sum(list(map(int, key(csv_adsets, 'Budget'))))))
    print("sum of current_budget_today spent so far: %s" % (sum(list(map(float, key(csv_adsets, 'Amount Spent (USD)'))))))
    print("sum of purchases value today so far: %s" % (sum(list(map(float, key(csv_adsets, 'Website Purchases Conversion Value'))))))
    print("sum of purchases value target today: %s" % (sum(list(map(int, key(csv_adsets, 'Budget')))) * 2))
    print("count of newly created adsets: %s" % count_of_newly_created_adsets)
    print("sum of newly created adsets budgets: %s" % sum_of_newly_created_adsets_budget)
    print('\n\n\n\n\n')
    print('-'*20)
  def _ads_utils_daily_restart(adsets):
    # ads_utils_restart_if_sale_in_last_20_spent
    # get_adm_url_by_ids(shop, id_list=restart_ids, date_range=180)
    # Directions: Just get_adm_url, and hit 'turn on'
    # delivery, inactive, go to ads, set bd-> daily, sort adname
    # ads_util_restart_adsets(id_list=restart_ids)

    if len(adsets) == 0:
      return
    adset_ids = key(adsets, key='Ad Set ID')
    
    # dict with key as adset_id
    data = dict(zip(adset_ids, [[] for i in range(len(adset_ids))]))
    # dict with values as all days with that adset_id
    for i in adsets:
      i['date'] = Date(i['Reporting Starts']).dateobj
    for a in data:
      for i in adsets:
        if i['Ad Set ID'] == a:
          data[a].append(i)
    # sort adsets based on date ordered past to future
    # sets spent, purchases, num_consec_bad to 0,0,0
    # for each adset_id, for each day in the value list, adds the spent, purchases.
    # if spent >20, purchases == 0, no matter the day, it is a bad consecutive adset.
    # if it is bad, sets spent, purchases, to 0,0 to restart count & not overlap
    # assigns num_consec_bad to adset's dict.
    for a in data:
      data[a] = keysort('date', data[a], tcer=False)
    for k,v in data.items():
      spent = 0
      purchases = 0
      num_consec_bad = 0
      for adset in v:
        spent += float(adset['Amount Spent (USD)'])
        purchases += float(adset['Website Purchases'])
        #print(spent, purchases)
        if spent > 20 and purchases == 0:
          num_consec_bad += 1
          purchases = 0
          spent = 0
        adset['num_consec_bad'] = num_consec_bad
      print('Ad Set ID: %s | num_consec_bad: %s' % (adset['Ad Set ID'], adset['num_consec_bad']))
    # sorts adsets ordered now to backthen
    # if num_consec_bad is > 3, do not restart
    # otherwise, counts from date now to backthen, if has purchase in last 20 spent, add to restart_id list.
    for a in data:
      data[a] = keysort('date', data[a], tcer=True)
    restart_ids = []
    for k,v in data.items():
      day = 0
      spent = 0
      purchases = 0
      for adset in v:
        day += 1
        spent += float(adset['Amount Spent (USD)'])
        purchases += float(adset['Website Purchases'])
        print("date: %s, spent: %s, pcs: %s" % (adset['date'], adset['Amount Spent (USD)'], adset['Website Purchases']))
        if day <= 4 and spent <= 20 and purchases > 0:
          if adset['num_consec_bad'] <= 2:
            print("will be restarted... ")
            restart_ids.append(int(adset['Ad Set ID'].replace('c:','')))
      print("\n\n\n")
    restart_ids = list(set(restart_ids))
    for _id in restart_ids:
      print("RESTART_IDS: %s"%_id)
    #get_adm_url_by_ids(shop, restart_ids, action='restart')
    _ads_utils_restart_adsets(list(set(restart_ids)))
  def _ads_utils_daily_stop(adsets):
    if len(adsets) == 0:
      return
    print(""" If you want to check against it, generate list of pause_ids, 
              filter-> delivery: active,&go to ads,& set bd->daily,& sort adname.""")
    for i in adsets:
      i['id_'] = i['Ad Set ID'].replace('c:','')
      i['date'] = Date(i['Reporting Starts']).dateobj
    pause_ids = []
    adset_ids = list(set(key(adsets, key='id_')))
    for id in adset_ids:
      sorted_ads = keysort('date', keyequals('id_', id, adsets), tcer=True)
      spent = 0
      pcs = 0
      print('id: %s' % id)
      for adset in sorted_ads:
        spent += float(adset['Amount Spent (USD)'])
        pcs += float(adset['Website Purchases'])
        print("date: %s, spent: %s, pcs: %s" % (adset['date'], adset['spent'], adset['pcs']))
        if (spent >= 20 and pcs == 0):
          print("spend over 20: %s" % (spent - 20))
          pause_id = adset['id_']
          if pause_id not in pause_ids:
            pause_ids.append(pause_id)
            print("will be paused.")
      print('\n\n')
      time.sleep(8)

    _ads_utils_pause_adsets(pause_ids)


    #get_adm_url_by_ids(shop, pause_ids, action='pause')
    _ads_utils_pause_adsets(list(set(pause_ids)))
  def _ads_utils_pause_adsets(id_list):
    id_list = list(set(id_list))
    for adset_id in list(set(id_list)):
      adset = AdSet(adset_id)
      adset['status'] = 'PAUSED'
      status_check = adset.remote_update()
      print("adset %s: %s √"%(adset_id, status_check))
      assert status_check['status'] == 'PAUSED'
      ad = adset.get_ads()[0]
      ad['status'] = "PAUSED"
      status_check = ad.remote_update()
      assert status_check['status'] == 'PAUSED'
      print("ad %s: %s √" % (ad['id'], status_check))
      print('\n\n')
      time.sleep(10)
      # tested and works
  def _ads_utils_restart_adsets(id_list):
    for adset_id in id_list:
      adset = AdSet(adset_id)
      adset['status'] = 'ACTIVE'
      status_check = adset.remote_update()
      print("%s: %s √"%(adset_id, status_check))
      assert status_check['status'] == 'ACTIVE'
      ad = adset.get_ads()[0]
      ad["status"] = "ACTIVE"
      status_check = ad.remote_update()
      assert status_check['status'] == "ACTIVE"
      print("ad %s: %s √" % (ad['id'], status_check))
      print('\n\n')
      time.sleep(10)
      # tested and works
  def _create_custom(handle, shop):
    print("...Creating Custom...")
    audience = CustomAudience(parent_id='act_%s' %shop.Facebook_Business_Ad_Account_ID); zz(12)
    print("Creating %s for handle: %s"%(audience, handle))
    params={'pixel_id': shop.Facebook_Pixel_ID,'subtype':'WEBSITE','retention_days':'180',
        'rule':{"url":{"i_contains": handle}}, 'name':handle,}
    custom = audience.remote_create(params=params)['id']
    print("Successfully Created Custom Audience... \n%s"%custom)
    return custom
  def adjust_ad_columns():
    pyperclip.copy('x = document.getElementsByTagName("div")\ny = []\nz = x.length\nfor (i=0;i<z;i++) {a=x[i]; if (a.getAttribute("data-testid")=="FixedDataTableRow") {y=y.concat(a);}}\nb = y.length\nfor (i=0;i<b;i++) {\n                    a = y[i];\n                    c = a.getElementsByClassName("_4h2m");\n                    console.log(c.length);\n                    d = c[0]; d.style.width = "40px"; d.style.left = "0px";\n                    d = c[1]; d.style.width = "40px"; d.style.left = "40px";\n                    d = c[2]; d.style.width = "160px"; d.style.left = "80px";\n                    d = c[3]; d.style.width = "100px"; d.style.left = "0px";\n                    d = c[4]; d.style.width = "100px"; d.style.left = "100px";\n                    d = c[5]; d.style.width = "100px"; d.style.left = "200px";\n                    d = c[6]; d.style.width = "100px"; d.style.left = "300px";\n                    d = c[7]; d.style.width = "100px"; d.style.left = "400px";\n                    d = c[8]; d.style.width = "100px"; d.style.left = "500px";\n                    d = c[9]; d.style.width = "100px"; d.style.left = "600px";\n                    d = c[10]; d.style.width = "100px"; d.style.left = "700px";\n                    d = c[11]; d.style.width = "100px"; d.style.left = "800px";\n                    d = c[12]; d.style.width = "100px"; d.style.left = "900px";\n                    d = c[13]; d.style.width = "100px"; d.style.left = "1000px";\n                    d = c[14]; d.style.width = "100px"; d.style.left = "1100px";\n                    d = c[15]; d.style.width = "100px"; d.style.left = "1200px";\n                    d = c[16]; d.style.width = "100px"; d.style.left = "1300px";\n                    d = c[17]; d.style.width = "100px"; d.style.left = "1400px";\n                    e = a.getElementsByClassName("_3pzk");\n                    f = e[1]; f.style.width = "241px"; f.style.left = "241px";\n}\nx = document.getElementsByClassName("_1mic")[0];\ny = x.getElementsByClassName("_4h2m");\nz = y[0]; z.style.width = "40px"; z.style.left = "0px";\nz = y[1]; z.style.width = "40px"; z.style.left = "40px";\nz = y[2]; z.style.width = "160px"; z.style.left = "80px";\nz = y[3]; z.style.width = "100px"; z.style.left = "0px";\nz = y[4]; z.style.width = "100px"; z.style.left = "100px";\nz = y[5]; z.style.width = "100px"; z.style.left = "200px";\nz = y[6]; z.style.width = "100px"; z.style.left = "300px";\nz = y[7]; z.style.width = "100px"; z.style.left = "400px";\nz = y[8]; z.style.width = "100px"; z.style.left = "500px";\nz = y[9]; z.style.width = "100px"; z.style.left = "600px";\nz = y[10]; z.style.width = "100px"; z.style.left = "700px";\nz = y[11]; z.style.width = "100px"; z.style.left = "800px";\nz = y[12]; z.style.width = "100px"; z.style.left = "900px";\nz = y[13]; z.style.width = "100px"; z.style.left = "1000px";\nz = y[14]; z.style.width = "100px"; z.style.left = "1100px";\nz = y[15]; z.style.width = "100px"; z.style.left = "1200px";\nz = y[16]; z.style.width = "100px"; z.style.left = "1300px";\nz = y[17]; z.style.width = "100px"; z.style.left = "1400px";\ne = x.getElementsByClassName("_3pzk");\nf = e[1]; f.style.width = "241px"; f.style.left = "241px";\n\nx = document.getElementsByClassName("_1mme")[0];\ny = x.getElementsByClassName("_1eyi");\nz = y[0]; z.style.width = "40px"; z.style.left = "0px";\nz = y[1]; z.style.width = "40px"; z.style.left = "40px";\nz = y[2]; z.style.width = "160px"; z.style.left = "80px";\nz = y[3]; z.style.width = "100px"; z.style.left = "0px";\nz = y[4]; z.style.width = "100px"; z.style.left = "100px";\nz = y[5]; z.style.width = "100px"; z.style.left = "200px";\nz = y[6]; z.style.width = "100px"; z.style.left = "300px";\nz = y[7]; z.style.width = "100px"; z.style.left = "400px";\nz = y[8]; z.style.width = "100px"; z.style.left = "500px";\nz = y[9]; z.style.width = "100px"; z.style.left = "600px";\nz = y[10]; z.style.width = "100px"; z.style.left = "700px";\nz = y[11]; z.style.width = "100px"; z.style.left = "800px";\nz = y[12]; z.style.width = "100px"; z.style.left = "900px";\nz = y[13]; z.style.width = "100px"; z.style.left = "1000px";\nz = y[14]; z.style.width = "100px"; z.style.left = "1100px";\nz = y[15]; z.style.width = "100px"; z.style.left = "1200px";\nz = y[16]; z.style.width = "100px"; z.style.left = "1300px";\nz = y[17]; z.style.width = "100px"; z.style.left = "1400px";\ne = x.getElementsByClassName("_182x");\nf = e[1]; f.style.left = "241px";\n\n\nx = document.getElementsByClassName("_1mme")[0];\ny = x.getElementsByClassName("_4h2m");\nz = y[0]; z.style.width = "40px";\nz = y[1]; z.style.width = "40px";\nz = y[2]; z.style.width = "160px";\nz = y[3]; z.style.width = "100px";\nz = y[4]; z.style.width = "100px";\nz = y[5]; z.style.width = "100px";\nz = y[6]; z.style.width = "100px";\nz = y[7]; z.style.width = "100px";\nz = y[8]; z.style.width = "100px";\nz = y[9]; z.style.width = "100px";\nz = y[10]; z.style.width = "100px";\nz = y[11]; z.style.width = "100px";\nz = y[12]; z.style.width = "100px";\nz = y[13]; z.style.width = "100px";\nz = y[14]; z.style.width = "100px";\nz = y[15]; z.style.width = "100px";\nz = y[16]; z.style.width = "100px"; z.style.left = "1300px";\nz = y[17]; z.style.width = "100px"; z.style.left = "1400px";\ne = x.getElementsByClassName("_3pzk");\nf = e[1]; f.style.width = "241px"; f.style.left = "241px";\n')
    while True:
      chromejs("x = document.getElementsByTagName('div');y = [];z = x.length;for (i=0;i<z;i++) {a=x[i]; if (a.getAttribute('data-testid')=='FixedDataTableRow') {y=y.concat(a);}};b = y.length; for (i=0;i<b;i++) {a = y[i];c = a.getElementsByClassName('_4h2m');console.log(c.length);d = c[0]; d.style.width = '40px'; d.style.left = '0px';d = c[1]; d.style.width = '40px'; d.style.left = '40px';d = c[2]; d.style.width = '160px'; d.style.left = '80px';d = c[3]; d.style.width = '100px'; d.style.left = '0px';d = c[4]; d.style.width = '100px'; d.style.left = '100px';d = c[5]; d.style.width = '100px'; d.style.left = '200px';d = c[6]; d.style.width = '100px'; d.style.left = '300px';d = c[7]; d.style.width = '100px'; d.style.left = '400px';d = c[8]; d.style.width = '100px'; d.style.left = '500px';d = c[9]; d.style.width = '100px'; d.style.left = '600px';d = c[10]; d.style.width = '100px'; d.style.left = '700px';d = c[11]; d.style.width = '100px'; d.style.left = '800px';d = c[12]; d.style.width = '100px'; d.style.left = '900px';d = c[13]; d.style.width = '100px'; d.style.left = '1000px';d = c[14]; d.style.width = '100px'; d.style.left = '1100px';d = c[15]; d.style.width = '100px'; d.style.left = '1200px';d = c[16]; d.style.width = '100px'; d.style.left = '1300px';d = c[17]; d.style.width = '100px'; d.style.left = '1400px';e = a.getElementsByClassName('_3pzk');f = e[1]; f.style.width = '241px'; f.style.left = '241px';}; x = document.getElementsByClassName('_1mic')[0]; y = x.getElementsByClassName('_4h2m'); z = y[0]; z.style.width = '40px'; z.style.left = '0px'; z = y[1]; z.style.width = '40px'; z.style.left = '40px'; z = y[2]; z.style.width = '160px'; z.style.left = '80px'; z = y[3]; z.style.width = '100px'; z.style.left = '0px'; z = y[4]; z.style.width = '100px'; z.style.left = '100px'; z = y[5]; z.style.width = '100px'; z.style.left = '200px'; z = y[6]; z.style.width = '100px'; z.style.left = '300px'; z = y[7]; z.style.width = '100px'; z.style.left = '400px'; z = y[8]; z.style.width = '100px'; z.style.left = '500px'; z = y[9]; z.style.width = '100px'; z.style.left = '600px'; z = y[10]; z.style.width = '100px'; z.style.left = '700px'; z = y[11]; z.style.width = '100px'; z.style.left = '800px'; z = y[12]; z.style.width = '100px'; z.style.left = '900px'; z = y[13]; z.style.width = '100px'; z.style.left = '1000px'; z = y[14]; z.style.width = '100px'; z.style.left = '1100px'; z = y[15]; z.style.width = '100px'; z.style.left = '1200px'; z = y[16]; z.style.width = '100px'; z.style.left = '1300px'; z = y[17]; z.style.width = '100px'; z.style.left = '1400px'; e = x.getElementsByClassName('_3pzk'); f = e[1]; f.style.width = '241px'; f.style.left = '241px'; x = document.getElementsByClassName('_1mme')[0]; y = x.getElementsByClassName('_1eyi'); z = y[0]; z.style.width = '40px'; z.style.left = '0px'; z = y[1]; z.style.width = '40px'; z.style.left = '40px'; z = y[2]; z.style.width = '160px'; z.style.left = '80px'; z = y[3]; z.style.width = '100px'; z.style.left = '0px'; z = y[4]; z.style.width = '100px'; z.style.left = '100px'; z = y[5]; z.style.width = '100px'; z.style.left = '200px'; z = y[6]; z.style.width = '100px'; z.style.left = '300px'; z = y[7]; z.style.width = '100px'; z.style.left = '400px'; z = y[8]; z.style.width = '100px'; z.style.left = '500px'; z = y[9]; z.style.width = '100px'; z.style.left = '600px'; z = y[10]; z.style.width = '100px'; z.style.left = '700px'; z = y[11]; z.style.width = '100px'; z.style.left = '800px'; z = y[12]; z.style.width = '100px'; z.style.left = '900px'; z = y[13]; z.style.width = '100px'; z.style.left = '1000px'; z = y[14]; z.style.width = '100px'; z.style.left = '1100px'; z = y[15]; z.style.width = '100px'; z.style.left = '1200px'; z = y[16]; z.style.width = '100px'; z.style.left = '1300px'; z = y[17]; z.style.width = '100px'; z.style.left = '1400px'; e = x.getElementsByClassName('_182x'); f = e[1]; f.style.left = '241px'; x = document.getElementsByClassName('_1mme')[0]; y = x.getElementsByClassName('_4h2m'); z = y[0]; z.style.width = '40px'; z = y[1]; z.style.width = '40px'; z = y[2]; z.style.width = '160px'; z = y[3]; z.style.width = '100px'; z = y[4]; z.style.width = '100px'; z = y[5]; z.style.width = '100px'; z = y[6]; z.style.width = '100px'; z = y[7]; z.style.width = '100px'; z = y[8]; z.style.width = '100px'; z = y[9]; z.style.width = '100px'; z = y[10]; z.style.width = '100px'; z = y[11]; z.style.width = '100px'; z = y[12]; z.style.width = '100px'; z = y[13]; z.style.width = '100px'; z = y[14]; z.style.width = '100px'; z = y[15]; z.style.width = '100px'; z = y[16]; z.style.width = '100px'; z.style.left = '1300px'; z = y[17]; z.style.width = '100px'; z.style.left = '1400px'; e = x.getElementsByClassName('_3pzk'); f = e[1]; f.style.width = '241px'; f.style.left = '241px';")
      time.sleep(0.2)
  def adsFeed(self, date_range=100, bd=True, filters=None):
    print("FEEDING ADSETS")
    self.ff = Browser()("sele", window_index=[0,0,4,4])
    url = format_url(self, date_range, bd, filters)
    self.ff.get(url)
    self.ff.fcss('._2a2d').click(); zz(6)
    try: adms = CSV().DictRead(time_a_download(method=self.ff.ffs('button','action','confirm').click))
    except: adms = CSV().DictRead(time_a_download(method=self.ff.fcn('layerConfirm').click))
    print('adms: %s'%adms)
    if 'No data available' in str(adms):
      print("no adsets")
      return []
    adms = [i for i in adms if i['Ad Set ID'] != '' and i['Ad Set Name'] != None and 'DPA' not in i['Ad Set Name']]
    for adm in adms:
      for a in adm:
        if adm[a] == '' or adm[a] == None:
          adm[a] = 0
      # adm['data'] = eval(adm['Ad Set Name'])
      adm['spent'] = float(adm['Amount Spent (USD)'])
      adm['pcv'] = float(adm['Website Purchases Conversion Value'])
      adm['pcs'] = float(adm['Website Purchases'])
      adm['cpc'] = float(adm['CPC (Cost per Link Click) (USD)'])
      adm['clicks'] = float(adm['Link Clicks'])
      adm['roi'] = float(adm['pcv']) / float(adm['spent']) if adm['spent'] != 0 else 0
    """
    print("...feedAudience...")
    for x in Audience.objects.all():
      x.pcs = 0
      x.roi = 0
      x.spent = 0.01
      x.pcv = 0
      
      matching_audiences = [i for i in adms if i['data']['audname'] == x.name]
      x.pcs += sum(key(matching_audiences, 'pcs'))
      x.spent += sum(key(matching_audiences, 'spent'))
      x.pcv += sum(key(matching_audiences, 'pcv'))
      x.roi += x.pcv / x.spent
      x.save()
    print("...feedProduct...")
    for x in Product.objects.all():
      x.pcs = 0
      x.roi = 0
      x.spent = 0.01
      x.pcv = 0
      
      x.pcs = sum([i['pcs'] for i in adms if i['data']['handle'] == x.handle])
      x.spent += sum([i['spent'] for i in adms if i['data']['handle'] == x.handle])
      x.pcv = sum([i['pcv'] for i in adms if i['data']['handle'] == x.handle])
      x.roi = x.pcv / x.spent
      print(x.pcs, x.spent, x.pcv, x.roi)
      x.save()
    """

    self.adms = adms
    self.ff.quit()
    return self.adms
  def advertise():
    storeabbre = input("what store abbre?: ")
    shop = Shop()( storeabbre)
    BASE_ADSET_DICTIONARY = {'Ad ID': '','Ad Name': 'test','Ad Set Daily Budget': '5','Ad Set ID': '','Ad Set Lifetime Budget': '0','Ad Set Lifetime Impressions': '0','Ad Set Name': 'test','Ad Set Run Status': 'ACTIVE','Ad Set Schedule': '','Ad Set Time Start': '%s 2:00:00 am' % Date().dt(1, '%m/%d/%Y'),'Ad Set Time Stop': '','Ad Status': 'ACTIVE','Add End Card': '','Additional Custom Tracking Specs': '[]','Addresses': '','Age Max': '65','Age Min': '18','Android App Name': '','Android Package Name': '','App Destination': '','Application ID': '','Attribution Spec': '[{"event_type":"CLICK_THROUGH","window_days":7},{"event_type":"VIEW_THROUGH","window_days":1}]','Audience Network Positions': 'classic','Automatically Set Bid': 'Yes','Behaviors': '','Bid Amount': '','Billing Event': 'IMPRESSIONS','Body': '','Broad Category Clusters': '','Buying Type': 'AUCTION','Call to Action': '','Call to Action Link': '','Campaign ID': '','Campaign KPI': '','Campaign KPI Custom Conversion ID': '','Campaign Name': 'test','Campaign Objective': 'Conversions','Campaign Page ID': '','Campaign Spend Limit': '','Campaign Status': 'ACTIVE','Cities': '','College End Year': '','College Start Year': '','Connections': '','Conversion Tracking Pixels': 'tp:141019342913259','Countries': 'US','Creative Optimization': '','Creative Type': 'Photo Page Post Ad','Custom Audiences': '','Deep Link For Android': '','Deep Link For Windows Phone': '','Deep Link For iOS': '','Deep Link For iPad': '','Deep Link For iPhone': '','Deep link to website': '','Destination Type': 'UNDEFINED','Device Platforms': 'mobile, desktop','Display Link': '','Dynamic Ad Voice': '','Education Schools': '','Education Status': '','Electoral Districts': '','Event ID': '','Excluded Addresses': '','Excluded Cities': '','Excluded Connections': '','Excluded Countries': '','Excluded Custom Audiences': '','Excluded Electoral Districts': '','Excluded Geo Markets (DMA)': '','Excluded Global Regions': '','Excluded Product Audience Specs': '','Excluded Publisher Categories': '','Excluded Regions': '','Excluded User AdClusters': '','Excluded User Device': '','Excluded Zip': '','Facebook App ID': '','Facebook Positions': 'feed, right_hand_column','Family Statuses': '','Fields of Study': '','Flexible Exclusions': '','Flexible Inclusions': '[{"interests":[{"id":"6003324061606","name":"Audrey Hepburn"},{"id":"6003347600674","name":"Katharine Hepburn"},{"id":"6003392991271","name":"Rockabilly"},{"id":"6011957502962","name":"www.rockabilly-clothing.de"},{"id":"6013806088087","name":"Viva Las Vegas Rockabilly Weekend"}]}]','Force Single Link': '','Frequency Control': '','Friends of Connections': '','Gender': '','Generation': '','Geo Markets (DMA)': '','Global Regions': '','Home Ownership': '','Home Type': '','Home Value': '','Household Composition': '','Image': '83824348246.jpg','Image Crops': '','Image Hash': '','Image Overlay Float With Margin': '','Image Overlay Position': '','Image Overlay Template': '','Image Overlay Text Font': '','Image Overlay Text Type': '','Image Overlay Theme Color': '','Income': '','Industries': '','Instagram Account ID': '','Instagram Platform Image Crops': '','Instagram Platform Image Hash': '','Instagram Platform Image URL': '','Instagram Positions': '','Instagram Preview Link': '','Interested In': '','Lead Form ID': '','Life Events': '','Link': 'https://www.facebook.com/steampunkstop/photos/p.1998717263718262/1998717263718262/?type=3','Link Description': 'Auxiliary. We’ve Scourged Hotspots Of The Earth Mercilessly With Grandiose Detectors And Finally Our SteamBots Have Enchanted The Auxiliary Dress With Magnetic Seals To Affix Protection Spirits To It Permanently.\nClick Below 👇\nsteampunkstop.com/auxiliary','Link Object ID': 'o:1669573053299353','Locales': '','Location Types': 'home, recent','Messenger Positions': '','Mobile App Deep Link': '','Moms': '','Multicultural Affinity': '','Net Worth': '','Object Store URL': '','Offer ID': '','Office Type': '','Optimization Goal': 'OFFSITE_CONVERSIONS','Optimized Conversion Tracking Pixels': 'tp:141019342913259','Optimized Custom Conversion ID': '','Optimized Event': 'PURCHASE','Optimized Pixel Rule': '','Page Welcome Message': '','Permalink': 'https://business.facebook.com/1669573053299353/posts/1998717263718262?business_id=560484760766872','Place Page Set ID': '','Politics': '','Post Click Item Description': '','Post Click Item Headline': '','Preview Link': 'https://www.facebook.com/?feed_demo_ad=6095601486324&h=AQDKS_Ci6KEDEOCa','Product 1 - Description': '','Product 1 - Display Link': '','Product 1 - Image Crops': '','Product 1 - Image Hash': '','Product 1 - Is Static Card': '','Product 1 - Link': '','Product 1 - Mobile App Deep Link': '','Product 1 - Name': '','Product 1 - Place Data': '','Product 1 - Video ID': '','Product 10 - Description': '','Product 10 - Display Link': '','Product 10 - Image Crops': '','Product 10 - Image Hash': '','Product 10 - Is Static Card': '','Product 10 - Link': '','Product 10 - Mobile App Deep Link': '','Product 10 - Name': '','Product 10 - Place Data': '','Product 10 - Video ID': '','Product 2 - Description': '','Product 2 - Display Link': '','Product 2 - Image Crops': '','Product 2 - Image Hash': '','Product 2 - Is Static Card': '','Product 2 - Link': '','Product 2 - Mobile App Deep Link': '','Product 2 - Name': '','Product 2 - Place Data': '','Product 2 - Video ID': '','Product 3 - Description': '','Product 3 - Display Link': '','Product 3 - Image Crops': '','Product 3 - Image Hash': '','Product 3 - Is Static Card': '','Product 3 - Link': '','Product 3 - Mobile App Deep Link': '','Product 3 - Name': '','Product 3 - Place Data': '','Product 3 - Video ID': '','Product 4 - Description': '','Product 4 - Display Link': '','Product 4 - Image Crops': '','Product 4 - Image Hash': '','Product 4 - Is Static Card': '','Product 4 - Link': '','Product 4 - Mobile App Deep Link': '','Product 4 - Name': '','Product 4 - Place Data': '','Product 4 - Video ID': '','Product 5 - Description': '','Product 5 - Display Link': '','Product 5 - Image Crops': '','Product 5 - Image Hash': '','Product 5 - Is Static Card': '','Product 5 - Link': '','Product 5 - Mobile App Deep Link': '','Product 5 - Name': '','Product 5 - Place Data': '','Product 5 - Video ID': '','Product 6 - Description': '','Product 6 - Display Link': '','Product 6 - Image Crops': '','Product 6 - Image Hash': '','Product 6 - Is Static Card': '','Product 6 - Link': '','Product 6 - Mobile App Deep Link': '','Product 6 - Name': '','Product 6 - Place Data': '','Product 6 - Video ID': '','Product 7 - Description': '','Product 7 - Display Link': '','Product 7 - Image Crops': '','Product 7 - Image Hash': '','Product 7 - Is Static Card': '','Product 7 - Link': '','Product 7 - Mobile App Deep Link': '','Product 7 - Name': '','Product 7 - Place Data': '','Product 7 - Video ID': '','Product 8 - Description': '','Product 8 - Display Link': '','Product 8 - Image Crops': '','Product 8 - Image Hash': '','Product 8 - Is Static Card': '','Product 8 - Link': '','Product 8 - Mobile App Deep Link': '','Product 8 - Name': '','Product 8 - Place Data': '','Product 8 - Video ID': '','Product 9 - Description': '','Product 9 - Display Link': '','Product 9 - Image Crops': '','Product 9 - Image Hash': '','Product 9 - Is Static Card': '','Product 9 - Link': '','Product 9 - Mobile App Deep Link': '','Product 9 - Name': '','Product 9 - Place Data': '','Product 9 - Video ID': '','Product Audience Specs': '','Product Catalog ID': '','Product Link': '','Product Set ID': '','Publisher Platforms': 'facebook, audience_network','Rate Card': '','Regions': '','Relationship': '','Retailer IDs': '','Site Category': '','Story ID': '','Tags': '','Targeted Business Locations': '','Targeting Categories - ALL OF': '','Targeting Optimization': '','Template URL': '','Title': '','URL Tags': '','Unified Interests': '','Use Accelerated Delivery': 'No','Use Average Bid': 'No','Use Page as Actor': 'No','User Device': '','User OS Version': '','User Operating System': '','Video ID': '','Video Retargeting': 'No','Video Thumbnail URL': '','Windows App Name': '','Windows Store ID': '','Wireless Carrier': '','Work Employers': '','Work Job Titles': '','Zip': '','iOS App Name': '','iOS App Store ID': '','iPad App Name': '','iPad App Store ID': '','iPhone App Name': '','iPhone App Store ID': ''}




    DICTIONARYS_FOR_CSV = []






    products_csv=os.path.expanduser('~/tavern/tavern/products.csv')
    PRODUCTS_ROWS_DICTIONARYS = CSV().DictRead(products_csv)


    products = productsFeed(shop)
    FULL_EXTENSION_FILENAMES = []
    for ROW in PRODUCTS_ROWS_DICTIONARYS:

      if ROW["advertise?"] == "TRUE":
        p = [i for i in products if i["title"] == ROW["title"]][-1]
        p = shop.shopify.Product.find(id_=p['id'])




        caption = create_caption(p, shop, ROW['caption'], ROW["shopify_url"])



        NEW_DATA = copy.deepcopy(BASE_ADSET_DICTIONARY)
        NEW_DATA["Flexible Inclusions"] = ""
        NEW_DATA['Campaign Name'] = p.handle
        NEW_DATA['Ad Set Name'] = caption.replace("\n", " ")
        NEW_DATA['Ad Name'] = NEW_DATA['Ad Set Name']
        NEW_DATA['Display Link'] = caption
        NEW_DATA['Title'] = caption
        NEW_DATA['Body'] = caption
        NEW_DATA['Post Click Item Headline'] = caption
        NEW_DATA['Description'] = caption

        try:
          variant_id = int(ROW["shopify_url"].split("variant=")[-1])

          print("variant id: %s" )


          ############ FINDING MATCHING IMAGE FROM PRODUCT IMAGES BASED ON VARIANT ID

          img_id = None
          for i in p.variants:
            if i.id == variant_id:
              img_id = i.image_id
              print("Found matching img_id to URL %s" % url)
          variant_src = None
          for i in p.images:
            if i.id == img_id:
              variant_src = i.src
              print("Found matching variant_id to img_id.. %s" % variant_src)
          fn = None
          if variant_src is not None:
            fn = Images().download_and_resize(variant_src, 1200)
          if img_id is None: # this is in the case its a "1 Title Product"
            fn = Images().download_and_resize(p.image.src, 1200)
          print("image filename for the variant: %s" % fn)
          FULL_EXTENSION_FILENAMES.append(fn)
          NEW_DATA['Image'] = fn.split('/')[-1]

          pprint(NEW_DATA)

          DICTIONARYS_FOR_CSV.append(NEW_DATA)
        except Exception as e:
          print("error with possibly probably - the product has 0 variants and thus variantless URL, error:\n%s"% e )




    tmp_file = os.path.expanduser("~/tmp.csv")
    CSV().DictWrite(tmp_file, DICTIONARYS_FOR_CSV)

    ss = Browser()("sele")
    if not Get(Shop,shop_abbreviation=Muta()().store_abbre).Facebook_Business_Manager_ID:
      Update(Get(Shop,shop_abbreviation=Muta()().store_abbre),Facebook_Business_Manager_ID=OSA.log("Enter in the Facebook Business Manager ID. You can usually find it in the url like business_id=<Business ID>."))

    ss.get("https://business.facebook.com/ads/manage/powereditor/manage/campaigns?act={}&business_id={}&columns=start_time%2Ccampaign_group_name%2Cname%2Ccampaign_id%2Cimpressions%2Cfrequency%2Ccpm%2Cclicks%2Cctr%2Cactions%3Alink_click%2Ccost_per_action_type%3Alink_click%2Cspend%2Caction_values%3Aoffsite_conversion.fb_pixel_purchase%2Cactions%3Aoffsite_conversion.fb_pixel_purchase%2Ccost_per_action_type%3Aoffsite_conversion.fb_pixel_purchase%2Cactions%3Aoffsite_conversion.checkout%2Ccost_per_action_type%3Aoffsite_conversion.checkout%2Cbudget%2Crelevance_score%3Ascore%2Cwebsite_purchase_roas%3Aoffsite_conversion.fb_pixel_purchase&attribution_windows=default&date=2005-02-01_2017-12-31%2Clifetime".format(Get(Shop,shop_abbreviation=Muta()().store_abbre).Facebook_Business_Ad_Account_ID, Get(Shop,shop_abbreviation=Muta()().store_abbre).Facebook_Business_Manager_ID))
    
    #""" # OLD WITH FIREFOX
    try:
      ss.ffs('button','data-tooltip-content','Create & Edit in a Spreadsheet').click()
    except:
      ss.ffs('button','data-tooltip-content','Export & import').click()
    ss.ffss('li','role','presentation')[-2].click()
    ss.ffs('input','data-testid','import-paste-text-link').send_keys(tmp_file)
    IMAGE_UPLOAD_BUTTON = ss.ffs('input','accept','image/jpg, image/jpeg, image/gif, image/bmp, image/png, image/tiff, image/tif')

    for x in FULL_EXTENSION_FILENAMES:
      IMAGE_UPLOAD_BUTTON.send_keys(x)


    ss.ffs('button','data-testid','import-button').click()
    #"""
    while True:
      if "Your import is complete" in ss.page_source:
        time.sleep(3)
        break
    ss.quit()
    # advertise(url, p, caption)
  def alter_redirect(shop_abbreviation, previous_path, new_path, new_target):
    redirects = get_redirects(Shop()(shop_abbreviation))
    redirect = [i for i in redirects if i.path == previous_path][0]
    redirect.path = new_path
    redirect.target = new_target
    assert True == redirect.save()
    assert requests.get("%s%s"%(Shop()(shop_abbreviation).Domain_Name,new_path)).url==new_target
  def caption_tee():
    caption_to_tee = multi_input("caption to tee: ")
    os.system("echo '============================\n%s\n\n============================' | tee -a ./.teed_captions.txt" % caption_to_tee)
  def check_remaining():
    page_name = OSA.log("Page name?")
    OSA.log("%s"%(len(get_scheduled_posts(page_name))))
  def cloaker(io=None, direction=None):
    """ ::: Initiate Shop ::: """
    a_shop()
    """ ::: If you use July_Adset_Utilities to update all adset targeting data, to ::: """
    """ ::: Get the most accurate adset effective_status data, it's the same as ::: """
    """ ::: requesting all adset_ids in database, checking if active status, (to change adset name)::: """
    """ ::: So here I update adset targeting data  ///actually at direction==1.\\\::: """
    if direction == 0:
      import builtins
      if type(io) == builtins.dict:
        for adset_id,adset_name in io.items():
          AdSet(adset_id).remote_update(params={"name":adset_name})
          magentaprint(AdSet(adset_id).remote_read(fields=["name"])._json)
    elif direction == 1:
      July_Adset_Utilities().update_adset_targeting_data()
      dict = {}
      for adset in Filter(Adset,status="ACTIVE"):
        name = None
        try:
          name = AdSet(adset.adset_id).remote_read(fields=["name"])._json["name"]
        except Exception as e:
          redprint(e)
          continue
        redprint(adset.adset_id, name)
        dict[adset.adset_id] = name
        AdSet(adset.adset_id).remote_update(params={"name":"0000"})
      return dict
  def createCreative(shop, fn, fb_page_id, caption):
    image = AdImage(parent_id='act_%s'%shop.Facebook_Business_Ad_Account_ID)
    image[AdImage.Field.filename] = fn
    image.remote_create()
    # Output image Hash
    print("hash: %s" % image[AdImage.Field.hash])
    photo_data = AdCreativePhotoData()
    photo_data['image_hash'] = image['hash']
    photo_data['caption'] = caption
    object_story_spec = AdCreativeObjectStorySpec()
    object_story_spec[AdCreativeObjectStorySpec.Field.page_id] = fb_page_id
    object_story_spec[AdCreativeObjectStorySpec.Field.photo_data] = photo_data
    creative = AdCreative(parent_id='act_%s'%shop.Facebook_Business_Ad_Account_ID)
    creative[AdCreative.Field.name] = 'AdCreative %s' % random.randrange(0, 10**10)
    creative[AdCreative.Field.object_story_spec] = object_story_spec
    creative.remote_create()
    print(creative)
    return creative
  def create_ad(product=None,variant_id=None,store_abbre=None,niche=None,page=None,caption=None):
    short_url = create_redirect(Shop()(Muta()().store_abbre), path=("/%s"%(get_handle_from_title(product.title))), target=("%s/products/%s%s"%(Shop()(Muta()().store_abbre).Domain_Name,get_handle_from_title(product.title),("?variant=%s"%(or_list(variant_id,product.variants[0].id)) ))))
    # OSA.log("C")
    caption = caption.replace("<redirect_url>",short_url)
    # OSA.log("D")
    url = None
    if variant_id == None:
      url = product.images[0].src
    else:
      # OSA.log("%s %s"%(variant_id,type(product)))
      # variant = [i for i in product.variants if i.id == variant_id][0]
      # variant_image_id = variant.image_id
      # image = [i for i in product.images if i.id == variant_image_id][0]
      # image_src = image.src
      # if image_src == None:
      #   # 1
      #   image_src = product.images[0].src
      image_src = or_list(lambda:[j.src for j in product.images if j.id == [i for i in product.variants if i.id == variant_id][0]],lambda:product.images[0].src)
      url = image_src
    campaign_id, adset_id = AdsetCreater()(fbid=Shop()(Muta()().store_abbre).Facebook_Business_Ad_Account_ID,url=url,caption=caption,page_id=[i for i in get_pages() if i["name"] == Muta()().page][0]["id"],interest_ids=[])
    # OSA.log("E")
    Save(Adset, campaign_id=campaign_id, adset_id=adset_id, ad_account_id=Shop()(Muta()().store_abbre).Facebook_Business_Ad_Account_ID, is_created=True, handle=product.handle, niche=Muta()().niche, shop_abbreviation=Muta()().store_abbre, facebook_page=Muta()().page, product_url=short_url, image_url=product.images[0].src, caption=caption, interest_ids=[])
    # OSA.log("F")
    Update(product,adset_id=adset_id)
    # OSA.log("G")
    # OSA.log(str(adset_id))
    July_Adset_Utilities().update_advertisement_all(adset_id)
    # OSA.log("H")
    pool(lambda:OSA().log("adset created",tp=False))
  def create_redirect(shop, path, target):
    path = path.lower().strip()
    target = target.lower().strip()

    redirect = shop.shopify.Redirect()
    # redirects = sum([shop.shopify.Redirect.find(status="any", limit=250, page=i) for i in range(1,10)],[])
    redirects = shop.shopify.Redirect.find(path=path)
    if path in key("path", redirects):
      x = [i for i in redirects if i.path == path]
      redirect = x[0]
      print("changing existing redirect of %s to %s"% (redirect.target, target))

    redirect.path = path
    redirect.target = target
    if not redirect.target.startswith("https://"): redirect.target = "https://%s"%redirect.target
    # [3/28/19] https:// required
    assert True == redirect.save()

    distinct_print("%s -----> %s" % (redirect.path, redirect.target))

    x = (shop.Domain_Name + redirect.path).replace("https://","").replace("http://","")
    return x
  def export_a_video():
    shop, handle = OSA.log("Please enter the shop abbreviation and handle, separated by ', ', [for example: xyz, wall-decal]").split(", ")
    export_address = OSA.log("Please enter the address to export the video to [for example: /Users/user/video.mp4]")
    product = Get(Product,shop=shop,handle=handle)
    video = Get(Video,product_id = product.id)
    open(export_address,"wb").write(video.video)
  def format_url(self, date_range, bd, filters):
    dates = '&date=%s_%s' % (Date().dt(date_range*-1), Date().dt(0))
    day_bd_url = 'https://business.facebook.com/ads/manager/account/adsets/?act='+self.Facebook_Business_Ad_Account_ID+dates+'&time_breakdown=days_1&columns=["start_time"%2C"campaign_group_name"%2C"name"%2C"campaign_id"%2C"impressions"%2C"frequency"%2C"cpm"%2C"clicks"%2C"ctr"%2C"actions%3Alink_click"%2C"cost_per_action_type%3Alink_click"%2C"spend"%2C"action_values%3Aoffsite_conversion.fb_pixel_purchase"%2C"actions%3Aoffsite_conversion.fb_pixel_purchase"%2C"cost_per_action_type%3Aoffsite_conversion.fb_pixel_purchase"%2C"actions%3Aoffsite_conversion.checkout"%2C"cost_per_action_type%3Aoffsite_conversion.checkout"%2C"budget"%2C"relevance_score%3Ascore"]&sort=cost_per_action_type%3Aoffsite_conversion.fb_pixel_purchase~1|delivery_info~1|spent~0|start_time~0&pid=p1'
    if bd==False:
      day_bd_url = day_bd_url.replace('&time_breakdown=days_1', '')
    if filters == 'paused':
      day_bd_url += '&filter_set=[{%22field%22%3A%22campaign.delivery_info%22%2C%22operator%22%3A%22IN%22%2C%22value%22%3A[%22inactive%22]}]'
    if filters == 'active':
      day_bd_url += '&filter_set=[{%22field%22%3A%22campaign.delivery_info%22%2C%22operator%22%3A%22IN%22%2C%22value%22%3A[%22active%22%2C%22limited%22]}]'
    return day_bd_url
  def gen_adset_name(niche,audname,handle,budget)    :
    return str(OrderedDict([('niche',niche), ('audname',audname), ('handle',handle),
                            ('budget',budget) ]))
  def get_next_scheduled_time(page,scheduled_posts):
    times_to_schedule = page.publish_times
    max_scheduled_time = or_list(lambda:max(sud("scheduled_publish_time",scheduled_posts)),lambda:Date()().replace(hour=times_to_schedule[-1]))
    max_scheduled_time_hour = max_scheduled_time.hour
    max_scheduled_time_date = max_scheduled_time
    max_scheduled_time_second = max_scheduled_time.second
    latest = times_to_schedule[-1]
    next_scheduled_time_hour = None
    next_scheduled_time_date = None
    if max_scheduled_time_hour == latest:
      next_scheduled_time_hour = times_to_schedule[0]
    else:
      index = times_to_schedule.index(max_scheduled_time_hour)
      next_index = index + 1
      next_scheduled_time_hour = times_to_schedule[next_index]
    if max_scheduled_time_hour == latest:
      next_scheduled_time_date = (Date(max_scheduled_time_date)+1)()
    else:
      next_scheduled_time_date = Date(max_scheduled_time_date)()
    next_scheduled_time = next_scheduled_time_date.replace(hour=next_scheduled_time_hour,second=max_scheduled_time_second)
    next_scheduled_time_timestamp = int(timestamp(next_scheduled_time))
    return next_scheduled_time_timestamp
  def get_next_scheduled_times(page,publish_times,start_date,count):
    all_data = []
    page = Get(Facebookpage,name=page)
    start_idx = 0
    for i in range(count):
      new = start_date.replace(hour=publish_times[start_idx])
      start_idx = start_idx + 1
      if start_idx+1 > len(publish_times):
        start_idx = 0
        start_date = start_date + timedelta(days=1)
      all_data.append(new)
    return all_data
  def get_pages():
    Shop()(All(Shop)[0].shop_abbreviation) # set the api
    user = get_user()
    pages = keycall("export_all_data", user.get_accounts(params={"limit":5000}))
    [tryprocess(Facebookpage(facebook_id=i["id"],name=i["name"],url="https://facebook.com/%s"%i["id"]).save,) for i in pages]
    [Update(Get(Facebookpage,facebook_id=i["id"]),token=i["access_token"]) for i in pages]
    [Update(Get(Facebookpage,facebook_id=i["id"]),publish_times = [14,19]) for i in pages]
    [Del(i) for i in All(Facebookpage) if i.name not in sud("name",pages)]
    return pages
  def get_post_reactions(page_name, post_id):
    page = Get(Facebookpage, name = page_name)
    url = "https://graph.facebook.com/%s/reactions"%(post_id)
    token = page.token
    params = {"access_token":token, "fields":["total_count"],"summary":"total_count"}
    r = requests.get(url, params = params)
    data = json.loads(r.text)
    total_count = data["summary"]["total_count"]
    return total_count
  def get_posted_posts(page_name):
    page = Get(Facebookpage, name = page_name)
    facebook_id = page.facebook_id
    url = "https://graph.facebook.com/%s/feed"%(facebook_id)
    token = page.token
    params = {"access_token":token, "fields":["created_time","message","id"], "limit":100}
    r = requests.get(url, params = params)
    all_data = []
    data = json.loads(r.text)["data"]
    all_data.extend(data)
    response = json.loads(r.text)
    while "next" in response.get("paging",[]):
      next_url = response["paging"]["next"]
      r = requests.get(next_url)
      response = json.loads(r.text)
      data = json.loads(r.text)["data"]
      all_data.extend(data)
    return all_data
  def get_promoted_object():
    promoted_object = {    "custom_event_type": "PURCHASE",     "pixel_id": str(Shop()(adset_to_create.shop_abbreviation).Facebook_Pixel_ID),    "pixel_rule": "{\"event\":{\"eq\":\"Purchase\"}}"    }
    return promoted_object
  def get_redirect_from_ad_copy(ad_copy):
    return re.findall(r"[:/a-zA-Z0-9]+\.[/a-zA-Z0-9-]+",body)
  def get_redirects(shop):
    redirects = sum([shop.shopify.Redirect.find(status="any", limit=250, page=i) for i in range(1,10)],[])
    return redirects
  def get_scheduled_posts(page_name):
    page = Get(Facebookpage, name = page_name)
    facebook_id = page.facebook_id
    url = "https://graph.facebook.com/%s/scheduled_posts"%(facebook_id)
    token = page.token
    params = {"access_token":token, "fields":["scheduled_publish_time"], "limit":100}
    r = requests.get(url, params = params)
    all_data = []
    data = json.loads(r.text)["data"]
    all_data.extend(data)
    response = json.loads(r.text)
    while "next" in response.get("paging",[]):
      next_url = response["paging"]["next"]
      r = requests.get(next_url)
      response = json.loads(r.text)
      data = json.loads(r.text)["data"]
      all_data.extend(data)
    [setitem(i,"scheduled_publish_time",timestamp(i["scheduled_publish_time"],False)) for i in all_data]
    return all_data
  def get_url_from_body(x):
    return getitem(re.findall(".*/.*",x),0,"None").split(" ")[-1]
  def get_user():
    a_shop()
    from facebookads.adobjects.user import User
    api = FacebookAdsApi.init(app_id=a_shop().Facebook_Business_App_ID,app_secret=a_shop().Facebook_Business_App_Secret,access_token=a_shop().Facebook_Business_App_Token)
    return User(fbid="me", api=api)
  def print_sorted_audiences():
    auds = Audience.objects.all()
    auds = keysort('pcs', auds, tcer=True)
    CSV().csvprint(auds, colnames=['pcs','roi','spent','pcv', 'name', 'niche', 'id'])
  def print_targeting_data(data):
    print("Targeting DATA for adset:\n\
            1. Age Min: %s\n\
            2. Age Max: %s\n\
            3. Gender: %s\n\
            4. Pixel Goals: %s\n\
            5. Attribution Spec: %s\n\
            6. Device Platforms: %s\n\
            7. Publisher Platforms: %s\n\
            8. Targeting Optimization: %s\n"%(data['targeting']['age_min'], data['targeting']['age_max'],
                                            data['targeting']['genders'], data['promoted_object']['custom_event_type'],
                                            data['attribution_spec'][0]['window_days'], data['targeting']['device_platforms'],
                                            data['targeting']['publisher_platforms'], data['targeting']['targeting_optimization']))
  def run():
    products_csv=os.path.expanduser('~/tavern/tavern/products.csv')
    data = CSV().DictRead(products_csv)
    shop = Shop()(All(Shop)[0].shop_abbreviation)

    # dicts = []
    for i in data:
      if i['added'] == "FAILED":
        products = productsFeed(shop)
        for j in products:
          if j.title == i['title']:
            j.delete()
      if i['added'] == 'FALSE':
        p = Aliexpress_Products().create_product(i['url'].split('?')[0], i['niche'], i['item_type'], i['title'], i['description'])
        input("Adjust Images, State / Add to Body - ")
        url = input("Input URL: ")
        p = shop.shopify.Product.find(id_=p.id)
        caption = create_caption(p, shop, i['caption'], url)
        advertise(url, p, caption)


    print("Added items \n\n")
  def s():
    a_shop()
  def t_format_ids(ids):
    return [{"interests": [{'id':i} for i in ids]}]
  def t_format_resp(resp):
    payload = []
    for i in resp:
      if i.get('valid',True) == True:
        payload.append({'id':i['id'], 'audience_size':i['audience_size'],'name':i['name'],
                        'category':i.get('disambiguation_category',''), 'topic':i.get('topic','')})
    return payload
  def t_reach_estimate(shop, ids=None):
    account = AdAccount('act_%s'%shop.Facebook_Business_Ad_Account_ID)
    t_spec = {'age_max': 65,
             'age_min': 18,
             'audience_network_positions': ['classic', 'instream_video', 'rewarded_video'],
             'device_platforms': ['mobile', 'desktop'],
             'facebook_positions': ['feed', 'right_hand_column', 'instant_article'],
             'geo_locations': {'countries': ['US'], 'location_types': ['home']},
             'publisher_platforms': ['facebook', 'audience_network'],
             'targeting_optimization': 'none',
             'flexible_spec': []
             }
    # added this 2nd t_spec in as this is how based on 10/2018 targeting was by default
    t_spec = {'age_max': 65,
             'age_min': 18,
             #'audience_network_positions': ['classic', 'instream_video', 'rewarded_video'],
             'device_platforms': ['mobile'],
             'facebook_positions': ['feed'],
             'geo_locations': {'countries': ['US'],},
             'publisher_platforms': ['facebook'],
             'targeting_optimization': 'none',
             'flexible_spec': []
             }
    if ids:
      t_spec['flexible_spec'] = t_format_ids(ids)
    params = {
        #'currency': 'USD',
        #'optimize_for': AdSet.OptimizationGoal.offsite_conversions,
        'targeting_spec': t_spec, }
    reach_estimate = account.get_reach_estimate(params=params)
    return reach_estimate[0]["users"]
  def t_search(q,limit=10000):
    resp = TargetingSearch.search(params={'q':q,'type':'adinterest','limit':limit})
    return t_format_resp(resp)
  def t_suggestion(names):
    resp = TargetingSearch.search(params={'interest_list':list(names), 'type':'adinterestsuggestion', 'limit':10000})
    return t_format_resp(resp)
  def update_adset_names_from_body_url():
    a_shop()
    for adset in Adset.objects.filter(is_created=True):
      url = get_url_from_body(adset.body)
      if "bit.ly" in url:
        url = requests.get(url).url.replace("/products","")
      x = AdSet(adset.adset_id)
      x.remote_read(fields=["name", "daily_budget", "targeting"])

      #name = url
      #name = "%s , %s" % (x["daily_budget"], url)
      name = "US %s-%s"%(x["targeting"]["age_min"], x["targeting"]["age_max"])
      if x["name"] != name:
        ad = x.get_ads()[0]
        x.remote_update(params={"name":name})
        ad.remote_update(params={"name":name})
  class AdsetCreater:
    def __call__(self,fbid,url,caption,page_id,interest_ids=[]):
      try:
        """ ::: Make sure to Check If URL in CAPTION ie NO <redirect_url> &&, request200 url. ::: """
        try:get_url_from_body(caption)
        except Exception as e: redprint(e); return
        """ ::: request200 url ::: """

        #h = get_url_from_body(caption)
        """
        h = get_url_from_body( "".join(re.findall(r"[a-zA-Z0-9/:- .\n]",caption))  )
        while True:
          r = requests.get(h) if(h.startswith("http")) else (requests.get( ("https://"+h) ))
          t = r.url.split("/")[-1].split("?")[0]
          if(200!=r.status_code):
            redinput("(before Campaign Creation) \n 200!=status_code for %s\n\n\nASSOCIATED_CAPTION:\n%s\n\n" % (h,caption,"please fix the redirect or something, maybe it was erried"))
          elif(200==r.status_code):
            redprint("200==status_code for %s\n\n\nASSOCIATED_CAPTION:\n%s" % (h,caption))
            break
        """


        c = Campaign(parent_id="act_{}".format(fbid))
        c["name"] = "Conversions"
        c["buying_type"] = "AUCTION"
        c["objective"] = "CONVERSIONS"
        c.save()
        a = AdSet(parent_id="act_{}".format(fbid))
        #a["name"] = "US 18+"
        a["campaign_id"] = c["id"]
        a["daily_budget"] = 500
        a["name"] = "US 18+ "# + t
        a["optimization_goal"] = "OFFSITE_CONVERSIONS"
        a["promoted_object"] = {"custom_event_type": "PURCHASE", "pixel_id": Filter(Shop,Facebook_Business_Ad_Account_ID=fbid)[0].Facebook_Pixel_ID}
        a["start_time"] = "%s 6:00:00 EST"%(Date().dt(0) if datetime.now().hour in [0,1,2] else Date().dt(1))
        #@[2018.12.6 10:26 PM[mvdto(-1)]]a["start_time"] = "%s 5:00:00 EST"%(Date().dt(1) if datetime.now().hour in [0,1,2] else Date().dt(2))
        a["billing_event"] = "IMPRESSIONS"
        a["bid_strategy"] = "LOWEST_COST_WITHOUT_CAP"
        a["targeting"] = dict(age_min = 18,
                              device_platforms = ["mobile"],
                              facebook_positions = ["feed"],
                              publisher_platforms = ["facebook"],
                              targeting_optimization = "none",
                              geo_locations = {"countries": ["US"], "location_types": ["home", "recent"]},
                              flexible_spec = t_format_ids(interest_ids),
                              )
        a.save()
        v = Ad(parent_id="act_{}".format(fbid))
        #@[2018.12.8][Tried accessing nonexisting field (url_tags) on node type (Adgroup)]v["url_tags"] = "adset_id=%s"%(a["id"])
        v["name"] = "US 18+ "# + t
        v["adset_id"] = a["id"]
        (lambda fbid=fbid,url=url,caption=caption,page_id=page_id: [
        setitem(globals(),"image",AdImage(parent_id="act_{}".format(fbid)))  ,  
        #setitem(globals()["image"],"filename", Images().contrast_sharpen(Images().download_and_resize(url, 1200)))  ,  
        setitem(globals()["image"],"filename", Images().contrast_sharpen(Images().download_and_resize(url, 1200),contrast=True,sharpen=False))  ,  
        globals()["image"].remote_create()  ,  
        setitem(globals(),"photo_data",AdCreativePhotoData())  ,  
        setitem(globals()["photo_data"],"image_hash",globals()["image"]["hash"])  ,  
        setitem(globals()["photo_data"],"caption",caption)  ,  
        setitem(globals()["photo_data"],"page_welcome_message","Hello. Do you need any assistance?")  ,  
        setitem(globals(),"object_story_spec",AdCreativeObjectStorySpec())  ,  
        setitem(globals()["object_story_spec"],"page_id",page_id)  ,  
        setitem(globals()["object_story_spec"],"photo_data",globals()["photo_data"])  ,  
        setitem(globals(),"creative",AdCreative(parent_id="act_%s"%fbid))  ,  
        setitem(globals()["creative"],"name","Dark Post")  ,  
        setitem(globals()["creative"],"object_story_spec",globals()["object_story_spec"])  ,  
        setitem(globals()["creative"],"url_tags","&zcli=%s"%( Recompilate().recompilate(str(a["id"])).x ))  ,  
        "ajergcwonirgsncraoigncasdfkadpaksogranopgas;nrgoasingr"  ,  
        # globals()["creative"].remote_create()  ,  
        ])()
        v["creative"] = globals()["creative"]

        if ADSET_TESTING == True:
          a["status"] = "PAUSED"
          a.remote_update()

        v.save()
        return int(a["campaign_id"]), int(v["adset_id"])
      except Exception as e:
        redprint(e)
        redprint("deleting ")
        OSA.notify("deleting. ")
        OSA.notify(str(e))
        tryprocess(c.remote_delete); tryprocess(a.remote_delete); tryprocess(v.remote_delete)
  class Adsetinsight_Algorithms:
    def one(self):
      """ ::: Get all adsethourlyinsights with sales. Then, keep adding impressions, get average hour/impression count of 1st sale. :::"""
      x = [keysort("date",Adsethourlyinsight.objects.filter(adset_id=i),tcer=False) for i in set(key("adset_id",Adsethourlyinsight.objects.all())) if list(set(key("website_purchase", Adsethourlyinsight.objects.filter(adset_id=i)))) != [0]]
      v = []
      for i in x:
        impressions = 0
        for idx,j in enumerate(i):
          impressions += j.impression
          if j.website_purchase != 0:
            v.append([impressions, idx])
            break
      print(  "hour       ", sum([b[1] for b in v])/len(v)  )
      print(  "impressions", sum([b[0] for b in v])/len(v)  )
    def one_data(self):
      """ ::: Get all adsethourlyinsights with sales. Then, keep adding impressions, get average hour/impression count of 1st sale. :::"""
      x = set(key("adset_id",Adsethourlyinsightdata.objects.all()))
      data = []
      for i in x:
        if list(set(key("website_purchase_move", Adsethourlyinsightdata.objects.filter(adset_id=i)))) != [0]:      
          data.append(keysort("date",Adsethourlyinsightdata.objects.filter(adset_id=i),tcer=False) )
      v = []
      for i in data:
        impression_moves = 0
        for idx,j in enumerate(i):
          impression_moves += j.impression_move
          if j.website_purchase_move != 0:
            v.append([impression_moves, idx])
            break
      print(  "hour       ", sum([b[1] for b in v])/len(v)  )
      print(  "impressions", sum([b[0] for b in v])/len(v)  )
    def two(self):
      for adset in Adset.objects.filter(is_created=True):
        if adset.status=="ACTIVE":
          data = keysort("date", Adsethourlyinsight.objects.filter(adset_id=adset.adset_id), tcer=False)
          impressions = 0; sales = 0
          for x in data:

            impressions+=x.impression
            sales+=x.website_purchase

            print(impressions, sales)
            if impressions > 500:
              if sales < 1:
                print("stop")
                print("[adset_id][%s]"%adset.adset_id)
                input("please check it, impressions: %s, sales: %s" % (impressions, sales))
                Adset(adset.adset_id).remote_update(params={"status":"PAUSED"})
  class Interest_Tools(DecisionTree):
    def t_format_resp(self, resp):
      payload = []
      for i in resp:
        if i.get('valid',True) == True:
          payload.append({'id':i['id'], 'audience_size':i['audience_size'],'name':i['name'],
                          'category':i.get('disambiguation_category',''), 'topic':i.get('topic','')})
      return payload
    def t_search(self, q):
      resp = TargetingSearch.search(params={'q':q,'type':'adinterest','limit':10000})
      return self.t_format_resp(resp)
    def t_suggestion(self, names):
      resp = TargetingSearch.search(params={'interest_list':list(names), 'type':'adinterestsuggestion', 'limit':10000})
      return self.t_format_resp(resp)
    def t_format_ids(self, ids):
      return [{"interests": [{'id':i} for i in ids]}]
    def t_reach_estimate(self, shop, ids=None):
      account = AdAccount('act_%s'%shop.Facebook_Business_Ad_Account_ID)
      t_spec = {'age_max': 65,
               'age_min': 18,
               'audience_network_positions': ['classic', 'instream_video', 'rewarded_video'],
               'device_platforms': ['mobile', 'desktop'],
               'facebook_positions': ['feed', 'right_hand_column', 'instant_article'],
               'geo_locations': {'countries': ['US'], 'location_types': ['home']},
               'publisher_platforms': ['facebook', 'audience_network'],
               'targeting_optimization': 'none',
               'flexible_spec': []
               }
      if ids:
        t_spec['flexible_spec'] = self.t_format_ids(ids)
      params = {
          'currency': 'USD',
          'optimize_for': AdSet.OptimizationGoal.offsite_conversions,
          'targeting_spec': t_spec, }
      reach_estimate = account.get_reach_estimate(params=params)
      return reach_estimate[0]["users"]

  """ Business-Utils-Product-Utils """
  def adjustvariantname(x):
    x = x.title()
    x = re_found_function(x,"(?i)X{6}l",lambda i:re_substitute(i,["(?i)X{6}l","6XL"]))
    x = re_found_function(x,"(?i)X{5}l",lambda i:re_substitute(i,["(?i)X{5}l","5XL"]))
    x = re_found_function(x,"(?i)X{4}l",lambda i:re_substitute(i,["(?i)X{4}l","4XL"]))
    x = re_found_function(x,"(?i)X{3}l",lambda i:re_substitute(i,["(?i)X{3}l","3XL"]))
    x = re_found_function(x,"(?i)X{2}l",lambda i:re_substitute(i,["(?i)X{2}l","2XL"]))
    x = re_found_function(x,"(?i)^Xl$",lambda i:re_substitute(i,["(?i)^Xl$","XL"]))
    x = re_found_function(x,"(?i)^Xs$",lambda i:re_substitute(i,["(?i)^Xs$","XS"]))
    x = re_found_function(x,"(?i)^Xxs$",lambda i:re_substitute(i,["(?i)^Xxs$","XXS"]))


    x = re_found_function(x,"(?i)^\d+Xl",lambda i:re_substitute(i,["(?i)(^\d+)Xl","\\1XL"]))
    x = re_found_function(x,"(?i)^\d+Xs",lambda i:re_substitute(i,["(?i)(^\d+)Xs","\\1XS","\\1XS"]))
    x = re_found_function(x,"(?i)\d+in",lambda i:re_substitute(i,["(?i)(\d+)in","\\1in"]))
    x = re_found_function(x,"(?i)\d+cm",lambda i:re_substitute(i,["(?i)(\d+)cm","\\1cm"]))

    x = re_found_function(x,"(?i)^asian",lambda i:re_substitute(i,["(?i)^asian",""]).strip())
    # x = re_found_function(x,"(?i)cm",lambda i:re_substitute(re_substitute_function(i,"[\d\.]+",lambda i:or_list(lambda:list_and(lambda:str(round(flt(i)/2.54,1)).endswith(".0"),lambda:str(int(round(flt(i)/2.54,1)))),lambda:str(round(flt(i)/2.54,1)))),["(?i)cm","in"])  )
    x = re_found_function(x,"(?i)^For",lambda i:re_substitute(i,["(?i)^For",""]).strip())
    x = re_found_function(x,"(?i)iPhone",lambda i:re_substitute(i,["(?i)iPhone","iPhone"]).strip())
    x = re_found_function(x,"(?i)iPhone",lambda i:re_substitute(i,["(?i)Xs","XS"]).strip())
    x = re_found_function(x,"(?i)iPhone",lambda i:re_substitute(i,["(?i)Xr","XR"]).strip())
    x = re_found_function(x,"(?i)iPhone",lambda i:re_substitute(i,["(?i)Se","SE"]).strip())
    x = re_found_function(x,"(?i)iPhone",lambda i:re_substitute(i,["(?i)Xsmax","XS Max"]).strip())
    x = re_found_function(x,"(?i)Style",lambda i:i)
    x = re_found_function(x," {2,}",lambda i:re_substitute(i,[" {2,}"," "]))
    x = re_found_function(x,"(?i)eu size",lambda i:re_substitute(i,["(?i)eu size",""]).strip())
    x = re_found_function(x,"(?i)^Size[- ]",lambda i:re_substitute(i,["(?i)^Size[- ]",""]).strip())
    x = re_found_function(x,"(?i)(^A\d+)",lambda i:re_substitute(i,["(?i)(^A\d+)","Samsung \\1"]).strip())
    x = re_found_function(x,"(?i)(^J\d+)",lambda i:re_substitute(i,["(?i)(^J\d+)","Samsung \\1"]).strip())
    x = re_found_function(x,"(?i)(^P\d+)",lambda i:re_substitute(i,["(?i)(^P\d+)","Huawei \\1"]).strip())
    x = re_found_function(x,"(?i)^Galaxy",lambda i:re_substitute(re_substitute(i,["(?i)^Galaxy","Samsung Galaxy"]),["Samsung Galaxy","Samsung"]).strip())
    x = re_found_function(x,"(?i)(^P Smart)",lambda i:re_substitute(i,["(?i)(^P Smart)","Huawei \\1"]).strip())
    x = re_found_function(x,"(?i)(\d+)Xl",lambda i:re_substitute(i,["(?i)(\d+)Xl","\\1XL"]).strip())
    x = re_found_function(x,"(?i)((?:^Xl$|^Xs$))",lambda i:re_substitute(i,["(?i)((?:^Xl$|^Xs$))","\\1"]).upper())

    return x
  def address_string_from_dict(x):
    return ifelseget(lambda:x.get("address2"),lambda:"{first_name} {last_name}, {address1}, {address2}, {city}, {province_code} {zip} {country}".format(**{a:re.sub(" +"," ",str(b)).strip().title() for a,b in x.items()}),lambda:"{first_name} {last_name}, {address1}, {city}, {province_code} {zip} {country}".format(**{a:re.sub(" +"," ",str(b)).strip().title() for a,b in x.items()}))
  def address_string_from_dict_2(x):
    return ifelseget(lambda:x.get("Card Address Line2"),lambda:"{Card Name}, {Card Address Line1}, {Card Address Line2}, {Card Address City}, {Card Address State} {Card Address Zip} {Card Address Country}".format(**{a:re.sub(" +"," ",str(b)).strip().title() if a != "Card Address Country" else country_code_dict[b] for a,b in x.items()}),lambda:"{Card Name}, {Card Address Line1}, {Card Address City}, {Card Address State} {Card Address Zip} {Card Address Country}".format(**{a:re.sub(" +"," ",str(b)).strip().title() if a != "Card Address Country" else country_code_dict[b] for a,b in x.items()}))
  def affix_option_names(p, shop):
    p = shop.shopify.Product.find(id_=p.id)
    data = {}
    for i in p.options:
      i = i.to_dict()
      data[i["name"]] = i["values"]
      print(i["name"], i["values"])
    
    to_make_changes = input("to_make_changes to variant names (y/n): ")
    #to_make_changes = "n"
    if to_make_changes == "n":
      print("Finished creating all variant changes")
      return

    changes = {}
    while True:
      x = input("q\old->new eg- 'XXL->2XL' : ")
      if x=="q":break
      old, new = x.split("->")
      changes[old] = new
    print("changes:\n%s\n"%changes)
    for i in p.variants:
      changed  = False
      for old,new in changes.items():
        try:
          if i.option1 == old:
            i.option1 = new
            changed = True
        except : pass
        try:
          if i.option2 == old:
            i.option2 = new
            changed = True
        except : pass
        try:
          if i.option3 == old:
            i.option3 = new
            changed = True
        except : pass
      if changed == True:
        print("changed, saving")
        i.save()
        p = shop.shopify.Product.find(id_=p.id)
    print("[Reminder] if you want to directly delete an option; as far as i know how, you would do it thru the browser")
    return affix_option_names(p, shop)
  def affix_product_descriptions():
    #for shop  in Shop.objects.filter(shop_abbreviation="aws"):
    for shop  in Shop.objects.all()[:1]:
      shop = Shop()( shop.shop_abbreviation)
      products = [i for i in getshopifyproducts(shop) if len(Product.objects.filter(id=i.id)) > 0]
      products = [i for i in products if Product.objects.get(id=i.id).description!=None]
      for idx,p in enum(products):
        #p = affix_product_title(p)
        #distinct_print(describe_product(p))
        zz(0.5)
        try:
          Shop()(shop.shop_abbreviation)
          distinct_print(describe_product(p)[:25])
        except Exception as e:
          redprint("[%s][%s][affix_product_descriptions]"%(idx,e))
  def append_pictures():
    workmode = None
    if Muta()().sciencevessels_on:
      x = list(All(ScienceVessel))[-1]
      y = {"index":None, "urls":None}
      io = OSA.log("Enter in a number to specify the image (usually 0 or -1) and then the urls. Delimit with ', '").split(", ")
      index = int(io[0])
      urls = io[1:]
      y["index"] = io
      y["urls"] = urls
      x.append_pictures = url
      x.save()
    else:
      io = OSA.log("Enter in a number to specify the image (usually 0 or -1) and then the urls. Delimit with ', '").split(", ")
      product = list(All(Product))[-1]
      index = int(io[0])
      if index < 0:
        index = len(product.images) + index + 1
      urls = io[1:]
      product_ = Shop()(product.shop).pfind(id_=product.id)
      images = lmap(lambda i: {"attachment": i}, pool(lambda i: Images().image_base64(i), pool(Images().sharpen, pool(Images().download, urls).result()).result()).result())
      product_.images = product_.images[:index] + images + product_.images[index:]
      product_.save()
  def create_navigation_menu_items(shop, menu_name, menu_items):
    shop.Login_Shopify_Store()
    globals().update(g.__globals__)
    ss.get("{}/menus".format(shop.Administrative_Url))
    for i in ss.fcns("next-table__cell--full-width-when-condensed"):
      if i.text == menu_name:
        ss.get(ss.fxsxs(i)[0].get_attribute("href"))
    x = []
    for idx, i in enum(menu_items):
      print("idx: %s, total: %s" % ((idx+1), len(menu_items)))
      ss.fcn("menu__add-menu-item").click().sp(3)
      ss.fid("addMenuItemLink").send_keys(i).sp(3)
      ss.tp(lambda: ss.jtns("a","click",{"data-bind-event-click":'itemSelected(event, "collection")'},_time=2)).sp(2)
      if tryprocess(lambda: ss.fcns("next-list__item--disabled",_time=2)[0].text.split("result")[0].strip()) == 1:
        if 1 != int(ss.fcns("next-list__item--disabled",_time=4)[0].text.split("result")[0].strip()):
          x.append(i)
      ss.fid("addMenuItemLink").send_keys(ss.Keys.ARROW_DOWN).sp(3)
      ss.fid("addMenuItemLink").send_keys(ss.Keys.ARROW_DOWN).sp(3)
      ss.fid("addMenuItemLink").send_keys(ss.Keys.ENTER).sp(4)
      ss.ffst("button","Add").click().sp(5)
    ss.ffs("button","aria-label","Save").click().sp(7)
  def delete_product_images(shop_abbreviation, id_):
    shop = Shop()( shop_abbreviation)
    p = shop.shopify.Product.find(id_=id_)
    images = input("Images delimited by ',' ie 2,4,5,6 : ")
    images_numbers = list(map(int, images.split(",")))
    previous_image_count = len(p.images)
    print("previous image count: %s" % previous_image_count)
    for i in images_numbers:
      p.images[i].destroy()
    p = shop.shopify.Product.find(id_=id_)
    new_image_count = len(p.images)
    print("new image count: %s" % new_image_count)
    deleted_count = previous_image_count - new_image_count
    print("deleted count: %s" % deleted_count)
    return None
  def describe_product(p):
    if type(p) == Product: p = Shop()( p.shop).shopify.Product.find(id_=p.id)
    i = Product.objects.get(id=p.id)
    description = i.description
    shop = Shop()( Product.objects.get(id=p.id).shop)

    get_size_chart = lambda product_type: Sizechart.objects.get(product_type=product_type).size_chart
    #if p.image == None: return "product image was None"
    #if p.image.alt == None: return "product image alt was None"
    x = ((( (( description if description != None else """""" )) + (( "<p></p>" )) ))) + \
    ((( (( shop.product_page_general_information )) + ((  "<p></p>"  )) )))


    if i.size_chart != None and i.is_available() and i.product_type in SIZE_CHART_PRODUCT_TYPES and i.shop != None:
      if i.is_unavailable():
        ""
      elif i.size_chart == "Unmatched":
        "None/Text in <p>/Redo"
      else:
        size_chart_string_size_chart = ""
        if i.size_chart[0].startswith("http"):
          if len(i.size_chart) == 1:
            for b in i.size_chart:
              size_chart_string_size_chart += """<img src="{}" alt="Size Chart" />""".format(b)
          elif len(i.size_chart) >  1:
            for b in i.size_chart[-1:]:
              size_chart_string_size_chart += """<img src="{}" alt="Size Chart" />""".format(b)
        elif not i.size_chart[0].startswith("http"):
          if len(i.size_chart) == 1:
            for b in i.size_chart[-1:]:
              size_chart_string_size_chart += b
              size_chart_string_size_chart += "<br />"
          elif len(i.size_chart) >  1:
            for b in i.size_chart:
              size_chart_string_size_chart += b
              size_chart_string_size_chart += "<br />"
        size_chart_string = """<p><strong>Size Chart*<br />{}<br /></strong>*This size chart is specifically for this item.</p>""".format(size_chart_string_size_chart)
        #distinct_print(size_chart_string)
        x = re.sub(r"(<p.*?<table.*</table>)", "<br /><br />%s"%size_chart_string, x)

    try:
      if p.image == None: p.destroy(); return
    except Exception as e:
      print(e)
    x = x.replace("\xa0", "").replace("\n", "<br />")
    # x is the description you should be creating.
    # if database product's body_html is not x... then save.
    # so if `i`.body_html != x:

    if i.body_html != x:
      i.body_html = x; i.save()
      p.body_html = x
      assert p.save() == True
      distinct_print("[different body html][saving][%s]" % p.id)
    else:
      distinct_print("[same body_html][not saving][%s]"%p.id, end="")
    return x
  def delete_product(x):
    if type(x) == int: x = Get(Product,id=x)
    tp(lambda:Del(Get(GhostProduct,id=x.id)))
    pool(lambda:[apilimitcall(lambda:x.p().destroy()),print(apilimitcall(lambda:Shop()(x.shop).pfind(handle=x.handle)))])
    print("deleting product")
    tp(lambda:Del(x))
  def generate_price_list():
    v={0:9.95,1: 9.95,2: 9.95,3: 9.95,4: 9.95,5: 12.99,6: 12.99,7: 14.99,8: 17.99,9: 17.99,10: 18,11: 22,12: 23,13: 23,14: 29.99,15: 29.99,16: 34,17: 38,18: 40,19: 40,20: 42,21: 42,22: 45,23: 49,24: 50,25: 54,26: 55,27: 59,28: 60,29: 60,30: 61,31: 62,32: 63,33: 64,34: 68,35: 70,36: 71,37: 71,38: 75,39: 80,40: 82,41: 85,42: 85,43: 85,44: 88,45: 90,46: 90,47: 100,48: 100,49: 100,50: 100}
    v={0:9.99,1: 9.99,2: 9.99,3: 9.99,4: 12.99,5: 12.99,6: 12.99,7: 17.99,8: 17.99,9: 17.99,10: 17.99,11: 24.99,12: 24.99,13: 24.99,14: 24.99,15: 29.99,16: 38,17: 39,18: 40,19: 40,20: 42,21: 42,22: 45,23: 49,24: 50,25: 54,26: 55,27: 59,28: 60,  29: 60,30: 61,31: 62,32: 63,33: 64,34: 68,35: 70,36: 71,37: 71,38: 75,39: 80,40: 82,41: 85,42: 85,43: 85,44: 88,45: 90,46: 90,47: 100,48: 100,49: 100,50: 100}
    ne={}
    for i in lrange(5000):
        q = i/100
        #print(q)
        try:
            low,high = [i for i in v if i < q][-1], [i for i in v if i>q][-0]
            print(low,q,high)
            assert low < q < high
            ne[float(q)] = v[high]
            print(q,v[high])
        except:
            print(q)
    return ne
  def get_added_product_urls(x):
    products_sent = x
    products = []
    for i in products_sent:
      x = Filter(Product,title=i.title)
      products.extend(x)
    urls = []
    for i in products:
      x = get_product_url(i)
      urls.append(x)
    urls = oset(urls)
    for i in products:
      print(Filter(Product,title=i.title))
      print(Filter(GhostProduct,title=i.title))
    return urls
  def get_all_products_all_shops_created_at_time(x):
    return sum([Shop()(i.shop_abbreviation).pfind(created_at_min=x) for i in Shop.objects.all()],[])
  def get_all_custom_collections(shop):
    return flatten(lmap(lambda i: Shop()(shop).shopify.CustomCollection.find(status="any",limit=250,page=i+1),list(range(int(Shop()(shop).shopify.CustomCollection.count()/250)+1))),1)     
  def get_handle_from_title(x):
    return re.sub(r"[-]+","-",re.sub(r" ","-","".join(re.findall(r"[0-9a-zA-Z ]",x)).lower()))
  def get_logo_size():
    import cv2
    system("rm -rf ~/Desktop/.* &>/dev/null")
    x = lmap(lambda i:int(i),list(cv2.imread(homepath("~/Desktop/%s"%os.listdir(homepath("~/Desktop"))[0])).shape)[:2] )
    # x = lmap(lambda i:int(i/2),list(cv2.imread(homepath("~/Desktop/%s"%os.listdir(homepath("~/Desktop"))[0])).shape)[:2] )
    system("rm -rf ~/Desktop/* &>/dev/null")
    return x
  def get_product_video(r):
    ss = Browser()("ch+")
    try:
      ss.get(r,timeout=10)
    except Exception as e:
      redprint(e)
      OSA.notify(str(e))
      return get_product_video(r)
    url = ss.ftn("video",2).get_attribute("src")
    ss.quit()
    return url
  def getshopifyproducts(shop,**kwargs):
    if type(shop) is str: shop = Shop()( shop)
    products = sum([shop.shopify.Product.find(status='any',limit=250,page=pg,**kwargs) for pg in range(1,(ceil(shop.shopify.Product.count()/250)+1))],[])
    return products
  def handle_captcha(url):
    captcha = OSA.log("Handle captcha", tp = False)
    return captcha
  def handle_security_page(ss):
    if "sec.aliexpress.com" in ss.current_url:
      captcha = handle_captcha(url)
      ss.fid("checkcodeInput").send_keys(captcha.get("text"))
      ss.ffs("div","class","submit").click()
      time.sleep(5)
      handle_security_page(ss)
    else:
      redprint("ok")
      return
  def productsFeed(shop, created_at_min = 365 * 4  )  :
    shop=((Shop()(shop))if(type(shop)==str)else(shop))
    """
    shop = a_shop()
    created_at_min = 365

    """
    product_count = shop.shopify.Product.count()

    kwargs = dict(  status="any"  ,  created_at_min = datetime.now()-timedelta(days=created_at_min)  ,  limit=250  )

    products =  [AttrDict({ ("shop")if("vendor"==a)else(a):( getattr(shop,"init_shop")if("vendor"==a) else(Date().parse_date(b)) if("created_at"==a) else(b) )    for a,b in x.to_dict().items()  if a not in ["admin_graphql_api_id","image"]}) for x in apilimitcall(lambda:shop.pfind(page=1, **kwargs))]   if ceil( (product_count/250) ) >= 1    else [redprint("1"),[]][1]  +\
                [AttrDict({ ("shop")if("vendor"==a)else(a):( getattr(shop,"init_shop")if("vendor"==a) else(Date().parse_date(b)) if("created_at"==a) else(b) )    for a,b in x.to_dict().items()  if a not in ["admin_graphql_api_id","image"]}) for x in apilimitcall(lambda:shop.pfind(page=2, **kwargs))]   if ceil( (product_count/250) ) >= 2    else [redprint("2"),[]][1]  +\
                [AttrDict({ ("shop")if("vendor"==a)else(a):( getattr(shop,"init_shop")if("vendor"==a) else(Date().parse_date(b)) if("created_at"==a) else(b) )    for a,b in x.to_dict().items()  if a not in ["admin_graphql_api_id","image"]}) for x in apilimitcall(lambda:shop.pfind(page=3, **kwargs))]   if ceil( (product_count/250) ) >= 3    else [redprint("3"),[]][1]  +\
                [AttrDict({ ("shop")if("vendor"==a)else(a):( getattr(shop,"init_shop")if("vendor"==a) else(Date().parse_date(b)) if("created_at"==a) else(b) )    for a,b in x.to_dict().items()  if a not in ["admin_graphql_api_id","image"]}) for x in apilimitcall(lambda:shop.pfind(page=4, **kwargs))]   if ceil( (product_count/250) ) >= 4    else [redprint("4"),[]][1]  +\
                [AttrDict({ ("shop")if("vendor"==a)else(a):( getattr(shop,"init_shop")if("vendor"==a) else(Date().parse_date(b)) if("created_at"==a) else(b) )    for a,b in x.to_dict().items()  if a not in ["admin_graphql_api_id","image"]}) for x in apilimitcall(lambda:shop.pfind(page=5, **kwargs))]   if ceil( (product_count/250) ) >= 5    else [redprint("5"),[]][1]  +\
                [AttrDict({ ("shop")if("vendor"==a)else(a):( getattr(shop,"init_shop")if("vendor"==a) else(Date().parse_date(b)) if("created_at"==a) else(b) )    for a,b in x.to_dict().items()  if a not in ["admin_graphql_api_id","image"]}) for x in apilimitcall(lambda:shop.pfind(page=6, **kwargs))]   if ceil( (product_count/250) ) >= 6    else [redprint("6"),[]][1]  +\
                [AttrDict({ ("shop")if("vendor"==a)else(a):( getattr(shop,"init_shop")if("vendor"==a) else(Date().parse_date(b)) if("created_at"==a) else(b) )    for a,b in x.to_dict().items()  if a not in ["admin_graphql_api_id","image"]}) for x in apilimitcall(lambda:shop.pfind(page=7, **kwargs))]   if ceil( (product_count/250) ) >= 7    else [redprint("7"),[]][1]  +\
                [AttrDict({ ("shop")if("vendor"==a)else(a):( getattr(shop,"init_shop")if("vendor"==a) else(Date().parse_date(b)) if("created_at"==a) else(b) )    for a,b in x.to_dict().items()  if a not in ["admin_graphql_api_id","image"]}) for x in apilimitcall(lambda:shop.pfind(page=8, **kwargs))]   if ceil( (product_count/250) ) >= 8    else [redprint("8"),[]][1]  +\
                [AttrDict({ ("shop")if("vendor"==a)else(a):( getattr(shop,"init_shop")if("vendor"==a) else(Date().parse_date(b)) if("created_at"==a) else(b) )    for a,b in x.to_dict().items()  if a not in ["admin_graphql_api_id","image"]}) for x in apilimitcall(lambda:shop.pfind(page=9, **kwargs))]   if ceil( (product_count/250) ) >= 9    else [redprint("9"),[]][1]  +\
                [AttrDict({ ("shop")if("vendor"==a)else(a):( getattr(shop,"init_shop")if("vendor"==a) else(Date().parse_date(b)) if("created_at"==a) else(b) )    for a,b in x.to_dict().items()  if a not in ["admin_graphql_api_id","image"]}) for x in apilimitcall(lambda:shop.pfind(page=10, **kwargs))]   if ceil( (product_count/250) ) >= 10   else [redprint("10"),[]][1]   
    total_updated = 0
    globalise(0,"errors")
    for x in products:
      if x.id in sud("id",All(Product)):
        try:Get(Product,id=x.id).feed(x)
        except Exception as e:[print(e),globalise(globe("errors")+1,"errors")]
        InceptedProduct().handle_update(x)
        total_updated += 1
      else:
        blueprint("skipping id: %s" % (x.id))
    OSA.notify("ProductsFeed total updated: %s" % (total_updated))
    OSA.notify("ProductsFeed errors: %s" % (errors))
    return products
  def productsFeedNonDicts(shop):
    products = sum([shop.shopify.Product.find(status='any',limit=250, page=pg) for pg in range(1,10)],[])
    return products
  def proper_title_input(store_abbre):
    title = input("title? (this will return a redirect url as well): ")
    existing_titles = Shop()( store_abbre).shopify.Product.find(title=title)
    if len(existing_titles) > 0:
      print("title exists, ")
      return proper_title_input(store_abbre)
    else:
      print("%s not existing in %s" % (title, store_abbre))

    # ok
    shop = Shop()(store_abbre)
    desired_path = redinput("desired path? (/x-y-z): ")
    path = automatically_generated_handle = "/" + "".join(re.findall(r"[0-9a-zA-Z ]",title)).lower().replace(" ","-").replace("--","-").replace("--","-")
    target = automatically_generated_target = shop.Domain_Name + "/products" + automatically_generated_handle
    x = create_redirect(shop, desired_path, automatically_generated_target)
    redirect_url = x
    return [title, redirect_url]
  def remove_extra_note_error_in_image_alt(product):
    # note images need to save individually
    i = product
    if i.image == None:return
    if i.image.alt != None and "Note" in i.image.alt:
      i.image.alt = re.sub("Note.*","",i.image.alt)
      print(i.image.alt)
      i.image.save()
      time.sleep(0.5)

    for j in i.images:
      if j.alt != None and "Note" in j.alt:
        j.alt = re.sub("Note.*","",j.alt)
        j.save()
        time.sleep(0.5)

        print(j.alt)
  def rename_product_variants(shop_abbreviation, id_):
    p = Shop()(shop_abbreviation).shopify.Product.find(id_=id_)
    rename_dict = {}
    while True:
      x = input("q\old->new: ")
      if x == "q":
        break
      old, new = x.split("->")
      rename_dict[old] = new
    changed_data = []
    for v in p.variants:
      for old in rename_dict:
        changed = False
        if v.option1 == old:
          v.option1 = rename_dict[old]
          changed = True
          changed_data.append("Hello; changed %s to %s" % (old, rename_dict[old]))
        if v.option2 == old:
          v.option2 = rename_dict[old]
          changed = True
          changed_data.append("Hello; changed %s to %s" % (old, rename_dict[old]))
        if v.option3 == old:
          v.option3 = rename_dict[old]
          changed = True
          changed_data.append("Hello; changed %s to %s" % (old, rename_dict[old]))
        if changed == True:
          v.save()
    print("\n".join(changed_data))
  def republish_product(p):
    p.published_at = datetime.now().strftime("%Y-%m-%dT-%HP:%M:%S-04:00")
    assert(True==p.save())
    redprint("set [%s][%s][published_at][%s]"%(p.id,p.handle,p.published_at))
    return p
  def save_and_return(x):
    if type(x) != shopify.product.Product:
      x = shopify.product.Product(x)
    distinct_print("[saving product] .. [%s]"%x.save())
    return x
  def sort_variants(x):
    option1s = oset(sud("option1",x))
    '''exec("""print(str(x).replace("},","},\\n"))""")'''
    print(option1s)
    new_list = []
    for option in option1s:
      for i in x:
        if i["option1"] == option:
          new_list.append(i)

    option2s = oset(sud("option2",new_list))
    '''exec("""print(str(new_list).replace("},","},\\n"))""")'''
    print(option2s)
    new_list_ = []
    for option in option1s:
      for option_ in option2s:
        for i in new_list:
          if i["option1"] == option:
            if i["option2"] == option_:
              new_list_.append(i)

    if "option3" not in new_list_[0].keys():
      '''exec("""print(str(new_list_).replace("},","},\\n"))""")'''
      return new_list_
    else:
      option3s = oset(sud("option3",new_list))
      '''exec("""print(str(new_list_).replace("},","},\\n"))""")'''
      print(option3s)
      new_list__ = []
      for option in option1s:
        for option_ in option2s:
          for option__ in option3s:
            for i in new_list_:
              if i["option1"] == option:
                if i["option2"] == option_:
                  if i["option3"] == option__:
                    new_list__.append(i)
      '''exec("""print(str(new_list__).replace("},","},\\n"))""")'''
      return new_list__
  def txt_to_dictlist(txt, headers):
    data = txt.split("\n\n")
    payload = []
    for a in data:
      x = OrderedDict()
      for b, c in zip(a.split("\n"), headers):
        x[c] = b
      payload.append(x)
    return payload
  def unpublish_product(p):
    p.published_at = None
    assert(True==p.save())
    redprint("set [%s][%s][published_at][%s]"%(p.id,p.handle,None))
    return p
  def unsplash_download(v):
    os.makedirs(homepath("~/Documents/%s"%v), exist_ok=True)
    setitem(globals(),"idx",0)
    address_url_dict = {}
    results = [[setitem(globals(),"fn", homepath("~/Documents/%s/%s_%s.png"%(v,str(globals()["idx"]).zfill(3),v)) ),tryprocess(Images().download,x,fn),redprint(fn),setitem(address_url_dict,fn,x),setitem(globals(),"idx",globals()["idx"]+1),] for x in [x["urls"]["regular"] for x in sum([json.loads(requests.get("https://unsplash.com/napi/search/photos?query=%s&xp=&per_page=20&page=%s"%(v.replace(" ","+"),i)).text)["results"] for i in range(1,1+ceil(int(re.findall(r"([0-9]+) free .*? pictures", requests.get("https://unsplash.com/search/photos/{}".format(k.replace(" ","+"))).text)[0])/20))[:50]], [])]]
    json.dump(address_url_dict, open(homepath("~/Documents/%s/address_url_dict.json"%v), "w"))
  class Aliexpress_Products:
    def __init__(self):
      self.rq = Aliexpress_Requests()()
    def get_product_data(self, url,check_for_epacket=False):
      x = AD(data = None, shipping = None, y = None)
      count_of_soups = Filter(Soup,url=url).len()
      time_elapsed = or_list(lambda: (Date().Now()-Get(Soup,url=url).last_check).total_seconds(), None)

      TO_REFRESH_SOUP = False

      assert count_of_soups > 0

      if time_elapsed > (86400*2):
        TO_REFRESH_SOUP = True


      if TO_REFRESH_SOUP == True:
        Push(Soup,url=url)(page_source=self.rq.get(url).text,is_available=True,last_check=Date().Now())



      soup = SOUP(Get(Soup,url=url).page_source)

      if not soup.text and TO_REFRESH_SOUP == False:
        print("Not Found")
        x.data = str(soup)
        x.y = "Not Found"
        return x


      item_not_found = None
      if len(soup.findAll("div",attrs={"class":"item-not-found-title"})):
        item_not_found = True
      if "Page Not Found" in soup.findAll("title")[0].text:
        item_not_found = True
      aliexpressvendor = or_list(tryreturn(lambda:"https:%s" % list(soup.findAll("span",attrs={"class":"shop-name"})[0])[1].attrs["href"])  ,  tryreturn(lambda:"https:%s" % list(soup.findAll("span",attrs={"class":"shop-name"})[0])[0].findAll("a")[0].attrs["href"])  ,  tryreturn(lambda:"https://aliexpress.com/store/%s"%(findall(Get(Soup,url=url).page_source,1,'(?s)window.runParams.*"storeNum":(\d+)')))  ,  None)

      if item_not_found:
        x.y = "Not Found"

      if aliexpressvendor == None:
        x.y = "Not Found"

      shipping = None
      if x.y != "Not Found":
        shipping = json.loads(findall(requests.get("https://freight.aliexpress.com/ajaxFreightCalculateService.htm?&f=d&productid={}&currencyCode=USD&transactionCurrencyCode=USD&sendGoodsCountry=&country=US&province=&city=&abVersion=1".format(int(findall(findall(Get(Soup,url=url).page_source,1,'(?s)window.runParams.*productIds: "(.*?)"'),1,".*?(\d+)")))).text,1,"{.*}"))["freight"]

        if check_for_epacket:
          if "ePacket" not in key("companyDisplayName",shipping):
            x.y = "No ePacket"

      x.data = str(soup)
      x.shipping = shipping
      return x
  class Posts:
    def start(self,shop):
      products = Filter(Product,shop=shop)
      for i in products:
        create_directories(i.shop,i.product_type,i.handle)
        os.chdir("/".join([i.shop,i.product_type,i.handle]))
        self.run(int(findall(i.ali_url,1,"(\d+)\.html")))
        os.chdir("/".join([".."]*3))
    def run(self,product_id):
      x = []
      page_number = 1
      url = "https://feedback.aliexpress.com/display/productEvaluation.htm"
      data = {'companyId':'','currentPage':'1','evaSortValue':'sortdefault@feedback','evaStarFilterValue':'all Stars','i18n':'true','isOpened':'true','jumpToTop':'false','memberType':'seller','onlyFromMyCountry':'false','ownerMemberId':'229975677','page':'1','productId':'32924594152','startValidDate':'','translate':' Y ','v':'2','version':'','withAdditionalFeedback':'false','withPersonalInfo':'false','withPictures':'true'}
      headers = {'accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8','accept-encoding':'gzip, deflate, br','accept-language':'en-US,en;q=0.9','authority':'feedback.aliexpress.com','cache-control':'max-age=0','content-length':'334','content-type':'application/x-www-form-urlencoded','method':'POST','origin':'https://feedback.aliexpress.com','path':'/display/productEvaluation.htm','referer':'https://feedback.aliexpress.com/display/productEvaluation.htm','scheme':'https','upgrade-insecure-requests':'1','user-agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36'}
      data["productId"] = str(product_id)
      data['page'] = str(page_number)
      r = requests.post(url,headers=headers,data=data)
      images = BeautifulSoup(r.text).findAll("img")
      page_numbers = listminus(lmap(lambda i:tryreturn(lambda:int(i)),sud("text",BeautifulSoup(r.text).findAll("a",attrs={"class":"ui-goto-page"}))),0)
      x.append(images)
      if page_number+1 in page_numbers:
        while True:
          page_number = page_number + 1
          url = "https://feedback.aliexpress.com/display/productEvaluation.htm"
          data = {'companyId':'','currentPage':'1','evaSortValue':'sortdefault@feedback','evaStarFilterValue':'all Stars','i18n':'true','isOpened':'true','jumpToTop':'false','memberType':'seller','onlyFromMyCountry':'false','ownerMemberId':'229975677','page':'1','productId':'32924594152','startValidDate':'','translate':' Y ','v':'2','version':'','withAdditionalFeedback':'false','withPersonalInfo':'false','withPictures':'true'}
          headers = {'accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8','accept-encoding':'gzip, deflate, br','accept-language':'en-US,en;q=0.9','authority':'feedback.aliexpress.com','cache-control':'max-age=0','content-length':'334','content-type':'application/x-www-form-urlencoded','method':'POST','origin':'https://feedback.aliexpress.com','path':'/display/productEvaluation.htm','referer':'https://feedback.aliexpress.com/display/productEvaluation.htm','scheme':'https','upgrade-insecure-requests':'1','user-agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36'}
          data["productId"] = str(product_id)
          data['page'] = str(page_number)
          r = requests.post(url,headers=headers,data=data)
          images = BeautifulSoup(r.text).findAll("img")
          page_numbers = listminus(lmap(lambda i:tryreturn(lambda:int(i)),sud("text",BeautifulSoup(r.text).findAll("a",attrs={"class":"ui-goto-page"}))),0)
          x.append(images)
          if page_number+1 not in page_numbers:
            break

      pool(lambda idx,i:Images().download(i,"%s.jpg"%(idx)),lrange(len(flatten(x,1))),lmap(lambda i:i.attrs["src"],flatten(x,1))).result()
      print("+1, %s" % (len(flatten(x,1))))
  class ProductTroubleshoot:
    def remove_int_handles(self,shop):
      x=getshopifyproducts(shop)
      for i in x:
        y = i.handle[-1]
        if tryprocess(lambda i:int(y)):
          i.destroy()
    def migrate_shop_add_new_shop_object(self):
      All(Shop)[2:]
      shops = All(Shop)[2:]
      uniq = ["id","shop_abbreviation"]
      s = All(Shop)[0]
      for shop in shops:
        for field in Shop._meta.fields:
          if field.name not in uniq:
            setattr(shop,field.name,getattr(s,field.name))
            print(field.name,getattr(s,field.name))
            shop.save()
    def update_shops(self,shop1,shop2):
      Filter(AceInTheHole,shop=shop1).update(shop=shop2) #
      Filter(AceInTheHoleHeaderColumns,shop=shop1).update(shop=shop2) #
      Filter(AddProduct,shop=shop1).update(shop=shop2) #
      Filter(Adset,shop_abbreviation=shop1).update(shop_abbreviation=shop2)
      Filter(Adsethourlyinsightdata,shop_abbreviation=shop1).update(shop_abbreviation=shop2)
      Filter(Aliexpress_Dispute,shop=shop1).update(shop=shop2)
      Filter(Aliexpress_Dispute,store=shop1).update(store=shop2)
      Filter(Aliexpressorder_event,shop=shop1).update(shop=shop2)
      Filter(Aliexpressorder_update,shop=shop1).update(shop=shop2)
      Filter(ApprovedTransaction,shop=shop1).update(shop=shop2) #
      Filter(GhostProduct,shop=shop1).update(shop=shop2)
      Filter(GhostProductUpdate,shop=shop1).update(shop=shop2)
      Filter(Handle,shop=shop1).update(shop=shop2)
      Filter(InceptedProduct,shop=shop1).update(shop=shop2)
      Filter(Keep_Exchange,shop=shop1).update(shop=shop2) #
      Filter(Lineitem,shop=shop1).update(shop=shop2)
      Filter(LineitemsFeed,shop=shop1).update(shop=shop2)
      Filter(Muta,current_shop=shop1).update(current_shop=shop2) #
      Filter(Muta,store_abbre=shop1).update(store_abbre=shop2) #
      Filter(New_Email,shop=shop1).update(shop=shop2)
      Filter(New_Email_Template,shop=shop1).update(shop=shop2)
      Filter(Order,shop=shop1).update(shop=shop2)
      Filter(Payment,shop=shop1).update(shop=shop2)
      Filter(Payout,shop=shop1).update(shop=shop2)
      Filter(PriceChange,shop=shop1).update(shop=shop2) #
      Filter(Product,shop=shop1).update(shop=shop2)
      Filter(ProductsFeed,shop=shop1).update(shop=shop2)
      Filter(ProductTalk,shop=shop1).update(shop=shop2)
      Filter(ReOrder,shop=shop1).update(shop=shop2)
      Filter(ScienceVessel,shop=shop1).update(shop=shop2)
      Filter(Settlement,shop=shop1).update(shop=shop2)
      Filter(StatusVerification,shop=shop1).update(shop=shop2)
      Filter(Subscription,shop=shop1).update(shop=shop2)
      Filter(TertiaryAction,shop=shop1).update(shop=shop2)
      Filter(TertiaryAction_Template,shop=shop1).update(shop=shop2)
      Filter(UniqueProductIdentifier,shop=shop1).update(shop=shop2)
  class ShippingCost:
    def get_shipping_cost(self,x,shop):
      sorted_companies_list = ifelseget(lambda:Shop()(shop).Allow_Additional_Shipping_Methods,lambda:["SunYou Economic Air Mail","Yanwen Economic Air Mail","China Air Post","China Post Registered Air Mail","ePacket","AliExpress Standard Shipping"],lambda:["ePacket"])
      data = sorted([new_dict(i,["companyDisplayName","price"]) for i in x if i.companyDisplayName in sorted_companies_list],key=lambda i:sorted_companies_list.index(i.companyDisplayName))
      return flt(data[0].price)
    def get_shipping_company(self,x,shop):
      sorted_companies_list = ifelseget(lambda:Shop()(shop).Allow_Additional_Shipping_Methods,lambda:["SunYou Economic Air Mail","Yanwen Economic Air Mail","China Air Post","China Post Registered Air Mail","ePacket","AliExpress Standard Shipping"],lambda:["ePacket"])
      data = sorted([new_dict(i,["companyDisplayName","price"]) for i in x if i.companyDisplayName in sorted_companies_list],key=lambda i:sorted_companies_list.index(i.companyDisplayName))
      return data[0].companyDisplayName
  class Variant_Titler:
    def title_variant(self,x):
      products = getshopifyproducts("rom",created_at_min=datetime(2020, 1, 19, 23, 8, 13))
      option_names = []
      for i in products:
        for j in i.variants:
          option_names.append(j.option1)
          option_names.append(j.option2)
          option_names.append(j.option3)
      option_names = sorted(oset(listminus(option_names,None)))
      option_names = lmap(lambda i:re_found_function(i,"(?i)^asian",lambda i:re_substitute(i,["(?i)^asian",""]).strip()),option_names)
      option_names = lmap(lambda i:re_found_function(i,"(?i)cm",lambda i:re_substitute(re_substitute_function(i,"[\d\.]+",lambda i:or_list(lambda:list_and(lambda:str(round(flt(i)/2.54,1)).endswith(".0"),lambda:str(int(round(flt(i)/2.54,1)))),lambda:str(round(flt(i)/2.54,1)))),["(?i)cm","cm"])  ),option_names)
      option_names = lmap(lambda i:re_found_function(i,"(?i)^For",lambda i:re_substitute(i,["(?i)^For",""]).strip()),option_names)
      option_names = lmap(lambda i:re_found_function(i,"(?i)iPhone",lambda i:re_substitute(i,["(?i)iPhone","iPhone"]).strip()),option_names)
      option_names = lmap(lambda i:re_found_function(i,"(?i)Style",lambda i:i),option_names)
      option_names = lmap(lambda i:re_found_function(i," {2,}",lambda i:re_substitute(i,[" {2,}"," "])),option_names)
      option_names = lmap(lambda i:re_found_function(i,"(?i)eu size",lambda i:re_substitute(i,["(?i)eu size",""]).strip()),option_names)
      option_names = lmap(lambda i:re_found_function(i,"(?i)^Size[- ]",lambda i:re_substitute(i,["(?i)^Size[- ]",""]).strip()),option_names)
      option_names = lmap(lambda i:re_found_function(i,"(?i)(^A\d+)",lambda i:re_substitute(i,["(?i)(^A\d+)","Samsung \\1"]).strip()),option_names)
      option_names = lmap(lambda i:re_found_function(i,"(?i)(^J\d+)",lambda i:re_substitute(i,["(?i)(^J\d+)","Samsung \\1"]).strip()),option_names)
      option_names = lmap(lambda i:re_found_function(i,"(?i)(^P\d+)",lambda i:re_substitute(i,["(?i)(^P\d+)","Huawei \\1"]).strip()),option_names)
      option_names = lmap(lambda i:re_found_function(i,"(?i)^Galaxy",lambda i:re_substitute(re_substitute(i,["(?i)^Galaxy","Samsung Galaxy"]),["Samsung Galaxy","Samsung"]).strip()),option_names)
      option_names = lmap(lambda i:re_found_function(i,"(?i)(^P Smart)",lambda i:re_substitute(i,["(?i)(^P Smart)","Huawei \\1"]).strip()),option_names)
      option_names = lmap(lambda i:re_found_function(i,"(?i)(\d+)Xl",lambda i:re_substitute(i,["(?i)(\d+)Xl","\\1XL"]).strip()),option_names)
      option_names = lmap(lambda i:re_found_function(i,"(?i)((?:^Xl$|^Xs$))",lambda i:re_substitute(i,["(?i)((?:^Xl$|^Xs$))","\\1"]).upper()),option_names)

      option_names = sorted(oset(option_names))
    def run(self):
      products = getshopifyproducts("rom",created_at_min=datetime(2020, 1, 19, 23, 8, 13))
      for a in products:
        for b in a.variants:
          for c in [1,2,3]:
            if getattr(b,"option%s"%(c)) != None:
              old = getattr(b,"option%s"%(c))
              setattr(b,"option%s"%(c),adjustvariantname(getattr(b,"option%s"%c)))
              print(old, getattr(b,"option%s"%(c)))
        pool(lambda:apilimitcall(a.save))
        time.sleep(1)

  """ Business-Utils-Order-Utils """
  def aliexpress_dialog_box_adjust_city(city):
    city = city.upper()
    
    if "ST." in city:
      redprint("ST. in %s, replacing ST. with SAINT" % (city))
      city = city.replace("ST.", "SAINT")

    city = city.replace("'", "")
      
   
    city = city.capitalize()
    return city
  def alitracker(*args):
    print(args)
    order = Get(Order,order_number=int(args[1]))
    x = Filter(Lineitem,shop=args[0],order_id=order.id)
    if x:
      return Get(Lineitem,shop=args[0],order_id=order.id).ali_tracking_number
    else:
      return "Unable to get tracking number for order number %s in %s. It is not available yet." % (args[1],args[0])
  def calculate_average_shipping_time():
    x = Lineitem.objects.filter(~Q(ali_tracking_number=None))
    keycall("get_tracking_events",x)
    no_data = [i for i in x if i == None]
    delivered = [i for i in x if i != None and "DELIVERED" in i.events()[-1].upper()]
    delivering = [i for i in x if i != None and "DELIVERED" not in i.events()[-1].upper()]
    assert len(delivered) + len(delivering) + len(no_data) == len(x)

    average_delivered_times = [(i.events()[-1].date()-i.events()[0].date()).days+(((i.events()[-1].date()-i.events()[0].date())).seconds/(24*60*60)) for i in delivered]
    average_delivered_time_days = tryreturn(lambda:sum(average_delivered_times)/len(average_delivered_times))
    average_delivered_time_business_days = average_delivered_time_days * (5/7)
    average_delivered_time = average_delivered_time_business_days
    average_delivered_times = [round(i,2) for i in average_delivered_times]

    average_delivering_times = [(i.events()[-1].date()-i.events()[0].date()).days+(((i.events()[-1].date()-i.events()[0].date())).seconds/(24*60*60)) for i in delivering]
    average_delivering_time_days = tryreturn(lambda:sum(average_delivering_times)/len(average_delivering_times))
    average_delivering_time_business_days = average_delivering_time_days * (5/7)
    average_delivering_time = average_delivering_time_business_days
    average_delivering_times = [round(i,2) for i in average_delivering_times]

    distinct_print(ordered_json_dumps({a:b for a,b in locals().items() if "average" in a}))
  def lineitemsFeed(shop, date_range=36):
    shop=((Shop()(shop))if(type(shop)==str)else(shop))
    ordersFeed(shop, date_range=date_range)
    # oken orders should be already deleted by then now.

    x = 0
    for order in Order.objects.filter(shop=shop.shop_abbreviation):

      for lineitem in order.line_items:
        lineitem = AttrDict(lineitem) #
        new = Lineitem()


        existing = Lineitem.objects.filter(id=lineitem.id)
        if len(existing) != 0:
          new = existing[0]

        # [shop, order, lineitem]
        new.shop = shop.shop_abbreviation; #print("abbre: %s" % shop.shop_abbreviation)
        new.financial_status = order.financial_status
        new.id = lineitem.id
        new.variant_id = lineitem.variant_id
        
        #if "product_id" not in new.__dict__.keys():
        #  greenprint("product id is not inside existing lineitem __dict__ keys. add it in.")
        try:
          int(new.product_id)
        except Exception as e:
          magentaprint("[disregard [lineitem.product deleted]] Error, %s [setting a new product_id [%s] for line_item %s] -- [lineitem.product_id == None, lineitem.product deleted]"%(e,lineitem.product_id,lineitem.id))
          new.product_id = lineitem.product_id
        #else:
        #  redprint("product id is inside existing lineitem __dict__ keys. not add it in.")
        new.order_id = order.id
        new.quantity = lineitem.quantity
        new.grams = lineitem.grams
        new.fulfillment_tracking_numbers = []
        new.date = order.date
        new.created_at = order.created_at

        if new.created_at < Shop()(shop.shop_abbreviation).Lineitem_Most_Recent_Date:
          continue

        for i in order.fulfillments:
          for j in i["line_items"]:
            if j["id"] == lineitem.id:
              #try:
              new.fulfillment_id = i["id"]
              tracking_numbers =  i.get("tracking_numbers", None)
              if tracking_numbers != None:
                new.fulfillment_tracking_numbers.extend(tracking_numbers)
              #except:
              #  return j

        new.fulfillment_service = lineitem.fulfillment_service # [added 4/21/19]
        new.fulfillment_status = lineitem.fulfillment_status
        new.variant_title = lineitem.variant_title
        new.title = lineitem.title
        new.sku = lineitem.sku
        #if order.total_line_items_price == None:
        #  new.price = order.total_price
        #else:
        #  evened_shipping_price = ((float(order.total_price) - order.total_line_items_price) / len(order.line_items)) #Calculate Shipprice via Total-price-lineitemsprice and Divide that by # lineitems.
        #  old = float(lineitem.price)
        #  new.price = float(lineitem.price) + evened_shipping_price
        #  print(order.id, 'old: ', old, evened_shipping_price, "new with even, %s" % new.price)
        new.price = float(lineitem.price) + ((float(order.total_price) - order.total_line_items_price) / len(order.line_items)) if order.total_line_items_price != None else order.total_price
        # new.ali_price              (nothingtodohere)
        # new.ali_tracking_number    (nothingtodohere)
        # new.ali_tracking_method    (nothingtodohere)
        # new.ali_order_number       (nothingtodohere) 
        new.shipping_address = order.shipping_address
        # new.e2 # time between fulfillment and tracking number post
        # new.e1 # time between orderplacement and fulfillment
        # new.t3 # time tracking number posts
        # new.t2 # time fulfilled
        new.t1 = Date().myDatetimenow(order.created_at)  # (TypeError: can't subtract offset-naive and offset-aware datetimes)
                                      # datetime.datetime(2018, 3, 4, 6, 49, 19, tzinfo=tzoffset(None, -18000))
        new.save()
        #print( " saving: %s " % new.save() )
        x += 1
    OSA.notify(str(x))
    # lineitemsFeed(a_shop())
  def onyx(e=None):
    # lmao, this also works.
    return onyx_lineitems(e)
  def onyx_lineitems(e=None):
    # lmao, this also works.
    x = All(Lineitem)
    data = []
    for i in x:
      to_add = True
      if i.financial_status == "refunded":
        to_add = False
      if i.fulfillment_status == "unfulfilled":
        to_add = False
      if i.fulfillment_status == None:
        to_add = False
      if to_add == True:
        assert i.fulfillment_status in ["partial"] or i.fulfillment_status in ["fulfilled"]
      if to_add == True:
        data.append(i)

    not_refunded = Filter(Lineitem,(~Q(financial_status="refunded")))
    if e == None:
      return data
    elif e == "e1":
      return [i for i in not_refunded if i.t1 and not i.t2] # not_refunded because this is for ... not refunded. so, leftover is to-go. w/means partial/fulfilled can't be. so must be: unfulfilled. but, include partial/fulfilled, just in case.
    elif e == "e2":
      return [i for i in data if i.t2 and not i.t3]
    elif e == "e3":
      return [i for i in data if i.t3 and not i.t4]
    elif e == "e4":
      return [i for i in data if i.t4]
  def onyx_orders():
    not_refunded = Filter(Order,(~Q(financial_status="refunded")))
    partially_fulfilled = not_refunded.filter(fulfillment_status="partial")
    fulfilled = not_refunded.filter(fulfillment_status="fulfilled")
    W = list(partially_fulfilled) + list(fulfilled)
    redprint("ONYX ORDERS REIGNED %s ORDERS" % len(W))
    return W
  def ordersCreate():
    print("ordersCreating...")
  def ordersFeed(shop, date_range=36):
    shop=((Shop()(shop))if(type(shop)==str)else(shop))
    print("Setting Orders in last %s days"%date_range)
    orders = sum([shop.shopify.Order.find(status='any',limit=250, page=pg, created_at_min=Date().dt(-1 * date_range,'%Y-%m-%d')) for pg in range(1, 1+ceil(shop.shopify.Order.count(created_at_min=(Date()-date_range).dateobj )  /250)) ],[])
    payload = []
    for i in orders:
      x = i.to_dict()
      x["created_at"] = Date().parse_date(x["created_at"]).replace(tzinfo=None)
      x['date'] = x["created_at"].date()
      x['shop'] = shop.init_shop
      x["billing_address_contact_name"] = "%s %s"%(x["billing_address"]["first_name"],x["billing_address"]["last_name"])
      if x['fulfillment_status'] is None:
        x['fulfillment_status'] = 'null'
      x["line_items"] = [{f:r[f] for f in ["fulfillment_service","fulfillment_status","gift_card","grams","id","name","price","product_exists","product_id","quantity","sku","title","total_discount","total_discount_set","variant_id","variant_inventory_management","variant_title",]} for r in x["line_items"]]
      SecondaryAction().take_from_order(x)
      payload.append(x)

      Order.objects.update_or_create(**x)
    # I cancelled an order that was a test to myself, so It could not be filtered. manually delete it.
    return payload
  def ordersTrack():
    print("...summoning ordersTrack...")
    payload = []
    for i in range(10):
      data = {}
      payload.append(data)
    print("orders_tracking_core payload: %s"%payload)
    return payload
  def query_google_tracking_urls(tracking_number):
    return re.findall(r'http.*?"',requests.get("https://www.google.com/async/lrfapt?ei=2grpW47TMKza5gKd16vIAg&yv=3&async=lrfsb:{},_id:lrf-pt-async,_pms:s,_fmt:pc".format(tracking_number)).text)
  def similarimagesCreate():
    print("similarimagesCreating...")
    # exec(boot_django)
  def test_variant_names():
    return chromejs("x = document.getElementsByClassName('sku-property-list'); y = x.length; var a = []; for (i=0;i<y;i++) { z = x[i].getElementsByTagName('img'); if(z.length > 0){a.push(...z)}; b = x[i].getElementsByClassName('sku-property-text'); if (b.length > 0) {a.push(...b)}  } ; a; c = []; e = a.length; for (i=0;i<e;i++) {if(a[i].title) {c = c.concat(a[i].title)}; if(a[i].textContent) {c = c.concat(a[i].textContent)} }; c")
  def update_address():
    shop, order_number = dune(OSA.log("Shop abbreviation and order number to update an address for [separated by ', ', for example: 'xyz, 1001']?").split(", "),[lambda i: i,lambda i:int(i)])
    name, address1, address2, city, state, zip_code = None, None, None, None, None, None
    x = OSA.log("Updated shipping address [For example: Adam Watson, 123 A St, Address Line 2 (optional), City A, State, Zip Code]?").split(", ")
    if len(x) == 6:
      name, address1, address2, city, state, zip_code = x
    elif len(x) == 5:
      name, address1, city, state, zip_code = x

    updated_shipping_address = {"name":name,"address1":address1,"address2":address2,"city":city,"province":state,"zip_code":zip_code}

    order = Get(Order,shop=shop,order_number=order_number)
    lineitems = Filter(Lineitem,order_id=order.id)
    lmap(lambda i: Update(i, updated_shipping_address = updated_shipping_address), lineitems)

    updated_shipping_addresses = key("updated_shipping_address",lineitems)
    updated_shipping_addresses_x = oset(updated_shipping_addresses)
    assert len(updated_shipping_addresses_x) == 1
    updated_shipping_address_x = updated_shipping_addresses_x[0]
    if updated_shipping_address_x["address2"] != None:
      OSA.log("Updated shipping address:\n%s, %s, %s, %s, %s, %s"%(updated_shipping_address_x["name"], updated_shipping_address_x["address1"], updated_shipping_address_x["address2"], updated_shipping_address_x["city"], updated_shipping_address_x["province"], updated_shipping_address_x["zip_code"]),tp=False)
    elif updated_shipping_address_x["address2"] == None:
      OSA.log("Updated shipping address:\n%s, %s, %s, %s, %s"%(updated_shipping_address_x["name"], updated_shipping_address_x["address1"], updated_shipping_address_x["city"], updated_shipping_address_x["province"], updated_shipping_address_x["zip_code"]),tp=False)
  def verification_slider(self):
    try:
      count_of_verification_slider_elements = self.ss.ffss("label","for","fm-login-checkcode")
      if len(count_of_verification_slider_elements) == 1:
        ##
        def move_verification_slider(x1=431, x2=574, y1=273, signin_x1=571, signin_y1=304):
          print("Found verification slider.")
          OSA("Firefox")
          self.ss.zoom_out()
          self.ss.zoom_in(1)
          zz(2)
          os.system("~/tavern/tavern/.MouseTools -x %s -y %s; sleep 1" % (x1, y1))
          os.system("~/tavern/tavern/.MouseTools -x %s -y %s; sleep 0" % (x1, y1))
          os.system("~/tavern/tavern/.MouseTools -doubleLeftClick; sleep 2")
          os.system("~/tavern/tavern/.MouseTools -leftClickNoRelease; sleep 0.5")
          os.system("~/tavern/tavern/.MouseTools -x %s -y %s; sleep 1" % (x2, y1))
          os.system("~/tavern/tavern/.MouseTools -releaseMouse; sleep 0.2")
          os.system("~/tavern/tavern/.MouseTools -leftClick; sleep 2")
          os.system("~/tavern/tavern/.MouseTools -x %s -y %s; sleep 0" % (x1+15, y1))
          os.system("~/tavern/tavern/.MouseTools -leftClick; sleep 2")
    
          OSA("Firefox")
          self.ss.find_element_by_name("password").clear()
          self.ss.find_element_by_name("password").send_keys(password)
          OSA("Firefox", ["return"])
          zz(10)
          self.ss.refresh()
          try:
            self.ss.switch_to_frame("alibaba-login-box")
            self.ss.find_element_by_name("loginId").clear()
            self.ss.find_element_by_name("loginId").send_keys(username)
            self.ss.find_element_by_name("password").send_keys(password)
            self.ss.find_element_by_name("submit-btn").send_keys(self.ss.Keys.ENTER)
          except Exception as e:
            print("error: %s" % e)
          zz(15)
        move_verification_slider()
        ##
    except Exception as e:
      print("No slider.")
  class Aliexpress_Requests:
    def __init__(self,window_index=[0,0,3.5,3.5],ph=True,exit_browser=True):
      setattrs(self,"ph",ph,"exit_browser",exit_browser,"window_index",window_index,"headers",session_headers,"username",Get(Shop,shop_abbreviation=Muta()().store_abbre).AliExpress_Email,"password",Get(Shop,shop_abbreviation=Muta()().store_abbre).AliExpress_Password,)
      if(tryreturn(lambda: cookies_to_session(cookies_to_database(self.username, "AliExpress"), requests.Session()).get("https://trade.aliexpress.com/orderList.htm",headers=session_headers).url.find("aliexpress.com/orderList.htm"))>0):
        tryprocess(lambda: cookies_to_database(username=self.username,website_name="AliExpress",cookies=self.ss.get_cookies(),reverse=False))
        self.rq = cookies_to_session(cookies_to_database(self.username, "AliExpress"), requests.Session())
        self.rq.headers = session_headers
        return
      else:
        self.ss = Browser()( ("ch+"if(True==self.ph)else("sele")) ).get("https://login.aliexpress.com/").sp(5).tp(lambda:globe("ss_v").frame("alibaba-login-box")).bat().fid("fm-login-id").fid("fm-login-password").fcn("password-login").bat(self.username,self.password,globe("ss_v").SHADOW.ENTER).sp(10).tp(lambda: cookies_to_database(username=self.username,website_name="AliExpress",cookies=globe("ss_v").get_cookies(),reverse=False)).tp(lambda:setattr(self,"rq",cookies_to_session(cookies_to_database(self.username,"AliExpress"),requests.Session()))).tp(lambda:globe("ss_v").quit()if(self.exit_browser)else())
        self.__init__(window_index=window_index,ph=ph,exit_browser=exit_browser)
    def __call__(self):
      return self.rq
  class Aliexpressorderpager:
    def get_urls(self, x1, x2, get_order_info = True):
      # x1,x2,get_order_info=(Date()-15)(),(Date()-0)(),False

      session = Aliexpress_Requests()()
      r = session.get("https://trade.aliexpress.com/orderList.htm")
      if r.status_code != 200: OSA.log("Error in requesting Aliexpress orders. Some things that can cause this is using a vpn or a using a vps. Please make sure your password is correct as well")
      soup = tryreturn(lambda:BeautifulSoup(Replacements(r.content.decode(),"\n", "", "\r", "", "\t", ""), "lxml"))
      if soup == 0: OSA.log("Error in requesting Aliexpress orders. Some things that can cause this is using a vpn or a using a vps. Please make sure your password is correct as well")
      m_page = (or_list(lambda:[int(i.text) for i in soup.findAll(attrs={"class": "ui-goto-page"})[::-1] if i.text.isdigit()][0],0)) + 1
      print('max ', m_page)
      for page in range(0, m_page):
        _csrf_input = soup.find(attrs={"name": '_csrf_token'})
        if _csrf_input == None:
          return
        csrf = _csrf_input.attrs["value"]

        if a_shop().AliExpress_Most_Recent_Date > x1:
          x1 = Date(a_shop().AliExpress_Most_Recent_Date)
        if a_shop().AliExpress_Most_Recent_Date > x2:
          x2 = Date(a_shop().AliExpress_Most_Recent_Date)

        query = {
          "action": "OrderListAction",
          "eventSubmitDoPage": "doPage",
          "_fm.o._0.s":(x1).strftime("%m/%d/%Y"),
          "_fm.o._0.e":(x2).strftime("%m/%d/%Y"),
          "_fm.o._0.cu": page,
          "pageNum": page + 1,
          "_csrf_token": csrf}
        print("Wait...")
        time.sleep(2)
        r = session.post("https://trade.aliexpress.com/orderList.htm", data=query)
        if r.status_code != 200: OSA.log("error in requesting Aliexpress orders. Some things that can cause this is using a vpn or a using a vps. Please make sure your password is correct as well")

        soup = BeautifulSoup(Replacements(r.content.decode(),"\n", "", "\r", "", "\t", ""), "lxml")
        order_ids = lmap(lambda i: int(findall(i.attrs["href"],"orderId=(.*)")[0]), soup.findAll(attrs={"class": "view-detail-link"}))
        order_times = [Date().myDatetimenow(Date().parse_date(i.text)) for i in soup.findAll("span", attrs={"class":"info-body"}) if tryprocess(lambda: Date().parse_date(i.text)) == 1]
        print("len order ids: %s" % len(order_ids))
        print("Get order list Success, current page is %s" % (page + 1))
        links = soup.findAll(attrs={"class": "view-detail-link"})
        exec(subtract)
        # AliExpress_Account_Order_Scan_Earliest_Date
        lmap(lambda i: Push(Aliexpressorder,id=i[0])(order_time=i[1]) , list(zip(order_ids,order_times)))
        if len(order_ids) == 0:
          return
        if get_order_info == True:
          for order_id, order_time in zip(order_ids, order_times):
            pool(lambda:Aliexpressorder().order_info(order_id, order_time))
            time.sleep(1)

      """ 'x1 = Date()-400\nx2 = Date() - 0\nget_order_info = True\nr = Aliexpress_Requests()().get("https://trade.aliexpress.com/orderList.htm")\nif r.status_code != 200: OSA.log("Error in requesting Aliexpress orders. Some things that can cause this is using a vpn or a using a vps. Please make sure your password is correct as well")\nsoup = tryreturn(lambda:BeautifulSoup(Replacements(r.content.decode(),"\\n", "", "\\r", "", "\\t", ""), "lxml"))\nif soup == 0: OSA.log("Error in requesting Aliexpress orders. Some things that can cause this is using a vpn or a using a vps. Please make sure your password is correct as well")\nm_page = (or_list(lambda:[int(i.text) for i in soup.findAll(attrs={"class": "ui-goto-page"})[::-1] if i.text.isdigit()][0],0)) + 1\nprint(\'max \', m_page)\nfor page in range(0, m_page):\n  _csrf_input = soup.find(attrs={"name": \'_csrf_token\'})\n  csrf = _csrf_input.attrs["value"]\n  query = {\n    "action": "OrderListAction",\n    "eventSubmitDoPage": "doPage",\n    "_fm.o._0.s":(x1).strftime("%m/%d/%Y"),\n    "_fm.o._0.e":(x2).strftime("%m/%d/%Y"),\n    "_fm.o._0.cu": page,\n    "pageNum": page + 1,\n    "_csrf_token": csrf}\n  print("Wait...")\n  time.sleep(2)\n  response = Aliexpress_Requests()().post("https://trade.aliexpress.com/orderList.htm", data=query)\n  if response.status_code != 200: OSA.log("error in requesting Aliexpress orders. Some things that can cause this is using a vpn or a using a vps. Please make sure your password is correct as well")\n\n  soup = BeautifulSoup(Replacements(r.content.decode(),"\\n", "", "\\r", "", "\\t", ""), "lxml")\n  order_ids = lmap(lambda i: int(findall(i.attrs["href"],"orderId=(.*)")[0]), soup.findAll(attrs={"class": "view-detail-link"}))\n  order_times = [Date().myDatetimenow(Date().parse_date(i.text)) for i in soup.findAll("span", attrs={"class":"info-body"}) if tryprocess(lambda: Date().parse_date(i.text)) == 1]\n  print("len order ids: %s" % len(order_ids))\n  print("Get order list Success, current page is %s" % (page + 1))\n\n  if len(order_ids) > 0 and get_order_info == True:\n    for order_id, order_time in zip(order_ids, order_times):\n      Aliexpressorder().order_info(order_id, order_time)\n      time.sleep(1)\n' """
  class Order_Unpender:
    def __init__(self,window_index=[0,0,3.5,3.5],ph=False,exit_browser=False):
      setattrs(self,"ph",ph,"exit_browser",exit_browser,"window_index",window_index,"headers",session_headers,"username",Get(Shop,shop_abbreviation=Muta()().store_abbre).AliExpress_Email,"password",Get(Shop,shop_abbreviation=Muta()().store_abbre).AliExpress_Password,)
      self.ss = Browser()( ("ch+"if(True==self.ph)else("sele")) ).get("https://login.aliexpress.com/").sp(5).tp(lambda:globe("ss_v").frame("alibaba-login-box")).bat().fid("fm-login-id").fid("fm-login-password").fcn("password-login").bat(self.username,self.password,globe("ss_v").SHADOW.ENTER).sp(10).tp(lambda: cookies_to_database(username=self.username,website_name="AliExpress",cookies=globe("ss_v").get_cookies(),reverse=False)).tp(lambda:setattr(self,"rq",cookies_to_session(cookies_to_database(self.username,"AliExpress"),requests.Session()))).tp(lambda:globe("ss_v").quit()if(self.exit_browser)else())
    def __call__(self_):
      # Exec("x_shop = Muta()().store_abbre\nLineitemsFeed().LineitemsFeed(x_shop)\nunfulfilled_orders = keyby(lambda i: InceptedProduct().RScan(id=i.product_id).ali_url, list(tcer(Lineitem.objects.filter(fulfillment_status=None, financial_status='paid', shop=x_shop))))",globals(),locals())
      """ Exec = exec; self_ = self """
      x_shop = Muta()().store_abbre
      LineitemsFeed().LineitemsFeed(x_shop)
      unfulfilled_orders = keyby(lambda i: InceptedProduct().RScan(id=i.product_id).ali_url, list(tcer(Lineitem.objects.filter(fulfillment_status=None, financial_status='paid', shop=x_shop))))
      # """
      if not unfulfilled_orders: return (print("Waiting"), sp(60), self_())

      # """
      setattrs(self_,"seed_order",
        lambda:unfulfilled_orders[-1],
        "shop",lambda:Shop()(self_.seed_order.shop),
        "real_order",lambda:Get(Order,id=self_.seed_order.order_id),
        "orders",lambda:lmap(lambda i:Get(Lineitem,id=AttrDict(i).id), keyby(lambda i: (InceptedProduct().RScan(id=AD(i).product_id).aliexpressvendor)  ==  (InceptedProduct().RScan(id=self_.seed_order.product_id).aliexpressvendor), self_.real_order.line_items)),
        "fulfilled_line_items",lambda:[])
      print(self_.seed_order)
      Exec('globalise(lmap(lambda i: AttrDict(i.to_dict()), Shop()(x_shop).shopify.OrderRisk.find(order_id=self_.seed_order.order_id)),"a")\nif(globe("a") != []):\n  if (max(set(lmap(lambda i:float(i),sud("score",globe("a")))))>=0.5 or "cancel" in sud("recommendation",globe("a"))):\n    OSA.log("Please go to %s in your browser and cancel or refund any high fraud order items"%("%s/orders/%s"%(self_.shop.Administrative_Url,self_.seed_order.id)))\n    (0/0)\nelse:\n  x = OSA.log("Order Risk Details\\n\\nScores: %s\\nMessages: %s\\nRecommendations: %s\\n\\n\\nContinue?"%(Join(", ",sud("score",globe("a"))),Join(", ",sud("message",globe("a"))),Join(", ",sud("recommendation",globe("a")))),tp=False,buttons=["No","Yes"])\n  if x == "Yes":\n    (OSA.log("Continuing",tp=False))\n  else:\n    (0/0)',globals(),locals())
      self_.ss.get("https://shoppingcart.aliexpress.com/shopcart/shopcartDetail.htm?").tp(lambda:lmap(lambda i: (i.click(),sp(2),self_.ss.ffst("button","OK").click().sp(5)), self_.ss.jtns("button",0,{"ae_button_type":"remove"})))

      shipping_address = or_list(lambda:self_.seed_order.updated_shipping_address,lambda:self_.seed_order.shipping_address)
      country, state, city, zip_, address1, address2, name, province = (country_code_dict[shipping_address['country_code']]  ,  states.get(shipping_address['province_code']) if shipping_address['country_code'] == "US" else shipping_address['province']  ,  aliexpress_dialog_box_adjust_city(shipping_address['city'].strip().capitalize())  ,  shipping_address['zip']  ,  shipping_address['address1']  ,  shipping_address['address2']  ,  shipping_address['name']  ,  shipping_address['province'])
      tp(lambda:lmap(lambda i: print("%s: %s"%(i, eval(i))), ["country", "state", "city", "zip_", "address1", "address2", "name", "province"]))
      #
      self_.ss.get("https://ilogisticsaddress.aliexpress.com/addressList.htm").tp(lambda:ifelseget(lambda:"selectedAddressId" in self_.ss.current_url,lambda:None,lambda:self_.ss.fcns("sa-edit").click()))
      lmap(lambda i:i.click(),[i for i in self_.ss.fcns("sa-country")[0].find_elements_by_tag_name("option") if i.text == country])
      for i in self_.ss.fcns("sa-country")[0].find_elements_by_tag_name("option"):
        if i.text == country:
          i.click()
          time.sleep(1)
          break
      for i in self_.ss.fcns("sa-province-wrapper")[0].find_elements_by_tag_name("option"):
        if i.text == state:
          i.click()
          time.sleep(1)
          break
      for i in self_.ss.fcns("sa-city-wrapper")[0].find_elements_by_tag_name("option"):
        if i.text == city:
          i.click()
          time.sleep(1)
          break
      self_.ss.bat().fn("contactPerson").send_keys(name).sp(1).fn("address").send_keys(address1).sp(1).fn("address2").send_keys(address2)
      self_.ss.sp(1).fn("zip").send_keys(zip_).sp(1).fn("mobileNo").send_keys(Shop()(x_shop).Business_Phone_Number).sp(1)
      self_.ss.fn("isDefault").click().fcns("sa-confirm").click()
      shipping_address_ = get_random_address(homepath("~/tavern/tavern/soda/dls")).png()
      self_.ss.save_screenshot(shipping_address_)

      OSA.log("The projected count of items in this order is %s"%(len(self_.orders)))
      for order in self_.orders:
        # Exec('# Get Self Url\nself_.url = InceptedProduct().RScan(id=order.product_id).ali_url\nself_.order = order\nself_.saved_data_1 = [{"shipping_address":address_string_from_dict(self_.real_order.shipping_address),"idx":idx,"total quantity":i["quantity"],"title":i["title"],"variant_title":i["variant_title"],"fulfilled quantity":i["quantity"] if i["fulfillment_status"] == "fulfilled" else 0, "ali_url":Get(Product,id=Get(Lineitem,id=i["id"]).product_id).ali_url,"sku":i["sku"]} for idx,i in enum(self_.real_order.line_items)]\n# Get DATA\nx = Aliexpress_Products().get_product_data(url=InceptedProduct().RScan(id=self_.order.product_id).ali_url)\nx_saved = x\n# Get Important VARIABLES\n\n\nshipping_cost = ShippingCost().get_shipping_cost(x.shipping,x_shop)\ndata2 = or_list(lambda: AD(json.loads(findall(str(x.data),1,\'data: ({"actionModule.*),\'))).skuModule.skuPriceList, lambda: lmap(AD,json.loads(findall(str(x.data),1,"var skuProducts=(.*);"))))\nsku_list = or_list(lambda: AD(json.loads(findall(str(x.data),1,\'data: ({"actionModule.*),\'))).skuModule.productSKUPropertyList, lambda: lmap(AD,json.loads(findall(str(x.data),1,"var skuProducts=(.*);"))))\nvariants = lmap(lambda i: AD(sku = Join("|",Split(", ", i.skuPropIds)), inventory_quantity = i.skuVal.availQuantity, price = or_list(lambda: flt(i.skuVal.actSkuCalPrice) + shipping_cost, lambda: flt(i.skuVal.skuCalPrice) + shipping_cost)), data2)\nproduct = Get(Product,id=self_.order.product_id)',globals(),locals())
        # Get Self Url
        self_.url = InceptedProduct().RScan(id=order.product_id).ali_url
        self_.order = order
        self_.saved_data_1 = [{"shipping_address":address_string_from_dict(self_.real_order.shipping_address),"idx":idx,"total quantity":i["quantity"],"title":i["title"],"variant_title":i["variant_title"],"fulfilled quantity":i["quantity"] if i["fulfillment_status"] == "fulfilled" else 0, "ali_url":Get(Product,id=Get(Lineitem,id=i["id"]).product_id).ali_url,"sku":i["sku"]} for idx,i in enum(self_.real_order.line_items)]
        # Get DATA
        x = Aliexpress_Products().get_product_data(url=InceptedProduct().RScan(id=self_.order.product_id).ali_url)
        x_saved = x
        # Get Important VARIABLES

        to_continue = False        
        # Not Found
        if x.y == "Not Found":
          if("Refund"==OSA.log("This product is not found.\n\nRefund or Manually Add Item To Cart?\n[%s %s %s]"%(((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))),buttons=["Refund","Manually Add Item To Cart"],tp=False)):
            (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))
            to_continue = True
          else:
            OSA.log("Okay you have manually added it to the cart. Please enter the shipping company and the price of the item without including it's shipping in the following screens",tp=False)
            setattrs(self_.order, "ali_tracking_method", OSA.log("Shipping company?"), "ali_price", float(OSA.log("Ali Price of the item without including the shipping (it will be calculated later)")) )
            self_.manually_setted = True
            to_continue = True
            self_.fulfilled_line_items.append(order)
            OSA.log("order price: %s\nali_order_price: %s\n\nPlease check the order price to the ali order price. This is not including the shipping price."%(self_.order.price, self_.order.ali_price))
        #here, continue if it's not found because the rest of the details cannot be calculated
        print("to continue: %s" % (to_continue))
        if to_continue == True: continue

        shipping_cost = ShippingCost().get_shipping_cost(x.shipping,x_shop)
        data2 = or_list(lambda: AD(json.loads(findall(str(x.data),1,'data: ({"actionModule.*),'))).skuModule.skuPriceList, lambda: lmap(AD,json.loads(findall(str(x.data),1,"var skuProducts=(.*);"))))
        sku_list = or_list(lambda: AD(json.loads(findall(str(x.data),1,'data: ({"actionModule.*),'))).skuModule.productSKUPropertyList, lambda: lmap(AD,json.loads(findall(str(x.data),1,"var skuProducts=(.*);"))))
        variants = lmap(lambda i: AD(sku = Join("|",Split(", ", i.skuPropIds)), inventory_quantity = i.skuVal.availQuantity, price = or_list(lambda: flt(i.skuVal.actSkuCalPrice) + shipping_cost, lambda: flt(i.skuVal.skuCalPrice) + shipping_cost)), data2)
        product = Get(Product,id=self_.order.product_id)
        # Exec('to_continue = False        \n# Not Found\nif x.y == "Not Found":\n  if("Refund"==OSA.log("This product is not found.\\n\\nRefund or Manually Add Item To Cart?",buttons=["Refund","Manually Add Item To Cart"],tp=False)):\n    (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))\n    to_continue = True\n# A Variant Not Found\nif Get(UniqueProductIdentifier,product_id=product.id,shop=self_.order.shop,y=self_.order.sku).x.replace("|",",") not in key("sku", variants):\n  if("Refund"==OSA.log("This variant with title: %s at the url: %s is not found.\\n\\nRefund or Manually Add Item To Cart?"%(self_.order.title,InceptedProduct().RScan(id=self_.order.product_id).ali_url),buttons=["Refund","Manually Add Item To Cart"],tp=False)):\n    (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))\n    to_continue = True\n# Out Of Stock\nif keyby(lambda i:Get(UniqueProductIdentifier,product_id=product.id,shop=self_.order.shop,y=self_.order.sku).x.replace("|",",") == i.sku, variants)[0].inventory_quantity == 0:\n  if("Refund"==OSA.log("This variant with title: %s at the url: %s is out of stock.\\n\\nRefund or Manually Add Item To Cart?"%(self_.order.title,InceptedProduct().RScan(id=self_.order.product_id).ali_url),buttons=["Refund","Manually Add Item To Cart"],tp=False)):\n    (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))\n    to_continue = True\n# Low Q\nif keyby(lambda i:Get(UniqueProductIdentifier,product_id=product.id,shop=self_.order.shop,y=self_.order.sku).x.replace("|",",") == i.sku, variants)[0].inventory_quantity < self_.order.quantity:\n  if("Refund"==OSA.log("This variant with title: %s at the url: %s does not have the amount of inventory that the order requires.\\n\\nRefund or Manually Add Item To Cart?"%(self_.order.title,InceptedProduct().RScan(id=self_.order.product_id).ali_url),buttons=["Refund","Manually Add Item To Cart"],tp=False)):\n    (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))\n    to_continue = True\n# High Price\nif keyby(lambda i:Get(UniqueProductIdentifier,product_id=product.id,shop=self_.order.shop,y=self_.order.sku).x.replace("|",",") == i.sku, variants)[0].price > self_.order.price:\n  if("Refund"==OSA.log("This variant with title: %s at the url: %s is priced over the price that it sold for of %s.\\n\\nRefund or Manually Add Item To Cart?"%(self_.order.title,InceptedProduct().RScan(id=self_.order.product_id).ali_url,self_.order.price),buttons=["Refund","Manually Add Item To Cart"],tp=False)):\n    (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))\n    to_continue = True\n# Country Not Supported\nif self_.order.shipping_address.get("country_code") not in ["US"]:\n  if("Refund"==OSA.log("This order is shipping to a country outside of the United States. Refund or Manually Add Item To Cart?",buttons=["Refund","Manually Add Item To Cart"],tp=False)):\n    (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))\n    to_continue = True\n# Shipping Problem\nif x.y == "No ePacket":\n  if("Refund"==OSA.log("This product does not have ePacket Shipping.\\n\\nRefund or Manually Add Item To Cart?",buttons=["Refund","Manually Add Item To Cart"],tp=False)):\n    (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))\n    to_continue = True\n# Order Note\nif self_.real_order.note:\n  if("Refund"==OSA.log("This order has the note:\\n%s\\n\\nRefund or Manually Add Item To Cart?"%(self_.real_order.note),buttons=["Refund","Manually Add Item To Cart"],tp=False)):\n    (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))\n    to_continue = True',globals(),locals())
        #continue and refund/manually order another boxes
        # Country Not Supported
        # if self_.order.shipping_address.get("country_code") not in ["US"]:
        #   if("Refund"==OSA.log("This order is shipping to a country outside of the United States. Refund or Manually Add Item To Cart?",buttons=["Refund","Manually Add Item To Cart"],tp=False)):
        #     (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))
        #     to_continue = True
        #   else:
        #     OSA.log("Okay you have manually added it to the cart. Please enter the shipping company and the price of the item without including it's shipping in the following screens",tp=False)
        #     setattrs(self_.order, "ali_tracking_method", OSA.log("Shipping company?"), "ali_price", float(OSA.log("Ali Price of the item without including the shipping (it will be calculated later)")) )
        #     self_.manually_setted = True
        #     to_continue = True
        #     self_.fulfilled_line_items.append(order)
        #     OSA.log("order price: %s\nali_order_price: %s\n\nPlease check the order price to the ali order price. This is not including the shipping price."%(self_.order.price, self_.order.ali_price))
        # A Variant Not Found
        if Get(UniqueProductIdentifier,product_id=product.id,shop=self_.order.shop,y=self_.order.sku).x.replace("|",",") not in key("sku", variants):
          if("Refund"==OSA.log("This variant with variant title: %s at the url: %s is not found.\n\nRefund or Manually Add Item To Cart?"%(self_.order.variant_title,InceptedProduct().RScan(id=self_.order.product_id).ali_url),buttons=["Refund","Manually Add Item To Cart"],tp=False)):
            (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))
            to_continue = True
          else:
            OSA.log("Okay you have manually added it to the cart. Please enter the shipping company and the price of the item without including it's shipping in the following screens",tp=False)
            setattrs(self_.order, "ali_tracking_method", OSA.log("Shipping company?"), "ali_price", float(OSA.log("Ali Price of the item without including the shipping (it will be calculated later)")) )
            self_.manually_setted = True
            to_continue = True
            self_.fulfilled_line_items.append(order)
            OSA.log("order price: %s\nali_order_price: %s\n\nPlease check the order price to the ali order price. This is not including the shipping price."%(self_.order.price, self_.order.ali_price))
        # Out Of Stock
        if keyby(lambda i:Get(UniqueProductIdentifier,product_id=product.id,shop=self_.order.shop,y=self_.order.sku).x.replace("|",",") == i.sku, variants)[0].inventory_quantity == 0:
          if("Refund"==OSA.log("This variant with title: %s at the url: %s is out of stock.\n\nRefund or Manually Add Item To Cart?"%(self_.order.title,InceptedProduct().RScan(id=self_.order.product_id).ali_url),buttons=["Refund","Manually Add Item To Cart"],tp=False)):
            (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))
            to_continue = True
          else:
            OSA.log("Okay you have manually added it to the cart. Please enter the shipping company and the price of the item without including it's shipping in the following screens",tp=False)
            setattrs(self_.order, "ali_tracking_method", OSA.log("Shipping company?"), "ali_price", float(OSA.log("Ali Price of the item without including the shipping (it will be calculated later)")) )
            self_.manually_setted = True
            to_continue = True
            self_.fulfilled_line_items.append(order)
            OSA.log("order price: %s\nali_order_price: %s\n\nPlease check the order price to the ali order price. This is not including the shipping price."%(self_.order.price, self_.order.ali_price))
        # Low Q
        if keyby(lambda i:Get(UniqueProductIdentifier,product_id=product.id,shop=self_.order.shop,y=self_.order.sku).x.replace("|",",") == i.sku, variants)[0].inventory_quantity < self_.order.quantity:
          if("Refund"==OSA.log("This variant with title: %s at the url: %s does not have the amount of inventory that the order requires.\n\nRefund or Manually Add Item To Cart?"%(self_.order.title,InceptedProduct().RScan(id=self_.order.product_id).ali_url),buttons=["Refund","Manually Add Item To Cart"],tp=False)):
            (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))
            to_continue = True
          else:
            OSA.log("Okay you have manually added it to the cart. Please enter the shipping company and the price of the item without including it's shipping in the following screens",tp=False)
            setattrs(self_.order, "ali_tracking_method", OSA.log("Shipping company?"), "ali_price", float(OSA.log("Ali Price of the item without including the shipping (it will be calculated later)")) )
            self_.manually_setted = True
            to_continue = True
            self_.fulfilled_line_items.append(order)
            OSA.log("order price: %s\nali_order_price: %s\n\nPlease check the order price to the ali order price. This is not including the shipping price."%(self_.order.price, self_.order.ali_price))
        # High Price
        if keyby(lambda i:Get(UniqueProductIdentifier,product_id=product.id,shop=self_.order.shop,y=self_.order.sku).x.replace("|",",") == i.sku, variants)[0].price > self_.order.price:
          if("Refund"==OSA.log("This variant with title: %s at the url: %s is priced over the price that it sold for of %s.\n\nRefund or Manually Add Item To Cart?"%(self_.order.title,InceptedProduct().RScan(id=self_.order.product_id).ali_url,self_.order.price),buttons=["Refund","Manually Add Item To Cart"],tp=False)):
            (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))
            to_continue = True
          else:
            OSA.log("Okay you have manually added it to the cart. Please enter the shipping company and the price of the item without including it's shipping in the following screens",tp=False)
            setattrs(self_.order, "ali_tracking_method", OSA.log("Shipping company?"), "ali_price", float(OSA.log("Ali Price of the item without including the shipping (it will be calculated later)")) )
            self_.manually_setted = True
            to_continue = True
            self_.fulfilled_line_items.append(order)
            OSA.log("order price: %s\nali_order_price: %s\n\nPlease check the order price to the ali order price. This is not including the shipping price."%(self_.order.price, self_.order.ali_price))
        # Shipping Problem
        if x.y == "No ePacket":
          if("Refund"==OSA.log("This product does not have ePacket Shipping.\n\nRefund or Manually Add Item To Cart?",buttons=["Refund","Manually Add Item To Cart"],tp=False)):
            (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))
            to_continue = True
          else:
            OSA.log("Okay you have manually added it to the cart. Please enter the shipping company and the price of the item without including it's shipping in the following screens",tp=False)
            setattrs(self_.order, "ali_tracking_method", OSA.log("Shipping company?"), "ali_price", float(OSA.log("Ali Price of the item without including the shipping (it will be calculated later)")) )
            self_.manually_setted = True
            to_continue = True
            self_.fulfilled_line_items.append(order)
            OSA.log("order price: %s\nali_order_price: %s\n\nPlease check the order price to the ali order price. This is not including the shipping price."%(self_.order.price, self_.order.ali_price))
        # Order Note
        if self_.real_order.note:
          if("Refund"==OSA.log("This order has the note:\n%s\n\nRefund or Manually Add Item To Cart?"%(self_.real_order.note),buttons=["Refund","Manually Add Item To Cart"],tp=False)):
            (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))
            to_continue = True
          else:
            OSA.log("Okay you have manually added it to the cart. Please enter the shipping company and the price of the item without including it's shipping in the following screens",tp=False)
            setattrs(self_.order, "ali_tracking_method", OSA.log("Shipping company?"), "ali_price", float(OSA.log("Ali Price of the item without including the shipping (it will be calculated later)")) )
            self_.manually_setted = True
            to_continue = True
            self_.fulfilled_line_items.append(order)
            OSA.log("order price: %s\nali_order_price: %s\n\nPlease check the order price to the ali order price. This is not including the shipping price."%(self_.order.price, self_.order.ali_price))
        print("to continue: %s" % (to_continue))
        if to_continue == True: continue
        # 'x = AD(data=requests.get("https://www.aliexpress.com/item/32972321655.html?spm=a2g0o.productlist.0.0.502be3db6PIFg5&algo_pvid=6e6ab535-2674-4ada-badb-f307fa42baaf&algo_expid=6e6ab535-2674-4ada-badb-f307fa42baaf-1&btsid=2e90407e-a1e1-4487-a2f2-a56ac864f81f&ws_ab_test=searchweb0_0,searchweb201602_7,searchweb201603_53").text)\nshipping_cost = 1\ndata2 = or_list(lambda: AD(json.loads(findall(str(x.data),1,\'data: ({"actionModule.*),\'))).skuModule.skuPriceList, lambda: lmap(AD,json.loads(findall(str(x.data),1,"var skuProducts=(.*);"))))\nsku_list = or_list(lambda: AD(json.loads(findall(str(x.data),1,\'data: ({"actionModule.*),\'))).skuModule.productSKUPropertyList, lambda: lmap(AD,json.loads(findall(str(x.data),1,"var skuProducts=(.*);"))))\nvariants = lmap(lambda i: AD(sku = Join("|",Split(", ", i.skuPropIds)), inventory_quantity = i.skuVal.availQuantity, price = or_list(lambda: flt(i.skuVal.actSkuCalPrice) + 1, lambda: flt(i.skuVal.skuCalPrice) + 1)), data2)\n# SKU = Get(UniqueProductIdentifier,product_id=self_.order.product_id,shop=self_.order.shop,y=self_.order.sku).x\nSKU = "1583|6144"\nif SKU != "":\n  SKU_OPTIONS = lmap(int, Split("|", SKU))\n  # for idx, i in enum(SKU_OPTIONS):\n  #   self_.ss.fid("sku-%s-%s"%((idx+1), i)).click().sp(2)\n  r = list(enum(SKU_OPTIONS))\n  sku_info_list = []\n  for idx, a in r:\n    options = keyby(lambda i:i.order == idx+1, sku_list)\n    option = options[0]\n    for idx2, b in enum(option.skuPropertyValues):\n      if b.propertyValueId == a:\n        data = AD(option_list_data=None,sku=None,title=None,image_url=None)\n        data.option_list_data = (idx, idx2)\n        sku_info_list.append(data)\n  for info in sku_info_list:\n    a, b = info.option_list_data\n    sku = info.sku\n    title = info.title\n    image_url = info.image_url\n    entries = self_.ss.fcns("sku-property-list")\n    entry = entries[a]\n    entry_values = entry.find_elements_by_class_name("sku-property-item")\n    entry_value = entry_values[b]\n    data.sku = sku\n    text,image_url = None, None\n    if entry_value.find_elements_by_class_name("sku-property-color"):\n      text = entry_value.find_elements_by_class_name("sku-property-color")[0].find_elements_by_tag_name("span")[0].get_attribute("title")\n      image_url = None\n      data.update(title = text, image_url = image_url)\n    if entry_value.find_elements_by_class_name("sku-property-image"):\n      text = entry_value.find_elements_by_class_name("sku-property-image")[0].find_elements_by_tag_name("img")[0].get_attribute("title")\n      text = entry_value.find_elements_by_tag_name("img")[0].get_attribute("title")\n      image_url = entry_value.find_elements_by_class_name("sku-property-image")[0].find_elements_by_tag_name("img")[0].get_attribute("src")\n      image_url = entry_value.find_elements_by_tag_name("img")[0].get_attribute("src")\n      data.update(title = text, image_url = image_url)\n    if entry_value.find_elements_by_class_name("sku-property-text"):\n      text = entry_value.find_elements_by_class_name("sku-property-text")[0].text\n      image_url = None\n      data.update(title = text, image_url = image_url)\n    OSA.log("option list data: %s, %s\\nsku: %s\\ntitle: %s\\nimage_url: %s\\n\\nPlease check that the info is correct."%(a, b, data.sku, data.title, data.image_url))\n    if "selected" not in entry_value.get_attribute("class"):\n      entry_value.click()\n    sp(2)'
        # Exec('# Get URL and CLIKC options\nself_.ss.get(self_.url)\nif self_.order.sku == "Auto":\n  # Auto\n  OSA.log("Sku is auto. Please fill it out.",tp=False)\nelse:\n  SKU = Get(UniqueProductIdentifier,product_id=self_.order.product_id,shop=self_.order.shop,y=self_.order.sku).x\n  if SKU != "":\n    SKU_OPTIONS = lmap(int, Split("|", SKU))\n    # for idx, i in enum(SKU_OPTIONS):\n    #   self_.ss.fid("sku-%s-%s"%((idx+1), i)).click().sp(2)\n    r = list(enum(SKU_OPTIONS))\n    sku_info_list = []\n    for idx, a in r:\n      sku_list_ = key("skuPropertyValues",sku_list)[idx]\n      options = keyby(lambda i:i.order == idx+1, sku_list)\n      option = options[0]\n      for idx2, b in enum(sku_list_):\n        if b.propertyValueId == a:\n          data = AD(option_list_data=None,sku=None,title=None,image_url=None)\n          data.option_list_data = (idx, idx2)\n          sku_info_list.append(data)\n    for info in sku_info_list:\n      a, b = info.option_list_data\n      sku = info.sku\n      title = info.title\n      image_url = info.image_url\n      entries = self_.ss.fcns("sku-property-list")\n      entry = entries[a]\n      entry_values = entry.find_elements_by_class_name("sku-property-item")\n      entry_value = entry_values[b]\n      data.sku = sku\n      text,image_url = None, None\n      if entry_value.find_elements_by_class_name("sku-property-color"):\n        text = entry_value.find_elements_by_class_name("sku-property-color")[0].find_elements_by_tag_name("span")[0].get_attribute("title")\n        image_url = None\n        data.update(title = text, image_url = image_url)\n      if entry_value.find_elements_by_class_name("sku-property-image"):\n        text = entry_value.find_elements_by_class_name("sku-property-image")[0].find_elements_by_tag_name("img")[0].get_attribute("title")\n        text = entry_value.find_elements_by_tag_name("img")[0].get_attribute("title")\n        image_url = entry_value.find_elements_by_class_name("sku-property-image")[0].find_elements_by_tag_name("img")[0].get_attribute("src")\n        image_url = entry_value.find_elements_by_tag_name("img")[0].get_attribute("src")\n        data.update(title = text, image_url = image_url)\n      if entry_value.find_elements_by_class_name("sku-property-text"):\n        text = entry_value.find_elements_by_class_name("sku-property-text")[0].text\n        image_url = None\n        data.update(title = text, image_url = image_url)\n      OSA.log("option list data: %s, %s\\nsku: %s\\ntitle: %s\\nimage_url: %s\\n\\nPlease check that the info is correct."%(a, b, data.sku, data.title, data.image_url))\n      OSA.log("Entry value class: %s" % (entry_value.get_attribute("class")))\n      if "selected" not in entry_value.get_attribute("class"):\n        entry_value.click()\n      sp(2)\n\n    OSA.log("Checking all options could be selected")\n    entries = self_.ss.fcns("sku-property-list")\n    for idx, a in enum(entries):\n      selected = a.find_elements_by_class_name("selected")\n      if selected == []:\n        OSA.log("Unable to select element for option list #%s"%(idx+1))',globals(),locals())
        # Get URL and CLIKC options
        self_.ss.get(self_.url)
        if self_.order.sku == "Auto":
          # Auto
          OSA.log("Sku is auto. Please fill it out.",tp=False)
        else:
          SKU = Get(UniqueProductIdentifier,product_id=self_.order.product_id,shop=self_.order.shop,y=self_.order.sku).x
          if SKU != "":
            SKU_OPTIONS = lmap(int, Split("|", SKU))
            # for idx, i in enum(SKU_OPTIONS):
            #   self_.ss.fid("sku-%s-%s"%((idx+1), i)).click().sp(2)
            r = list(enum(SKU_OPTIONS))
            sku_info_list = []
            for idx, a in r:
              sku_list_ = key("skuPropertyValues",sku_list)[idx]
              for idx_v, i in enum(sku_list):
                i.order_x = idx_v + 1
              options = keyby(lambda i:i.order_x == idx+1, sku_list)
              option = options[0]
              for idx2, b in enum(sku_list_):
                if b.propertyValueId == a:
                  data = AD(option_list_data=None,sku=None,title=None,image_url=None)
                  print(idx, idx2)
                  data.option_list_data = (idx, idx2)
                  sku_info_list.append(data)
            for info in sku_info_list:
              a, b = info.option_list_data
              sku = info.sku
              title = info.title
              image_url = info.image_url
              entries = self_.ss.fcns("sku-property-list")
              entry = entries[a]
              entry_values = entry.find_elements_by_class_name("sku-property-item")
              entry_value = entry_values[b]
              data.sku = sku
              text,image_url = None, None
              if entry_value.find_elements_by_class_name("sku-property-color"):
                text = entry_value.find_elements_by_class_name("sku-property-color")[0].find_elements_by_tag_name("span")[0].get_attribute("title")
                image_url = None
                data.update(title = text, image_url = image_url)
              if entry_value.find_elements_by_class_name("sku-property-image"):
                text = entry_value.find_elements_by_class_name("sku-property-image")[0].find_elements_by_tag_name("img")[0].get_attribute("title")
                text = entry_value.find_elements_by_tag_name("img")[0].get_attribute("title")
                image_url = entry_value.find_elements_by_class_name("sku-property-image")[0].find_elements_by_tag_name("img")[0].get_attribute("src")
                image_url = entry_value.find_elements_by_tag_name("img")[0].get_attribute("src")
                data.update(title = text, image_url = image_url)
              if entry_value.find_elements_by_class_name("sku-property-text"):
                text = entry_value.find_elements_by_class_name("sku-property-text")[0].text
                image_url = None
                data.update(title = text, image_url = image_url)
              OSA.log("option list data: %s, %s\nsku: %s\ntitle: %s\nimage_url: %s\n\nPlease check that the info is correct."%(a, b, data.sku, data.title, data.image_url))
              OSA.log("Entry value class: %s" % (entry_value.get_attribute("class")))
              if "selected" not in entry_value.get_attribute("class"):
                entry_value.click()
              sp(2)

            OSA.log("Checking all options could be selected")
            entries = self_.ss.fcns("sku-property-list")
            for idx, a in enum(entries):
              selected = a.find_elements_by_class_name("selected")
              if selected == []:
                OSA.log("Unable to select element for option list #%s"%(idx+1))

        # Exec('to_return = False        \n# ADDINVENTORY\nif 0 in lmap(lambda i: self_.ss.fcn("p-quantity-increase").click().sp(1), lrange(self_.order.quantity - 1)):\n  (OSA.log("Could not add everything to inventory. This is an error that should not happen. Exitting."))\n  to_return = True\n\n# CHECKINVENTORYEQUAL\nif or_list(lambda:int(self_.ss.fcn("product-number-picker",4).find_elements_by_tag_name("input")[0].get_attribute("value")),lambda:int(self_.ss.fcn("p-quantity-input",4).get_attribute("value"))) != self_.order.quantity:\n  (OSA.log("Current quantity to add to cart is not equal to the order quantity. This is an error that should not happen. Exitting."))\n  to_return = True\n\n# SHIPPING BUTTON CHECK\n# self_.ss.fid("j-shipping-company").click().fcn("s-company-title", _time=30).sp(2)\nself_.ss.ffss("span","ae_button_type","detail_change_freight_click",4).click().sp(2)\nif Shop()(x_shop).Allow_Additional_Shipping_Methods == False:\n  if "ePacket" not in sud("text",self_.ss.fcns("service-name")):\n  # if tryprocess(lambda: self_.ss.ffst("td","ePacket")) == 0:\n    (OSA.log("No ePacket button is available. This is an error that should not happen. Exitting."))\n    to_return = True',globals(),locals())
        #continue and refund/manually order another boxes
        to_continue = False        
        # ADDINVENTORY
        if 0 in lmap(lambda i: self_.ss.fcns("next-after").click().sp(1), lrange(self_.order.quantity - 1)):
          (OSA.log("Could not add everything to inventory. This is an error that should not happen."))
          option = OSA.log("Do you want to manually find another one to add it to the cart or do you want to refund the quantity that could not be fulfilled?",buttons=["Refund","Manually Add Items To Cart"])
          if option == "Refund":
            (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))
            to_continue = True
          else:
            OSA.log("Okay you have manually added it to the cart. Please enter the shipping company and the price of the item without including it's shipping in the following screens",tp=False)
            setattrs(self_.order, "ali_tracking_method", OSA.log("Shipping company?"), "ali_price", float(OSA.log("Ali Price of the item without including the shipping (it will be calculated later)")) )
            self_.manually_setted = True
            to_continue = True
            self_.fulfilled_line_items.append(order)
            OSA.log("order price: %s\nali_order_price: %s\n\nPlease check the order price to the ali order price. This is not including the shipping price."%(self_.order.price, self_.order.ali_price))
        # CHECKINVENTORYEQUAL
        if or_list(lambda:int(self_.ss.fcn("product-number-picker",4).find_elements_by_tag_name("input")[0].get_attribute("value")),lambda:int(self_.ss.fcn("p-quantity-input",4).get_attribute("value"))) != self_.order.quantity:
          (OSA.log("Current quantity to add to cart is not equal to the order quantity. This is an error that should not happen."))
          option = OSA.log("Do you want to manually find another one to add it to the cart or do you want to refund the quantity that could not be added to the cart?",buttons=["Refund","Manually Add Items To Cart"])
          if option == "Refund":
            (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))
            to_continue = True
          else:
            OSA.log("Okay you have manually added it to the cart. Please enter the shipping company and the price of the item without including it's shipping in the following screens",tp=False)
            setattrs(self_.order, "ali_tracking_method", OSA.log("Shipping company?"), "ali_price", float(OSA.log("Ali Price of the item without including the shipping (it will be calculated later)")) )
            self_.manually_setted = True
            to_continue = True
            self_.fulfilled_line_items.append(order)
            OSA.log("order price: %s\nali_order_price: %s\n\nPlease check the order price to the ali order price. This is not including the shipping price."%(self_.order.price, self_.order.ali_price))
        # SHIPPING BUTTON CHECK
        # self_.ss.fid("j-shipping-company").click().fcn("s-company-title", _time=30).sp(2)
        self_.ss.ffss("span","ae_button_type","detail_change_freight_click",4).click().sp(2)
        if Shop()(x_shop).Allow_Additional_Shipping_Methods == False:
          if "ePacket" not in sud("text",self_.ss.fcns("service-name")):
          # if tryprocess(lambda: self_.ss.ffst("td","ePacket")) == 0:
            (OSA.log("No ePacket button is available. This is an error that should not happen."))
            option = OSA.log("Do you want to manually find another one with ePacket to add it to the cart or do you want to refund the items without ePacket?",buttons=["Refund","Manually Add Items To Cart"])
            if option == "Refund":
              (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))
              to_continue = True
            else:
              OSA.log("Okay you have manually added it to the cart. Please enter the shipping company and the price of the item without including it's shipping in the following screens",tp=False)
              setattrs(self_.order, "ali_tracking_method", OSA.log("Shipping company?"), "ali_price", float(OSA.log("Ali Price of the item without including the shipping (it will be calculated later)")) )
              self_.manually_setted = True
              to_continue = True
              self_.fulfilled_line_items.append(order)
              OSA.log("order price: %s\nali_order_price: %s\n\nPlease check the order price to the ali order price. This is not including the shipping price."%(self_.order.price, self_.order.ali_price))

        if to_continue == True: continue


        # Exec('# click the shipping option\nshipping_company = ShippingCost().get_shipping_company(x.shipping,x_shop)\n# self_.ss.ffst("td", shipping_company).click().ffs("input","value","OK").click().sp(2)\nself_.ss.jcns("service-name","click",{"text":shipping_company}).sp(2).jtns("button","click",{"ae_button_type":"detail_shipping_panel_apply"}).sp(2)\n# Set TrackMethod and Price\n# setattrs(self_.order, "ali_tracking_method", shipping_company, "ali_price", (self_.order.quantity *float( Join(".",findall(self_.ss.fcn("product-price-value").text,"\\d+"))))+(float(Join(".",findall(self_.ss.fcn("product-shipping-price").text,"\\d+")))) )\n# add shipping price later\nsetattrs(self_.order, "ali_tracking_method", shipping_company, "ali_price", (self_.order.quantity *float( Join(".",findall(self_.ss.fcn("product-price-value").text,"\\d+")))) )\nOSA.log("order price: %s\\nali_order_price: %s\\n\\nPlease check the order price to the ali order price. This is not including the shipping price."%(self_.order.price, self_.order.ali_price))',globals(),locals())
        # click the shipping option
        shipping_company = ShippingCost().get_shipping_company(x.shipping,x_shop)
        # self_.ss.ffst("td", shipping_company).click().ffs("input","value","OK").click().sp(2)
        self_.ss.jcns("service-name","click",{"text":shipping_company}).sp(2).jtns("button","click",{"ae_button_type":"detail_shipping_panel_apply"}).sp(2)
        # Set TrackMethod and Price
        # setattrs(self_.order, "ali_tracking_method", shipping_company, "ali_price", (self_.order.quantity *float( Join(".",findall(self_.ss.fcn("product-price-value").text,"\d+"))))+(float(Join(".",findall(self_.ss.fcn("product-shipping-price").text,"\d+")))) )
        # add shipping price later
        # Exec('to_return = False\n# add to cart action and check it\nclick_add_to_cart_action = tryprocess(lambda: self_.ss.fcn("addcart").click().sp(5))\nif click_add_to_cart_action == 0:\n  (OSA.log("Could not add this product to cart. This is an error that should not happen. Exitting."))\n  to_return = True',globals(),locals())
        to_continue = False
        # add to cart action and check it
        click_add_to_cart_action = tryprocess(lambda: self_.ss.fcn("addcart").click().sp(5))
        if click_add_to_cart_action == 0:
          (OSA.log("Could not add this product to cart. This is an error that should not happen. Exitting."))
          option = OSA.log("Do you want to manually find another one where it can add it to the cart or do you want to refund the item that can't add to cart?",buttons=["Refund","Manually Add Items To Cart"])
          if option == "Refund":
            (OSA.log("Please refund the %s %s at %s"%((self_.order.quantity),("%s(%s)"%(self_.order.title, self_.order.variant_title)),("%s/orders/%s"%(Get(Shop,shop_abbreviation=self_.order.shop).Administrative_Url,self_.real_order.id)))))
            to_continue = True
          else:
            OSA.log("Okay you have manually added it to the cart. Please enter the shipping company and the price of the item without including it's shipping in the following screens",tp=False)
            setattrs(self_.order, "ali_tracking_method", OSA.log("Shipping company?"), "ali_price", float(OSA.log("Ali Price of the item without including the shipping (it will be calculated later)")) )
            self_.manually_setted = True
            to_continue = True
            self_.fulfilled_line_items.append(order)
            OSA.log("order price: %s\nali_order_price: %s\n\nPlease check the order price to the ali order price. This is not including the shipping price."%(self_.order.price, self_.order.ali_price))

        if to_continue == True: continue
        
        if getattr(self,"manually_setted",False) == False:
          self_.ss.fcns("next-dialog-close-icon").click().sp(2)
          setattrs(self_.order, "ali_tracking_method", shipping_company, "ali_price", (self_.order.quantity *float( Join(".",findall(self_.ss.fcn("product-price-value").text,"\d+")))) )
        else:
          OSA.log("Affirming self order amounts:\nTracking:%s\nAli Price:%s" % (self_.order.ali_tracking_method,self_.order.ali_price))
        OSA.log("order price: %s\nali_order_price: %s\n\nPlease check the order price to the ali order price. This is not including the shipping price."%(self_.order.price, self_.order.ali_price))


        ifdo(lambda:click_add_to_cart_action == 1,lambda:self_.fulfilled_line_items.append(self_.order))
      #
      self_.ss.get("https://shoppingcart.aliexpress.com/shopcart/shopcartDetail.htm").zoom_out(5)

      if self_.fulfilled_line_items == []:
        # if a 1 item order had all items refunded
        self_()
        return

      self_.ss.fcn("next-checkbox-input").click().sp(7).pagestop_timeout().fid("checkout-button").click().sp(5).tp(lambda:self_.ss.frame("poplay-order").fcn("switch-to-full").click().sp(3)).sp(5)

      # Exec('# Adjust Cost Based on Shipping\nshipping_cost = flt(findall(self_.ss.page_source,1,"seller-charges.*?Shipping.*?charge-cost.*?\\$(\\d+\\.\\d+)"))\nsales_tax_cost = flt(findall(self_.ss.page_source,1,"seller-charges.*?tax.*?charge-cost.*?\\$(\\d+\\.\\d+)")) if findall(self_.ss.page_source,"seller-charges.*?tax.*?charge-cost.*?\\$(\\d+\\.\\d+)") else 0\nfree_shipping_orders_count = len([i for i in self_.ss.fcns("shopping-cart-product") if i.find_elements_by_class_name("logistics-cost")[0].text == "Free Shipping"])\nadditional_shipping_cost = or_list(lambda:shipping_cost/(len(self_.orders)-free_shipping_orders_count),lambda:0)\nadditional_sales_tax_cost = or_list(lambda:sales_tax_cost/(len(self_.orders)-free_shipping_orders_count),lambda:0)\nOSA.log("The additional shipping cost: %s" % (additional_shipping_cost))\nlmap(lambda i: setattr(i,"ali_price",i.ali_price+additional_shipping_cost+additional_sales_tax_cost),self_.orders)',globals(),locals())
      
      # Adjust Cost Based on Shipping
      shipping_cost = flt(Join(".",findall(sudby(lambda i:"Shipping" in i,sud("text",self_.ss.fcns("charge-item")))[0],"\d+\.\d+")))
      sales_tax_cost = flt(Join(".",findall(sudby(lambda i:"tax" in i,sud("text",self_.ss.fcns("charge-item")))[0],"\d+\.\d+"))) if sudby(lambda i:"tax" in i,sud("text",self_.ss.fcns("charge-item"))) else 0
      free_shipping_orders_count = len([i for i in self_.ss.fcns("shopping-cart-product") if i.find_elements_by_class_name("logistics-cost")[0].text == "Free Shipping"])
      additional_shipping_cost = or_list(lambda:shipping_cost/(len(self_.orders)-free_shipping_orders_count),lambda:0)
      additional_sales_tax_cost = or_list(lambda:sales_tax_cost/(len(self_.orders)),lambda:0)
      OSA.log("The additional shipping cost: %s" % (additional_shipping_cost))
      lmap(lambda i: setattr(i,"ali_price",i.ali_price+additional_shipping_cost+additional_sales_tax_cost),self_.orders)

      # 3/1 happened where the is_webmoney did not show up but will see if this happens for all other orders.
      is_webmoney = False
      # self_.ss.ffst("p","Payment Methods").click().sp(4).tp(lambda:self_.ss.jcns("pay-title","click",{"text":"Show all payment methods"}).sp(2))
      self_.ss.fcns("payment-title").click().sp(4).tp(lambda:self_.ss.jcns("pay-title","click",{"text":"Show all payment methods"}).sp(2))
      if "WESTUNION" in [i.text for i in self_.ss.fcns("disabled")]: is_webmoney = True
      if is_webmoney == False: self_.ss.fcn("west-union").click().sp(3)
      elif is_webmoney == True: self_.ss.fcn("wm-ebank").click().sp(3)
      self_.ss.tp(lambda:[(i.click(),time.sleep(2)) for i in self_.ss.jcns("seller-message-title",0,{"ae_button_type":"message_for_seller"})])
      self_.ss.tp(lambda: lmap(lambda i: [i.clear(), i.send_keys("Hello, I am dropshipping, please send this without price or invoice\nThank you"), sp(2)], self_.ss.ftns("textarea")))
      # datas = [{"qty":i.quantity,"title":i.title,"url":Get(Product,id=i.product_id).ali_url,"variant_title":i.variant_title,"idx":idx} for idx, i in enum(unfulfilled_orders)]
      datas = [{"qty":i.quantity,"title":i.title,"url":InceptedProduct().RScan(i.product_id).ali_url,"variant_title":i.variant_title,"idx":idx} for idx, i in enum(self_.orders)]
      OSA.log("Check datas:\n\n%s"%(str(json.dumps(datas,indent=4))))
      Exec('# Captcha Loop Until Able To Check Out\nif self_.ss.fcns("captche-input",6):\n  OSA.log("Found captcha")\n  while self_.ss.fcns("captche-input",6):\n    self_.ss.fcn("captche-input").send_keys(handle_captcha(findall(self_.ss.page_source,1,\'(http://captcha.alibaba.com.*?)"\').replace("amp;",""))[\'text\'])\n    complete_order = True\n    if complete_order == True:\n      ss.fid("checkout-button").click().sp(30)\n    # ifdo(lambda:"shoppingcart.aliexpress.com/order/confirm_order.htm" in self_.ss.current_url, lambda:[self_.ss.ffst("p","Payment Methods").click().ffst("p","Other payment methods").click().ffst("button","Confirm").click().sp(2), lmap(lambda i: [i.clear(), i.send_keys("Hello dear, I am dropshipping, please send this without price or invoice\\nThank you"), sp(1)], self_.ss.ftns("textarea"))])\n    ifdo(lambda:"shoppingcart.aliexpress.com/order/confirm_order.htm" in self_.ss.current_url, lambda:[self_.ss.ffst("p","Payment Methods").click().ffst("button","Confirm").click().sp(2), lmap(lambda i: [i.clear(), i.send_keys("Hello dear, I am dropshipping, please send this without price or invoice\\nThank you"), sp(1)], self_.ss.ftns("textarea"))])\n  # input("Proceed")\nelse:\n  complete_order = True\n  if complete_order == True:\n    self_.ss.fid("checkout-button").click().sp(30)',globals(),locals())
 

      globals().update(locals())
      self_.ss.get("https://trade.aliexpress.com/orderList.htm").fcn("msg-detail").click()
      order_ids = lmap(lambda i:int(i.find_elements_by_class_name("info-body")[0].text),self_.ss.fcns("order-info"))
      self_.ss.zoom_level(2).fcn("all-selector").click().fid("TP_CombinPay").click().sp(5).frame("poplay-order")
      price,card_id=float(Join(".",findall(self_.ss.fcn("price-value").text,"\d+"))),findall(self_.ss.fcn('payment-title').text,"\d+")[1]
      self_.ss.fcns("btn-bind").click().sp(10)
      if len(self_.ss.jcns("next-message-title",0,{"text":"Payment Successful"})) == 0:
        if self_.ss.fcns("card-number-input"):
          self_.ss.fid("cardNum").send_keys(Shop()(x_shop).AliExpress_Financial_Card_Information["Financial_Card_Number"])
          self_.ss.sp(10)
          self_.ss.ffst("button","Confirm").click()
          self_.ss.sp(30)
        elif self_.ss.ftns("iframe") and self_.ss.fids("expires"):
          self_.ss.fid("expires").send_keys(Shop()(x_shop).AliExpress_Financial_Card_Information["Financial_Card_Expiration_Date"])
          self_.ss.sp(10)
          self_.ss.fcns("next-btn-primary").click()
          self_.ss.sp(30)
      ifdo(lambda:len(order_ids)!=1,lambda:OSA.log("The number of order numbers is %s, not 1."%(len(order_ids)),tp=False))
      lmap(lambda i:Update(i,saved_address_screenshot=open(shipping_address_,"rb").read()),self_.orders)
      PaidCardNumber(order_ids=order_ids,price=price,card_id=card_id,paid_at = Date().Now() ).save()

      lmap(lambda i: [Update(i,ali_order_number=order_ids[0],fulfillment_status="fulfilled",t2=Date().myDatetimenow()),Update(i,e1=i.t2-i.t1)], self_.orders)
      lmap(lambda i: exec("assert Get(Lineitem,id=self_.order.id).fulfillment_status == 'fulfilled'"), self_.orders)


      real_order_shopify_side = self_.shop.ofind(id_=self_.real_order.id)
      line_items = keyby(lambda i:i.id in sud("id", self_.fulfilled_line_items), real_order_shopify_side.line_items)
      lmap(lambda i:xir(i,fulfillment_status="fulfilled"),line_items)
      line_items = lmap(lambda i:i.to_dict(), line_items)
      lmap(lambda i: delete_keys(i,"admin_graphql_api_id","discount_allocations","origin_location","price_set","total_discount_set"), line_items)
      data = dict(line_items=line_items,order_id=self_.real_order.id,notify_customer=True,service="manual",location_id=self_.shop.location_id)
      print("\n===fulfillment_data\n%s"%json.dumps(data, indent=4))
      new_fulfillment = self_.shop.shopify.Fulfillment(data)
      ifdo(lambda: new_fulfillment.save() != True,lambda:OSA.log("Fulfillment did not save."))
      ordersFeed(self_.real_order.shop,7)
      self_.real_order = Get(Order,id=self_.real_order.id)
      self_.saved_data_2 = [{"shipping_address":address_string_from_dict(self_.real_order.shipping_address),"idx":idx,"total quantity":i["quantity"],"title":i["title"],"variant_title":i["variant_title"],"fulfilled quantity":i["quantity"] if i["fulfillment_status"] == "fulfilled" else 0, "ali_url":InceptedProduct().RScan(Get(Lineitem,id=i["id"]).product_id).ali_url,"sku":i["sku"]} for idx,i in enum(self_.real_order.line_items)]
      OSA.log(df=Join("\n",[compare_dict(a,b) for a,b in zip(self_.saved_data_1,self_.saved_data_2)]))


      self_()
  class Orders(object):
    def __init__(self):
      shop = Shop()(init_shop=shop)
      self.ordersCreate()
      self.ordersTrack()
      self.similarimagesCreate()
      self.ordersEmail()
    def transmit(self):
      ordersSheet.postSelf(Order.Objects())
    def ordersCreate(self):
      pass
    def ordersTrack(self):
      pass
    def ordersEmail(self):
      pass
    def similarimagesCreate(self):
      pass
  class ordersEmail(object):
    def __init__(self, shop):
      self.e = Emailer(shop.Business_Email_Address)
    def formulate_email(self, shop, order_no, contact_name, to_email, tracking_number_list):
      print("Sending Email")
      subject = 'Your %s Tracking Number for Order # %s' % (shop.Business_Name, order_no)
      to = to_email
      msgHtml = "<br>Dear %s,<br /><br>Thank you for your purchase at %s! <br /> <br> Attached is the tracking number for Order #%s: "% (contact_name.title(), shop.Business_Name, order_no)
      msgHtml += "<br>Shipping is via USPS and may be tracked as follows: <br />"
      tracking_link = "<br>Link: https://www.17track.net/en/track?nums="
      for tn in tracking_number_list:
        tracking_link += '%s,'%tn
      tracking_link += "<br /><br><br />"
      for i in tracking_number_list:
        tracking_link += "<br>%s<br />" % i
      msgHtml += tracking_link
      msgHtml += "<br>Please do not hesitate to reply back to this email if you have any questions.<br />"
      msgHtml += "<br><br /><br> - Lilith from %s<br />" % shop.Business_Name
      print(msgHtml)
      return_status = self.e.send_message(subject,to,msgHtml)
      print("sleeping 5 seconds to assure no rate limiting.. ")
      time.sleep(5)
      globals()['return_status'] = return_status
      if 'HttpError' in return_status:
        print('HttpError ', return_status, "Sleeping 10 Minutes")
        time.sleep(600)

  """ GUIs """
  class Fig:
    def __init__(self):
      import rumps
      from rumps import MenuItem as M
      from rumps import MenuItem
      self.app = rumps.App("🍃", quit_button=Null)
      globals().update(locals())


      self.set_menu()
      time.sleep(3.2)
      # process(lambda: [[time.sleep(1),[self.set_menu(),Update(All(Muta)[0],fig_changed=0)] if All(Muta)[0].fig_changed == 1 else()] for i in range(WHILE_TRUE)])
      time.sleep(0)
      self.app.run()

    def set_menu(self):
      keys = list(self.app.menu.keys())
      redprint(keys)
      for i in keys:
        self.app.menu.pop(i)
      self.app.title = "|%s|%s|%s|%s|%s|"%(Muta()().store_abbre.upper()if(Muta()().store_abbre)else("-"), (Muta()().niche)if(Muta()().niche)else("-"), (Muta()().add_thumbnails)if(Muta()().add_thumbnails)else("-"),(Muta()().is_free_plus_ship)if(Muta()().is_free_plus_ship)else("-"),(Muta()().page)if(Muta()().page)else("-"), )
      self.app.menu = [

                  ]
  class New_Menulet:
    def __init__(self):
      """
      You Cannot Use `self` in an eval(exec(`_ _`)), in Dictionaryentry (you made the eval [1] of a list and [0], the setitem(g(),`_ _`,self) ,  then used g()[`_ _`]  )

      """
      import rumps
      import sys
      from rumps import MenuItem as M
      from rumps import MenuItem
      globals().update(locals())
      #self.app = rumps.App("Fig", quit_button=rumps.MenuItem('Quit Fig', key='q'),)
      #self.app = rumps.App("Fig")
      self.app = rumps.App("☃️", quit_button=Null)
      self.set_menu()
      #process(  lambda: [time.sleep(0.3), self.set_menu()]  )
      # [default] process(lambda:([tryprocess(lambda:  ([  setattr(g,"Z",pyperclip.paste().strip())  ,    ,  pyperclip.copy("\n")  ,  ]))       if((Muta()().job_search_on)and(pyperclip.paste().startswith("job: ")))else(zz(0.25))for i in(range(WHILE_TRUE))] ))
      # process(lambda:([tryprocess(lambda:  ([  setattr(g,"Z",pyperclip.paste().strip())  ,  process(lambda:Application2().run(g.Z.split(": ",1)[1].strip()))  ,  pyperclip.copy("\n")  ,  ]))       if((Muta()().job_search_on)and(pyperclip.paste().startswith("job: ")))else(zz(0.25))for i in(range(WHILE_TRUE))] ))
      # process(lambda:([tryprocess(lambda:  ([  setattr(g,"Z",pyperclip.paste().strip())  ,  swamp([lambda:(New_Email().verify()),lambda:ProductTalk().take_it(),lambda:New_Email().take_response(Filter(New_Email,responded=0)[0])], [lambda:g.Z.startswith("support: verify: "), lambda:g.Z.startswith("support: ptalk: "), lambda:g.Z.startswith("support: next: ")])  ,  pyperclip.copy("\n")  ,  Update(Muta()(),new_menulet_changed=1)  ]))       if((Muta()().support_on)and(pyperclip.paste().startswith("support: ")))else(zz(0.25))for i in(range(WHILE_TRUE))] ))
      # process(lambda:([tryprocess(lambda: [ScienceVessel().add() if (pyperclip.paste().startswith("twirl1: ") and Muta()().sciencevessels_on) else sp(0.25)]) for i in range(WHILE_TRUE)]))
      # process(lambda: [Settlement.settlement_depositionz(date=(Date()-1).dateobj), self.set_menu()])
      # process(lambda:[tryprocess(lambda:([setattr(g,"Z",pyperclip.paste().strip()),pyperclip.copy("\n"),pool(lambda:tp(lambda:Product().add_product(),ep=1))] if((Muta()().fig_on)and(pyperclip.paste().startswith("twirl1: ")))else(zz(0.25))))  for i in(range(WHILE_TRUE))] )
      # process(lambda:[tryprocess(lambda:([AddProduct().add() if (pyperclip.paste().startswith("twirl1: ") and Muta()().addproducts_on) else sp(0.25)])) for i in range(WHILE_TRUE)])
      # process(lambda:[tryprocess(lambda:([setattr(g,"Z",pyperclip.paste().strip()),pyperclip.copy("\n"),pool(lambda:tp(lambda:InceptedProduct().X(),ep=1))] if((Muta()().incept_product_on)and(pyperclip.paste().startswith("incept: ")))else(zz(1))))  for i in(range(WHILE_TRUE))] )
      process(lambda:[(swamp([
                                lambda:tryprocess(lambda:[setattr(g,"Z",pyperclip.paste().strip()),pyperclip.copy("\n"),pool(lambda:tp(lambda:Product().add_product(),ep=1))]),
                                lambda:tryprocess(lambda:AddProduct().add()),
                                lambda:tryprocess(lambda:[setattr(g,"Z",pyperclip.paste().strip()),pyperclip.copy("\n"),pool(lambda:tp(lambda:InceptedProduct().X(),ep=1))]),
                                lambda:tryprocess(lambda:ProductChange().add()),
                                lambda:tryprocess(lambda:OSA().notify("start updates")),
                                # lambda:tryprocess(lambda:os.system("say 'clean room'")),
                              ],
                              [
                                lambda:((Muta()().fig_on)and(pyperclip.paste().startswith("twirl1: "))),
                                lambda:(pyperclip.paste().startswith("twirl1: ") and Muta()().addproducts_on),
                                lambda:((Muta()().incept_product_on)and(pyperclip.paste().startswith("incept: "))),
                                lambda:(pyperclip.paste().startswith("productchange: ") and Muta()().productchange_on),
                                lambda:(Time().timeobj.hour == 6),
                                # lambda:((Time().timeobj.hour == 12 and Time().timeobj.minute == 0) or (Time().timeobj.hour == 0 and Time().timeobj.minute == 0)),
                              ]),sp(0.25)) for i in range(WHILE_TRUE)])
      # process(lambda:[(swamp([
      #                           lambda:tryprocess(lambda:[CommandReceiver()]),
      #                         ],
      #                         [
      #                           lambda:(True),
      #                         ]),sp(10)) for i in range(WHILE_TRUE)])
      # process(lambda:[tryprocess(lambda:([ProductChange().add() if (pyperclip.paste().startswith("productchange: ") and Muta()().productchange_on) else sp(0.25)])) for i in range(WHILE_TRUE)])
      # process(lambda:[tryprocess(lambda:([pool(lambda:tp(lambda:Facebookpage().create_facebook_post(Muta()().page),ep=1))] if((pyperclip.paste().startswith("fb_post: ")))else(zz(1))))  for i in(range(WHILE_TRUE))] )

      # process(lambda:[tryprocess(lambda:([setattr(g,"Z",pyperclip.paste().strip()),OSA.log(str(alitracker(*g.Z.split("alitracker: ")[1].split(", ")))),pyperclip.copy("\n"),sp(2)] if(pyperclip.paste().startswith("alitracker: "))else(zz(5))))  for i in(range(WHILE_TRUE))] )
      # process(lambda:[tryprocess(lambda:([setattr(g,"Z",pyperclip.paste().strip()),OSA.log(reverse_image_search(g.Z.split("imagesearch: ")[1])),pyperclip.copy("\n"),sp(2)] if(pyperclip.paste().startswith("imagesearch: "))else(zz(3))))  for i in(range(WHILE_TRUE))] )
      # process(lambda:[tryprocess(lambda:([setattr(g,"Z",pyperclip.paste().strip()),OSA.log(get_ali_url(g.Z.split("get_ali_url: ")[1].split("/")[-1])),pyperclip.copy("\n"),sp(2)] if(pyperclip.paste().startswith("get_ali_url: "))else(sp(2))))  for i in(range(WHILE_TRUE))] )

      # 'process(lambda:(sp(0),[tryprocess(lambda:Updates().update("GhostProductUpdate")) for i in range(WHILE_TRUE)]))\nprocess(lambda:(sp(0),[tryprocess(lambda:Updates().update("ProductsFeed")) for i in range(WHILE_TRUE)]))\nprocess(lambda:(sp(0),[tryprocess(lambda:Updates().update("LineitemsFeed")) for i in range(WHILE_TRUE)]))\nprocess(lambda:(sp(0),[tryprocess(lambda:Updates().update("AdsetUpdates")) for i in range(WHILE_TRUE)])) # FB\nprocess(lambda:(sp(0),[tryprocess(lambda:Updates().update("LineitemUpdates")) for i in range(WHILE_TRUE)])) # ALI, SHOPIFY\nprocess(lambda:(sp(0),[tryprocess(lambda:Updates().update("Aliexpressorder_update")) for i in range(WHILE_TRUE)]))\nprocess(lambda:(sp(0),[tryprocess(lambda:Updates().update("ProductUpdates")) for i in range(WHILE_TRUE)]))\nprocess(lambda:(sp(0),[tryprocess(lambda:Updates().update("New_EmailUpdates")) for i in range(WHILE_TRUE)])) # GMAIL\nprocess(lambda:(sp(0),[tryprocess(lambda:Updates().update("Aliexpressorder_event_update")) for i in range(WHILE_TRUE)]))'
      # process(lambda:(sp(0),[tryprocess(lambda:Updates().update("GhostProductUpdate")) for i in range(WHILE_TRUE)]))
      # process(lambda:(sp(1800),[tryprocess(lambda:Updates().update("ProductsFeed")) for i in range(WHILE_TRUE)]))
      # process(lambda:(sp(900),[tryprocess(lambda:Updates().update("LineitemsFeed")) for i in range(WHILE_TRUE)]))
      # process(lambda:(sp(0),[tryprocess(lambda:Updates().update("AdsetUpdates")) for i in range(WHILE_TRUE)])) # FB
      # process(lambda:(sp(1800),[tryprocess(lambda:Updates().update("LineitemUpdates")) for i in range(WHILE_TRUE)])) # ALI, SHOPIFY
      # process(lambda:(sp(1800),[tryprocess(lambda:Updates().update("Aliexpressorder_update")) for i in range(WHILE_TRUE)]))
      # process(lambda:(sp(1800),[tryprocess(lambda:Updates().update("ProductUpdates")) for i in range(WHILE_TRUE)]))
      # process(lambda:(sp(0),[tryprocess(lambda:Updates().update("New_EmailUpdates")) for i in range(WHILE_TRUE)])) # GMAIL
      # process(lambda:(sp(1800),[tryprocess(lambda:Updates().update("Aliexpressorder_event_update")) for i in range(WHILE_TRUE)]))

      self.app.run()
    @staticmethod
    def plus(callback=lambda: print(1), self=None):
      from rumps import MenuItem
      assert None!=getattr(self,"set_menu")
      return [MenuItem("+",callback=lambda _=None:[(callback)(),self.set_menu()] )]
    def set_menu(self):
      keys = list(self.app.menu.keys())
      redprint(keys)
      for i in keys:
        self.app.menu.pop(i)

      self.app.menu = [

                        # [gl(keysort("created_at",([i for i in All(Product) if i.title not in lmap(lambda i: i.x.split("twirl1: ")[1].split("|")[0],All(ScienceVessel))]+list(All(ScienceVessel))) ),"x"),[M("Created Times"),[M("Refresh",callback=lambda _=None:self.set_menu())]+["%s %s, %s"%("1. ", datetime.now().strftime("%Y-%m-%d %H:%M:%S"), Date().seconds_to_text((Date().Now()-gx("x")[0].created_at).total_seconds(),seconds=0) )]+["%s %s, %s"%(("%s. "%(idx+2)),i.created_at,or_list(lambda:Date().seconds_to_text((i.created_at-gx("x")[idx+1].created_at).total_seconds(),seconds=0),"/") ) for idx, i in enum(gx("x"))]]][1],
                        [M(("Setup: |%s|%s|%s|"%(Muta()().store_abbre.upper()if(Muta()().store_abbre)else("-"), (Muta()().niche)if(Muta()().niche)else("-"), (Muta()().page)if(Muta()().page)else("-"), ))),[
                          [MenuItem("Store Abbreviation"),
                            [
                              eval("""MenuItem(Get(Shop,shop_abbreviation="%s").shop_abbreviation.upper(), callback=lambda _=None:[ Update(Muta()(),store_abbre=Get(Shop,shop_abbreviation="%s").shop_abbreviation), self.set_menu()] )"""%(i.shop_abbreviation,i.shop_abbreviation)) for i in All(Shop)
                            ] + [[setitem(g(),"fig_x",self),MenuItem("-", callback=lambda _=None:[ Update(All(Muta)[0],store_abbre="-"), g()["fig_x"].set_menu()] )][1]]
                          ],
                          [MenuItem("Niche"),
                            [setitem(g(),"fig_x",self),[MenuItem("+", callback=lambda _=None:[tryprocess(Niche(date_added=datetime.now(),niche=OSA.display_dialog("Niche?", [":)"]) ).save),Update(Muta()(),niche=list(All(Niche))[-1].niche),OSA().notify("added niche %s & clearing clipboard [%s]" % (pyperclip.paste(),(len(Filter(Niche,niche=pyperclip.paste())))) ),pyperclip.copy(""),self.set_menu() ]) ]+[
                              eval("""[exec("from rumps import MenuItem",globals()),MenuItem('''%s''' if (datetime.now()-Get(Niche,niche='''%s''').date_added).days>15 else '''%s (NEW)''', callback=lambda _=None:[Update(All(Muta)[0],niche='''%s'''),g()["fig_x"].set_menu() ] )][1]"""%(i,i,i,i)) for i in key("niche",keysort("niche",All(Niche),tcer=False)) if i!=""
                            ]][1] + [[setitem(g(),"fig_x",self),MenuItem("-", callback=lambda _=None:[ Update(All(Muta)[0],niche="-"), g()["fig_x"].set_menu()] )][1]]
                          ],
                          # [MenuItem("Is Free Plus Ship"),
                          #   [
                          #     [setitem(g(),"fig_x",self),MenuItem("True", callback=lambda _=None:[ Update(All(Muta)[0],is_free_plus_ship=True), g()["fig_x"].set_menu()] )][1],
                          #     [setitem(g(),"fig_x",self),MenuItem("False", callback=lambda _=None:[ Update(All(Muta)[0],is_free_plus_ship=False), g()["fig_x"].set_menu()] )][1],
                          #   ]
                          # ],
                          [MenuItem("Page"),
                            [setitem(g(),"fig_x",self),[MenuItem("/",callback=lambda _=None:[get_pages(),self.set_menu()])]+[
                              eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s", callback=lambda _=None:[ Update(All(Muta)[0],page="%s"),g()["fig_x"].set_menu()] )][1]"""%(i,i)) for i in key("name",keysort("name",All(Facebookpage),tcer=False))
                            ]][1] + [[setitem(g(),"fig_x",self),MenuItem("-", callback=lambda _=None:[ Update(All(Muta)[0],page="-"), g()["fig_x"].set_menu()] )][1]]
                          ],
                        ]],
                        # [globalise(self,"new_menulet_x"),[M("Change Shop (Current Shop: %s)"% (Muta()().store_abbre)), [eval("""M("%s",callback = lambda _=None:[Update(Muta()(),store_abbre="%s")])"""%(i.shop_abbreviation,i.shop_abbreviation)) for i in All(Shop)]]][1],
                        # [MenuItem("Active - 1. Subscriptions (Rolling $%s)"%((round((sum(lmap(float,key("price_per_month",All(Subscription)))))/ list(([exec("from calendar import monthrange",globals()),monthrange(datetime.now().year,datetime.now().month)][1]))[1],2)))),
                        #   [
                        #     [M("Today"), M("($%s)"%((round((sum(lmap(float,key("price_per_month",All(Subscription)))))/ list(([exec("from calendar import monthrange",globals()),monthrange(datetime.now().year,datetime.now().month)][1]))[1],2)) ))],
                        #     [M("Subscriptions"), [M("+",callback=lambda _=None:[Save(Subscription,name=OSA.display_dialog("Name?",default_answer=""),price_per_month=float(OSA.display_dialog("price per month?\n(it's okay to round)",default_answer=""))),self.set_menu()])]+[M("%s @ %s"%(i.name,i.price_per_month)) for i in keysort("name",Filter(Subscription,),tcer=False)]+[M("-",callback=lambda _=None:[Del(Get(Subscription,name=OSA.display_dialog("Subscription name?",default_answer=""))),self.set_menu()])]],
                        #     [M("For This Month"), ["%s: ($%s)"%((Date().friendlydate(datetime(datetime.now().year,datetime.now().month,(i+1)),only_date=True)),round(((sum(lmap(float,key("price_per_month",All(Subscription)))))/ list(([exec("from calendar import monthrange",globals()),monthrange(datetime.now().year,datetime.now().month)][1]))[1] ),2)) for i in lrange(datetime.now().day)]]
                        #   ]
                        # ],
                        [M("Main"),
                        [
                        [MenuItem("Active - 7. Routing (%s, (%s, %s), (%s, %s), %s)"%(
                                                                                        len(onyx("e1")),
                                                                                        len([i for i in onyx("e2") if i.calculate_time_so_far()<=20]),
                                                                                        len([i for i in onyx("e2") if i.calculate_time_so_far()>20]),
                                                                                        len([i for i in onyx("e3") if i.calculate_time_so_far()<=20]),
                                                                                        len([i for i in onyx("e3") if i.calculate_time_so_far()>20]),
                                                                                        len(onyx("e4")) )),
                          [sudcall("calculate",onyx_lineitems())if(Muta()().show_routing)else(None),[
                            [M("Showing Routing" if Muta()().show_routing == True else "Routing Off"), [M("Showing Routing" if Muta()().show_routing == True else "Routing Off",callback=lambda _=None:[Update(Muta()(),show_routing=True if Muta()().show_routing == False else False if Muta()().show_routing == True else True),self.set_menu()])]],
                            ["Ready To Order",[[M("%s (%s)"%(i,
                                                len([q for q in Filter(Lineitem,stage="%s"%("e1"),timesofar=(i))])
                                              )
                                  ),
                                  [[M("ID: %s"%(x.id)),eval("""[M("Copy ID %s To Clipboard",callback=lambda _=None:[pyperclip.copy("%s")])]"""%(x.id,x.id))+[eval("""M("%s",callback=lambda _=None:[OSA.log("%s")])"""%(i,i)) for i in or_list(lambda:Get(Lineitem,id=x.id).tracking_events,[])]] for x in Filter(Lineitem,stage="%s"%("e1"),timesofar=(i))]
                                ] for i in lrange(max(sud("timesofar",Filter(Lineitem,stage="e1"))+[0])+(1))]
                            ] if Muta()().show_routing else None,
                            ["Placed Order",[[M("%s (%s)"%(i,
                                                len([q for q in Filter(Lineitem,stage="%s"%("e2"),timesofar=(i))])
                                              )
                                  ),
                                  [[M("ID: %s"%(x.id)),eval("""[M("Copy ID %s To Clipboard",callback=lambda _=None:[pyperclip.copy("%s")])]"""%(x.id,x.id))+[eval("""M("%s",callback=lambda _=None:[OSA.log("%s")])"""%(i,i)) for i in or_list(lambda:Get(Lineitem,id=x.id).tracking_events,[])]] for x in Filter(Lineitem,stage="%s"%("e2"),timesofar=(i))]
                                ] for i in lrange(max(sud("timesofar",Filter(Lineitem,stage="e2"))+[0])+(1))]
                            ] if Muta()().show_routing else None,
                            ["Tracking And Shipping",[[M("%s (%s)"%(i,
                                                len([q for q in Filter(Lineitem,stage="%s"%("e3"),timesofar=(i))])
                                              )
                                  ),
                                  [[M("ID: %s"%(x.id)),eval("""[M("Copy ID %s To Clipboard",callback=lambda _=None:[pyperclip.copy("%s")])]"""%(x.id,x.id))+[eval("""M("%s",callback=lambda _=None:[OSA.log("%s")])"""%(i,i)) for i in or_list(lambda:Get(Lineitem,id=x.id).tracking_events,[])]] for x in Filter(Lineitem,stage="%s"%("e3"),timesofar=(i))]
                                ] for i in lrange(max(sud("timesofar",Filter(Lineitem,stage="e3"))+[0])+(1))]
                            ] if Muta()().show_routing else None,
                            ["Delivered",[[M("%s (%s)"%(i,
                                                len([q for q in Filter(Lineitem,stage="%s"%("e4"),timesofar=(i))])
                                              )
                                  ),
                                  [[M("ID: %s"%(x.id)),eval("""[M("Copy ID %s To Clipboard",callback=lambda _=None:[pyperclip.copy("%s")])]"""%(x.id,x.id))+[eval("""M("%s",callback=lambda _=None:[OSA.log("%s")])"""%(i,i)) for i in or_list(lambda:Get(Lineitem,id=x.id).tracking_events,[])]] for x in Filter(Lineitem,stage="%s"%("e4"),timesofar=(i))]
                                ] for i in lrange(max(sud("timesofar",Filter(Lineitem,stage="e4"))+[0])+(1))]
                            ] if Muta()().show_routing else None,
                          ]][1]
                        ],

                        [globalise(self,"support_x"),[M("Active - 8. Support"),
                          [M("/",callback=lambda _=None:[lmap(lambda i:New_Email().new_email_set(i.shop_abbreviation),All(Shop)),self.set_menu()])]+[[i,
                          [[("%s: (%s) (MATCHED BUYER)"%(a,Join(",",lmap(str,key("order_number",keysort("order_number",Filter(Order,email=a,shop=i),False)))))),
                          [
                          eval("""M((Get(%s,id=%s).printformat()), callback=lambda _=None: [tr(lambda:Get(%s,id=%s).run_support(),ep=1),globe("support_x").set_menu()])"""%(type(b).__name__,b.id,type(b).__name__,b.id)) for b in New_Email().get_all_support_items(email=a,shop=i) ]
                                           ] for a in New_Email().get_all_identified_emails(i)]
                          ] for i in key("shop_abbreviation",All(Shop))]
                        ]][1],
                        
                        # [M("Active - 8. Support"),
                        #   [[i,[[("%s: (%s) (MATCHED BUYER)"%(a,Join(", ",lmap(str,key("order_number",keysort("order_number",Filter(Order,email=a,shop=i),False)))))),[M("%s: %s"%(Date().friendlydate(b.date,with_year=True), (b.true_id)if(type(b)==New_Email)else(b.invoice_id)),callback=lambda _=None:[(b.run_support())if(type(b)==New_Email)else(b.run_support()),self.set_menu()]) for b in sorted(list(Filter(New_Email,emailer=a,shop=i))+list(Filter(TertiaryAction,email=a,shop=i)),key=lambda i:(i.date)if(type(i)==New_Email)else(i.date)) ]] for a in New_Email().get_identified_emails(i)]] for i in key("shop_abbreviation",All(Shop))]
                        #   #[[i,[[("%s: (%s) (MATCHED BUYER)"%(a,Join(", ",lmap(str,key("order_number",keysort("order_number",Filter(Order,email=a,shop=i),False)))))),[eval("""M("%s: %s %s",callback=lambda _=None:[((or_list(lambda:Get(New_Email,true_id="%s"),lambda:Get(TertiaryAction,invoice_id="%s"))).run_support())if(type((or_list(lambda:Get(New_Email,true_id="%s"),lambda:Get(TertiaryAction,invoice_id="%s"))))==New_Email)else((or_list(lambda:Get(New_Email,true_id="%s"),lambda:Get(TertiaryAction,invoice_id="%s"))).run_support()),self.set_menu()])"""%(Date().friendlydate(b.date,with_year=True), (b.true_id)if(type(b)==New_Email)else(b.invoice_id), ("(Tagged With Order Numbers %s)" %(", ".join(lmap(str,sorted(b.tagged_order_numbers)))))if(type(b)==New_Email and b.tagged_order_numbers)else("Not Tagged With Any Order Numbers")if(type(b)==New_Email and b.tagged_order_numbers==None)else(("(Order Number %s)"%(Get(Order,id=b.order_id).order_number))), ((b.true_id)if(type(b)==New_Email)else(b.invoice_id)),((b.true_id)if(type(b)==New_Email)else(b.invoice_id)),((b.true_id)if(type(b)==New_Email)else(b.invoice_id)),((b.true_id)if(type(b)==New_Email)else(b.invoice_id)),((b.true_id)if(type(b)==New_Email)else(b.invoice_id)),((b.true_id)if(type(b)==New_Email)else(b.invoice_id)),)) for b in sorted(list(Filter(New_Email,emailer=a,shop=i))+list(Filter(TertiaryAction,email=a,shop=i)),key=lambda i:(i.date)if(type(i)==New_Email)else(i.date)) ]] for a in New_Email().get_identified_emails(i)]] for i in key("shop_abbreviation",All(Shop))]
                        # ],
                        
                        # [globalise(self,"new_menulet_x"),[MenuItem("Active - 8. New_Email (%s To Read)"%(len(Filter(New_Email,responded=0)))),
                        #   [
                        #     #[M("%s"%(i)), [[i, [ eval("""M("🌭",callback=lambda _=None:[New_Email().take_response(Get(New_Email,id=%s)),globe("new_menulet_x").set_menu()])"""%i.id) for i in Filter(New_Email,emailer=i,responded=0)]] for i in sorted(set(key("emailer",Filter(New_Email,email=i,responded=0))))]] for i in sorted(key("Business_Email_Address",All(Shop)))
                        #     #[M("%s"%(i)), [eval("""[M("Update emails for %s"),M("Update emails for %s",callback=lambda _=None:[New_Email().new_email_set("%s"),globe("new_menulet_x").set_menu()])]"""%(i,i,i))]+[[i, [ eval("""M("🍭",callback=lambda _=None:[New_Email().take_response(Get(New_Email,id=%s)),globe("new_menulet_x").set_menu()])"""%i.id) for i in Filter(New_Email,emailer=i,responded=0)]] for i in sorted(set(key("emailer",Filter(New_Email,email=i,responded=0))))]] for i in sorted(key("Business_Email_Address",All(Shop)))
                        #     [M("%s"%(i)), [eval("""[M("Update emails for %s"),M("Update emails for %s",callback=lambda _=None:[New_Email().new_email_set("%s"),globe("new_menulet_x").set_menu()])]"""%(i,i,i))]+[[M("Completed"),[eval("""[M("❄️"),[Get(New_Email,id=%s).emailer]]"""%(i.id)) for i in Filter(New_Email,email=i,responded=1)]]]+[[i, [ eval("""M("🍭",callback=lambda _=None:[New_Email().take_response(Get(New_Email,id=%s)),globe("new_menulet_x").set_menu()])"""%i.id) for i in Filter(New_Email,emailer=i,responded=0)]] for i in sorted(set(key("emailer",Filter(New_Email,email=i,responded=0))))]] for i in sorted(key("Business_Email_Address",All(Shop)))
                        #   ]
                        # ]][1],

                        [globalise(self,"product_talk_x"),[MenuItem("Active - 9. Product Talk (%s, %s)"%(len(lset(key("id",All(ProductTalk)))),len(Filter(ProductTalk,shop=Muta()().store_abbre)))),
                          [M("+",callback=lambda _=None:[ProductTalk().create_2(),self.set_menu()])]+[
                            [
                              M(Get(Product,id=i.product_id).title),[
                                                                        [
                                                                          i.supplier,
                                                                                    [
                                                                                        Get(Product,id=c.product_id).title for c in Filter(ProductTalk,supplier=i.supplier)
                                                                                    ]
                                                                                    
                                                                        ] 
                                                                      ]
                                                                    ] for i in tcer(sorted(Filter(ProductTalk,shop=Muta()().store_abbre),key=lambda i:len(Filter(Lineitem,id=i.product_id))))
                            ]+[M("-",callback=lambda _=None:[ProductTalk().delete(OSA.log("Title?")),self.set_menu()])]
                        ]][1],


                        [M("Active - 10. Product Inceptions"),
                          [[M("Showing" if Muta()().show_product_inceptions == True else "Not Showing"),M("Showing" if Muta()().show_product_inceptions == True else "Not Showing",callback=lambda _=None:[Update(Muta()(),show_product_inceptions = True if Muta()().show_product_inceptions == False else False if Muta()().show_product_inceptions == True else True),self.set_menu()])]]+
                          [
                            #i.title,((Date().Now())-(i.last_check)).days,i.id
                            #[M(i),[ eval("""M("%s (%s Days Unavailable)",callback=lambda _=None:[r_image_search(pool(Images().download,key("src",Get(Product,id=%s).images)).result(),True)])"""%(i.title,((Date().Now())-(i.last_check)).days,i.id )) for i in Product().is_availables(shop=i)]] for i in key("shop_abbreviation",All(Shop))]
                            [M(i),[
                                [M("%s (%s Days Unavailable, %s Running Adsets With This Product, %s Pending Orders With This Product)"%(i.title,
                                      ((Date().Now())-(i.last_check)).days,
                                      len(Filter(Adset,shop_abbreviation=i.shop,handle=i.handle,status="ACTIVE")),
                                      len(set(key("order_id",[x for x in onyx_lineitems("e1") if x.product_id==i.id])))
                                      )
                                  ), 
                                  eval("""[M("Find Products Like These",callback=lambda _=None:[
                                            r_image_search(pool(Images().download,key("src",Get(Product,id=%s).images)).result(),True)] ),[
                                            M("Running Adsets With This Product ({})".format( len(Filter(Adset,shop_abbreviation="%s",handle="%s"))) ),
                                            [M("Adset ID: {}".format(i.id)) for i in Filter(Adset,shop_abbreviation="%s",handle="%s")]]]"""%(i.id,i.shop,i.handle,i.shop,i.handle))
                                ] for i in Product().is_unavailables(shop=i)]] if Muta()().show_product_inceptions else None for i in key("shop_abbreviation",All(Shop))
                            ]
                          ],
                        #@confirmed to reset menu
                        #[MenuItem("Active - 7. CruxSupplier (Parked (Until Any CruxSupplier))"),
                        ##  [MenuItem("A"),MenuItem("B")]
                        #],
                        #[MenuItem("Active - 4. CruxSupplier"),
                        #  [MenuItem("Why Does This Work?",callback=lambda _=None:OSA.display_dialog(default_answer="Sure u look it up, look up GhostProduct u can destroy Product|technically from a event of now, i do not have any CruxSuppliers., technically from a event of now, i do not have any CruxSuppliers.\n\nKeep In Mind, If There This is a cruxsupplier... It will possess cruxsupplier orders/existing orders/bad orders\n\nAt This Moment, I am still looking for the first CruxSupplier"))]+[
                        #    [MenuItem(i.vendor),[[MenuItem("removable products"),[eval("MenuItem('productId:%s, vendor:%s (Logged As CruxSupplier)', callback=lambda _=None:[Shop()('%s').pfind(id_='%s').destroy() if eval(OSA.display_dialog('rly destroy? evaluating... (0/1)'))==1 else None,OSA.notify('%s destroyed == %s')] )"%(x.id,(x.aliexpressvendor if x.aliexpressvendor else x.amazonvendor),x.shop,x.id,x.id,("False, could Find" if 1== tryprocess(Shop()(x.shop).pfind,id_=x.id) else "True, could Not Find") )) for x in All(Product) if (x.aliexpressvendor == i.vendor or x.amazonvendor == i.vendor)]],[MenuItem("cruxsupplier orders (a list to get a quantity of how many lineitems are with this CruxSupplier's Products)"),[eval("MenuItem(%s, callback = lambda _=None:OSA.notify('%s|%s') )"%(x.id, x.id,x.id)) for x in  [x for x in onyx_lineitems() if Get(GhostProduct,id=x.product_id).aliexpressvendor == i.vendor or Get(GhostProduct,id=x.product_id).amazonvendor == i.vendor ] ]], ]] for i in All(CruxSupplier)
                        #  ]
                        #],
                        [M("Active - 11. Order Unpender"),
                          [
                            M("Order Unpender",callback = lambda _=None:[os.system("cd ~/tavern/tavern && ~/tavern/bin/python3.5 -c 'from soda.can import *; Order_Unpender()()' &")])
                          ]
                        ],
                        ]
                        ],

                        [MenuItem("Transactions"),
                        [
                        [globalise(self,"new_menulet_x"),[MenuItem("Active - 2. AceInTheHole (%s Days Behind, %s Untagged, latest date: %s)"%( or_list(lambda:((Date()-1)-(Date(max([max(key("date",All(AceInTheHole))),list(All(AceInTheHole))[-1].date])))),"X"), or_list(lambda:len(Filter(AceInTheHole,tag=None)),"X"),or_list(lambda:Date(max(sud("date",All(AceInTheHole)))),lambda:"X") )),
                          [
                            M("+ (%s)"%("headers: date, description, amount"),callback=lambda _=None:[AceInTheHole().accept_csv(get_latest_download()),self.set_menu()]),
                            [M("Shop for headers: %s, Account for headers: %s" % (Muta()().store_abbre, or_list(lambda:Get(AceInTheHoleHeaderColumns,shop=Muta()().store_abbre,account=Muta()().Active_AceInTheHole_header_column_account_name).account,lambda:"None Selected") )),
                             [M("+",callback=lambda _=None:[AceInTheHoleHeaderColumns().add(),self.set_menu()])]+\
                             [eval("""M("%s - %s",callback=lambda _=None:[Update(Muta()(),Active_AceInTheHole_header_column_account_name="%s"),globals()["new_menulet_x"].set_menu()])"""%(i.account,str(list(i.header_column_dict.items())).replace("'","").replace(","," for"),i.account)) for i in Filter(AceInTheHoleHeaderColumns,shop=Muta()().store_abbre)]
                             ],
                            [M("Types (Add Tags, %s Tags)"%(len(All(AceInTheHoleTypeTag)))),
                              [M("+",callback=lambda _=():[lmap(lambda i:Save(AceInTheHoleType,name=i.strip()),OSA.display_dialog("Type(s) [note: many can be added by separating them with a comma]?",default_answer="").split(",")),globe("new_menulet_x").set_menu()])]+[eval("""[M("%s"),[M("+",lambda _=None:[lmap(lambda i: Save(AceInTheHoleTypeTag,tag=i.strip(),type="%s",sign=OSA.display_dialog("Will this amount for the tag “{}” be positive, negative, or does it not apply to this tag?".format(i.strip()),dropdown_options=["positive","negative","positive_or_negative"])),OSA.display_dialog("Tag?",default_answer="").split(",") ),globe("new_menulet_x").set_menu()])]+[eval('''[M('{}'),M('Run',callback=lambda _=None:[[(AceInTheHoleTypeTag().run_tag(type="{}",tag="{}")),globe("new_menulet_x").set_menu()]if(OSA.display_dialog("This will run all for {}, {}, continue?",text_prompt=False,buttons=["NO","OK"])=="OK")else()])]'''.format(i.tag,i.type,i.tag,i.type,i.tag),globals()) for i in keysort("tag",Filter(AceInTheHoleTypeTag,type="%s"),tcer=False)]          +[M("-",callback=lambda _=None:[Del(Get(AceInTheHoleTypeTag,type="%s",tag=OSA.display_dialog("Tag to delete?",default_answer=""))),globe("new_menulet_x").set_menu() ])]]"""%(i.name,i.name,i.name,i.name),globals()) for i in keysort("name",All(AceInTheHoleType),tcer=False)]+[M("Run All Tags",callback=lambda _=None:[AceInTheHoleTypeTag().run_all(),self.set_menu()])]+[M("-",callback=lambda _=():[Del(Get(AceInTheHoleType,name=OSA.display_dialog("Type to delete?",default_answer=""))),globe("new_menulet_x").set_menu()])]
                            ],
                            [M("View Current Untagged (%s Untagged)"%(len(Filter(AceInTheHole,tag=None,type=None)))), [eval("""M("%s")"""%(i.amount)) for i in Filter(AceInTheHole,tag=None,type=None)]],
                            [M("View Current Untagged Transaction Details (View Now)"),M("View Current Untagged Transaction Details",callback=lambda _=None:[[OSA.display_dialog(q="Columns: account, date, amount, type, tag, description, shop\nYou can paste this into Excel",buttons=[" "*250+"OK"+" "*250],default_answer=("\n".join(["%s\t%s\t%s\t%s\t%s\t%s\t%s\t"%(i.account,i.date,i.amount,i.type,i.tag,i.description[:100],i.shop) for i in Filter(AceInTheHole,tag=None,type=None)])))],self.set_menu()])],
                            [M("View Current Tagged Transactions (%s)"%(len(Filter(AceInTheHole,~Q(tag=None),shop=Muta()().store_abbre)))),M("View Current Tagged Transaction",callback=lambda _=None:[[OSA.display_dialog(q="Columns: account, date, amount, type, tag, description, shop\nYou can paste this into Excel",buttons=[" "*250+"OK"+" "*250],default_answer=("\n".join(["%s\t%s\t%s\t%s\t%s\t%s\t%s\t"%(i.account,i.date,i.amount,i.type,i.tag,i.description[:100],i.shop) for i in Filter(AceInTheHole,~Q(tag=None),~Q(type=None),shop=Muta()().store_abbre)])))],self.set_menu()])],
                          ]
                        ]][1],
                        [globalise(self,"new_menulet_x"),[MenuItem("Active - 3. Approved Transactions (%s Days Behind For Tagged, %s To Approve)"% ( or_list(lambda:(((Date(max([max(key("date",Filter(AceInTheHole,shop=Muta()().store_abbre))),list(Filter(AceInTheHole,shop=Muta()().store_abbre))[-1].date])))) - ((Date(max([max(key("date",Filter(ApprovedTransaction,shop=Muta()().store_abbre))),list(Filter(ApprovedTransaction,shop=Muta()().store_abbre))[-1].date]))))),"X") , or_list(lambda:len(Filter(ApprovedTransaction,approved=0,shop=Muta()().store_abbre)),"X") )),
                          [
                            [M("Load Approved Transactions"), M("Load Approved Transactions",callback=lambda _=None:[[Save(ApprovedTransaction,account=i.account,date=i.date,price=i.amount,type=i.type,tag=i.tag,description=i.description,id=i.id,approved=0,shop=i.shop) for i in Filter(AceInTheHole,~Q(type=None),~Q(tag=None),shop=Muta()().store_abbre) if i.id not in key("id",Filter(ApprovedTransaction,shop=Muta()().store_abbre))],globe("new_menulet_x").set_menu()] if(len([i for i in Filter(AceInTheHole,~Q(type=None),~Q(tag=None),shop=Muta()().store_abbre) if i.id not in key("id",Filter(ApprovedTransaction,shop=Muta()().store_abbre))])!=0)else(OSA.display_dialog("Already Loaded All Transactions.\nType OK to continue",default_answer="")))],
                            [M("To Approve (%s)"%(len(Filter(ApprovedTransaction,approved=0)))), [eval("""M("%s",callback=(lambda _=None:[(Update(Get(ApprovedTransaction,id=%s),approved=1,what_i_think_my_current_balance_is=OSA.display_dialog("What do you think your current balance is?",default_answer="")))if(OSA.display_dialog("PLEASE READ\\n************************************\\nThis is your current balance: {}\\nType I APPROVE to begin the approval process for this charge\\nIn %s at %s of $%s with type %s and tag %s and description: %s\\n************************************".format((or_list(tryreturn(lambda:Filter(ApprovedTransaction,approved=1).n(-1).what_i_think_my_current_balance_is),"N/A") )),default_answer="",buttons=[" "*140+"OK"+" "*140])=="I APPROVE")else(),globe("new_menulet_x").set_menu()])if(%s==0)else(None) )"""%(i.price,i.id,i.account,Date().friendlydate(i.date,only_date=True),i.price,i.type,i.tag,i.description,idx)) for idx,i in enum( Filter(ApprovedTransaction,approved=False) )]],
                            [M("What I Think My Current Balance Is"),M("What I Think My Current Balance Is: $%s"%(or_list(tryreturn(lambda:Filter(ApprovedTransaction,approved=1,shop=Muta()().store_abbre).n(-1).what_i_think_my_current_balance_is),"N/A")))],
                            [M("What I Think My Current Balance Is - All"), [M("$%s"%i.what_i_think_my_current_balance_is) for i in tcer(Filter(ApprovedTransaction,approved=1,shop=Muta()().store_abbre))]]
                          ]
                        ]][1],
                        [MenuItem("Active - 4. Settlements /When/ (%s Days Behind)"%( or_list(lambda:((Date()-1)-(Date(max([max(key("date",Filter(Settlement,shop=Muta()().store_abbre))),list(Filter(Settlement,shop=Muta()().store_abbre))[-1].date])))),"X") )),
                          [M("+",callback=lambda _=None:[globalise(Date(OSA.log("Date [in format: YYYY-MM-DD]?"))(),"settlement_run_date"),globalise(OSA.log("Running a settlement for the current day will create a settlement with the results of the day up until the run time. This settlement date will have to be run again the next date to update all data for this day to be the most current. Click Exit to exit or click OK to continue.",tp=False,buttons=["Exit","OK"]),"settlement_run_date_today")if(globe("settlement_run_date")==(Date()))else(),((0/0))if(globe("settlement_run_date_today")=="Exit")else(),Settlement()(globe("settlement_run_date")),self.set_menu()])]+[
                            [M("%s"%(Date().friendlydate(i.date,only_date=1))),[
                            M("(sales) (%s)"%(i.sales)),
                            M("(ads) (%s)"%(i.ads)),
                            M("(cogs) (%s)"%(i.cogs)),
                            M("(secondaryaction) (%s)"%(i.refunds)),
                            M("(tertiaryaction) (%s)"%(i.chargebacks)),
                            M("(prdcts added) (%s)"%(i.products_added)),
                            M("(ads added) (%s)"%(i.adsets_added)),
                            M("(rake) (%s)"%(i.rake)),
                            ]] for i in tcer(keysort("date",Filter(Settlement,shop=Muta()().store_abbre)))
                          ]
                        ],
                        # [M("Active - 5. Updates"),
                        #   [
                        #     # M("Aliexpressorder_event_update - Ready To Run",callback=lambda x:[setattr(x,"title","Check for Aliexpressorder_event - Running"),globalise(pool(lambda:Updater().Aliexpressorder_event_update()),"updater_aliexpressorder_event_update"),process(lambda:[setattr(x,"title","Aliexpressorder_event_update - Finished Running, Ready To Run") for i in range(WHILE_TRUE) if globe("updater_aliexpressorder_event_update").is_running() == False])]),
                        #     M("Update_TertiaryActions - Ready To Run (headers: invoice_id, date, requires_response_by, status, order_problem, email, dispute_amount)",callback=lambda x:[setattr(x,"title","Update TertiaryActions - Running"),globalise(pool(lambda:Updater().Update_TertiaryActions()),"updater_update_tertiaryactions"),process(lambda:[setattr(x,"title","Update_TertiaryActions - Finished Running, Ready To Run") for i in range(WHILE_TRUE) if globe("updater_update_tertiaryactions").is_running() == False])]),
                        #     M("Update_Payments - Ready To Run (headers: id, created_at, amount, email, invoice_id, order_id, payment_gateway_name, shop)",callback=lambda x:[setattr(x,"title","Update Payments - Running"),globalise(pool(lambda:Updater().Update_Payments()),"updater_update_payments"),process(lambda:[setattr(x,"title","Update_Payments - Finished Running, Ready To Run") for i in range(WHILE_TRUE) if globe("updater_update_payments").is_running() == False])]),
                        #     M("Update_Payouts - Ready To Run (headers: id, created_at, amount, account_name, account_last_4_digits, payment_gateway_name, shop)",callback=lambda x:[setattr(x,"title","Update Payouts - Running"),globalise(pool(lambda:Updater().Update_Payouts()),"updater_update_payouts"),process(lambda:[setattr(x,"title","Update_Payouts - Finished Running, Ready To Run") for i in range(WHILE_TRUE) if globe("updater_update_payouts").is_running() == False])]),

                        #   ]
                        # ],
                        [MenuItem("Active - 6. Updates"),
                          [globalise(TransactionVerification().get_excess_transaction_verification_data(),"transactionverification_y"),[
                            [M("Lineitem Order IDS to Ali Order IDS"), [
                                    [M("Excess Lineitem AliExpress Order IDS to AliExpress Order IDS (%s%% %s matched) (Unknown)"%(globe("transactionverification_y")[10],len(globe("transactionverification_y")[0]))), TransactionVerification().verify_no_excess_aliexpress_orders()],
                                    [M("Excess AliExpress Order IDS to Lineitem AliExpress Order IDS (%s%% %s matched) (Unknown)"%(globe("transactionverification_y")[11],len(globe("transactionverification_y")[1]))), TransactionVerification().verify_no_excess_saved_aliexpress_order_ids()],
                                    ]],
                            [M("Lineitem AliExpress Order Pay Price Amounts to Bank Account Price Amounts"), [
                                    [M("Excess Lineitem AliExpress Price Amounts to Bank Account AliExpress Payment Price Amounts (%s%% %s matched) (Unknown)"%(globe("transactionverification_y")[12],len(globe("transactionverification_y")[2]))), TransactionVerification().verify_no_excess_aliexpress_card_transactions()],
                                    [M("Excess Bank Account AliExpress Payment Price Amounts to Lineitem AliExpress Price Amounts (%s%% %s matched) (Unknown)"%(globe("transactionverification_y")[13],len(globe("transactionverification_y")[3]))), TransactionVerification().verify_no_excess_saved_ordered_aliexpress_order_transactions()],
                                    ]],
                            [M("Order Paid Price Amounts to Gateway Payment Price Amounts *Impacted"), [
                                    [M("Excess Order Prices Amounts to Payment Gateway Sale Order Price Amounts (%s%% %s matched) (Unknown)"%(globe("transactionverification_y")[14],len(globe("transactionverification_y")[4]))), TransactionVerification().verify_no_excess_order_price_amounts_to_payment_gateway_sale_order_price_amounts()],
                                    [M("Excess Payment Gateway Sale Order Price Amounts to Order Prices Amounts (%s%% %s matched) (Unknown)"%(globe("transactionverification_y")[15],len(globe("transactionverification_y")[5]))), TransactionVerification().verify_no_excess_payment_gateway_sale_order_price_amounts_to_order_price_amounts()],
                                    ]],
                            [M("Bank Account Deposits to Payment Gateway Payouts"), [
                                    [M("Excess Bank Account Payment Gateway Deposits to Payment Gateway Payouts To Bank Account (%s%% %s matched) (Unknown)"%(globe("transactionverification_y")[16],len(globe("transactionverification_y")[6]))), TransactionVerification().verify_no_excess_bank_account_payment_gateway_deposits_to_payment_gateway_payouts_to_bank_account()],
                                    [M("Excess Payment Gateway Payouts To Bank Account to Bank Account Payment Gateway Deposits (%s%% %s matched) (Unknown)"%(globe("transactionverification_y")[17],len(globe("transactionverification_y")[7]))), TransactionVerification().verify_no_excess_payment_gateway_payouts_to_bank_account_to_bank_account_payment_gateway_deposits()],
                                    ]],
                            [M("Adspend charges to saved adspend charges"), [
                                    [M("Excess adspend charges to saved adspend charges (%s%% %s matched) (Unknown)"%(globe("transactionverification_y")[18],len(globe("transactionverification_y")[8]))), TransactionVerification().verify_no_excess_adspend_charges()],
                                    [M("Excess saved adspend charges to adspend charges (%s%% %s matched) (Unknown)"%(globe("transactionverification_y")[19],len(globe("transactionverification_y")[9]))), TransactionVerification().verify_no_excess_card_transaction_adspend_charges()],
                                    ]],

                            # [M("Lineitem Order IDS to Ali Order IDS"), [
                            #         [M("Excess Lineitem AliExpress Order IDS to AliExpress Order IDS (Unknown)"), TransactionVerification().verify_no_excess_aliexpress_orders()],
                            #         [M("Excess AliExpress Order IDS to Lineitem AliExpress Order IDS (Unknown)"), TransactionVerification().verify_no_excess_saved_aliexpress_order_ids()],
                            #         ]],
                            # [M("Lineitem AliExpress Order Pay Price Amounts to Bank Account Price Amounts"), [
                            #         [M("Excess Lineitem AliExpress Price Amounts to Bank Account AliExpress Payment Price Amounts (Unknown)"), TransactionVerification().verify_no_excess_aliexpress_card_transactions()],
                            #         [M("Excess Bank Account AliExpress Payment Price Amounts to Lineitem AliExpress Price Amounts (Unknown)"), TransactionVerification().verify_no_excess_saved_ordered_aliexpress_order_transactions()],
                            #         ]],
                            # [M("Order Paid Price Amounts to Gateway Payment Price Amounts *Impacted"), [
                            #         [M("Excess Order Prices Amounts to Payment Gateway Sale Order Price Amounts (Unknown)"), TransactionVerification().verify_no_excess_order_price_amounts_to_payment_gateway_sale_order_price_amounts()],
                            #         [M("Excess Payment Gateway Sale Order Price Amounts to Order Prices Amounts (Unknown)"), TransactionVerification().verify_no_excess_payment_gateway_sale_order_price_amounts_to_order_price_amounts()],
                            #         ]],
                            # [M("Bank Account Deposits to Payment Gateway Payouts"), [
                            #         [M("Excess Bank Account Payment Gateway Deposits to Payment Gateway Payouts To Bank Account (Unknown)"), TransactionVerification().verify_no_excess_bank_account_payment_gateway_deposits_to_payment_gateway_payouts_to_bank_account()],
                            #         [M("Excess Payment Gateway Payouts To Bank Account to Bank Account Payment Gateway Deposits (Unknown)"), TransactionVerification().verify_no_excess_payment_gateway_payouts_to_bank_account_to_bank_account_payment_gateway_deposits()],
                            #         ]],
                            # [M("Adspend charges to saved adspend charges"), [
                            #         [M("Excess adspend charges to saved adspend charges (Unknown)"), TransactionVerification().verify_no_excess_adspend_charges()],
                            #         [M("Excess saved adspend charges to adspend charges (Unknown)"), TransactionVerification().verify_no_excess_card_transaction_adspend_charges()],
                            #         ]],
                            M("Aliexpressorder_event_update - Update",callback=lambda _=None:[Updater().Aliexpressorder_event_update(),self.set_menu()]),
                            # M("Update_TertiaryActions (headers: invoice_id, date, requires_response_by, status, order_problem, email, dispute_amount)",callback=lambda x:[setattr(x,"title","Update TertiaryActions - Running"),globalise(pool(lambda:Updater().Update_TertiaryActions()),"updater_update_tertiaryactions"),process(lambda:[setattr(x,"title","Update_TertiaryActions - Finished Running, Ready To Run") for i in range(WHILE_TRUE) if globe("updater_update_tertiaryactions").is_running() == False])]),
                            M("Add Payments (headers (if not PayPal/Stripe):id,created_at,amount,email,invoice_id,order_id,payment_gateway_name)",callback=lambda _=None:[Updater().Update_Payments(),self.set_menu()]),
                            M("Add Payouts (headers (if not PayPal/Stripe):id,created_at,amount,account_name,account_last_4_digits,payment_gateway_name)",callback=lambda _=None:[Updater().Update_Payouts(),self.set_menu()]),
                            [globalise(self,"verification_tests_x"),[M("Orders with seller not shipping goods ( Create ReOrder / Existing ReOrders / Pause All Adsets / Use Western Union )"), [[
                                                                          M("AliExpress Order %s (Reordered %sx)"%(
                                                                            i.id,
                                                                            or_list(lambda:len(Get(Aliexpressorder_event,id=i.id).reorder_ids),len([])))),
                                                                          [eval("""M("Create A Reorder",
                                                                            callback=lambda _=None:\
                                                                            [globalise(ReOrder().create(%s),"new_reorder"),
                                                                            Update(Get(Aliexpressorder_event,id=%s),
                                                                                reordered=True,
                                                                                reorder_ids=\
                                                                                  or_list(lambda:Get(Aliexpressorder_event,id=%s).reorder_ids+[globe("new_reorder").identifier],
                                                                                    lambda:[globe("new_reorder").identifier])),
                                                                            globe("verification_tests_x").set_menu()])"""%(i.id,i.id,i.id)),
                                                                          [M("Existing Reorders"),
                                                                          [M(i) for i in or_list(lambda:list(Get(Aliexpressorder_event,id=i.id).reorder_ids),[]) ]
                                                                          ]
                                                                          ]] for i in Filter(Aliexpressorder_event,event="Seller did not ship goods.",shop=Muta()().store_abbre)]]][1],
                            [globalise(self,"verification_tests_x"),[M("Orders cancelled due to security reasons ( Create ReOrder / Existing ReOrders / Pause All Adsets / Use Western Union )"), [[
                                                                          M("AliExpress Order %s (Reordered %sx)"%(
                                                                            i.id,
                                                                            or_list(lambda:len(Get(Aliexpressorder_event,id=i.id).reorder_ids),len([])))),
                                                                          [eval("""M("Create A Reorder",
                                                                            callback=lambda _=None:\
                                                                            [globalise(ReOrder().create(%s),"new_reorder"),
                                                                            Update(Get(Aliexpressorder_event,id=%s),
                                                                                reordered=True,
                                                                                reorder_ids=\
                                                                                  or_list(lambda:Get(Aliexpressorder_event,id=%s).reorder_ids+[globe("new_reorder").identifier],
                                                                                    lambda:[globe("new_reorder").identifier])),
                                                                            globe("verification_tests_x").set_menu()])"""%(i.id,i.id,i.id)),
                                                                          [M("Existing Reorders"),
                                                                          [M(i) for i in or_list(lambda:list(Get(Aliexpressorder_event,id=i.id).reorder_ids),[]) ]
                                                                          ]
                                                                          ]] for i in Filter(Aliexpressorder_event,event="Your payment was not processed due to security reasons. As a result your order has been cancelled. AliExpress did not accept any payment for this order. However, please note that some banks may hold onto payments for up to 3-15 business days.",shop=Muta()().store_abbre)]]][1],
                            M(""),
                          ]][1],
                        ],
                        ]
                        ],

                        # `it does not need to look @ activity. it has only to reposit, reverseretrospectively whoany.`
                        #[MenuItem("Active - Activity"),
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s %s <%s>", callback  = lambda _=None:   [self.set_menu(), [Update(i,active_status=False) for i in All(Activity)], Activity.start("%s"), self.set_menu(), 0/0]     )][1]"""%(i.name, ("(offchanced)" if i.offchanced == True else ""), ("TRUE" if i.active_status else("⁄")), i.name)) for i in All(Activity)  ],
                        #],
                        # (Seems Of Little Utility) Myticketrequest
                        #[setitem(g(),"Active - myticketrequest_x",self),[MenuItem("MyTicketRequest"), [MenuItem("+",callback=lambda _=None:[MyTicketRequest(request=OSA.display_dialog("request?")).save(),self.set_menu()] )]+[eval("""[exec("from rumps import MenuItem",globals()),[MenuItem("%s"),MenuItem("%s", callback=lambda _=None: [Update(Get(MyTicketRequest,request="%s"),response=OSA.display_dialog("response?: ")),g()["myticketrequest_x"].set_menu()]  )] ][1]""" % ( i.request,i.response,i.request,   )) for i in All(MyTicketRequest)]]][1],
                        
                        #(glanced at minimal thought sprouting utility)
                        #[MenuItem("Active - Proket"),x
                        #  [ MenuItem("+", callback=lambda _=None:[  setitem(g(),"x",OSA.display_dialog("Proket", [":)"]) ),redprint(g()["x"]), [Proket(proket=g()["x"]).save() for i in range(10) if len(Proket.objects.filter(proket=g()["x"]))==0]  ,  self.set_menu()]) ] + \
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s")][1]"""%(i.proket)) for i in All(Proket)  ],
                        #],
                        #[M("Active - 5. Unavailable Products"),
                        # [MenuItem("Active - 7. Routing (%s, (%s, %s), (%s, %s), %s)"%(len(onyx("e1",Muta()().store_abbre)),len([i for i in onyx("e2",Muta()().store_abbre) if i.calculate_time_so_far()<=20]),len([i for i in onyx("e2",Muta()().store_abbre) if i.calculate_time_so_far()>20]),len([i for i in onyx("e3",Muta()().store_abbre) if i.calculate_time_so_far()<=20]),len([i for i in onyx("e3",Muta()().store_abbre) if i.calculate_time_so_far()>20]), len(onyx("e4",Muta()().store_abbre)) )),
                        #   [keycall("calculate",Filter(Lineitem,shop=Muta()().store_abbre)),[
                        #     [b,[[M("%s (%s)"%(i,len([q for q in Filter(Lineitem,stage="%s"%(a),timesofar=(i),shop=Muta()().store_abbre)]))),[M("ID: %s"%(x.id)) for x in Filter(Lineitem,stage="%s"%(a),timesofar=(i),shop=Muta()().store_abbre)] ] for i in lrange(max(key("timesofar",Filter(Lineitem,shop=Muta()().store_abbre))+[0])+(1))]] for a,b in zip(["e1","e2","e3","e4"],["Ready To Order","Placed Order","Tracking And Shipping","Delivered"])
                        #   ]][1]
                        # ],



                        #translucience(),
                        #[MenuItem("Activity Cyclic"),
                        #  [ MenuItem("+", callback=lambda _=None:[  tryprocess(Activity_Cyclic(name=OSA.display_dialog("Name",[":)"]),cycle= OSA.display_dialog("Cycle",[":)"]),).save)  ,  self.set_menu()]) ] + \
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s %s", callback = lambda _=None: [Activity_Cyclic().start(name="%s")] )][1]"""%(i.name, ("(offchanced)" if i.active == True else ""), i.name)) for i in All(Activity_Cyclic) ] + \
                        #  [ process(lambda: [time.sleep( ((Date()+1).dateobj - (datetime.now()) ).seconds), Activity_Cyclic.iterate(), [[time.sleep(24*60*60),Activity_Cyclic.iterate()] for i in range(1000)]]) ],
                        #],
                        
                        #chilled
                        #slumbered (what am i gonna cheick names b4 i order?)
                        #[MenuItem("CNAMEKILL (slumbered)"),
                        #  [MenuItem(i.customer_name) for i in All(CNAMEKILL)]
                        #],

                        #[ eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s", callback=lambda: OSA().createnewarrangement("Profile\ 20", [0, 0, 922, 1200], 4, ["delay 1", "cmd_l", "delay 1", "%s", "return", "cmd_t", "cmd_l", "delay 1", ]))][1]"""%("%s-------------%s"%(i.customer_name,i.date), (Shop()(Get(Order,id=i.order_id).shop).Shopify_App_API_Url.split("@")[-1]+"/"+"orders"+"/"+"%s"%i.order_id))) for i in All(CNAMEKILL)  ],
                        #],

                        #[MenuItem("Combinations - Untagged"),
                        #  [ MenuItem("+", callback=lambda _=None:[  setitem(g(),"x",OSA.display_dialog("Untagged", ["careful"]) ),redprint(g()["x"]), [Combination(combination=g()["x"],slot="untagged").save() for i in range(10) if len(Combination.objects.filter(combination=g()["x"], slot="untagged"))==0]  ,  self.set_menu()]) ] + \
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem('''%s''')][1]"""%(i.combination)) for i in tcer(Filter(Combination, slot="untagged"))  ],
                        #],
                        #[MenuItem("LastCheckedTime"),
                        #  [MenuItem("🤾", callback=lambda _=None: [self.set_menu(),OSA().notify("Reset Menu! :)")] )] +\
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s",callback=lambda _=None:[pyperclip.copy("%s"),OSA().notify("Copied ID! :)")] )][1]"""%(i.X,i.X.split("__")[1]) ) for i in All(LastCheckedTime)  ],
                        #],
                        #products
                        # Programming_Glyph
                        #Proket
                        #Quote (unkerrolax)
                        #Ability
                        #[MenuItem("Records - Ability"),
                        #  New_Menulet.plus(lambda: [  setitem(g(),"x",OSA.display_dialog("Ability", [":)"]) ),redprint(g()["x"]), [Ability(ability=g()["x"]).save() for i in range(10) if len(Ability.objects.filter(ability=g()["x"]))==0]  ,  self.set_menu()], self) + \
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s")][1]"""%(i.ability)) for i in All(Ability)  ],
                        #],
                        #[MenuItem("Records - Angle"),
                        #  [ MenuItem("+", callback=lambda _=None:[Angle(date_added=datetime.now(),angle=OSA.display_dialog("Update?")).save(),self.set_menu()])]+\
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem('''%s: [%s]''',callback=lambda _=None:OSA.display_dialog('''%s'''))][1]"""%(i.date_added,i.angle,i.angle)) for i in tcer(All(Angle))  ],
                        #],
                        #[MenuItem("Records - Anglekeys"),
                        #  [ MenuItem("+", callback=lambda _=None:[Save(Anglekey,date_added=datetime.now(),anglekey=OSA.display_dialog("Angle Key")),self.set_menu()])] + \
                        #  [[MenuItem("%s"%(i)), [MenuItem("%s: %s"%(r.date_added, r.anglekey)) for r in [y for y in All(Anglekey) if y.anglekey.startswith("[%s]"%i)]]] for i in oset([re.findall(r"\[(.*?)\]",z)[0] for z in key("anglekey",All(Anglekey))])],
                        #],
                        #[M("Records - Supplies"), [M("+",callback=lambda _=None: [Save(Supplies,field=OSA.display_dialog("field?",default_answer=""),name=OSA.display_dialog("name?",default_answer=""),remaining=OSA.display_dialog("remaining?",default_answer=""),dollars=OSA.display_dialog("dollars?",default_answer=""),),self.set_menu()])]+[setitem(globals(),"supplies_x",self),[
                        #  [M("%s"%i),[[M("%s"%a.name), [M("-",callback=lambda _=None:[plusUpdate]), M("reset",callback=lambda _=None:[]), M("full reset",callback=lambda _=None:[])]] for a in Filter(Supplies,field="%s"%i)]] for i in sorted(set(key("field",All(Supplies))))
                        #  ]][1]
                        #],
                        [MenuItem("extended"), [
                        [MenuItem("Dump Database"),
                          [MenuItem("Dump Database", callback=lambda _=None: [SQL().dump_db_all(homepath("~/tavern/tavern/soda/.%s.sql"%(datetime.now()))), OSA.notify("dumped at %s" % datetime.now())])]
                        ],
                        [MenuItem("fp"),
                          [eval("MenuItem('%s', callback=lambda _=None: os.system('/Applications/Firefox\ 65.app/Contents/MacOS/firefox -p %s &>/dev/null&') if not str('%s').endswith('Admin') and 'Shopify' not in str('%s') and 'Design' not in str('%s') else os.system('/Applications/Firefox\ 71.app/Contents/MacOS/firefox -p %s &>/dev/null&'))"%(i,i,i,i,i,i)) for i in sorted(lmap(lambda x: x.split(".")[1], os.listdir(GLOBAL_FIREFOX_PROFILE_PATH)))]
                        ],
                        [MenuItem("Records - Logins"),
                          [MenuItem("+", callback=lambda _,**kwargs: [[setitem(kwargs,"company",OSA.display_dialog("company?: ",default_answer="")), setitem(kwargs,"username",OSA.display_dialog("username?: ",default_answer="")), setitem(kwargs,"password",OSA.display_dialog("password?: ",default_answer="",hidden=True)), Save(Password,company=kwargs["company"],username=kwargs["username"],password=kwargs["password"])if(len(Filter(Password,company=kwargs["company"],username=kwargs["username"]))==0)else(Update(Get(Password,company=kwargs["company"],username=kwargs["username"]),password=kwargs["password"]))], self.set_menu()])] + \
                          #[[MenuItem("%s"%a), [eval("MenuItem('%s', callback=lambda _=None:(lambda x: [[[OSA.notify(str(i)),sp(1)] for i in tcer(range(1,4))],[[OSA(None,[i]),sp(random.uniform(0.25,0.4))] for i in x]])(Get(Password,company='%s',username='%s').password))"%(b.username,b.company,b.username)) for b in Filter(Password,company=a)]] for a in sorted(set(key("company", All(Password))))]
                          [[MenuItem("%s"%a), [eval("MenuItem('%s', callback=lambda _=None:pyperclip.copy(Get(Password,company='%s',username='%s').password))"%(b.username,b.company,b.username)) for b in Filter(Password,company=a)]] for a in sorted(set(key("company", All(Password))))]
                        ],
                        # [MenuItem("Records - Binarydata"), # Binarydata
                        #   [MenuItem("+", callback=lambda _=None:[Binarydata().update_or_create(OSA.display_dialog("File?: ")), self.set_menu()] )] + \
                        #   [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s",callback=lambda _=None: [Binarydata().export(Get(Binarydata,id=%s).filename,OSA.display_dialog("Export Path?: ")),""] ) ][1]"""%(i.filename, i.id, )) for i in All(Binarydata)  ],
                        # ],

                        #[MenuItem("Records - BusinessQuotes"),
                        #  [ MenuItem("+", callback=lambda _=None:[  setitem(g(),"x",OSA.display_dialog("BusinessQuote", [":)"]) ),redprint(g()["x"]), [BusinessQuote(businessquote=g()["x"]).save() for i in range(10) if len(BusinessQuote.objects.filter(businessquote=g()["x"]))==0]  ,  self.set_menu()]) ] + \
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s")][1]"""%(i.businessquote)) for i in All(BusinessQuote)  ],
                        #],
                        #[MenuItem("Records - Essays"),
                        #  [ MenuItem("+", callback=lambda _=None: [Essay(title=OSA.display_dialog("title?", ["OK"]), essay=OSA.display_dialog("essay?",["OK"]) ).save(),self.set_menu()] ) ] +\
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s", callback=lambda _=None: [OSA.display_dialog((Get(Essay,title="%s").essay))]   )][1]"""%( i.title , i.title )) for i in keysort("title",All(Essay),tcer=False)  ],
                        #],
                        #[MenuItem("Records - ExecutableText"),
                        #  [ MenuItem("+", callback=lambda _=None:[  setitem(g(),"x",pyperclip.paste() ),redprint(g()["x"]), [ExecutableText(w=g()["x"]).save() for i in range(10) if len(ExecutableText.objects.filter(w=g()["x"]))==0]  ,  self.set_menu()]) ] + \
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s", callback=lambda _=None: [pyperclip.copy(Get(ExecutableText,w="%s").x),OSA().notify("pyperclipped")]   )][1]"""%( i.w , i.w )) for i in keysort("w",All(ExecutableText),tcer=False)  ],
                        #],
                        #[MenuItem("Records - Grammar"),
                        #  [ MenuItem("+", callback=lambda _=None:[  setitem(g(),"x",OSA.display_dialog("Grammar", [":)"]) ),redprint(g()["x"]), [Grammar(grammar=g()["x"]).save() for i in range(10) if len(Grammar.objects.filter(grammar=g()["x"]))==0]  ,  self.set_menu()]) ] + \
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s", callback=lambda _=None:OSA.display_dialog(q=Get(Grammar,id=%s).grammar))][1]"""%(i.grammar,i.id)) for i in All(Grammar)  ],
                        #],
                        #[MenuItem("Records - Joke"),
                        #  [ MenuItem("+", callback=lambda _=None:[  setitem(g(),"x",OSA.display_dialog("A Fine Joke", [":)"]) ),redprint(g()["x"]), [Joke(joke=g()["x"]).save() for i in range(10) if len(Joke.objects.filter(joke=g()["x"]))==0]  ,  self.set_menu()]) ] + \
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s")][1]"""%(i.joke)) for i in All(Joke)  ],
                        #],
                        #[MenuItem("Records - Level_Eleven_Bugs"),
                        #  [setitem(g(),"level_eleven_bugs_x",self),[ MenuItem("+", callback=lambda _=None: [Level_Eleven_Bugs(level_eleven_bug=OSA.display_dialog("YeS SiR",buttons=["OK"]),first_encounter=Date().Now()).save(), g()["level_eleven_bugs_x"].set_menu()])]]   [1] + \
                        #  [MenuItem("[%s][%s]"%(i.first_encounter,i.level_eleven_bug)) for i in All(Level_Eleven_Bugs) ],
                        #],
                        #[MenuItem("Records - Questionnaires"),
                        #  [ MenuItem("+ (on_clipboard)", callback=lambda _=None:[ Questionnaire(questionnaire=pyperclip.paste() ).save(), self.set_menu() ]) ] + \
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s", callback=lambda _=None: OSA.display_dialog(default_answer=Get(Questionnaire,id=%s).questionnaire, buttons=[":)"]) )][1]"""%(i.id, i.id)) for i in All(Questionnaire)  ],
                        #],
                        #[MenuItem("Records - Quotes"),
                        #  [ MenuItem("+", callback=lambda _=None:[  setitem(g(),"x",OSA.display_dialog("Quote", [":)"]) ),redprint(g()["x"]), [Quote(quote=g()["x"]).save() for i in range(10) if len(Quote.objects.filter(quote=g()["x"]))==0]  ,  self.set_menu()]) ] + \
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s")][1]"""%(i.quote)) for i in All(Quote)  ],
                        #],
                        #[MenuItem("Records - Reminders"),
                        #  [ MenuItem("+", callback=lambda _=None:[  setitem(g(),"x",OSA.display_dialog("A Sweet Reminder", [":)"]) ),redprint(g()["x"]), [Reminder(reminder=g()["x"]).save() for i in range(10) if len(Reminder.objects.filter(reminder=g()["x"]))==0]  ,  self.set_menu()]) ] + \
                        #  [ eval("""[exec("from rumps import MenuItem",globals()),MenuItem('''%s''',callback=lambda _=None:[OSA.notify(i.reminder),pyperclip.copy(i.reminder),OSA.notify("pyperclipped")])][1]"""%(i.reminder)) for i in tcer(All(Reminder))  ],
                        #],
                        #(MenuItem("Records - Size ()"), [[ [Size().add().ensure_existing_measurement_today(),MenuItem("%s"%i.date)][1], [MenuItem("0. toothbrushes: %s" % i.toothbrushes    ,    callback = lambda _ = None:                                              [Size().add().toothbrushes()  ,  self.set_menu()]                       ),MenuItem("1. showers: %s" % i.showers    ,    callback = lambda _ = None:                                              [Size().add().showers()  ,  self.set_menu()]                       ),MenuItem("2. food: %s" % i.food    ,    callback = lambda _ = None:                                              [Size().add().food()  ,  self.set_menu()]                       ),MenuItem("3. weight: %s" % i.weight    ,    callback = lambda _ = None:                                              [Size().add().weight()  ,  self.set_menu()]                       ),MenuItem("4. thigh_size: %s" % i.thigh_size    ,    callback = lambda _ = None:                                              [Size().add().thigh_size()  ,  self.set_menu()]                       ),MenuItem("5. calf_size: %s" % i.calf_size    ,    callback = lambda _ = None:                                              [Size().add().calf_size()  ,  self.set_menu()]                       ),MenuItem("6. gluteus_size: %s" % i.gluteus_size    ,    callback = lambda _ = None:                                              [Size().add().gluteus_size()  ,  self.set_menu()]                       ),MenuItem("7. stomach_size: %s" % i.stomach_size    ,    callback = lambda _ = None:                                              [Size().add().stomach_size()  ,  self.set_menu()]                       ),MenuItem("8. chest_size: %s" % i.chest_size    ,    callback = lambda _ = None:                                              [Size().add().chest_size()  ,  self.set_menu()]                       ),MenuItem("9. hydromaxes: %s" % i.hydromaxes    ,    callback = lambda _ = None:                                              [Size().add().hydromaxes()  ,  self.set_menu()]                       ),MenuItem("10. jelqs: %s" % i.jelqs    ,    callback = lambda _ = None:                                              [Size().add().jelqs()  ,  self.set_menu()]                       ),MenuItem("11. penis_size: %s" % i.penis_size    ,    callback = lambda _ = None:                                              [Size().add().penis_size()  ,  self.set_menu()]                       ),MenuItem("12. morning_setup: %s" % i.morning_setup    ,    callback = lambda _ = None:                                              [Size().add().morning_setup()  ,  self.set_menu()]                       ),MenuItem("14. morning_wakeup_time: %s" % i.morning_wakeup_time    ,    callback = lambda _ = None:                                              [Size().add().morning_wakeup_time()  ,  self.set_menu()]                       ),MenuItem("15. punches: %s" % i.punches    ,    callback = lambda _ = None:                                              [Size().add().punches()  ,  self.set_menu()]                       ),MenuItem("16. kicks: %s" % i.kicks    ,    callback = lambda _ = None:                                              [Size().add().kicks()  ,  self.set_menu()]                       ),MenuItem("17. circles: %s" % i.circles    ,    callback = lambda _ = None:                                              [Size().add().circles()  ,  self.set_menu()]                       ),MenuItem("18. new_feints: %s" % i.new_feints    ,    callback = lambda _ = None:                                              [Size().add().new_feints()  ,  self.set_menu()]                       ),MenuItem("19. crunches: %s" % i.crunches    ,    callback = lambda _ = None:                                              [Size().add().crunches()  ,  self.set_menu()]                       ),MenuItem("20. pullups: %s" % i.pullups    ,    callback = lambda _ = None:                                              [Size().add().pullups()  ,  self.set_menu()]                       ),MenuItem("21. dips: %s" % i.dips    ,    callback = lambda _ = None:                                              [Size().add().dips()  ,  self.set_menu()]                       ),MenuItem("22. pants_left: %s" % i.pants_left   ,    callback = lambda _= None:  [Size().add().pants_left()  ,  self.set_menu()]    ),MenuItem("23. shirts_left: %s" % i.shirts_left   ,    callback = lambda _= None:  [Size().add().shirts_left()  ,  self.set_menu()]    ),MenuItem("24. mood: %s" % i.mood   ,    callback = lambda _= None:  [Size().add().mood()  ,  self.set_menu()]    ),MenuItem("25. shaved: %s" % i.shaved   ,    callback = lambda _= None:  [Size().add().shaved()  ,  self.set_menu()]    ),MenuItem("26. skyrocket: %s" % i.skyrocket    ,    callback = lambda _ = None:                                              [Size().add().skyrocket()  ,  self.set_menu()]                       ),MenuItem("27. are_you_rigged_to_upwork: %s" % i.are_you_rigged_to_upwork    ,    callback = lambda _ = None:                                              [Size().add().are_you_rigged_to_upwork()  ,  self.set_menu()]                       ), MenuItem("28. emails: %s" % i.emails    ,    callback = lambda _ = None:                                              [Size().add().emails()  ,  self.set_menu()]                       ),    MenuItem("29. estimated_humorisms: %s" % i.estimated_humorisms    ,    callback = lambda _ = None:                                              [Size().add().estimated_humorisms()  ,  self.set_menu()]                       ),    ]   ] for i in  tcer(All(Size)) ]
                        #),


                        # [MenuItem("Records - Meals (%s Today)"%(len(Filter(Meal,time__range=[(Date().datestr),(Date().datestr)])))),
                        #   [
                        #     [M("Mealinventory"), [M("+",callback=lambda _=None:[Mealinventory().add(x=OSA.display_dialog("format (separate by commas): # meal @ price, # meal2 @ price\nexample: 16 jelly @ 0.05, 16 pb @ 0.05")),self.set_menu()])]+[i for i in sorted(flatten(lmap(Mealinventory().giveformat,sorted(set(key("name",All(Mealinventory))))),1))]],
                        #     [M("eat"), [M("+",callback=lambda _=None:[Meal().add(x=OSA.display_dialog("format (separate by commas): # meal, # meal2\nexample: 16 jelly, 16 pb")),self.set_menu()])]+["Meal: %s %s on %s ($%s)"%(int(i.ounces), i.name, Date().friendlydate(i.time), round(i.price,2)) for i in tcer(All(Meal))]],
                        #   ]
                        # ],

                        # [MenuItem("Records - Typing Format"),
                        #   [
                        #     [M("Variable: %s"%(Typing_Format()().variable)),[eval("""M("%s",callback=lambda _=None:[Update(Typing_Format()(),variable="%s"),self.set_menu()])"""%(i,i)) for i in ["Start with `a`", "Start with `i`"] ]],     [M("Save Lines: %s"%((("Do")if(Typing_Format()().save_lines)else("Don't")))),[eval("""M("%s",callback=lambda _=None:[Update(Typing_Format()(),save_lines=eval("%s")),self.set_menu()])"""%(i,i)) for i in ["True", "False"] ]],     [M("Verbal: %s"%(Typing_Format()().verbal)),[eval("""M("%s",callback=lambda _=None:[Update(Typing_Format()(),verbal="%s"),self.set_menu()])"""%(i,i)) for i in [50, 75, 90] ]],     [M("Print: %s"%((("Do")if(Typing_Format()().printful)else("Don't")))),[eval("""M("%s",callback=lambda _=None:[Update(Typing_Format()(),printful=eval("%s")),self.set_menu()])"""%(i,i)) for i in ["True", "False"] ]],     [M("Naming: %s"%(Typing_Format()().naming)),[eval("""M("%s",callback=lambda _=None:[Update(Typing_Format()(),naming="%s"),self.set_menu()])"""%(i,i)) for i in ["Important", "Not Important"] ]],     [M("Naming Collision: %s"%(Typing_Format()().naming_collision)),[eval("""M("%s",callback=lambda _=None:[Update(Typing_Format()(),naming_collision="%s"),self.set_menu()])"""%(i,i)) for i in ["Important", "Not Important"] ]],     [M("Rudeness: %s"%(Typing_Format()().rudeness)),[eval("""M("%s",callback=lambda _=None:[Update(Typing_Format()(),rudeness="%s"),self.set_menu()])"""%(i,i)) for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ]],     [M("Pseudocode: %s"%((("Do")if(Typing_Format()().pseudocode)else("Don't")))),[eval("""M("%s",callback=lambda _=None:[Update(Typing_Format()(),pseudocode=eval("%s")),self.set_menu()])"""%(i,i)) for i in ["True", "False"] ]],     [M("Depth of Recursion: %s"%(Typing_Format()().depth_of_recursion)),[eval("""M("%s",callback=lambda _=None:[Update(Typing_Format()(),depth_of_recursion="%s"),self.set_menu()])"""%(i,i)) for i in [1, 2, 3, 4] ]],     [M("Ugliness: %s"%((("Do")if(Typing_Format()().ugliness)else("Don't")))),[eval("""M("%s",callback=lambda _=None:[Update(Typing_Format()(),ugliness=eval("%s")),self.set_menu()])"""%(i,i)) for i in ["True", "False"] ]],     [M("Error Method: %s"%(Typing_Format()().error_method)),[eval("""M("%s",callback=lambda _=None:[Update(Typing_Format()(),error_method="%s"),self.set_menu()])"""%(i,i)) for i in ["Discover", "Plan First"] ]],
                        #   ]
                        # ],

                        # [MenuItem("Records - Degradantlist"),
                        #   [ MenuItem("+", callback=lambda _=None:[setitem(g(),"degradantlist_list_self",self),Degradantlist(degradantlist=OSA.display_dialog("Degradantlist", ["OK"]),is_completed=False).save(),g()["degradantlist_list_self"].set_menu()]) ] + \
                        #   [[MenuItem("Done"),[MenuItem(i.degradantlist) for i in Filter(Degradantlist,is_completed=1)]]]+[ [setitem(g(),"degradantlist_list_self",self),eval("""[exec("from rumps import MenuItem",globals()),MenuItem('''%s''', callback=lambda _=None: [Update (Get(Degradantlist,id=%s),is_completed=True )  ,  g()["degradantlist_list_self"].set_menu()]   )][1]"""%(i.degradantlist,  i.id, ))][1] for i in Filter(Degradantlist,is_completed=False)  ],
                        # ],
                        # [MenuItem("Records - To Do List"),
                        #   [ MenuItem("+", callback=lambda _=None:[  setitem(g(),"x",OSA.display_dialog("Todo", [":)"]) ),setitem(g(),"xx",OSA.display_dialog("pyperclips (or None)", [":)"]) ),redprint(g()["x"]), [Todo(todo=g()["x"],pyperclips=g()["xx"],is_completed=False).save() for i in range(10) if len(Todo.objects.filter(todo=g()["x"],is_completed=False))==0]  ,  self.set_menu()]) ] + \
                        #   [[MenuItem("Done"),[MenuItem(i.todo) for i in Filter(Todo,is_completed=1)]]]+[ [setitem(g(),"todo_list_self",self),eval("""[exec("from rumps import MenuItem",globals()),MenuItem("%s", callback=lambda _=None: [Update (Get(Todo,id=%s),is_completed=True )  ,  g()["todo_list_self"].set_menu()]   )][1]"""%(i.todo,  i.id, ))][1] for i in Filter(Todo,is_completed=False)  ],
                        # ],
                        # [MenuItem("Records - Pyperclips"),
                        #   [ MenuItem("+", callback=lambda _=None:[Pyperclip(pyperclip=OSA.display_dialog("Pyperclip?",default_answer="")).save(),self.set_menu()])] + \
                        #   [globalise(self,"pyperclip_x"),[[M("View"),[[M(i.pyperclip), eval("""[M("To Clip",callback=lambda _=None:[pyperclip.copy(Get(Pyperclip,id=%s).pyperclip)]),M("Delete",callback=lambda _=None:[Del(Get(Pyperclip,id=%s)),g()["pyperclip_x"].set_menu()]),M("Update",callback=lambda _=None:[Update(Get(Pyperclip,id=%s),pyperclip=OSA.log("pyperclip?")),g()["pyperclip_x"].set_menu()])]"""%(i.id,i.id,i.id))]]] for i in tcer(All(Pyperclip))]][1]
                        # ],
                        # [MenuItem("Records - Unsolvable Problems"),
                        #   [MenuItem("+",callback=lambda _=None:[Save(UnsolvableProblem,unsolvableproblem=OSA.display_dialog("Unsolvable Problem?")),self.set_menu()])] + \
                        #   [eval("""MenuItem('''%s''', callback = lambda _=None:[OSA.display_dialog('''%s''')])"""%(i.unsolvableproblem,i.unsolvableproblem)) for i in tcer(All(UnsolvableProblem))]
                        # ],
                        # [MenuItem("Records - Adstips"),
                        #   [ MenuItem("+", callback=lambda _=None:[Adstip(adstip=OSA.display_dialog("Ads tip?",default_answer="")).save(),self.set_menu()])] + \
                        #   [ eval("""[exec("from rumps import MenuItem",globals()),[MenuItem('''View'''), MenuItem('''%s''',callback=lambda _=None:[OSA.notify(i.adstip)])] ][1]"""%(i.adstip)) for i in tcer(All(Adstip))  ],
                        # ],
                        # [MenuItem("Records - Tipsingeneral"),
                        #   [ MenuItem("+", callback=lambda _=None:[Tipsingeneral(tipsingeneral=OSA.display_dialog("Tip in general?",default_answer="")).save(),self.set_menu()])] + \
                        #   [ eval("""[exec("from rumps import MenuItem",globals()),[MenuItem('''View'''), MenuItem('''%s''',callback=lambda _=None:[OSA.notify(i.tipsingeneral)])] ][1]"""%(i.tipsingeneral)) for i in tcer(All(Tipsingeneral))  ],
                        # ],

                        #[MenuItem("Binarydata"),
                        #  [ MenuItem("+", callback=lambda _=None:[  setitem(g(),"x",OSA.display_dialog("Dictionary Entry", ["careful"]) ),redprint(g()["x"]), [Dictionaryentry(word=g()["x"]).save() for i in range(10) if len(Dictionaryentry.objects.filter(word=g()["x"]))==0]  ,  self.set_menu()]) ] + \
                        #

                        # [MenuItem("Records - Dictionary Entry"),
                        #   [ MenuItem("+", callback=lambda _=None:[  [setitem(g(),"x",OSA.display_dialog("Dictionary Entry", ["careful"]) ),setitem(g(),"y",OSA.display_dialog("Definition", ["careful"]) )],redprint(g()["x"]),redprint(g()["y"]), [Dictionaryentry(word=g()["x"],definition=g()["y"]).save() for i in range(10) if len(Dictionaryentry.objects.filter(word=g()["x"]))==0]  ,  self.set_menu()  ]) ] + \
                        #   [ [setitem(g(),"dictionaryentry_self",self),eval("""[exec("from rumps import MenuItem",globals()),[MenuItem('''[ [ [ [ [     %s     ] ] ] ] ]:%s (Videod: %s)''', callback=lambda _=None: [setitem(g(),"dictionaryentry_x",OSA.display_dialog('''%s''',['OK']))  ,  ([Update(Get(Dictionaryentry,id=%s),videod=True)  ,  OSA().notify("videod")  ,  time.sleep(2),redprint(self)  , g()["dictionaryentry_self"].set_menu()  ])if("Videod"==g()["dictionaryentry_x"])else(OSA().notify("not videod"))  ]   ),[M(i) for i in Get(Dictionaryentry,id=%s).definition.replace("\\n"," ").split(" ")]+[M(" ")]+[M("%s",callback=lambda _=None:[setitem(g(),"dictionaryentry_x",OSA.display_dialog('''%s''',['OK']))  ,  ([Update(Get(Dictionaryentry,id=%s),videod=True)  ,  OSA().notify("videod")  ,  time.sleep(2),redprint(self)  , g()["dictionaryentry_self"].set_menu()  ])if("Videod"==g()["dictionaryentry_x"])else(OSA().notify("not videod"))  ])]]][1]"""%( " ".join(i.word.upper()) , i.definition,         i.videod            , i.definition  ,  i.id  ,  i.id  ,  i.word.upper(),i.definition,i.id ))][1] for i in tcer(All(Dictionaryentry))  ],
                        # ],
                        [M("Updates"),[M("%s: %s"%(Date().friendlydate(i.time),i.name)) for i in keysort("time",All(Updates))]],

                        [MenuItem("Work Mode - %s"%([Update(Muta()(),sciencevessels_on=False)if(Muta()().sciencevessels_on==True and Muta()().fig_on==True)else(),("Fig")if(Muta()().fig_on)else("AddProducts")if(Muta()().addproducts_on)else("ScienceVessels")if(Muta()().sciencevessels_on)else("Support")if(Muta()().support_on)else("Job Search")if(Muta()().job_search_on)else("Incept Products")if(Muta()().incept_product_on)else("ProductChange")if(Muta()().productchange_on)else(None)][1])),
                          [MenuItem("Help",callback=lambda _=None:[OSA.display_dialog("Use ScienceVessels to add to a list of products and then send them to the shop all at once or use Fig to add products individually.",text_prompt=False),self.set_menu()]),
                          ["Workmode", [M("Fig",callback=lambda _=None:[Update(Muta()(),**{"fig_on":1,"addproducts_on":0,"sciencevessels_on":0,"support_on":0,"job_search_on":0,"incept_product_on":0,"productchange_on":0,}),self.set_menu()]),M("AddProducts",callback=lambda _=None:[Update(Muta()(),**{"fig_on":0,"addproducts_on":1,"sciencevessels_on":0,"support_on":0,"job_search_on":0,"incept_product_on":0,"productchange_on":0,}),self.set_menu()]),M("ScienceVessels",callback=lambda _=None:[Update(Muta()(),**{"fig_on":0,"addproducts_on":0,"sciencevessels_on":1,"support_on":0,"job_search_on":0,"incept_product_on":0,"productchange_on":0,}),self.set_menu()]),M("Support",callback=lambda _=None:[Update(Muta()(),**{"fig_on":0,"addproducts_on":0,"sciencevessels_on":0,"support_on":1,"job_search_on":0,"incept_product_on":0,"productchange_on":0,}),self.set_menu()]),M("Job Search",callback=lambda _=None:[Update(Muta()(),**{"fig_on":0,"addproducts_on":0,"sciencevessels_on":0,"support_on":0,"job_search_on":1,"incept_product_on":0,"productchange_on":0,}),self.set_menu()]),M("Incept Products",callback=lambda _=None:[Update(Muta()(),**{"fig_on":0,"addproducts_on":0,"sciencevessels_on":0,"support_on":0,"job_search_on":0,"incept_product_on":1,"productchange_on":0,}),self.set_menu()]),M("Product Change",callback=lambda _=None:[Update(Muta()(),**{"fig_on":0,"addproducts_on":0,"sciencevessels_on":0,"support_on":0,"job_search_on":0,"incept_product_on":0,"productchange_on":1,}),self.set_menu()])]]],
                        ],

                        # [MenuItem("AddProducts (%s)"%(("On")if(Muta()().addproducts_on==True)else("Off"))),
                        #   [
                        #   MenuItem("Send products",callback=lambda _=None:[OSA.log("Opening urls for %s products. Please open a Google Chrome browser window to open the urls."%(len(Filter(AddProduct,sent=0))),tp=False),keycall("send",Filter(AddProduct,sent=0)),self.set_menu()] ),
                        #   MenuItem("Refresh",callback=lambda _=None:self.set_menu()),
                        #   *[MenuItem(i.x) for i in Filter(AddProduct,sent=0)],
                        #   ]
                        # ],

                        # [MenuItem("ScienceVessels (%s)"%(("On")if(Muta()().sciencevessels_on==True)else("Off"))),
                        #   [
                        #   MenuItem("Send products",callback=lambda _=None:[OSA.log("Opening urls for %s products. Please open a Google Chrome browser window to open the urls."%(len(Filter(AddProduct,sent=0))),tp=False),keycall("warp",Filter(ScienceVessel,warped=0)),self.set_menu()] ),
                        #   MenuItem("Refresh",callback=lambda _=None:self.set_menu()),
                        #   *[MenuItem(i.x) for i in Filter(ScienceVessel,warped=0)],
                        #   ]
                        # ],

                        # [M("Nichelet"),[M("",icon=[globalise(get_random_address(homepath("~/tavern/tavern/soda/dls")).png(),"icon_image_x"),open(globe("icon_image_x"),"wb").write(i.icon_image),globe("icon_image_x")][-1],callback=lambda _=None:[]) for i in Filter(Product,product_type=Muta()().niche)]],
                        [M("Use Shops Menulet"), M("Use Shops Menulet", callback=lambda _=None:[tryprocess(lambda:Ryle())])],

                        [M("Update Lineitem Addresses for an Order"),M("Update Lineitem Addresses for an Order",callback=lambda _=None:[update_address()])],
                        [M("Get Tracking Number"),M("Get Tracking Number",callback=lambda _=None:[OSA.log("Here is the tracking number",df=alitracker(*OSA.log("Shop and order number (delimted by ', ')?").split(", ")))] )],
                        [M("Got Ali Url"),M("Got Ali Url",callback=lambda _=None:[got_ali_url()])],
                        [M("Bitly Url"),M("Bitly Url",callback=lambda _=None:[pyperclip.copy(bitly_url(pyperclip.paste()))])],
                        [M("Message Game"),M("Message Game",callback=lambda _=None:[process(lambda:Message_Game().add())])],
                        [M("Add Content"),M("Add Content",callback=lambda _=None:[process(lambda:Content().add_content() )])],
                        [M("Post Content"),M("Post Content",callback=lambda _=None:[process(lambda:Content()() )])],
                        [M("Adjust Ad Columns"),M("Adjust Ad Columns",callback=lambda _=None:[process(lambda:adjust_ad_columns() )])],
                        # [MenuItem("spare time functions"),
                        #   [
                        #   [M("SoundFiles"), [
                        #                         [M("Saved"),
                        #                           [eval("""M("%s",callback=lambda _=None:[Binarydata().export( homepath("~/tavern/tavern/soda/%s") ),process(lambda:[os.system("afplay '''~/tavern/tavern/soda/%s'''"),os.remove(homepath("~/tavern/tavern/soda/%s"))])])"""%(i.filename,i.filename,i.filename,i.filename)) for i in Filter(Binarydata,filename__endswith=".wav")]],
                        #                       M(("Record")if(len([i for i in os.listdir(homepath("~/tavern/tavern"))if(i.endswith(".wav"))])==0)else("Stop Recording"),callback=lambda _=None:(globalise(process(lambda: [globalise(homepath("~/tavern/tavern/%s.wav"%(datetime.now())),"fig_soundfiles_x_datetime"),os.system("/usr/local/bin/sox -d '%s'&>/dev/null&"%(globe("fig_soundfiles_x_datetime"))),self.set_menu()]),"fig_soundfiles_x"))if(len([i for i in os.listdir(homepath("~/tavern/tavern")) if i.endswith(".wav")])==0)else([Binarydata().update_or_create([i for i in os.listdir(homepath("~/tavern/tavern")) if i.endswith(".wav")][0]),globalise(None,"fig_soundfiles_x"),self.set_menu()]) ),
                        #                     ]],
                        #   [M("Screencasts"), [
                        #                         [M("Saved"),
                        #                           [eval("""M("%s",callback = lambda _=None: [Binarydata().export("%s")])"""%(i.filename,i.filename)) for i in Filter(Binarydata,filename__endswith=".mov")]],
                        #                       M("Record",callback = lambda _=None:[os.chdir(homepath("~/tavern/tavern")),process(quicktime_recording)]),
                        #                       M("Save", callback = lambda _=None:[os.chdir(homepath("~/Documents")),exec("import shutil",globals()),globalise(("%s.mov"%(datetime.now())),"fig_screencasts_x"),shutil.move([i for i in os.listdir() if i.endswith(".mov")][0],globe("fig_screencasts_x")),Binarydata().update_or_create(globe("fig_screencasts_x")),self.set_menu()])
                        #                     ]],
                        #   [M("Help"),[M("1. Title"),M("2. Image IDX"),M("3. Image Indexes"),M("4. Option Indexes"),M("5. Variant Indexes"),M("6. Size Chart"),M("7. Description"),]],
                        #   [M("Use Shops Menulet"), M("Use Shops Menulet", callback=lambda _=None:[tryprocess(lambda:Ryle())])],
                        #   [M("Get Product Source Mode - %s"%(Muta()().get_product_source_mode)),[M("Use Requests (A Python HTTP library)",callback=lambda _=None:[Update(Muta()(),get_product_source_mode="Requests"),self.set_menu()]),M("Read Browser HTML Page Source",callback=lambda _=None:[Update(Muta()(),get_product_source_mode="Read Browser HTML Page Source"),self.set_menu()])]],
                        #   [M("Product Adding Mode - %s"%(Muta()().product_adding_mode)), [M("Normal",callback=lambda _=None:[Update(Muta()(),product_adding_mode="Normal"), self.set_menu()]),M("Convoluted",callback=lambda _=None:[Update(Muta()(),product_adding_mode="Convoluted"),self.set_menu()])]],
                        #   [M("Run Export"), M("Run Export", callback=lambda _=None:[globalise(OSA.log("Please select from the following to export to a csv file.\n\n1. Adset_duplicate\n2. Adsethourlyinsight\n3. Adsethourlyinsightdata\n4. Adsetinsight\n5. Aliexpressorder\n6. Aliexpressorder_event\n7. ApprovedTransaction\n8. Audience\n9. CruxSupplier\n10. Facebookadaccountspend\n11. Facebookkeyword\n12. Facebookkeywordlist\n13. Facebookpage\n14. InceptedProduct\n15. Interest\n16. Interestinsight\n17. Lineitem\n18. New_Email\n19. New_Email_Template\n20. Niche\n21. PaidCardNumber\n22. PriceDecrease\n23. PriceIncrease\n24. ProductTalk\n25. ReOrder\n26. ScienceVessel\n27. SecondaryAction\n28. Settlement\n29. Subscription\n30. TertiaryAction\n31. TertiaryAction_Template\n32. AceInTheHole\n33. Adset\n34. Order\n35. Product"),"run_export_x"),SQL().table_to_xlsx("soda",globe("run_export_x"),(homepath("~/tavern/tavern/%s.xlsx"%(globe("run_export_x")))) ),OSA.log("Your export can be found at /Users/<your user name>/tavern/tavern/%s.xlsx."%(globe("run_export_x")),tp=False)])],
                        #   [M("Run Command"), M("Run Command",callback=lambda _=None:[process(lambda: exec(OSA.log("Command?:")))])],
                        #   [M("Encoding"),M("Run",callback=lambda _=None:[pyperclip.copy(pyperclip.paste().encode("ascii",errors="backslashreplace").decode())])],
                        #   M("Run chromejstest",callback=lambda _=None:process(lambda:chromejstest()) ),
                        #   [M("Update Lineitem Addresses for an Order"),M("Update Lineitem Addresses for an Order",callback=lambda _=None:[update_address()])],
                        #   [M("Export A Video"),M("Export A Video",callback=lambda _=None:[export_a_video()])],
                        #   [setattr(self,"is_repeat",getattr(self,"is_repeat",False)),["Timer", [
                        #                           MenuItem("Is_Repeat %s"%("On"if(self.is_repeat)else("Off")),callback=lambda _=None:[setattr(self,"is_repeat",not self.is_repeat),self.set_menu()]),
                        #                           MenuItem("1:00",callback=lambda _=None:process(lambda: [[[[setattr(self.app,"title","%s:%s" % (int((60-i)/60), str((60-i)%60).zfill(2) )),zz(1)] for i in range(61)] for i in range(1 if self.is_repeat == False else WHILE_TRUE)],setattr(self.app,"title","🥃")] )),
                        #                           MenuItem("2:00",callback=lambda _=None:process(lambda: [[[[setattr(self.app,"title","%s:%s" % (int((120-i)/60), str((120-i)%60).zfill(2) )),OSA.notify("%s:%s" % (int((120-i)/60), str((120-i)%60).zfill(2) )) if self.notify == 1 else(),zz(1)] for i in range(121)] for i in range(1 if self.is_repeat == False else WHILE_TRUE)],setattr(self.app,"title","🥃")] )),
                        #                           MenuItem("4:00",callback=lambda _=None:process(lambda: [[[[setattr(self.app,"title","%s:%s" % (int((240-i)/60), str((240-i)%60).zfill(2) )),OSA.notify("%s:%s" % (int((240-i)/60), str((240-i)%60).zfill(2) )) if self.notify == 1 else(),zz(1)] for i in range(241)] for i in range(1 if self.is_repeat == False else WHILE_TRUE)],setattr(self.app,"title","🥃")] )),
                        #                           MenuItem("10:00",callback=lambda _=None:process(lambda: [[[[setattr(self.app,"title","%s:%s" % (int((600-i)/60), str((600-i)%60).zfill(2) )),OSA.notify("%s:%s" % (int((600-i)/60), str((600-i)%60).zfill(2) )) if self.notify == 1 else(),zz(1)] for i in range(601)] for i in range(1 if self.is_repeat == False else WHILE_TRUE)],setattr(self.app,"title","🥃")] )),
                        #                           MenuItem("Set Timer", callback = lambda _=None: process(lambda: [globalise(datetime.strptime(OSA.display_dialog("Alarm Timer? In format Day of week, Hour of day, Minute of the hour, AM/PM")+ (", ") + ("%s, %s, %s"%(datetime.now().year,datetime.now().month,datetime.now().day)),"%A, %I, %M, %p, %Y, %m, %d"),"menulet_timer_alarm"),[[([[os.system("osascript -e 'set Volume 10'"),os.system("afplay /System/Library/Sounds/Submarine.aiff -v 10 &"),time.sleep(0.5)] for i in range(WHILE_TRUE)]) if( ((globe("menulet_timer_alarm").weekday()==datetime.now().weekday())and(globe("menulet_timer_alarm").hour==datetime.now().hour)and(globe("menulet_timer_alarm").minute==datetime.now().minute)) )else(),time.sleep(30)] for i in range(WHILE_TRUE)],self.set_menu()])),
                        #                         ]]] [1]
                        # ]
                        # ],
                        ]]
                        # Ticketrequestforme
                        #[setitem(g(),"ticketrequestforme_x",self),[MenuItem("TicketRequestForMe"), [MenuItem("+",callback=lambda _=None:[TicketRequestForMe(request=OSA.display_dialog("request?")).save(),self.set_menu()] )]+[eval("""[exec("from rumps import MenuItem",globals()),[MenuItem("%s"),MenuItem('''%s''', callback=lambda _=None: [Update(Get(TicketRequestForMe,request="%s"),response=OSA.display_dialog("response?: ")),g()["ticketrequestforme_x"].set_menu()]  )] ][1]""" % ( i.request,i.response,i.request,   )) for i in All(TicketRequestForMe)]]][1],

                        #THESE ARE ALL HOTFIXES, CANNOT USE THESE AS EXAMPLES.
                        #setitem(g(),"Scoresheet",ExecutableText().export("Scoresheet"))
                        # do not tuch.

                        #Ad
                        #Order
                        #Product
                      ]
      #@lolgoodedOSA().notify("Set Menulet.")
      # process(lambda: [[time.sleep(5),[Activity().stop([i for i in All(Activity) if(i.intervals not in [None,[]] and 1==len(i.intervals[-1]))][0].name), Activity().start("None") ] if("None"==OSA().display_dialog(["None","Continue"])) else None] for i in range(random.randrange(1000,2000))])
    def emails_in_menulet_as_png(self):
      """
      In [1]: for i in e.messages:                           
         ...:     t = i["hidden_message_3"].decode()
         ...:     try:
         ...:         address=html_to_png(t)
         ...:         impreview(address)
         ...:     except Exception as e:
         ...:         redprint(e)
      """
      return None
    def start(self):
      ""
  globals().update(locals())

""" Database-Related """
class AceInTheHoleHeaderColumns(Records):
  id = AutoField()
  account = CharField()
  header_column_dict = JSONField()
  active = IntegerField()
  shop = CharField()
  # :End:
  def add(self):
    shop = OSA.log("Shop that these header columns are for?: ")
    account = OSA.log("Account?: ")
    header_column_dict = {}
    headers = ["date","description","amount",]
    for i in headers:
      name = OSA.log("name for field '%s'?:"%(i))
      header_column_dict[name] = i
    Save(AceInTheHoleHeaderColumns,account=account,header_column_dict=header_column_dict,shop=shop)
class AceInTheHoleNote(Records):
  id = AutoField()
  amount = FloatField()
  note = CharField()
  date = DateField()
  # :End:
class AceInTheHoleRefund(Records):
  id = AutoField()
  amount = FloatField()
  date = DateField()
  description = CharField()
  # :End:
class AceInTheHoleType(Records):
  id = AutoField()
  name = CharField(unique=True)
  # :End:
  """ # some default types
  BUSINESS_PAYMENT_GATEWAY_DEPOSITS
  BUSINESS_PAYMENT_GATEWAY_WITHDRAWALS
  BUSINESS_PURCHASING_PRODUCTS
  BUSINESS_PURCHASING_ADS
  BUSINESS_OTHER_CONTRACT_LABOR
  BUSINESS_OTHER_HOSTING
  BUSINESS_OTHER_SUBSCRIPTIONS
  PERSONAL_NOT_FOOD
  PERSONAL_FOOD
  """
class AceInTheHoleTypeTag(Records):
  id = AutoField()
  type = CharField(max_length="0128",unique=True)
  tag = CharField(max_length="0128",unique=True)
  sign = CharField(max_length="0128",unique=True)
  # :End:
  def run_all(self):
    for i in All(AceInTheHoleTypeTag):
      AceInTheHoleTypeTag().run_tag(i.type,i.tag)
  def run_tag(self,type,tag):
    OSA.notify("STARTING %s %s"%(type,tag))
    x = Filter(AceInTheHole,tag=None,type=None,description__icontains=tag)
    sign = Get(AceInTheHoleTypeTag,type=type,tag=tag).sign
    x = ([i for i in x if i.amount>0])if(sign=="positive")else([i for i in x if i.amount<0])if(sign=="negative")else(x)if(sign=="positive_or_negative")else()
    for idx, i in enum(x):
      Update(i,type=type,tag=tag)
      OSA.notify("%s Successfully tagged for"%(idx+1),b="%s: %s"%(type,tag))
      # time.sleep(0.2)
      time.sleep(0.1)
    #OSA.notify("%s Successfully tagged for"%(len(x)+1),b="%s: %s"%(type,tag))
class AddProduct(Records):
  id = AutoField()
  shop = CharField()
  niche = CharField()
  is_free_plus_ship = IntegerField()
  page = CharField()
  x = CharField(max_length="4196")
  y = BinaryField(max_length=4294967295)
  url = CharField(max_length="4196")
  sent = IntegerField()
  created_at = DateTimeField()
  title = CharField()
  image_idx = JSONField()
  image_indexes = JSONField()
  option_indexes = JSONField()
  variant_indexes = JSONField()
  size_chart = JSONField()
  my_description = JSONField()
  logo = IntegerField()
  logo_size = JSONField()
  logo_scaling_dimension_size = JSONField()
  caption = JSONField()
  append_pictures = JSONField()
  aliexpressvendor = CharField()
  added_product_id = BigIntegerField()
  extra_commands = CharField()
  # :End:
  def add(self):
    if got_ali_url() == True:
      title = pyperclip.paste().split("twirl1: ")[1].split("|")[0]
      titles = sud("title",Filter(Product,shop=Muta()().store_abbre))
      titles2 = lmap(lambda i:tr(lambda:i.x.split("twirl1: ")[1].split("|")[0]),All(AddProduct))
      if title in titles or title in titles2:
        OSA.notify("Product added")
        OSA.notify("Got Ali Product, %s" % (title))
        pyperclip.copy("\n")
        return
    url = get_first_chrome_url()
    if not Filter(AddProduct,x=pyperclip.paste(),url=url,sent=0):
      g.Z = pyperclip.paste()
      ifelseget(lambda:[rm(homepath("~/Desktop/.DS_Store")),len(os.listdir(homepath("~/Desktop")))][1]==1,lambda:[globalise(True,"logo"),globalise(get_logo_size(),"logo_size"),globalise(ifelseget(lambda:findall(url,r"https://www.aliexpress.com/item/\d+.html"),lambda:[450,450],lambda:[500,500]),"logo_scaling_dimension_size"),setattr(g,"Z",g.Z[:-1])],lambda:[globalise(False,"logo"),globalise([],"logo_size"),globalise(ifelseget(lambda:findall(url,r"https://www.aliexpress.com/item/\d+.html"),lambda:[450,450],lambda:[500,500]),"logo_scaling_dimension_size")])
      extra_commands = None
      if "|&" in g.Z:
        extra_commands = findall(g.Z,1,"\|(&.*)")
        g.Z = findall(g.Z,1,"(.*\|)&")
      ifdo(lambda:g.Z.endswith("||") and g.Z.count("|") == 8,lambda:[globalise(tryreturn(lambda:OSA.display_dialog(q="Caption? [note: enter in ! if you don't want to create an adset and only want to add the product. Press Command+Shift+Space to show a list of emojis.]", default_answer=str(Muta()().default_caption).format(Muta()().my_description)),ep=1),"caption"),setattr(g,"Z",g.Z[:-1])])
      g.Z = g.Z[:-1]
      title,image_idx,image_indexes,option_indexes,variant_indexes,size_chart,my_description=dune(
        viden(g.Z,"twirl1: ",1,"|"),
          [
              lambda i: Replacements(i,"'S","'s"),
              lambda i: ifelseget(lambda: i, lambda: (int(i)-1), lambda: None),
              lambda i: ifelseget(lambda: i, lambda: lmap(lambda i:(int(i)-1),i.split(",")), lambda: []),
              lambda i: ifelseget(lambda: i, lambda: [dune(i.split(":"),[lambda i:(int(i)-1),lambda i:i]) for i in i.split(",")], lambda: []),
              lambda i: ifelseget(lambda: i, lambda: or_list(lambda:[dune(i.split(":"),[lambda i:(int(i)-1),lambda i:i]) for i in i.split(",")],lambda:lmap(lambda i,j:[int(j),"Style %s"%(i+1)],list(enum(dip(lmap(lambda i:lrange(*i),lmap(lambda a,b:[int(a)-1,int(b)],lmap(lambda i:i.split("-"),i.split(",")))),1))))), lambda: []),
              lambda i: ifelseget(lambda: i, lambda: Freelancer().SizeChart(i,html=True), lambda: None),
              lambda i: ifelseget(lambda: i, lambda: Replacements(i,"\n","<br/>"), lambda: None),
          ]
        )
      Save(AddProduct,
        shop = Muta()().store_abbre,
        niche=Muta()().niche,
        is_free_plus_ship=Muta()().is_free_plus_ship,
        page=Muta()().page,
        x=pyperclip.paste().strip(),
        url=url,
        sent=0,
        created_at=Date().Now(),
        title=title,
        image_idx=image_idx,
        image_indexes=image_indexes,
        option_indexes=option_indexes,
        variant_indexes=variant_indexes,
        size_chart=size_chart,
        my_description=my_description,
        logo=globe("logo"),
        logo_size=globe("logo_size"),
        logo_scaling_dimension_size=globe("logo_scaling_dimension_size"),
        caption=globe("caption"),
        extra_commands=extra_commands
        )
      tryprocess(lambda:globals().__delitem__("caption"))
      pyperclip.copy("\n")

      OSA.notify("Added Product %s"%(title))
    else:
      OSA.notify("AddProduct exists")
  def send(self):
    openchromeurl(self.url)
    time.sleep(5)
    setattr(g,"Z",self.x.strip())
    pyperclip.copy("\n")
    print(g.Z)
    x=Product().add_product(shop=self.shop,niche=self.niche,is_free_plus_ship=self.is_free_plus_ship,page=self.page,title=self.title,image_idx=self.image_idx,image_indexes=self.image_indexes,option_indexes=self.option_indexes,variant_indexes=self.variant_indexes,size_chart=self.size_chart,my_description=self.my_description,logo=self.logo,logo_size=self.logo_size,logo_scaling_dimension_size=self.logo_scaling_dimension_size,caption=self.caption,extra_commands=self.extra_commands)
    Update(self,added_product_id=x.id)
    Update(self,sent=1)
    if Get(AddProduct,id=self.id).added_product_id == None:
      Update(self,sent=0,added_product_id=None)
    # x=tr(lambda:Product().add_product(shop=self.shop,niche=self.niche,is_free_plus_ship=self.is_free_plus_ship,page=self.page,title=self.title,image_idx=self.image_idx,image_indexes=self.image_indexes,option_indexes=self.option_indexes,variant_indexes=self.variant_indexes,size_chart=self.size_chart,my_description=self.my_description,logo=self.logo,logo_size=self.logo_size,logo_scaling_dimension_size=self.logo_scaling_dimension_size,caption=self.caption),ep=1)
    # ifdo(lambda:x,lambda: Update(self, sent=1))
    """
    Q = Filter(ScienceVessel,warped=0)
    pool(lambda q: setattr(q,"icon",Images().download(q.image_url)), Q).result()
    [MenuItem("{}|{}...{}|{}|{}|{}|{}|{}|{}|{}".format(
      q.title, q.image_idx, q.image_idx, q.vi_dx, q.imgrems_dx, q.intentions, 
      q.tiles, q.size_chart, q.my_description[:20], q.caption[:20]), icon = \
                                        q.icon,) for q in Q]
    """
  def get_add_products_test(self):
    return 'r = Filter(AddProduct,sent=0)\nstart_len = len(All(Product))\nsaved_ids = []\nprint(start_len)\nfor i in r[:4]:\n  saved_ids.append(i.id)\n  pool(lambda:i.send())\n  #i.send()\n  if "Poster" or "Cases" in i.title:\n    time.sleep(40)\n  else:\n    time.sleep(20)\nend_len = len(All(Product))\nprint(end_len)'
class Additemstest(Records):
  id = AutoField()
  x = CharField()
  url = CharField()
  # :End:
  def show(self):
    for i in All(Additemstest):
      print(i.x, i.url)
  def Run(self):
    Save(Additemstest,x=g.Z,url=get_first_chrome_url().split("?")[0])
class Adset_duplicate(Records):
  id = AutoField()
  original_adset_id = BigIntegerField(unique=True)
  adset_ids = JSONField()
  budgets = JSONField()
  to_duplicate = BooleanField(default=False)
  duplicate_count = IntegerField()
  # :End:
  def append_adset_duplicate(self, original_adset_id=None, duplicate_count=None):
    new = Adset_duplicate()
    original_adset_id = int(redinput("original_adset_id?: ")) if original_adset_id == None else original_adset_id
    duplicate_count = int(redinput("duplicate_count?: ")) if duplicate_count == None else duplicate_count
    existing = Adset_duplicate.objects.filter(original_adset_id = original_adset_id)
    if len(existing) == 0:
      existing = [adset_duplicate for adset_duplicate in Adset_duplicate.objects.all() if original_adset_id in adset_duplicate.adset_ids]
      if len(existing) > 0:
        assert len(existing) == 1
        redprint("[original adset id was a duplicate adset id]")
      else:
        redprint("[original adset id does not exist]")
    elif len(existing) == 1:
      redprint("[original adset id exists]")
      new = existing[0]
    new.duplicate_count = duplicate_count
    new.to_duplicate = True
    new.budgets = []
    new.adset_ids = []
    new.original_adset_id = original_adset_id
    new.save()
    distinct_print(ordered_json_dumps(new.__dict__))
class Adsethourlyinsight(Records):
  id = AutoField()
  ad_account_id = BigIntegerField()
  adset_id = BigIntegerField(unique=True)
  date = FloatField(unique=True)
  frequency = FloatField()
  impression = IntegerField()
  impression_rate = FloatField()
  impression_cost = FloatField()
  post_click = IntegerField()
  post_click_cost = FloatField()
  post_click_rate = FloatField()
  click = IntegerField()
  click_cost = FloatField()
  click_rate = FloatField()
  add_to_cart = IntegerField()
  add_to_cart_cost = FloatField()
  add_to_cart_rate = FloatField()
  website_purchase = IntegerField()
  offsite_conversion = IntegerField()
  website_purchase_cost = FloatField()
  website_purchase_rate = FloatField()
  spend = FloatField()
  website_purchase_value = FloatField()
  return_on_investment = FloatField()
  reach = IntegerField()
  reach_cost = FloatField()
  reach_rate = FloatField()
  landing_page_view = IntegerField()
  landing_page_view_cost = FloatField()
  landing_page_view_rate = FloatField()
  fb_pixel_view_content = IntegerField()
  fb_pixel_view_content_cost = FloatField()
  fb_pixel_view_content_rate = FloatField()
  fb_pixel_initiate_checkout = IntegerField()
  fb_pixel_initiate_checkout_cost = FloatField()
  fb_pixel_initiate_checkout_rate = FloatField()
  page_engagement = IntegerField()
  page_engagement_cost = FloatField()
  page_engagement_rate = FloatField()
  post_engagement = IntegerField()
  post_engagement_cost = FloatField()
  post_engagement_rate = FloatField()
  post_reaction = IntegerField()
  post_reaction_cost = FloatField()
  post_reaction_rate = FloatField()
  order_ids = JSONField()
  # :End:
class Adsethourlyinsightdata(Records):
  id = AutoField()
  ad_account_id = BigIntegerField()
  adset_id = BigIntegerField(unique=True)
  date = FloatField(unique=True)
  
  spend = FloatField()
  website_purchase_value = FloatField()

  impression_move = IntegerField()
  post_click_move = IntegerField()
  click_move = IntegerField()
  add_to_cart_move = IntegerField()
  website_purchase_move = IntegerField()
  reach_move = IntegerField()
  landing_page_view_move = IntegerField()
  fb_pixel_view_content_move = IntegerField()
  fb_pixel_initiate_checkout_move = IntegerField()
  page_engagement_move = IntegerField()
  post_engagement_move = IntegerField()
  post_reaction_move = IntegerField()

  impression_adspendvg = FloatField()
  post_click_adspendvg = FloatField()
  click_adspendvg = FloatField()
  add_to_cart_adspendvg = FloatField()
  website_purchase_adspendvg = FloatField()
  reach_adspendvg = FloatField()
  landing_page_view_adspendvg = FloatField()
  fb_pixel_view_content_adspendvg = FloatField()
  fb_pixel_initiate_checkout_adspendvg = FloatField()
  page_engagement_adspendvg = FloatField()
  post_engagement_adspendvg = FloatField()
  post_reaction_adspendvg = FloatField()

  impression_ratevg = FloatField()
  post_click_ratevg = FloatField()
  click_ratevg = FloatField()
  add_to_cart_ratevg = FloatField()
  website_purchase_ratevg = FloatField()
  reach_ratevg = FloatField()
  landing_page_view_ratevg = FloatField()
  fb_pixel_view_content_ratevg = FloatField()
  fb_pixel_initiate_checkout_ratevg = FloatField()
  page_engagement_ratevg = FloatField()
  post_engagement_ratevg = FloatField()
  post_reaction_ratevg = FloatField()

  frequency = FloatField()
  offsite_conversion = IntegerField()
  return_on_investment = FloatField()

  order_ids = JSONField()

  name = CharField()
  niche = CharField()
  shop_abbreviation = CharField()
  facebook_page = CharField()
  product_url = CharField()
  image_url = CharField()
  caption = JSONField()
  complete_create = BooleanField(default=False)
  is_created = BooleanField(default=False)
  campaign_id = BigIntegerField()
  created_time = DateTimeField()
  date_last_requested_keyword_stats = IntegerField()
  click_attribution = IntegerField()
  view_attribution = IntegerField()
  custom_event_type = CharField()
  billing_event = CharField()
  optimization_goal = CharField()
  recommendations = CharField()
  bid_info = JSONField()
  bid_strategy = CharField()
  device_platforms = JSONField()
  publisher_platforms = JSONField()
  facebook_positions = JSONField()
  targeting_optimization = CharField()
  user_device = JSONField()
  user_os = JSONField()
  age_min = IntegerField()
  age_max = IntegerField()
  genders = IntegerField()
  geo_locations = JSONField()
  status = CharField()
  name = CharField()
  daily_budget = FloatField()
  body = JSONField()
  effective_object_story_id = CharField()
  source_adset_id = BigIntegerField()
  custom_audiences = JSONField()
  flexible_spec1 = JSONField()
  flexible_spec2 = JSONField()
  flexible_spec3 = JSONField()
  flexible_spec4 = JSONField()
  flexible_spec5 = JSONField()
  notes = JSONField()
  # :End:
class Adsetinsight(Records):
  id = AutoField()
  ad_account_id = BigIntegerField()
  adset_id = BigIntegerField(unique=True)
  date = IntegerField(unique=True)
  frequency = FloatField()
  impression = IntegerField()
  impression_rate = FloatField()
  impression_cost = FloatField()
  post_click = IntegerField()
  post_click_cost = FloatField()
  post_click_rate = FloatField()
  click = IntegerField()
  click_cost = FloatField()
  click_rate = FloatField()
  add_to_cart = IntegerField()
  add_to_cart_cost = FloatField()
  add_to_cart_rate = FloatField()
  website_purchase = IntegerField()
  website_purchase_cost = FloatField()
  website_purchase_rate = FloatField()
  spend = FloatField()
  website_purchase_value = FloatField()
  return_on_investment = FloatField()
  reach = IntegerField()
  reach_cost = FloatField()
  reach_rate = FloatField()
  landing_page_view = IntegerField()
  landing_page_view_cost = FloatField()
  landing_page_view_rate = FloatField()
  fb_pixel_view_content = IntegerField()
  fb_pixel_view_content_cost = FloatField()
  fb_pixel_view_content_rate = FloatField()
  fb_pixel_initiate_checkout = IntegerField()
  fb_pixel_initiate_checkout_cost = FloatField()
  fb_pixel_initiate_checkout_rate = FloatField()
  page_engagement = IntegerField()
  page_engagement_cost = FloatField()
  page_engagement_rate = FloatField()
  post_engagement = IntegerField()
  post_engagement_cost = FloatField()
  post_engagement_rate = FloatField()
  post_reaction = IntegerField()
  post_reaction_cost = FloatField()
  post_reaction_rate = FloatField()
  order_ids = JSONField()
  # :End:
class Adstip(Records):
  id = AutoField()
  adstip = CharField()
  # :End:
class Aliexpressaffiliatelink(Records):
  id = AutoField()
  page_url = CharField()
  tracking_link = CharField()
  # :End:
  get_or_create_all_tracking_links = lambda self: [setitem(g(),"ss_affiliatelink",Browser()("sele")),g()["ss_affiliatelink"].get("https://portals.aliexpress.com/welcome.htm"),input("manually log in"),g()["ss_affiliatelink"].get("https://portals.aliexpress.com/adcenter/generateUrl.htm"),[self.get_or_create_tracking_link(page_url=i.ali_url,shop_abbreviation=i.shop,ss=g()["ss_affiliatelink"]) for i in Product().is_availables() ]]

  def get_or_create_tracking_link(self,page_url,shop_abbreviation,ss):
    try: 
      if None != getitem(Filter(Aliexpressaffiliatelink,page_url=page_url), 0).tracking_link:
        return getitem(Filter(Aliexpressaffiliatelink,page_url=page_url), 0).tracking_link
    except Exception as e:

      print("Creating an tracking link")
    #ss.get("https://portals.aliexpress.com/welcome.htm")
    ss.get("https://portals.aliexpress.com/adcenter/generateUrl.htm"); zz(1)
    ss.ffs("input","name","targetUrl").send_keys(page_url); zz(1)
    ss.ffs("select","id","trackId").send_keys(shop_abbreviation.upper()); zz(2)
    ss.ffs("input","name","eventSubmitDoGenerateUrl").click(); zz(5)

    tracking_link = ss.fcn("generate-result-box").text
    if "s.click.aliexpress.com" not in tracking_link:
      redprint("Error, this url is not an affiliate link.")
      Aliexpressaffiliatelink(page_url=page_url,tracking_link=None).save()
      return None
      0
      0
      0
      0
      0
      0
      0
      0
    else:
      Aliexpressaffiliatelink(page_url=page_url,tracking_link=tracking_link).save()
      return Get(Aliexpressaffiliatelink,page_url=page_url).tracking_link
      1
      1
      1
      1
      1
      1
      1
      1
      1
      1
      1
class Aliexpressstore(Records):
  id = BigIntegerField(primary_key=True)
  search_string = CharField()
  followers = BigIntegerField()
  ratings = BigIntegerField()
  # :End:
class Aliexpressvendor(Records):
  id = BigIntegerField(primary_key=True)
  count_orders = IntegerField()
  url = CharField()
  product_type = CharField()
  name = CharField()
  average_days_to_ship = IntegerField()
  average_days_to_arrive = IntegerField()
  # :End:
class Aliexpressorder(Records):
  id = BigIntegerField(primary_key=True)
  email_address = CharField()
  order_time = FloatField()
  order_status = CharField(max_length="2048")
  order_reminder = CharField(max_length="2048")
  contact_name = CharField()
  address1 = CharField()
  address2 = CharField()
  zip_code = CharField()
  mobile = CharField()
  total_amount = FloatField()
  datetime = FloatField()
  tracking_number = CharField()
  tracking_method = CharField()
  comments = CharField(max_length="2048")
  # :End:
  def order_info(self, order_id, order_time = None):
    url = "https://trade.aliexpress.com/order_detail.htm?spm=a2g0s.9042311.0.0.27424c4dNadavy&orderId={}".format(order_id)

    r = Aliexpress_Requests()().get(url)
    time.sleep(1)
    if r.status_code != 200: OSA.log("error in requesting Aliexpress orders. Some things that can cause this is using a vpn or a using a vps. Please make sure your password is correct as well")

    soup = BeautifulSoup(Replacements(r.content.decode(),"\n", "", "\r", "", "\t", ""), "lxml")
    blueprint(re.sub(r"[\t\n]","",re.sub(r" +"," ",soup.find(attrs={"class":"order-reminder"}).text.strip())))
    new = Save(Aliexpressorder,
            id = int(soup.find(attrs={"class":"order-no"}).text),
            order_status = re.sub(r"[\t\n]","",re.sub(r" +"," ",soup.find(attrs={"class":"order-status"}).text.strip())),
            order_reminder = or_list(lambda:[re.findall(i,re.sub(r"[\t\n]","",re.sub(r" +"," ",soup.find(attrs={"class":"order-reminder"}).text.strip())))[0] for i in [r"Dispute Finished.",r"No payment from buyer.",r"Order has been automatically confirmed by the system because no action received from buyer within the buyer protection time.",r"Order has been completed.*",r"Seller did not ship goods.",r"The buyer has cancelled this order.*",r"Without payment, this order will be cancelled after.*",r"Your order should arrive within .*",r"Your payment was not processed due to security reasons. .*"] if tryreturn(lambda:re.findall(i,re.sub(r"[\t\n]","",re.sub(r" +"," ",soup.find(attrs={"class":"order-reminder"}).text.strip())))[0])][0],re.sub(r"[\t\n]","",re.sub(r" +"," ",soup.find(attrs={"class":"order-reminder"}).text.strip()))),
            contact_name = soup.find(attrs={"i18entitle":'Contact Name'}).text,
            address1 = soup.find(attrs={"i18entitle":'Address',}).text,
            address2 = soup.findAll("span",attrs={"class":"i18ncopy"})[2].text.strip(),
            zip_code = soup.find(attrs={"i18entitle":'Zip Code'}).text,
            mobile = soup.find(attrs={"i18entitle":'Mobile',}).text,
            total_amount = float(".".join(re.findall("\d+",soup.find_all(attrs={"class": "final-price"})[2].text.strip()))),
            datetime = or_list(lambda:Date().myDatetimenow(datetime.strptime(soup.find("td", attrs={"class": "pay-c4"}).text[0].strip(), "%Y-%m-%d %H:%M")),None),
            tracking_number = or_list(lambda:soup.find_all(attrs={"class":"no"})[-1].text.strip(),None)  ,
            tracking_method = or_list(lambda:soup.find_all(attrs={"class":"logistics-name"})[0].text,None),
            comments = or_list(lambda:re.sub(r" +"," ",soup.find_all("div",attrs={'class':'comment-cell'})[0].text),None),
            order_time = (order_time)if(order_time!=None)else(or_list(lambda:(Get(Aliexpressorder,id=int(soup.find(attrs={"class":"order-no"}).text)).order_time),0)),
    )

    Aliexpressorder_product.add_aliexpressorder_products(soup)

    for i in Lineitem.objects.filter(ali_order_number = soup.find(attrs={"class":"order-no"}).text[0]):
      data = or_list(lambda:json.loads(re.findall(r"(?s)globalData = (.*?);", self.rq.get("https://track.aliexpress.com/logisticsdetail.htm?&tradeId=%s" % new.id).text)[0]), None)
      if data == None:
        continue
      tryprocess(lambda: Update(i, t3 = (Date().myDatetimenow(datetime.strptime(data.get("consignTime"), "%Y-%m-%d %H:%M:%S")) - ((4*60*60)/(24*60*60))) , e2 = (Date().myDatetimenow(datetime.strptime(data.get("consignTime"), "%Y-%m-%d %H:%M:%S")) - ((4*60*60)/(24*60*60))) - i.t2))

    distinct_print(ordered_json_dumps(new.__dict__))
class Aliexpressorder_product(Records):
  id = AutoField()
  aliexpress_order_id = BigIntegerField(unique=True)
  aliexpress_order_id_idx = IntegerField(unique=True)
  product_id = BigIntegerField()
  ali_url = CharField()
  title = CharField()
  item_price = FloatField()
  price = FloatField()
  quantity = IntegerField()
  options = JSONField()
  shipping_method = CharField()
  shipping_price = FloatField()
  comment = JSONField()
  status = JSONField()
  # :End:
  def add_aliexpressorder_products(soup):
    a = soup.findAll("tbody",attrs={"data-status":"WAIT_BUYER_CONFIRM_GOODS"}).__getitem__(0)
    b = a.findAll("tr",)
    b = [i for i in b if len(i.findAll("td",attrs={"class":"baobei"})) == 1]
    for idx, i in enumerate(b):
      aliexpress_order_id = int(soup.findAll("dd",attrs={"class":"order-no"})[0].text)
      item_price = float(".".join(re.findall(r"\d+", i.findAll("td", attrs={"class":"price"})[0].text.strip())))
      quantity = int(re.findall(r"\d+", i.findAll("td",attrs={"class":"quantity"})[0].text)[0])
      status = i.findAll("td",attrs={"class":"trade-status"})[0].text.strip().split("\n")[0].split("  ")[0]
      shipping_method = i.findAll("strong",attrs={"class":"order-target"})[0].text.strip()
      try:
        shipping_price = 0 if i.findAll("p",attrs={"class":"ship-price"})[0].text.strip() == "Free Shipping" else float(".".join(re.findall(r"\d+",i.findAll("p",attrs={"class":"ship-price"})[0].text.strip())))
      except:
        product_fees = [i.strip() for i in key("text", soup.findAll("div",attrs={"class":"product-fees"})[0].findAll("td"))]
        product_fees_names = [i for i in product_fees if len(re.findall(r"\d+",i)) == 0]
        product_fees_prices = [float(".".join(re.findall("\d+",i))) for i in product_fees if len(re.findall(r"\d+",i)) > 0]
        product_fees_dict = dict(zip(product_fees_names, product_fees_prices))
        shipping_price = product_fees_dict["Shipping Cost"] / len(b)
      price = item_price + shipping_price

      x = i.findAll("td",attrs={"class":"baobei"}).__getitem__(0)
      options = {}
      option_data = x.findAll("div",attrs={"class":"spec"})
      for c in option_data:
        option_name = c.findAll("font")[0].text.strip()
        option_value = c.findAll("span")[0].text.strip()
        options[option_name] = option_value
        print(option_name, option_value)
      title = x.findAll("a",attrs={"class":"baobei-name"})[0].text
      product_id = re.findall(r"productId=(.*)", ("https:" + x.findAll("a",attrs={"class":"baobei-name"})[0].attrs["href"]))[0]

      aliexpress_order_id_idx = idx

      new = or_list(lambda:Get(Aliexpressorder_product,aliexpress_order_id_idx=aliexpress_order_id_idx, aliexpress_order_id=aliexpress_order_id),Aliexpressorder_product())
      Update(new,
                  aliexpress_order_id = aliexpress_order_id,
                  aliexpress_order_id_idx = aliexpress_order_id_idx,
                  product_id = product_id,
                  title = title,
                  item_price = price,
                  price = price,
                  quantity = quantity,
                  options = options,
                  shipping_method = shipping_method,
                  shipping_price = shipping_price,
                  status = status,)
      distinct_print(ordered_json_dumps(new.__dict__))
class Aliexpressorder_update(Records):
  id = AutoField()
  last_check = DateTimeField()
  shop = CharField()
  # :End:
class Application(Records):
  id = AutoField()
  field = CharField()
  location = CharField()
  time = CharField()
  title = CharField()
  url = CharField()
  contact = CharField()
  compensation = CharField()
  employment_type = CharField()
  got_contact = IntegerField()
  responded = IntegerField()
  visited = IntegerField()
  not_respond_to_title = IntegerField()
  # :End:
class Application2(Records):
  id = AutoField()
  title = CharField()
  url = CharField(unique=True)
  contact = CharField()
  info = JSONField()
  responded = IntegerField()
  msg = JSONField()
  # :End:
class ApprovedTransaction(Records):
  id = AutoField()
  account = CharField()
  date = DateField()
  price = FloatField()
  type = CharField()
  tag = CharField()
  description = CharField(max_length="4096")
  what_i_think_my_current_balance_is = FloatField()
  approved = IntegerField()
  shop = CharField()
  # :End:
class Audience(Records):
  id = AutoField()
  name = CharField()
  pcs = DecimalField()
  roi = DecimalField()
  spent = DecimalField()
  pcv = DecimalField()
  flex = JSONField()
  state = IntegerField()
  fb_page_id = CharField()
  niche = CharField()
  objects = BaseModelManager()
  # :End:
class Binarydata(Records):
  id = AutoField()
  filetype = CharField()
  filename = CharField(unique=True)
  datatype = CharField()
  binarydata = BinaryField(max_length=4294967295)
  # :End:
  def update_or_create(self, filename=None, no_remove = False):
    redprint("Export Folders First Then Add Files Into Folder Then Update_Or_Create The Folder")
    #filetype="folder"
    #filename="test"
    #datatype="test"
    #no_remove=True
    [
    setitem(globals(),"new",getitem(Filter(Binarydata,filename=filename.split("/")[-1]), 0, Binarydata()))  ,  
    print("a")  ,  
    Update(globals()["new"],filename=filename.split("/")[-1],binarydata=  open(zipUtil(filename,reverse=False),"rb").read()   )  ,  
    print("b")  ,  
    rm(filename)if(0==no_remove)else(-1)  ,  
    rm("%s.zip"%filename)  ,  
    globals()["new"].save()  ,  
    print("c")  ,  
    ]
  def export(self, filename, exportation_location=None):
    rm(filename)
    rm(String(exportation_location))
    address = filename + ".zip"
    rm(address)
    [  open(address, "wb").write(   Binarydata.objects.filter(filename=filename.split("/")[-1])[0].binarydata   )  ,  zipUtil("%s.zip"%filename,reverse=not False)  ,  ]
    import shutil
    print(exportation_location)
    shutil.move(filename, exportation_location) if exportation_location else ()
class Combination(Records):
  id = AutoField()
  slot = CharField()
  combination = JSONField()
  # :End:
  def __call__(self,**kwargs):
    if kwargs: return Update(self, **kwargs)
    combination = redinput("combination?: ")
    if combination == "clip": combination = pyperclip.paste()
    [redprint(idx,i) for idx, i in enum(list(sorted(set(key("slot",All(Combination))))))]
    slot = redinput("slot?: ")
    Combination(slot=slot, combination=combination).save()
    redprint(Combination.objects.get(combination=combination).slot, Combination.objects.get(combination=combination).combination)
class CommandEmail(Records):
  id = AutoField()
  email = CharField()
  receiving_email = CharField()
  # :End:
  def __call__(self):
    return All(CommandEmail)[0]
class Content(Records):
  id = AutoField()
  content_type = CharField()
  text = BinaryField()
  page_name = CharField()
  collection_name = CharField()
  # :End:
  def __call__(self):
    process(lambda:self.get_one_content(page_name=Muta()().page))
  def add_content(self):
    page_name, content_type = OSA.log("page name, content type separated by ', '?").split(", ")
    content = OSA.log("Content?\n1234567891234567891234567891234567891234567\n%s"%("|"*80),df="\n\n\n\n\n\n\n\n\n",buttons=["Cancel","OK"])
    Save(Content,content_type=content_type,page_name=page_name,text=content)
  def add_content_from_csv(self,infile):
    data = CSV().DictRead(infile,delimiter=",")
    for row in data:
      page_name = row["page_name"]
      content_type = row["content_type"]
      content = row["content"].encode()
      collection_name = row["name"]
      if content not in key("text",Filter(Content,page_name=page_name)):
        print(page_name, content_type)
        print(content.decode(), "\n\n")
        Save(Content,page_name=page_name,content_type=content_type,text=content,collection_name=collection_name)
  def get_one_content(self,page_name):
    content, image = Content().generate_content(page_name=page_name,count=1)
    content, image = content[0], image[0]
    impreview(Images().download(image))
    text_to_image(content)
  def get_one_content(self,page_name):
    item = get_random_from_lists(0.3,0.7,Filter(Content,content_type="Collection_Sales",page_name=page_name),Filter(Content,content_type="Collection_Sales",page_name=page_name))
    collection_name = item.collection_name

    content_link = random.choice(Filter(Content_Link,page_name=page_name,collection_name=collection_name))
    collection_name_unpluralized, collection_link = content_link.collection_name_unpluralized, content_link.collection_url

    content_image = random.choice(Filter(Content_Image,page_name=page_name,collection_name=collection_name))
    import numpy as np
    #while content_image.url in sud("url",Filter(Content_Image,used_times__gte=1)) or\
    #      set(np.array(Images().get_image_size(Images().download(content_image.url))) < 700) == {True} or\
    #      True in set(np.array(Images().get_image_size(Images().download(content_image.url))) > 2500): content_image = random.choice(Filter(Content_Image,page_name=page_name,collection_name=collection_name))
    
    while True:
      image_used = content_image.url in sud("url",Filter(Content_Image,used_times__gte=1))
      both_sides_less_than_700 = set(np.array(Images().get_image_size(Images().download(content_image.url))) < 700) == {True}
      one_side_greater_than_2500 = True in set(np.array(Images().get_image_size(Images().download(content_image.url))) > 2500)
      if image_used: OSA.notify("image used")
      if both_sides_less_than_700: OSA.notify(a=Date().friendlydate(Date().Now(),seconds=True),b="both sides less than 700")
      if one_side_greater_than_2500: OSA.notify(a=Date().friendlydate(Date().Now(),seconds=True),b="one side greater than 2500")
      if image_used or both_sides_less_than_700 or one_side_greater_than_2500:
        content_image = random.choice(Filter(Content_Image,page_name=page_name,collection_name=collection_name))
      else:
        break

    content = item.text.decode()
    content = content.replace("<collection_name>",collection_name).replace("<collection_name_unpluralized>",collection_name_unpluralized).replace("<ru>",collection_link)
    content = content.replace("<referral_link>",content_image.source)

    impreview(Images().download(content_image.url))
    tp(lambda:text_to_image(content))

    if OSA.log("Create your own caption?",buttons=["No","Yes"],tp=False) == "Yes":
      content = OSA.log("Caption?",df="\n\n\n\n\n\n")
      content = content.replace("<ru>",collection_link)
      tp(lambda:text_to_image(content))

    to_post = OSA.log("To post?",buttons=["No","Yes"],tp=False)
    if to_post == "Yes":
      content_image.used_times += 1
      content_image.save()
      if item.content_type == "Message": ( Del(item), OSA.notify(a="Deleting Message",b=content) )
      Content().post_next_content(content, content_image.url, page_name)
    OSA().exit_preview_windows()
    return content, content_image.url
  def post_next_content(self, content, image, page_name):
    page = Get(Facebookpage,name=page_name)
    scheduled_posts = get_scheduled_posts(page_name)
    next_scheduled_time_timestamp = get_next_scheduled_time(page,scheduled_posts)
    
    OSA.notify("Running, %s" % (Date().friendlydate(datetime.now(),seconds=True)))
    page = Get(Facebookpage, name = page_name)
    token = page.token
    published = False
    image = Images().download(image)
    url = Images().fb_image_upload(image)
    page_id = page.facebook_id
    
    post_url = "https://graph.facebook.com/%s/photos"%(page_id)
    caption = content
    params = dict(access_token=token,caption=caption,published=published,url=url,scheduled_publish_time=next_scheduled_time_timestamp)
    r = requests.post(post_url,params=params)
    OSA.notify(str(r.status_code))
    OSA.notify("Complete, %s" % (Date().friendlydate(datetime.now(),seconds=True)))
    time.sleep(1)
class Content_Image(Records):
  id = AutoField()
  source = CharField(unique=True,max_length="0128")
  url = CharField(unique=True)
  page_name = CharField()
  collection_name = CharField(unique=True,max_length="0128")
  used_times = IntegerField()
  # :End:
  def add_content_images(self,urls,source,page_name,collection_name):
    lmap(lambda url: Save(Content_Image,url=url,source=source,page_name=page_name,collection_name=collection_name),urls)
class Content_Link(Records):
  id = AutoField()
  page_name = CharField(unique=True)
  collection_name = CharField(unique=True,max_length="0128")
  collection_name_unpluralized = CharField()
  collection_url = CharField()
  # :End:
  def add(self,page_name,collection_name,collection_name_unpluralized,collection_url):
    Save(Content_Link,page_name=page_name,collection_name=collection_name,collection_name_unpluralized=collection_name_unpluralized,collection_url=collection_url)
class Cookies(Records):
  id = AutoField()
  company = CharField(unique=True, max_length="0128")
  user = CharField(unique=True, max_length="0128")
  cookies = JSONField()
  test_url = CharField()
  textNot = CharField()
  urlNot = CharField()
  status_codeNotNot = CharField()
  headers = JSONField()
  self_function = CharField()
  # :End:
  def update_or_create(self, company, user, cookies, test_url, textNot="ø", urlNot="ø", status_codeNotNot=200, headers="ø", self_function="ø",):
    cookies = {cookie["name"]: cookie["value"] for cookie in cookies}
    Cookies(company=company, user=user, cookies=cookies, test_url = test_url, textNot = textNot, urlNot = urlNot, status_codeNotNot = status_codeNotNot, headers=headers, self_function=self_function).save()
    Get(Cookies, company=company, user=user)
    # lol would add a loop for if fails then get each, specified function. too weird.
    self.export(company=company, user=user)
  def export(self, company, user):
    c = Get(Cookies, company=company, user=user)
    s = requests.Session()
    r = s.get(c.test_url, headers = c.headers, timeout=5, )
    is_good = True
    if c.textNot in r.text:
      is_good = False
    if c.urlNot in r.url:
      is_good = False
    if int(c.status_codeNotNot) != r.status_code:
      is_good = False
    if is_good == False:
      input("%s , %s, export cookies test failed..." % (company, user))
      # save cookies if is_good fails.  if the method is wrong it will keep looping.
      getattr(self,c.self_function).__call__()
      
      return  \
        self.export(company=company, user=user)
    else:
      return c.cookies
class CruxSupplier(Records):
  id = AutoField()
  supplier = CharField(unique=True)
  # :End:
class Degradantlist(Records):
  id = AutoField()
  degradantlist = CharField()
  is_completed = IntegerField()
  # :End:
class Dictionaryentry(Records):
  id = AutoField()
  word = CharField()
  definition = JSONField()
  videod = IntegerField()
  # :End:
class Emailaccount(Records):
  id = AutoField()
  username = CharField()
  password = CharField()
  # :End:
  def __call__(self):
    self.add()
  def add(self):
    username,password = OSA.log("username and password? delimited by ', '",hidden=True).split(", ",1)
    Emailaccount(username=username,password=password).save()
class Emit(Records):
  id = AutoField()
  true_id = CharField(unique=True)
  direction = IntegerField()
  point_a = CharField()
  point_b = CharField()
  moment = FloatField()
  payload = JSONField()
  answertime = FloatField()
  e1 = FloatField()
  summary = CharField()
  answer = CharField()
  # :End:
class ExecutableText(Records):
  id = AutoField()
  w = CharField(unique=True)
  x = JSONField()
  # :End:
  def update_or_create(self,w,x):
    greenprint(x)
    exec(x)
    eval(w)
    if(0==len(Filter(ExecutableText,w=w))):ExecutableText(w=w,x=x).save()
    else:Update(Get(ExecutableText,w=w),x=x)
    ExecutableText().export(w)
  def export(self,w, *args, **kwargs):
    exec(Get(ExecutableText,w=w).x)
    x = eval(w) # invent of  __init__
    # if("type"==type(x).__name__):x = x(*args, **kwargs) # will initiate class objects
    return x
  """class Test:
          def __init__(self, x):
            self.x = x
          def help(self):
            print("1. x")
          def main(self, x):
            return [[[[x]]]]
        ExecutableText().update_or_create(w="Test",x=pyperclip.paste())
        t = ExecutableText().export("Test") (*args,**kwargs) """
class FacebookNewsFeedPosts(Records):
  id = AutoField()
  message = JSONField()
  created_time = DateTimeField(unique=True)
  posted = IntegerField()
  # :End:
  def add(self,**stars):
    Save(FacebookNewsFeedPosts,**stars)
class Facebookadaccountspend(Records):
  id = AutoField()
  date = DateField(unique=True)
  ad_account_id = BigIntegerField(unique=True)
  facebookadaccountspend = FloatField()
  # :End:
  @staticmethod
  def facebookadaccountspend_source(date):
    ()if(Date(date)<Date())else(([OSA.log("Can only get adspend for previous dates",tp=0),(0/0)]))
    return ([[Facebookadaccountspend(date=date,facebookadaccountspend=i["spend"],ad_account_id=i["ad_account_id"]).save(),Get(Facebookadaccountspend, date=date,facebookadaccountspend=i["spend"],ad_account_id=i["ad_account_id"] )][1] for i in [[setitem(g(),"A",ad_account.get_insights(fields=["spend"], params={"time_range":{"since":Date(date).datestr,"until":Date(date).datestr}  }  )),{"spend":0,"ad_account_id":ad_account["account_id"]} if(0==len(g()["A"])) else [setitem(g()["A"][0],"ad_account_id",ad_account["account_id"]), g()["A"][0]] [1] ][1]         for ad_account in  get_user().get_ad_accounts()]])if(len(Filter(Facebookadaccountspend,date__range=[(Date(date).str()),(Date(date).str())]))==0)else(Filter(Facebookadaccountspend,date__range=[(Date(date).str()),(Date(date).str())]))
class Facebookimageupload(Records):
  id = AutoField()
  origin = CharField(max_length="0512",unique=True)
  destination = CharField(max_length="8192")
  # :End:
  @staticmethod
  def facebookimageupload(origin):
    try: return [Get(Facebookimageupload, origin=origin).destination,redprint("Exists: %s" % origin)][0]
    except: "pas"
    magentaprint("Saving: %s" % origin)
    origin = origin
    destination = Images().fb_image_upload(origin)
    Facebookimageupload(origin=origin,destination=destination).save()
    Get(Facebookimageupload, origin= origin)
    return destination
class Facebookkeyword(Records):
  id = BigIntegerField(primary_key=True)
  name = CharField()
  audience_size = BigIntegerField()
  # :End:
  def zone(self):
    return AttrDict({"id":self.id,"name":self.name,"audience_size":self.audience_size})
  def se(self,kw):
    October_Keyword_Utilities().se(kw)
  @staticmethod
  def re(id):
    print("checking the database...")
    checking_the_database=Filter(Facebookkeyword,id=id)
    if(0!=len(checking_the_database)):return(getitem(checking_the_database,0).audience_size)
    print("reach estimate seraching for [id]")
    audience_size = October_Keyword_Utilities().re([id])
    return audience_size
class Facebookkeywordlist(Records):
  id = AutoField()
  keywordlist = JSONField()
  audience_size = JSONField()
  niche = CharField()
  purchases = IntegerField()
  # :End:
class Facebookpage(Records):
  id = AutoField()
  facebook_id = BigIntegerField(unique=True)
  name = CharField(max_length="0032")
  url = CharField(max_length="0128")
  settings = JSONField()
  publish_times = JSONField()
  token = CharField()
  c = lambda self: AttrDict(self.settings)
  ct = lambda self, field, value: [setitem(self.settings,field,value),Update(self,settings=self.settings),self][2]
  # :End:
  def guided_create_Facebookpage(self): # Of course, you will have to authenticate time each
    facebook_id = int(input("Facebook id: "))
    name = input("Name?: ")
    url = input("url?: ")
    new = Facebookpage()
    new.facebook_id = facebook_id
    new.name = name
    new.url = url
    new.save()
  def create_facebook_post(self, page_name):
    OSA.notify("Running, %s" % (Date().friendlydate(datetime.now(),seconds=True)))
    page = Get(Facebookpage, name = page_name)
    token = page.token
    published = False
    image = get_latest_download()
    url = Images().fb_image_upload(image)
    page_id = page.facebook_id
    scheduled_posts = get_scheduled_posts(page_name)
    
    next_scheduled_time_timestamp = get_next_scheduled_time(page,scheduled_posts)

    post_url = "https://graph.facebook.com/%s/photos"%(page_id)
    caption = OSA.log("Caption?\n1234567891234567891234567891234567891234567\n%s"%("|"*80),df="\n\n\n\n\n\n\n\n\n",buttons=["Cancel","OK"])
    params = dict(access_token=token,caption=caption,published=published,url=url,scheduled_publish_time=next_scheduled_time_timestamp)
    r = requests.post(post_url,params=params)
    OSA.notify(str(r.status_code))
    OSA.notify("Complete, %s" % (Date().friendlydate(datetime.now(),seconds=True)))
class Fulfillments_Created(Records):
  id = AutoField()
  order_id = BigIntegerField()
  lineitem_id = BigIntegerField()
  data = JSONField()
  # :End:
  def add(self,order_id,lineitem_id,data):
    Save(Fulfillments_Created,order_id=order_id,lineitem_id=lineitem_id,data=data)
class GhostProduct(Records):
  id = BigIntegerField(primary_key=True)
  last_check = DateTimeField()
  size_chart = JSONField()
  created_at = DateTimeField()
  image = JSONField()
  images = BinaryField(max_length=4294967295)
  options = JSONField()
  variants = JSONField()
  product_type = CharField()
  description = JSONField()
  vendor = CharField()
  body_html = JSONField()
  seller_platform = CharField()
  last_quantity_check = DateTimeField()
  tags = CharField()
  title = CharField()
  handle = CharField()
  similar_urls = JSONField()
  ca_id = CharField()
  ca_views = IntegerField()
  caption = JSONField()
  short_url = CharField()
  story_id = CharField()
  pcs = DecimalField()
  roi = DecimalField()
  spent = DecimalField()
  pcv = DecimalField()
  item_type = CharField()
  shop = CharField()
  niche = CharField()
  amazon_url = CharField()
  ali_url = CharField()
  amazonvendor = CharField()
  aliexpressvendor = CharField()
  amazon_json = JSONField()
  amazon_inspect = BooleanField(default=False)
  state = IntegerField()
  adset_ids = JSONField()
  adset_id = BigIntegerField()
  size_chart_power_urls = JSONField()
  freelancer_description = CharField(max_length="2048")
  my_description = CharField(max_length="4096")
  original = JSONField()
  shifted = JSONField()
  HTML = JSONField()
  url_title = CharField()
  video_url = CharField()
  icon_image = BinaryField(max_length=4294967295)
  product_tags = CharField()
  sku_image_dict = JSONField()
  latest = DateTimeField()
  unavailable = IntegerField()
  objects = BaseModelManager()
  # :End:
  is_available = lambda self: True if set(key("is_available",Filter(Soup,url=self.ali_url)))=={1} else False # {1}
  is_availables = lambda self,**kwargs: [i for i in Filter(GhostProduct,**kwargs) if i.is_available()]
  # spaciousant
  @staticmethod
  def send_ghost(product, shop):
    shop = Shop()(shop)
    id = product.id
    y = Get(GhostProduct,id=id)
    title = y.title
    images = eval(y .images.decode())
    options = y.options
    variants = y.variants
    product_type = y.product_type
    published_scope = "web"
    tags = y.product_tags
    description = y.HTML
    product=shop.shopify.product.Product({"title":title,
    "images":images,
    "options":options,
    "variants":variants,
    "product_type":product_type,
    "published_scope":published_scope,
    "tags":tags,
    "body_html":description,
    })
    ifdo(lambda: product.save() != True, lambda: [OSA.log("product not saved"), (0/0)])
    sku_image_dict = y.sku_image_dict
    for i in product.variants:
      if i.sku in sku_image_dict:
        image_number = sku_image_dict.get(i.sku)
        i.image_id = product.images[image_number].id
        print("new image id: %s" % (i.image_id))
    product = varsave(product)
    if not sku_image_dict:
      if len(product.variants) == 1:
        pass
      if len(product.variants) > 1:
        pass
    fields = listminus(key("name",Product._meta.fields),list(product.to_dict().keys()))
    x = Save(itemcopy(Product(id=product.id)(**dictupdate(product.to_dict(),created_at=Date().parse_date(product.created_at))),y,f=fields))
    Update(x,shop=shop.shop_abbreviation)
    pool(lambda: [time.sleep(0), Get(Product,id=product.id).post_description()]).result()
    GhostProduct().productgost(product)
    CH()(product)
    productsFeed(Shop()(shop.shop_abbreviation), created_at_min=1)

    return x
  @staticmethod
  def productghosts(shop):
    # get all products and save them, don't delete all products
    """`make sure ghostproduct doesn't delete all, onlyoverwrite by id. otherwise incepteds will not be saved."""
    products = getshopifyproducts(Shop()(shop))
    idxs = list(range(len(products)))
    def x(idx,RLO):
      #if RLO.id in(key("id", All(GhostProduct))):
      #  mysql_delete(Get(GhostProduct, id = RLO.id))
      magentaprint("%s, IDX/%s: %s/%s" % (RLO.id,idx+1,idx+1,len(products)))
      return GhostProduct.productgost(RLO)
    pool(x,idxs,products,nodes=1).result()
    Save(GhostProductUpdate,last_check=Date().Now(),shop=shop)
  @staticmethod
  def productgost(RLO):
    """ ::: RUN THE REST OF THIS WITHOUT THE BELOW COMMÈNT AND IT WILL TEST. ::: """
    if type(RLO) == int:
      RLO = Get(Product,id=RLO).p()
    RLO = AttrDict(RLO.to_dict())                                                                                                                               ; redprint("[Decautionary: nothing should have posted besides - product.images sources]")
    description = RLO.body_html
    tags = RLO.tags
    product_type = RLO.product_type
    title = RLO.title
    # Basically, Format Variants
    dict_ = {}
    variants = []
    
    if tryprocess(lambda: Get(Product,id=RLO.id)) == 0: return

    for variant in RLO.variants:
      variant = AttrDict(variant)
      z = ["admin_graphql_api_id", "barcode", "created_at", "grams", "id", "inventory_item_id", "taxable", "updated_at", ]
      [variant.pop(kris) for kris in z]
      try:dict_[variant.sku] = key("id",RLO.images).index(variant.image_id); [variant.pop("image_id")]
      except Exception as e: redprint("single v fucker deketed|variant_image_id__less deketed") # kaxum haye
      variants.append(variant)
    options = []
    for option in RLO.options:
      option = AttrDict(option)
      z = ["id", "product_id"]
      [option.pop(kris) for kris in z]
      options.append(option)

    x = key("src", RLO.images)
    y = key("alt", RLO.images)
    x = pool(Images().download, x).result()
    x = pool(Images().image_base64, x).result()
    images = [{"alt":y[idx],"attachment":i} for idx, i in enum(x)]
    images = str(images).encode()

    shop = Shop()(Get(Product,id=RLO.id).shop).shop_abbreviation
    sku_image_dict = dict_

    q = {"body_html":description,"tags":tags,"product_type":product_type,
                  "title":title,"variants":variants,"options":options,"images":images,"shop":shop,
                  "sku_image_dict":sku_image_dict}
    BLASTOISE = GhostProduct(**q)
    # save some extra stuff.
    # fields=["id","vendor","description","size_chart","seller_platform","last_quantity_check","item_type",
    #         "niche","similar_urls","ca_id","ca_views","caption","short_url","story_id",
    #         "ali_url","aliexpressvendor","amazonvendor","amazon_json","amazon_inspect","state",
    #         "adset_ids","original","shifted","my_description","freelancer_description","HTML","size_chart","video_url","icon_image","product_tags"]
    fields = sud("name",Product._meta.fields) - q.keys()
    # set(sorted(key("name",Product._meta.fields))) - set(sorted(fields+["body_html","tags","product_type","title","variants","options","images","shop","sku_image_dict"]))
    try:
      BLASTOISE = itemcopy(a=BLASTOISE,b=Get(Product,id=RLO.id),f=fields)
    except Exception as e:
      OSA.notify("productgost failed")
      with open(homepath("~/tavern/tavern/product_ghost__idNotInDatabase.txt"),"a") as f:
        f.write("[%s][%s]\n"%(e,RLO.id))
    Update(BLASTOISE,latest=Date().Now())
    #@Had Save #'d
    # overwrites by id
    BLASTOISE.save()
    return BLASTOISE
  def get_most_recent(self,shop):
    if shop:
      w = Filter(GhostProduct,shop=shop)
    else:
      w = All(GhostProduct)
    handles = set(sud("handle",w))
    def run(i):
      y = sudsort("latest",filter(w,handle=i))[0]
      return y
    x = pool(run,list(handles)).result()
    return x
  @timeit
  def create_catalog(self,shop):
    import numpy as np
    import base64
    import cv2
    start = datetime.now()
    w = sudsort_multi(["product_type","title"],sudby(lambda i:i.images,GhostProduct().get_most_recent(shop=shop)),tcer=False)
    numbering_idxs_list = array_split2(lmap(lambda i:(i+1),lrange(len(w))),50)

    l = array_split2(w,50)

    s = datetime.now()
    def manage(w,numbering_idxs):
      extra_len = sum(lmap(lambda i:ceil((i-10)/10),lmap(lambda i:len(i),sudby(lambda i:len(i)>10,lmap(lambda i:eval(i.images.decode()),w)))))
      x = np.full(((100*(len(w)+extra_len)), (10*100),3),0)
      total_rows_skipped = 0
      for idx, i in enum(list(w)):
        images = sud("attachment",eval(i.images.decode()))
        images = lmap(lambda i:base64.decodebytes(i),images)
        count_to_ten = 0
        skipping_rows = False
        next_column_idx = 0

        def write(j,idx2):
          address = get_random_address2(homepath("~/tavern/tavern/soda/dls"),"png")
          with open(address,"wb") as f:
            f.write(j)
          address = Images().resize_over_background(address,100)
          if idx2 == 0:
            add_text_to_image(address,str(numbering_idxs[idx]),16)

          img = cv2.imread(address)
          return img
        idx2s = lrange(len(images))
        imgs = pool(write, images, idx2s).result()

        for idx2, img in enum(imgs):
          start = datetime.now()
          y = None
          if skipping_rows == False:
            try:
              x[(idx+total_rows_skipped)*100:((idx+1)+total_rows_skipped)*100,idx2*100:(idx2+1)*100] = img
            except Exception as e:
              print(e)
              y = np.full((x.shape[0]+100,x.shape[1],x.shape[2]),0)
              y[0:x.shape[0],0:x.shape[1],0:x.shape[2]] = x
              x = y
              x[(idx+total_rows_skipped)*100:((idx+1)+total_rows_skipped)*100,idx2*100:(idx2+1)*100] = img
          elif skipping_rows == True:
            try:
              x[(idx+total_rows_skipped)*100:((idx+1)+total_rows_skipped)*100,(next_column_idx)*100:((next_column_idx)+1)*100] = img
            except Exception as e:
              print(e)
              y = np.full((x.shape[0]+100,x.shape[1],x.shape[2]),0)
              y[0:x.shape[0],0:x.shape[1],0:x.shape[2]] = x
              x = y
              x[(idx+total_rows_skipped)*100:((idx+1)+total_rows_skipped)*100,(next_column_idx)*100:((next_column_idx)+1)*100] = img
          count_to_ten = count_to_ten + 1
          next_column_idx = next_column_idx + 1
          if count_to_ten == 10:
            count_to_ten = 0
            total_rows_skipped = total_rows_skipped + 1
            if (len(imgs) % 10) == 0:
              total_rows_skipped -= 1
            skipping_rows = True
            next_column_idx = 0
          end = datetime.now()
          elapsed = end - start
          print("idx: #%s, elapsed time: %s"%(idx, elapsed))
      print("done")
      address = get_random_address2(homepath("~/tavern/tavern/soda/dls"),"png")
      cv2.imwrite(address,x)
      print("written")
      return address
    addresses = pool(manage, l, numbering_idxs_list, nodes=20).result()
    print(datetime.now()-s)

    address_ = Images().hstack(addresses)
    impreview(address_)
    print(datetime.now()-start)
    GhostProduct().query_catalog(shop)
    return address_
  def query_catalog(self,shop):
    w = sudsort("product_type",sudby(lambda i:i.images,GhostProduct().get_most_recent(shop)),tcer=False)
    while True:
      x = int(input("product #?"))
      print(w[(x-1)].handle)
  def check(self):
    x = Aliexpress_Products().get_product_data(self.ali_url,check_for_epacket=False)
    Exec('def format_data(page_source):\n  soup = SOUP(page_source)\n  data = AD({"actionModule":{"productId":None,"storeNum":None},\n          "imageModule":{"imagePathList":None},\n          "skuModule":{"productSKUPropertyList":None,\n                        "skuPriceList":None,}\n          })\n  productId = findall(page_source,1,\'window.runParams.productId="(\\d+)"\')\n  storeNum = findall(page_source,1,\'window.runParams.shopId="(\\d+)"\')\n\n  data.actionModule.productId = productId\n  data.actionModule.storeNum = storeNum\n\n  productSKUPropertyList = []\n  for i in range(3):\n    new = AD()\n    product_info_sku = soupy(soup,"div","id","j-product-info-sku")[0]\n    option_names = lmap(lambda i:i[:-1], key("text",product_info_sku.findAll("dt",attrs={"class":"p-item-title"})))\n\n    if (i+1) > len(option_names):\n      break\n\n    skuPropertyName = option_names[i]\n\n    x = product_info_sku.findAll("dd",attrs={"class":"p-item-main"})[i]\n    y = x.findAll("li")\n    skuPropertyValues = []\n    for j in y:\n      z = AD()\n      if j.findAll("img"):\n        z.skuPropertyTips = j.findAll("a")[0].attrs["title"]\n        z.propertyValueId = int(j.findAll("a")[0].attrs["data-sku-id"])\n        z.skuPropertyImagePath = j.findAll("img")[0].attrs["src"]\n      else:\n        z.skuPropertyTips = j.text\n        z.propertyValueId = int(j.findAll("a")[0].attrs["data-sku-id"])\n        z.skuPropertyImagePath = None\n      skuPropertyValues.append(z)\n    new.skuPropertyName = skuPropertyName\n    new.skuPropertyValues = skuPropertyValues\n    productSKUPropertyList.append(new)\n  data.skuModule.productSKUPropertyList = productSKUPropertyList\n  data.skuModule.skuPriceList = json.loads(findall(page_source,1,"var skuProducts=(.*);"))\n  data.imageModule.imagePathList = lmap(lambda i: re.sub("(.*)_\\d+x\\d+\\.(?:.{3}|.{4})","\\\\1",i), lmap(lambda i: i.findAll("img")[0].attrs["src"], soupy(soup,"span","class","img-thumb-item")))\n  data.imageModule.videoId = or_list(lambda:soupy(soup,"div","id","item-video")[0].attrs["data-vid"],None)\n  return data',globals(),locals())

    if x.y == "Not Found":
      print("Not Found")
      Update(self,unavailable=True)
      return
  def run_checks(self):
    lmap(lambda idx, i:(print("checking #%s."%(idx)),i.check()), list(enum(All(GhostProduct))))
class GhostProductUpdate(Records):
  id = AutoField()
  last_check = DateTimeField()
  shop = CharField()
  # :End:
class Handle(Records):
  id = AutoField()
  handle = CharField(unique=True)
  custom_audience_id = BigIntegerField()
  has_adset = JSONField()
  reach = BigIntegerField()
  shop = CharField()
  # :End:
  def __call__(self,**kwargs):
    if kwargs: return Update(self,**kwargs)
    [Shop()(All(Shop)[0].shop_abbreviation),Update(self,reach=CustomAudience(self.custom_audience_id).remote_read(fields=["approximate_count"])["approximate_count"])]
  def post_lookalike(self):
    # 'fields = ["niche","shop_abbreviation","facebook_page","product_url","caption","icon","is_created","ad_account_id","campaign_id","date_last_requested_keyword_stats","click_attribution","view_attribution","custom_event_type","billing_event","optimization_goal","recommendations","bid_info","device_platforms","publisher_platforms","facebook_positions","targeting_optimization","user_device","user_os","age_min","age_max","genders","geo_locations","body","effective_object_story_id","interest_ids","handle"]\n[\n  [\n      setitem(g(),"post_lookalike_x",Copy(keysort("created_time",Filter(Adset,handle=self.handle))[0].adset_id) [0]),\n      setitem(g(),"post_lookalike_targeting",AdSet(g()["post_lookalike_x"]).remote_read(fields=["targeting"])._json["targeting"]),\n      setitem(g()["post_lookalike_targeting"],"custom_audiences",[{"id": str(i)}]),\n      AdSet(g()["post_lookalike_x"]).remote_update(params={"daily_budget":"500","targeting":g()["post_lookalike_targeting"]}),\n      Save(Update(itemcopy(Adset(),Get(Adset,adset_id=keysort("created_time",Filter(Adset,handle=self.handle))[0].adset_id),f=fields),adset_id=g()["post_lookalike_x"])),\n      OSA.notify("!"),\n      July_Adset_Utilities().update_advertisement_all(Integer(g()["post_lookalike_x"])),\n      OSA.notify("!!"),\n      Update(Get(Adset,adset_id=Integer(g()["post_lookalike_x"])),original_caid=Integer(i) ),\n      time.sleep(10) \n  ][-1] for i in Update(self,has_adset=lmap(int,key("id",[[Shop()(All(Shop)[0].shop_abbreviation),CustomAudience(parent_id="act_%s"%Shop()(Get(Product,handle=self.handle).shop).Facebook_Business_Ad_Account_ID )][1].remote_create(params={\n                                                                                                                                                                                    "lookalike_spec":{"country": "US",\n                                                                                                                                                                                                        "origin":[{"name":String(self.custom_audience_id),"type":"custom_audience","id":self.custom_audience_id,}],\n                                                                                                                                                                                                        "ratio":ratio,\n                                                                                                                                                                                                        "type":"custom_ratio",\n                                                                                                                                                                                                      },\n                                                                                                                                                                                    "name":"Lookalike %s"%(ratio),\n                                                                                                                                                                                    "subtype":"LOOKALIKE",\n                                                                                                                                                                                    "origin_audience_id":self.custom_audience_id\n                                                                                                                                                                                    }) for ratio in pool(lambda i:i/100,list(range(1,11))).result()])) if not self.has_adset else self.has_adset).has_adset\n]'
    fields = ["niche","shop_abbreviation","facebook_page","product_url","caption","icon","is_created","ad_account_id","campaign_id","date_last_requested_keyword_stats","click_attribution","view_attribution","custom_event_type","billing_event","optimization_goal","recommendations","bid_info","device_platforms","publisher_platforms","facebook_positions","targeting_optimization","user_device","user_os","age_min","age_max","genders","geo_locations","body","effective_object_story_id","interest_ids","handle"]
    has_adset = self.has_adset
    if not has_adset:
      has_adset = lmap(int,key("id",[[Shop()(All(Shop)[0].shop_abbreviation),CustomAudience(parent_id="act_%s"%Shop()(Get(Product,handle=self.handle).shop).Facebook_Business_Ad_Account_ID )][1].remote_create(params={
                                                                                                                                                                                              "lookalike_spec":{"country": "US",
                                                                                                                                                                                                                  "origin":[{"name":String(self.custom_audience_id),"type":"custom_audience","id":self.custom_audience_id,}],
                                                                                                                                                                                                                  "ratio":ratio,
                                                                                                                                                                                                                  "type":"custom_ratio",
                                                                                                                                                                                                                },
                                                                                                                                                                                              "name":"Lookalike %s"%(ratio),
                                                                                                                                                                                              "subtype":"LOOKALIKE",
                                                                                                                                                                                              "origin_audience_id":self.custom_audience_id
                                                                                                                                                                                              }) for ratio in pool(lambda i:i/100,list(range(1,11))).result()]))
    Update(self, has_adset = has_adset)
    for i in self.has_adset:
      if i not in lmap(int,key("id",flatten(listminus(key("custom_audiences",All(Adset)),None),1))):
        [
            setitem(g(),"post_lookalike_x",Copy(keysort("created_time",Filter(Adset,handle=self.handle))[0].adset_id) [0]),
            setitem(g(),"post_lookalike_targeting",AdSet(g()["post_lookalike_x"]).remote_read(fields=["targeting"])._json["targeting"]),
            setitem(g()["post_lookalike_targeting"],"custom_audiences",[{"id": str(i)}]),
            AdSet(g()["post_lookalike_x"]).remote_update(params={"daily_budget":"500","targeting":g()["post_lookalike_targeting"]}),
            Save(Update(itemcopy(Adset(),Get(Adset,adset_id=keysort("created_time",Filter(Adset,handle=self.handle))[0].adset_id),f=fields),adset_id=g()["post_lookalike_x"])),
            OSA.notify("!"),
            July_Adset_Utilities().update_advertisement_all(Integer(g()["post_lookalike_x"])),
            OSA.notify("!!"),
            Update(Get(Adset,adset_id=Integer(g()["post_lookalike_x"])),original_caid=Integer(i) ),
            time.sleep(10) 
        ][-1]
class HoursLogged(Records):
  id = AutoField()
  hours_logged = FloatField()
  # :End:
  def __call__(self,**kwargs):
    if kwargs: return Update(self, **kwargs)
    return All(HoursLogged)[0]
  def x(self):
    start = globe("start",Date().Now())
    sp(1)
    end = Date().Now()
    elapsed = (end-start).total_seconds()
    Update(HoursLogged()(),hours_logged=(HoursLogged()().hours_logged-(elapsed/3600)) )
    globalise(end,"start")
class InceptedProduct(Records):
  id = BigIntegerField(primary_key=True)
  last_check = DateTimeField()
  size_chart = JSONField()
  created_at = DateTimeField()
  image = JSONField()
  images = JSONField()
  options = JSONField()
  variants = JSONField()
  product_type = CharField()
  description = JSONField()
  vendor = CharField()
  body_html = JSONField()
  seller_platform = CharField()
  last_quantity_check = DateTimeField()
  tags = CharField()
  title = CharField()
  handle = CharField()
  similar_urls = JSONField()
  ca_id = CharField()
  ca_views = IntegerField()
  caption = JSONField()
  short_url = CharField()
  story_id = CharField()
  pcs = DecimalField()
  roi = DecimalField()
  spent = DecimalField()
  pcv = DecimalField()
  item_type = CharField()
  shop = CharField()
  niche = CharField()
  amazon_url = CharField()
  ali_url = CharField()
  amazonvendor = CharField()
  aliexpressvendor = CharField()
  amazon_json = JSONField()
  amazon_inspect = BooleanField(default=False)
  state = IntegerField()
  adset_ids = JSONField()
  adset_id = BigIntegerField()
  size_chart_power_urls = JSONField()
  freelancer_description = CharField(max_length="2048")
  my_description = CharField(max_length="4096")
  original = JSONField()
  shifted = JSONField()
  HTML = JSONField()
  url_title = CharField()
  video_url = CharField()
  icon_image = BinaryField(max_length=4294967295)
  product_tags = CharField()
  sku_image_dict = JSONField()
  objects = BaseModelManager()
  # :End:
  # RScan=lambda self,id:Get(InceptedProduct,id=id) if id in key("id",All(InceptedProduct)) else Get(Product,id=id)
  def RScan(self,id):
    if id in key("id",All(InceptedProduct)):
      x = Get(InceptedProduct,id=id)
      if Filter(Product,shop=x.shop,handle=x.handle):
        return Get(Product,shop=x.shop,handle=x.handle)
      else:
        return Get(InceptedProduct,id=id)
    else:
      return Get(Product,id=id)
  def handle_update(self, x):
    # Important for RScan in the event the handle is updated, and you need to RScan, you first get the IP by ID. and then try to find the Product object by the IP's x.shop and x.handle
    if x.id in key("id",All(InceptedProduct)):
      Update(Get(InceptedProduct,id=x.id),handle=x.handle)
      blueprint("Updated handle.")
  @staticmethod
  def X():
    # process(lambda:[tryprocess(lambda:([setattr(g,"Z",pyperclip.paste().strip()),pyperclip.copy("\n"),pool(lambda:tp(lambda:InceptedProduct().X(),ep=1))] if((Muta()().incept_product_on)and(pyperclip.paste().startswith("incept: ")))else(zz(1))))  for i in(range(WHILE_TRUE))] )
    # incept: 
    fields = sud("name",Product._meta.fields)
    x = itemcopy(a=InceptedProduct(),b=Get(Product,shop=Muta()().store_abbre,title=g.Z.split("incept: ")[1].split("|")[0]),f=fields) # create an inceptedproduct for this product
    product = Get(Product,shop=Muta()().store_abbre,title=g.Z.split("incept: ")[1].split("|")[0])

    product.p().destroy()
    OSA.notify(a="%s"%(Date().friendlydate(Date().Now())),b="Original Product Deleted")
    Del(product)

    product = x
    g.Z = g.Z.replace("incept: ","twirl1: ")
    OSA.log("%s\nStarting to Add New Product"%(Date().friendlydate(Date().Now())),tp=False)
    new = Product().add_product()
    OSA.notify(a="%s"%(Date().friendlydate(Date().Now())),b="New Product Added")
    OSA.log("Check it at %s/products/%s"%(Shop()(Muta()().store_abbre).Domain_Name,new.handle),tp=False)
class Interest(Records):
  id = AutoField()
  interest_id = BigIntegerField(unique=True)
  interest_name = CharField(max_length="0256",unique=True)
  spend = FloatField()
  reach = IntegerField()
  impression = IntegerField()
  click = IntegerField()
  post_click = IntegerField()
  add_to_cart = IntegerField()
  website_purchase = IntegerField()
  page_engagement = IntegerField()
  photo_view = IntegerField()
  post_engagement = IntegerField()
  post_like = IntegerField()
  # :End:
class Interestinsight(Records):
  id = AutoField()
  interest_id = BigIntegerField()
  interest_name = CharField(max_length="0256",unique=True)
  date = IntegerField(unique=True,default=None)
  adset_id = CharField(unique=True, max_length="0032")
  spend = FloatField()
  reach = IntegerField()
  impression = IntegerField()
  click = IntegerField()
  post_click = IntegerField()
  add_to_cart = IntegerField()
  website_purchase = IntegerField()
  page_engagement = IntegerField()
  photo_view = IntegerField()
  post_engagement = IntegerField()
  post_like = IntegerField()
  # :End:
class Lineitem(Records):
  id = BigIntegerField(primary_key=True)
  last_check = DateTimeField()
  date = DateField()
  created_at = DateTimeField()
  shop = CharField()
  financial_status = CharField()
  variant_id = BigIntegerField()
  product_id = BigIntegerField()
  order_id = BigIntegerField()
  quantity = IntegerField()
  grams = IntegerField()
  sku = CharField()
  title = CharField()
  variant_title = CharField()
  shipping_address = JSONField()
  updated_shipping_address = JSONField()
  price = FloatField()
  ali_price = FloatField()
  ali_tracking_number = CharField()
  ali_tracking_method = CharField()
  ali_order_number = BigIntegerField()
  ali_return_negotiation = BinaryField(max_length=4294967295)
  ali_dispute_id = BigIntegerField()
  keep_exchange_id = BigIntegerField()
  ali_event = BinaryField(max_length=4294967295)

  fulfillment_id = BigIntegerField()
  fulfillment_tracking_numbers = JSONField()
  fulfillment_status = CharField()
  fulfillment_service = CharField()

  tracking_events = JSONField()
  saved_address_screenshot = BinaryField(max_length=4294967295)

  e3 = FloatField()
  e2 = FloatField()
  e1 = FloatField()
  t4 = FloatField()
  t3 = FloatField()
  t2 = FloatField()
  t1 = FloatField()
  timesofar = IntegerField()
  stage = CharField()
  # :End:
  def o(self):
    return Get(Order,id=self.order_id)
  def get_tracking_events(self):
    ### CALLED ONCE IN UPDATE_TRACKER_DATA ###
    tracking_number = self.ali_tracking_number
    def get_tracking_events_other(tracking_number):
      ss = Browser()("sele")
      ss.get("https://t.17track.net/en#nums=%s"%tracking_number)
      try:
        q=[[datetime.strptime(i[:1], "%Y-%m-%d %H:%M")] + i[1:] for i in [i.split("\n") for i in key("text", ss.find_elements_by_class_name("des-block")[0].find_elements_by_tag_name("dd"))]]
        return q
      except Exception as e:
        redprint("[none found]")
        return None
    if 1==2:
      return get_tracking_events_other(tracking_number)
    ###

    if not self.ali_tracking_number:
      self.calculate()
      data = []
      if not self.t2 and self.t1:
        data.extend(
          transpose([lmap(Date().myUndatetimenow,getattrs(["t1"],self)),
              [(": ".join([(Shop()(self.shop).Business_Name),"Order Initiated"])), ]]))
      elif not self.t3 and self.t2:
        data.extend(
          transpose([lmap(Date().myUndatetimenow,getattrs(["t1","t2"],self)),
              [(": ".join([(Shop()(self.shop).Business_Name),"Order Initiated"])), (": ".join(["AliExpress","Dropship Order Placed"])), ]]))
      data = [": ".join(["((%s))"%(Date().friendlydate(i[0],with_year=1)),"(%s)"%(": ".join(list(tcer(i[1:]))))]) for i in (data[:3]+tcer(data[3:],1))]
      Update(self,tracking_events=data)
      [redprint("[i][%s]"%i) for i in data]
      return data
    url,s = "https://tools.usps.com/go/TrackConfirmAction?tLabels=%s"%(tracking_number),requests.Session()
    s.headers['User-Agent'] = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.131 Safari/537.36'
    
    r = tryreturn(lambda:s.get(url, timeout=3))
    if r == 0: return
    # if r== 0: [redprint(str(e)[:100]),(0/0)]

    data = []
    soup = BeautifulSoup(r.text)
    # okay, here variablo the .... t1,t2,t3, since t3 is a must for any tracking events to be gotten @first
    #lmap(Date().myUndatetimenow,getattrs(["t1","t2","t3"],Get(Lineitem,ali_tracking_number=tracking_number)))
    data.extend(
      transpose(
        [
        lmap(Date().myUndatetimenow,getattrs(["t1","t2","t3"],self)),
          [(": ".join([(Shop()(self.shop).Business_Name),"Order Initiated"])), (": ".join(["AliExpress","Dropship Order Placed"])), (": ".join(["AliExpress","Dropship Order Tracer %s Gotten"%(self.ali_tracking_number)]))]
        ]
        )
      )
    if "Pre-Shipment" in soup.findAll("div",attrs={"class":"delivery_status"})[0].text:
      redprint("[pre-shipment][tracking_number][%s]"%tracking_number), data.append([datetime.now(),"Pre-Shipment - No Tracking Events Thus Far"])
    if "Label Created, not yet in system" in str(soup):
      redprint("[pre-shipment][tracking_number][%s]"%tracking_number), data.append([datetime.now(),"Label Created, not yet in system - No Tracking Events Thus Far"])
    else:
      action_panels = soup.findAll("div", attrs={"class":"thPanalAction"})
      len_action_panels = len(action_panels)
      if len_action_panels == 0:                                                  # Imaginary tracking number having no action panels returns None
        redprint("[len thPanalAction][%s]"%len_action_panels)
      events = [re.sub(r"[\r\n\t]", " ", i) for i in key("text", action_panels[0].findAll("strong"))]
      events = [re.sub(r"\s+", " ", re.sub(r"[\r\n\t\xa0]", " ", i)).strip() for i in key("text", action_panels[0].findAll("span"))]
      events = [i for i in events if i != ""]
      for i in events:
        if   tryprocess(datetime.strptime, i, "%B %d, %Y, %H:%M %p")  == 1:
          data.append([])
          data[-1].append(datetime.strptime(i, "%B %d, %Y, %H:%M %p"))
        elif tryprocess(datetime.strptime, i, "%B %d, %Y")            == 1:
          data.append([])
          data[-1].append(datetime.strptime(i, "%B %d, %Y"))
        else:
          data[-1].append(i)
    [redprint("[i][%s]"%i) for i in data]
    # return data
    data = [": ".join(["((%s))"%(Date().friendlydate(i[0],with_year=1)),"(%s)"%(": ".join(list(tcer(i[1:]))))]) for i in (data[:3]+tcer(data[3:],1))]
    Update(self,tracking_events=data)
    return data
  def update_tracker_data(self):
    self.calculate()
    order_ = Shop()( self.shop).ofind(id_=self.order_id)
    tracking = sum(key("tracking_numbers",order_.fulfillments),[])
    if self.stage == "e2" or (self.stage == "e3" and self.ali_tracking_number not in tracking):
      url = "https://trade.aliexpress.com/order_detail.htm?&orderId=%s"%self.ali_order_number
      x = SOUP(Aliexpress_Requests()().get(url).text)
      tracking_numbers = sudcall("strip",key("text", x.findAll("td", attrs={"class":"no"})))
      tracking_methods = sud("text",x.findAll("span", attrs={"class":"logistics-name"}))
      if tracking_methods[0] == 'e邮宝': tracking_methods[0] = "ePacket"
      if len(tracking_numbers) == 0: return print("[ali order number: %s][Supplier is processing your order]"%(self.ali_order_number))

      # 'if len(tracking_numbers) > 1:\n  Update(self,ali_tracking_number = tracking_numbers[0])\n  associated_lineitems_of_this_ali_order_number = Lineitem.objects.filter(ali_order_number=i.ali_order_number)\n  assert len(associated_lineitems_of_this_ali_order_number) > 1\n  [[print(i.tracking_method, i.ali_order_number, i.id) for i in associated_lineitems_of_this_ali_order_number], print("\\n\\n")]\n  for i in associated_lineitems_of_this_ali_order_number:\n    for tracking_method, tracking_number in zip(tracking_methods, tracking_numbers):\n      if i.ali_tracking_method == tracking_method:\n        i.ali_tracking_number = tracking_number.strip()\n        print(i.id, i.ali_order_number, i.tracking_method, i.tracking_number)\n        if not i.t3:\n          data = or_list(lambda:json.loads(re.findall(r"(?s)globalData = (.*?);", Aliexpress_Requests()().get("https://track.aliexpress.com/logisticsdetail.htm?&tradeId=%s" % i.ali_order_number).text)[0]), None)\n          if data == None:\n            continue\n          tryprocess(lambda: Update(i, t3 = (Date().myDatetimenow(datetime.strptime(data.get("consignTime"), "%Y-%m-%d %H:%M:%S")) - ((4*60*60)/(24*60*60))) , e2 = (Date().myDatetimenow(datetime.strptime(data.get("consignTime"), "%Y-%m-%d %H:%M:%S")) - ((4*60*60)/(24*60*60))) - i.t2))'
      if len(tracking_methods) != 1:
        OSA.log("Length of tracking numbers for an order regarding 1 store is not 0. Each ali order number should have 1 aliexpress tracking number. Please uncomment the line of text above this and then check it")

      if len(tracking_numbers) == 1:
        Update(self,ali_tracking_number = tracking_numbers[0].strip())

        if not self.t3:
          data = or_list(lambda:json.loads(re.findall(r"(?s)globalData = (.*?);", Aliexpress_Requests()().get("https://track.aliexpress.com/logisticsdetail.htm?&tradeId=%s" % self.ali_order_number).text)[0]), None)
          if data == None: return
          y = datetime.strptime(data.get("consignTime"), "%Y-%m-%d %H:%M:%S")
          t3 = (Date().myDatetimenow(y) - ((4*60*60)/(24*60*60)))
          e2 = (Date().myDatetimenow(y) - ((4*60*60)/(24*60*60))) - self.t2
          tryprocess(lambda: Update(self, t3 = t3 , e2 = e2 ))
          redprint("[New tracking number][%s][for][%s][SAVING]; Tracking number: %s, %s, %s"%(self.ali_tracking_number, url,self.t1,self.t2,self.t3))

      if self.ali_tracking_number:
        tracking_company_dict = None
        if not self.ali_tracking_method:
          OSA().log("Order #%s for shop %s has no tracking method"%(order_.order_number,Get(Order,id=order_.id).shop),tp=False)
        if self.ali_tracking_method == "ePacket": tracking_company_dict = {"ePacket": "USPS"}
        elif self.ali_tracking_method == "Yanwen Economic Air Mail": tracking_company_dict = {"Yanwen Economic Air Mail": "Other"}
        elif self.ali_tracking_method == "SunYou Economic Air Mail": tracking_company_dict = {"SunYou Economic Air Mail": "Other"}
        elif self.ali_tracking_method == "China Post Registered Air Mail": tracking_company_dict = {"China Post Registered Air Mail": "China Post Registered Air Mail"}
        elif self.ali_tracking_method == "China Air Post": tracking_company_dict = {"China Air Post": "China Post"}
        elif self.ali_tracking_method == "AliExpress Standard Shipping": tracking_company_dict = {"Other":"Other"}

        if self.ali_tracking_number not in tracking:
          if Shop()(self.shop).Send_Tracking_Number:
            create_new_fulfillment(self,order_,tracking_company_dict)
        else:
          print("Tracking number already in the fulfillments")
    if self.stage == "e1":
      events = self.get_tracking_events()
    if self.stage == "e2":
      events = self.get_tracking_events()
    if self.stage == "e3":
      events = self.get_tracking_events()
      print(events)
      if "Delivered" in self.events()[-1]:
        greenprint(self.events()[-1])
        Update(self,t4=Date().myDatetimenow(self.events()[-1].date()))
        Update(self,e3=self.t4-self.t3)
    x = datetime.now()
    greenprint(x)
    Update(self,last_check=Date().Now())
    return x.strftime("%Y,%m,%d,%H,%M,%S")
  def calculate(self):
    if self.financial_status == "refunded": return
    if self.fulfillment_status == "unfulfilled": return
    if self.ali_order_number == None:
      Update(self,timesofar=self.calculate_time_so_far())
      ifdo(lambda:self.stage == "e1" and self.timesofar > 35,lambda:Update(self,timesofar=35))
      return
    if(self.t1 and not self.t2): Update(self,stage="e1")
    elif(self.t2 and not self.t3): Update(self,stage="e2")
    elif(self.t3 and not self.t4): Update(self,stage="e3")
    elif(self.t4): Update(self,stage="e4")
    Update(self,timesofar=self.calculate_time_so_far())
  events, get_timesofar_range, order = (lambda self: [globalise(type("x",(str,),{"date":lambda self:datetime.strptime(findall(self,1,"\(\((.*?)\)\):"),"%A, %b %d'%y at %I:%M %p")}),"events_x"),or_list(tryreturn(lambda:lmap(globe("events_x"),self.tracking_events)),[])][1], 
                                        lambda self, x: [i for i in All(Lineitem) if i.calculate_time_so_far() == x],
                                        lambda self: Get(Order,id=self.order_id))
  def calculate_time_so_far(self):
    # time_so_far = Integer(Date().myDatetimenow()-self.t1)
    time_so_far = None
    x = None
    if self.stage == "e4":
      x = self.t4
    else:
      x = Integer(Date().myDatetimenow())
    time_so_far = x - self.t1
    return time_so_far
class LineitemsFeed(Records):
  id = AutoField()
  last_check = DateTimeField()
  shop = CharField()
  # :End:
  def LineitemsFeed(self,shop):
    lineitemsFeed(shop,Date().pastmonthdays(3))
    Save(LineitemsFeed,last_check=datetime.now(),shop=shop)
  def LineitemsFeedAll(self):
    lmap(lambda i:lineitemsFeed(i,Date().pastmonthdays(3)), key("shop_abbreviation",All(Shop)))
    Save(LineitemsFeed,last_check=datetime.now())       
class Log(Records):
  id = AutoField()
  log = CharField()
  # :End:
class Meal(Records):
  id = AutoField()
  name = CharField()
  ounces = FloatField()
  price = FloatField()
  time = DateTimeField()
  # :End:
  def add(self,x):
    x = x.split(",")
    x = keycall("strip",x)
    [[[OSA.display_dialog("%s %s in inventory."%(len(Filter(Mealinventory,name=" ".join(i.split(" ")[1:]).split("@")[0].strip(),status=1))," ".join(i.split(" ")[1:]).split("@")[0].strip()),text_prompt=False),globalise(True,"mealinventory_x")] for i in x if (len(Filter(Mealinventory,name=" ".join(i.split(" ")[1:]).split("@")[0].strip(),status=1)) < int(i.split(" ")[0]))],[globalise(False,"mealinventory_x"),exec("assert(0)")]if(globals().get("mealinventory_x",False)==True)else()]
    for i in x:
      total_price = 0
      count, name = i.split(" ")[0], " ".join(i.split(" ")[1:]).split("@")[0].strip()
      count = int(count)
      for idx, j in enum(lrange(count)):
        meal = Filter(Mealinventory,name=name,status=1)[0]
        price_per_ounce = meal.price_per_ounce
        total_price = total_price + price_per_ounce
        Update(meal, status=0)
        OSA.notify("-%s Meal %s @ %s"%((idx+1),name,price_per_ounce))
        time.sleep(0.2)
      total_price = round(total_price,2)
      time_now = datetime.now()
      Save(Meal, name = name, ounces = count, price = total_price, time = time_now)
      OSA.display_dialog("Saved meal of %s %s @ %s on %s"%(name,count,total_price,Date().friendlydate(time_now)),text_prompt=False)
      time.sleep(1)
class Mealinventory(Records):
  id = AutoField()
  name = CharField()
  price_per_ounce = FloatField()
  date = DateField()
  status = IntegerField()
  # :End:
  def add(self,x):
    l = []
    x = x.split(",")
    x = keycall("strip",x)
    for i in x:
      count, name, price = i.split(" ")[0], " ".join(i.split(" ")[1:]).split("@")[0].strip(), findall(i.split(" ")[-1],"[\w\.]+")[0]
      for idx, z in enum(lrange(int(count))):
        date = datetime.now()
        Save(Mealinventory,date=date,count=count,price_per_ounce=price,name=name,status=1)
        OSA.notify("%s Saved For %s"%((idx+1),name),b="At %s"%(price))
        time.sleep(0.2)
      time.sleep(4)
  def giveformat(self,x):
    a = Filter(Mealinventory,name=x,status=1)
    b = sorted(set(key("price_per_ounce",a)))
    lot = []
    for z in b:
      c = Filter(Mealinventory,name=x,price_per_ounce=z,status=1)
      d = "{len} {name} @ {price_per_ounce}".format(len=len(c), name=lset(key("name",c))[0], price_per_ounce=z)
      lot.append(d)
    return list(sorted(lot))
class Message_Game(Records):
  id = AutoField()
  text = CharField()
  # :End:
  def add(self):
    text = OSA.log("Text?\n1234567891234567891234567891234567891234567\n%s"%("|"*80),df="\n\n\n\n\n\n\n\n\n",buttons=["Cancel","OK"])
    Save(Message_Game,text=text)
    OSA.notify(a="",b=text)
class Motto(Records):
  id = AutoField()
  motto = CharField()
  # :End:
  def add(self):
    motto = OSA.log("Motto?\n1234567891234567891234567891234567891234567\n%s"%("|"*80),df="\n\n\n\n\n\n\n\n\n",buttons=["Cancel","OK"])
    Save(Motto,motto=motto)
    OSA.notify(a="",b=motto)
class Muta(Records):
  current_shop = CharField()
  id = AutoField()
  is_reconfigured_results = IntegerField()
  is_reconfigured_suggestions = IntegerField()
  is_reconfigured_interest_box = IntegerField()
  is_results_is_running = IntegerField()
  is_suggestions_is_running = IntegerField()
  is_interest_box_is_running = IntegerField()
  Active_AceInTheHole_header_column_account_name = CharField()
  store_abbre = CharField()
  niche = CharField()
  is_free_plus_ship = IntegerField()
  page = CharField()

  title = CharField()
  image_idx = JSONField()
  image_indexes = JSONField()
  option_indexes = JSONField()
  variant_indexes = JSONField()
  size_chart = JSONField()
  my_description = JSONField()
  caption = JSONField()

  amplitude = IntegerField()

  fig_changed = IntegerField()
  new_menulet_changed = IntegerField()
  fig_on = IntegerField()
  addproducts_on = IntegerField()
  sciencevessels_on = IntegerField()
  support_on = IntegerField()
  job_search_on = IntegerField()
  incept_product_on = IntegerField()
  hours_logged_on = IntegerField()
  productchange_on = IntegerField()
  get_product_source_mode = CharField()
  product_adding_mode = CharField()

  logo = IntegerField()
  logo_size = JSONField()
  logo_scaling_dimension_size = JSONField()
  puffer = IntegerField()

  interest_box = JSONField()
  interest_results = JSONField()
  interest_suggestions = JSONField()

  username = CharField()
  bitly_access_token = JSONField()
  show_routing = IntegerField()
  show_product_inceptions = IntegerField()
  targeting_search_url = JSONField()
  targeting_suggestions_url = JSONField()
  default_caption = JSONField()
  # :End:
  def __call__(self,**kwargs):
    return Update(self,**kwargs)if(kwargs)else(All(Muta)[0])
class New_Email_Tag(Records):
  id = AutoField()
  tag = CharField()
  # :End:
  def add(self):
    New_Email_Tag(tag=OSA.log("Tag?: ")).save()
class New_Email_Template(Records):
  id = AutoField()
  template = JSONField()
  shop = CharField(max_length="0016",unique=True)
  subject = CharField(max_length="0256",unique=True)
  matter = CharField(max_length="0256",unique=True)
  # :End:
  create_new_template=lambda self,shop:[Save(New_Email_Template,
                                                                  shop = shop,
                                                                  subject=OSA.log("Subject of this template [note: the max length of a subject is 256 characters.]?"),
                                                                  matter=OSA.log("Matter of this template [note: the max length of a subject is 256 characters.]?"),
                                                                  template=OSA.display_dialog("What is this template [note: %s]?"%(
                                                          """Keep in mind, available replaceable fields for any identified order will be notated by enclosement in paranthesis. All available fields are as follows:\n%s.\n\nFor example: (order_number)"""%("\n".join(["%s. %s"%((idx+1),i) for idx, i in enum(["customer_name", "order_number", "email", "shop_name", "tracking_numbers", "order_amount", "order_creation_time", "item_titles", "item_prices", "tracking_times", "tracking_events", "actions_taken_so_far"])]))),
                                                                    buttons=["".join([" "*75,"OK"," "*75])])),New_Email_Template().create_new_template(shop)if(OSA.log("Add another template?",tp=False,buttons=["No","Yes"])=="Yes")else()]
class NiceNiche(Records):
  id = AutoField()
  niche = CharField()
  data = JSONField()
  # :End:
  def add(self,niche):
    Save(NiceNiche,niche=niche)
class Niche(Records):
  id = AutoField()
  niche = CharField(unique=True)
  facebook_page = CharField()
  date_added = DateTimeField()
  # :End:
class Note(Records):
  id = AutoField()
  note = CharField(unique=True)
  time = DateTimeField(unique=True)
  # :End:
class Packet(Records):
  id = AutoField()
  v = CharField(unique=True)
  w = JSONField()
  x = BinaryField(max_length=4294967295)
  # :End:
  def send(self, v, w):
    [  Push(Packet,v=Split("/",v)[-1])(w=w,x=open(zipUtil(v,reverse=False),"rb").read())  ,  rm("%s.zip"%v)  ,  rm(v)]
  def export(self, v):
    return [rm("%s"%(v)),rm("%s.zip"%(v)),open("%s.zip"%(v), "wb").write(Get(Packet,v=Split("/",v)[-1]).x),zipUtil("%s.zip"%v,reverse=not False),[[exec(open("%s/%s.py"%(v,i)).read(),globals()),eval("%s()"%(i))][1] for i in Get(Packet,v=Split("/",v)[-1]).w]][-1]
  # Useful for things that are like location related
class PaidCardNumber(Records):
  id = AutoField()
  order_ids = JSONField()
  price = FloatField()
  card_id = IntegerField()
  paid_at = DateTimeField()
  # :End:
  # paid_time
  # created_time
class Password(Records):
  id = AutoField()
  company = CharField(unique=True, max_length="0128")
  username = CharField(unique=True, max_length="0064")
  password = CharField(max_length="0128")
  # :End:
  @staticmethod
  def getpassword(company, username):
    return Get(Password, company = company, username = username)
  @staticmethod
  def setpassword(company, username):
    Save(Password, company = company, username = username, password = [getpass()][0])if(len(Filter(Password,company=company,username=username))==0)else(Update(Get(Password,company=company,username=username),password=getpass()))
class Payment(Records):
  id = CharField(max_length="0064",primary_key=True)
  created_at = DateTimeField()
  amount = FloatField()
  email = CharField()
  invoice_id = CharField()
  order_id = BigIntegerField()
  payment_gateway_name = CharField()
  shop = CharField()
  # :End:
  # # key("total_price",Filter(Order,(~Q(financial_status="refunded"))))
  #  key("amount",All(Payment))
  def get_matching_order(self,x):
    def address_string_from_dict_3(x):
      x["first_name"],x["last_name"] = x["first_name"].strip().split(" ")[0],x["last_name"].strip().split(" ")[-1]
      return ifelseget(lambda:x.get("address2"),lambda:"{first_name} {last_name}, {address1}, {address2}, {city}, {province_code} {zip} {country}".format(**{a:re.sub(" +"," ",str(b)).strip().title() for a,b in x.items()}),lambda:"{first_name} {last_name}, {address1}, {city}, {province_code} {zip} {country}".format(**{a:re.sub(" +"," ",str(b)).strip().title() for a,b in x.items()}))
    def address_string_from_dict_4(x):
      x["Card Name"]=x["Card Name"].strip().split(" ")[0]+ " " + x["Card Name"].strip().split(" ")[-1]
      return ifelseget(lambda:x.get("Card Address Line2"),lambda:"{Card Name}, {Card Address Line1}, {Card Address Line2}, {Card Address City}, {Card Address State} {Card Address Zip} {Card Address Country}".format(**{a:re.sub(" +"," ",str(b)).strip().title() if a != "Card Address Country" else country_code_dict[b] for a,b in x.items()}),lambda:"{Card Name}, {Card Address Line1}, {Card Address City}, {Card Address State} {Card Address Zip} {Card Address Country}".format(**{a:re.sub(" +"," ",str(b)).strip().title() if a != "Card Address Country" else country_code_dict[b] for a,b in x.items()}))
    desired_address = address_string_from_dict_4(x)
    matching = [i for i in All(Order) if address_string_from_dict_3(i.shipping_address) == desired_address]
    unchecked = [i for i in matching if i.is_checked == False]
    desired_one = unchecked[0]
    print("Match:\n%s to\n%s\n\n" % (desired_address,address_string_from_dict_3(desired_one.shipping_address)))
    x["order_id (metadata)"] = desired_one.id
    print(x)
    desired_one.is_checked = True
    desired_one.save()
  def add(self):
    address,payment_gateway_name,shop,w,most_recent_saved_date,today=get_latest_download(x=1),"PayPal",Muta()().store_abbre,CSV().DictReadWithDelimiterGuess(get_latest_download(x=1)),or_list(lambda:Date(max(key("created_at",All(Payment))))(),lambda:(Date()-15)()),Date()()
    field_item = [("Transaction ID", "id"), ("Net", "amount"), ("From Email Address", "email"), ("Invoice Number", "invoice_id"),]
    w = sudby(lambda i:i["Type"]=="Express Checkout Payment",w)
    w = [AD(dictupdate({b:i[a] for a,b in field_item},created_at=Date().parse_date(i['\ufeff"Date"']+" "+i["Time"]))) for i in w]
    lmap(lambda i:setitem(i,"invoice_id",int(i.invoice_id.replace("c","").split(".")[0])),w)
    w = sudby(lambda i: i.created_at > most_recent_saved_date and i.created_at < today, w)
    lmap(lambda i:Save(Payment, **{"id":i.id,"created_at":i.created_at,"amount":i.amount,"email":i.email,"invoice_id":i.invoice_id,"order_id":i.invoice_id,"payment_gateway_name":payment_gateway_name,"shop":shop}),w)

    address,payment_gateway_name,shop,w,most_recent_saved_date,today=get_latest_download(),"Stripe",Muta()().store_abbre,CSV().DictReadWithDelimiterGuess(get_latest_download()),most_recent_saved_date,Date()()
    field_item = [("id", "id"), ("Created (UTC)", "created_at"), ("Amount", "amount"), ("email (metadata)", "email"), ("order_id (metadata)", "invoice_id"),]
    # lmap(lambda i:ifdo(lambda:not i["order_id (metadata)"],lambda:Payment().get_matching_order(i)),w)
    w = [AD({b:i[a] if not a.endswith("(UTC)") else Date().parse_date(i[a]).replace(tzinfo=pytz.utc).astimezone().replace(tzinfo=None)+timedelta(hours=4) for a,b in field_item}) for i in w]
    lmap(lambda i:ifdo(lambda:type(i.invoice_id)==str,lambda:setitem(i,"invoice_id",int(i.invoice_id.replace("c","").split(".")[0]))),w)
    w = sudby(lambda i: i.created_at > most_recent_saved_date and i.created_at < today, w)
    lmap(lambda i:Save(Payment, **{"id":i.id,"created_at":i.created_at,"amount":i.amount,"email":i.email,"invoice_id":i.invoice_id,"order_id":i.invoice_id,"payment_gateway_name":payment_gateway_name,"shop":shop}),w)
class Payout(Records):
  id = CharField(max_length="0064",primary_key=True)
  created_at = DateTimeField()
  amount = FloatField()
  account_name = CharField()
  account_last_4_digits = CharField()
  payment_gateway_name = CharField()
  shop = CharField()
  # :End:
  #  key("amount",Filter(AceInTheHole,tag="BUSINESS_PAYMENT_GATEWAY_DEPOSITS"))
  #  key("amount",All(Payout))
  def add(self):
    address,payment_gateway_name,shop,w,most_recent_saved_date,today=get_latest_download(x=1),"PayPal",Muta()().store_abbre,CSV().DictReadWithDelimiterGuess(get_latest_download(x=1)),or_list(lambda:Date(max(key("created_at",All(Payout))))(),lambda:(Date()-15)()),Date()()
    field_item = [("Transaction ID", "id"), ("Net", "amount"),]
    w = sudby(lambda i:i["Type"]=="General Withdrawal",w)
    w = [AD(dictupdate({b:i[a] for a,b in field_item},created_at=Date().parse_date(i['Date']+" "+i["Time"]))) for i in w]
    lmap(lambda i:ifdo(lambda:i.get("account_name",None)==None,lambda:setitem(i,"account_name",None)),w)
    lmap(lambda i:ifdo(lambda:i.get("account_last_4_digits",None)==None,lambda:setitem(i,"account_last_4_digits",None)),w)
    w = sudby(lambda i: i.created_at > most_recent_saved_date and i.created_at < today, w)
    lmap(lambda i:Save(Payout, **{"id":i.id, "created_at":i.created_at, "amount":i.amount, "account_name":i.account_name, "account_last_4_digits":i.account_last_4_digits, "payment_gateway_name":payment_gateway_name, "shop":shop}),w)

    address,payment_gateway_name,shop,w,most_recent_saved_date,today=get_latest_download(),"Stripe",Muta()().store_abbre,CSV().DictReadWithDelimiterGuess(get_latest_download()),most_recent_saved_date,Date()()
    field_item = [("id", "id"), ("Created (UTC)", "created_at"), ("Amount", "amount"), ("Destination Name", "account_name"), ("Destination Last 4", "account_last_4_digits"),]
    w = [AD({b:i[a] if not a.endswith("(UTC)") else Date().parse_date(i[a]).replace(tzinfo=pytz.utc).astimezone().replace(tzinfo=None)+timedelta(hours=4) for a,b in field_item}) for i in w]
    w = sudby(lambda i: i.created_at > most_recent_saved_date and i.created_at < today, w)
    lmap(lambda i:Save(Payout, **{"id":i.id, "created_at":i.created_at, "amount":i.amount, "account_name":i.account_name, "account_last_4_digits":i.account_last_4_digits, "payment_gateway_name":payment_gateway_name, "shop":shop}),w)
class Price(Records):
  id = AutoField()
  product_id = BigIntegerField(unique=True)
  variant_id = BigIntegerField(unique=True)
  ap = FloatField()
  sp = FloatField()
  sales = IntegerField()
  # :End:
class PriceChange(Records):
  id = AutoField()
  type = CharField() # range, single
  argument = JSONField() # [0, 0.01], [0, 5]; 0.01, 0.02
  method = CharField()
  shop = CharField()
  # :End:
  @staticmethod
  def flow(z,shop):
    if type(shop) == Shop:
      shop = shop.shop_abbreviation
    R = []
    for i in z.strip().split("\n"):
      r, x = lmap(Strip, i.split(":"))
      if "-" in r:
        r = lmap(Strip, r.split("-"))
        r = lmap(float, r)
      elif "-" not in r:
        r = round(float(r),2)
      
      if type(r) == list and r[1] > 10000:
        r = [r[0],10000]
      print(r,x)
      R.append(PriceChange(shop=shop,type="range"if(type(r) == list)else("single"), argument = r, method = x))
    keycall("save", R)
    PriceChange().check_for_errors(shop)
    return True
    """
    0-5:  10
    5-15: x+15
    15-23 : 30
    23 - 30: 40
    30 - 40 : 50
    """
  @staticmethod
  def check_for_errors(shop):
    args = []
    for i in Filter(PriceChange,shop=shop):
      args.append(i.argument)if(type(i.argument) != list) else args.extend(linspace(float(i.argument[0])+0.01, float(i.argument[1])+0.01, 0.01))
    if len(args) == len(set(args)):
      ()
    else:
      OSA.display_dialog("There is an overlap in the price change list. Please delete some of the price changes.",text_prompt=False)
  get_current_pricechanges = lambda self, shop: OSA.display_dialog("This is the current price change list"+"\n\n",default_answer="\n".join(["%s: %s"%(("-".join(lmap(lambda i: str(round(float(i),2)),i.argument)))if(type(i.argument)==list)else(i.argument),i.method) for i in msort(Filter(PriceChange,shop=shop),lambda i:or_list(tryreturn(lambda:i.argument[0]),i.argument)) ]))
  price_change = lambda self,x,shop,**kwargs: [OSA.display_dialog("No price changes have been set. Please set them up to change the supplier price to the new price.",text_prompt=False)if(len(Filter(PriceChange,shop=shop))==0)else(),setitem(kwargs,"f",msort(Filter(PriceChange,shop=shop),lambda i:round(float(x),2) in lmap(lambda i:round(float(i),2),i.argument) if type(i.argument) == list else round(float(x),2) == round(float(i.argument),2),0)[-1]),[OSA.display_dialog("%s is not in the price change list. Please add it to the price change list. Exitting."%x,text_prompt=False),0/0]if(float(x)  not in ((linspace(*kwargs["f"].argument,0.01))if(type(kwargs["f"].argument)==list)else([round(float(kwargs["f"].argument),2)])) )else(), setitem(kwargs,"z",( round(float(eval(kwargs["f"].method.replace("x",str(x)))),2) )if("x"in(kwargs["f"].method))else(round(float(kwargs["f"].method),2)))  ,  setitem(kwargs,"z",ceil(kwargs["z"]))if(Get(Shop,shop_abbreviation=shop).Price_Change_Round_Type=="up")else setitem(kwargs,"z",floor(kwargs["z"]))if(Get(Shop,shop_abbreviation=shop).Price_Change_Round_Type=="down") else setitem(kwargs,"z",round(kwargs["z"]))if(Get(Shop,shop_abbreviation=shop).Price_Change_Round_Type=="round") else setitem(kwargs,"z",kwargs["z"])if(Get(Shop,shop_abbreviation=shop).Price_Change_Round_Type==None)else(),setitem(kwargs,"z",ceil(kwargs["z"])-(1-round(float(Get(Shop,shop_abbreviation=shop).Price_Change_Ending_Amount),2)))if(Get(Shop,shop_abbreviation=shop).Price_Change_Ending_Amount!=None)else(),kwargs["z"] ][-1]
class PriceDecrease(Records):
  id = AutoField()
  product_id = BigIntegerField()
  variant_id = BigIntegerField()
  corn = FloatField()
  medium = FloatField()
  date_added = DateTimeField()
  # :End:
  """
  [
    MenuItem("Vendor `%s` Has Decreased %s;%s From %s;%s"%(i.date_added, (Get(Product,id=i.id).aliexpressvendor or Get(Product,id=i.id).amazonvendor), i.product_id, i.variant_id, i.left, i.right,  ), callback=lambda _=None:[]) for i in All(PriceDecrease) if Filter(Product,id=i.product_id)
  ]"""
  """ """
class PriceIncrease(Records):
  id = AutoField()
  product_id = BigIntegerField()
  variant_id = BigIntegerField()
  corn = FloatField()
  medium = FloatField()
  date_added = DateTimeField()
  approved = IntegerField()
  # :End:
  """
  [
    MenuItem("Vendor `%s` Has Increased %s;%s From %s;%s"%(i.date_added, (Get(Product,id=i.id).aliexpressvendor or Get(Product,id=i.id).amazonvendor), i.product_id, i.variant_id, i.left, i.right,  ), callback=lambda _=None:[]) for i in All(PriceIncrease) if Filter(Product,id=i.product_id)
  ]"""
  """ """
class ProductChange(Records):
  id = AutoField()
  handle = CharField()
  shop = CharField()
  changed = IntegerField()
  x = CharField()
  # :End:
  def add(self):
    url = get_first_chrome_url()
    x = pyperclip.paste().split("productchange: |")[1][:-1]
    pyperclip.copy("\n")
    shop = Get(Shop,Domain_Name=findall(url,1,"//(.*?)/")).shop_abbreviation
    handle = url.split("/products/")[1].split("?")[0]
    if len(Filter(ProductChange,handle=handle,shop=shop,changed=0,x=x)) == 0:
      Save(ProductChange,url=url,handle=handle,shop=shop,changed=0,x=x)
      OSA().notify("Added ProductChange, %s"%(x))
    else:
      OSA().notify("ProductChange exists")
  def run(self):
    x = self.x
    handle = self.handle
    shop = Shop()(self.shop)
    product = sudby(lambda i:i.handle==handle,shop.pfind(handle=handle))[0]
    cmds = x.split("|")
    variants_to_delete = []
    for cmd in cmds:
      if "variantdelete" in cmd:
        x = int(cmd.split(": ")[1].split("&")[0])
        y = lmap(lambda i:int(i)-1,cmd.split(": ")[1].split("&")[1].split(","))
        z = lmap(lambda i:i[1],sudby(lambda idx,i:idx in y,list(enum(oset(sud("option%s"%(x),product.variants))))))
        to_delete = sudby(lambda i:getattr(i,"option%s"%(x)) in z,product.variants)
        variants_to_delete.extend(to_delete)
      if "copyadminurl" in cmd:
        x = shop.Domain_Name + "/admin/products/" + str(product.id)
        pyperclip.copy(x)
      if "titlerename" in cmd:
        x = cmd.split(": ")[1]
        product.title = x
        product.handle = get_handle_from_title(x)
    assert apilimitcall(product.save) == True
    initial_variant_len = len(product.variants)
    pool(lambda i:apilimitcall(i.destroy),variants_to_delete).result()
    product = shop.pfind(id_=product.id)

    assert len(product.variants) == initial_variant_len - len(variants_to_delete)
    print("%s variants deleted"%(len(variants_to_delete)))
    deleted_option = False
    options_to_remove = []
    for option_number in lrange(1,4):
      if len(listminus(oset(sud("option%s"%(option_number),product.variants)),[None,"Default Title"])) == 1:
        lmap(lambda i:setattr(i,"option%s"%(option_number),None),product.variants)
        options_to_remove.append(product.options[(option_number-1)])
        deleted_option = True
    product.options = listminus(product.options,options_to_remove)
    assert apilimitcall(product.save) == True

    Update(self,changed=True)
    # pool(lambda:productsFeed(shop,1))
    # pool(lambda:GhostProduct().productgost(product.id))
class ProductTalk(Records):
  id = AutoField()
  customer = CharField()
  order_id = BigIntegerField()

  shop = CharField()

  binarydata = BinaryField(max_length=4294967295)
  thread_id = CharField(max_length="0032",unique=True)

  lineitem_id = BigIntegerField(unique=True)
  product_id = BigIntegerField()
  url = CharField()
  supplier = CharField()

  feeling = IntegerField()
  # :End:
  def delete(self,title):
    try:
      x = Filter(Product,title=title)
      ids = sud("id",x)
      lmap(Del,[i for i in All(ProductTalk) if i.product_id in ids])
    except Exception as e:
      print(e)
  def create(self,customer,order_id,shop,binarydata,thread_id,lineitem_id,product_id,url,supplier,feeling):
    Save(ProductTalk,customer=customer,order_id=order_id,shop=shop,binarydata=binarydata,thread_id=thread_id,lineitem_id=lineitem_id,product_id=product_id,url=url,supplier=supplier,feeling=feeling)
    OSA.notify("Added Product Talk")
  def create_2(self):
    shop = OSA.log("shop?")
    product_title = title = OSA.log("product title?")
    order_number = int(OSA.log("Order number?"))
    order = Get(Order,shop=shop,order_number=order_number)
    try:
      Save(ProductTalk,order_id=order.id,customer=order.email,shop=shop,lineitem_id=[i for i in order.line_items if Get(Product,shop=shop,title=title).id == i["product_id"]][0]["id"],
            product_id = Get(Product,shop=shop,title=title).id,url=Get(Product,shop=shop,title=title).ali_url,supplier=Get(Product,shop=shop,title=title).aliexpressvendor,feeling=int(eval(OSA.log("Positive or negative?",buttons=["False","True"],tp=False))))
    except Exception as e:
      print(e)
class ProductsFeed(Records):
  id = AutoField()
  last_check = DateTimeField()
  shop = CharField()
  # :End:
  def ProductsFeed(self,shop):
    productsFeed(shop)
    Save(ProductsFeed,last_check=datetime.now(),shop=Muta()().store_abbre)
  def ProductsFeedAll(self):
    lmap(lambda i:productsFeed(i), key("shop_abbreviation",All(Shop)))
    Save(ProductsFeed,last_check=datetime.now())       
class Proxy(Records):
  id = AutoField()
  time_added = FloatField()
  proxy_ip = CharField()
  # :End:
  @staticmethod
  def prq(x):
    proxies = Proxy().get_proxies()
    for idx, i in enum(proxies):
      r = tryreturn(lambda: requests.get(x, proxies={"https":i.proxy_ip}, timeout=2))
      if r == 0: blueprint(idx+1); continue
      blueprint(idx+1, r.status_code)
      if r.status_code == 200: return r
  def get_proxies(self):
    #magentaprint("adding proxies")
    latest_proxy_request_gap = 1
    try:latest_proxy_request_gap = (Date().myDatetimenow()-keysort("time_added",Proxy.objects.all())[0].time_added)
    except:pass
    #print(latest_proxy_request_gap)
    if latest_proxy_request_gap > 0.02083:
      [mysql_delete(i) for i in All(Proxy)]
      [Proxy(time_added=Date().myDatetimenow(round_count=10),proxy_ip=i).save() for i in get_us_ip_list()]
      #print("[added proxies][%s]"%latest_proxy_request_gap)
    else:
      #print("[not added proxies][%s]"%latest_proxy_request_gap)
      0
    #lastest_proxies = keysort("time_added",Proxy.objects.all())
    lastest_proxies = Proxy.objects.all()
    return lastest_proxies
  prox = lambda self: self.get_random_proxy()
  def get_random_proxy(self):
    proxies = self.get_proxies()
    random_proxy = random.sample(proxies,1)[0]
    proxy = {"https":random_proxy.proxy_ip}
    return proxy
class Pyperclip(Records):
  id = AutoField()
  pyperclip = JSONField()
  # :End:
class Question(Records):
  id = AutoField()
  url = CharField()
  question = CharField(unique=True)
  answered = IntegerField()
  # :End:
  def a():
    urls = OSA.log("urls (delimited by ', ')?: ").split(", "); lmap(lambda i:[OSA("Google Chrome 70", ["ctrl_l",i,"return","ctrl_t"])],urls);lmap(lambda i: OSA.log("url is %s. send your message, press OK when you've sent the message"%(i),tp=False),urls);[gl(OSA.log("q?: "),"x"),lmap(lambda i: Save(Question,url=i,question=gx("x")),urls)]
  def b():
    gl(OSA.log(do=oset(key("question",All(Question)))),"x");urls=key("url",Filter(Question,question=gx("x")));lmap(lambda i: OSA("Google Chrome 70",["ctrl_l",i,"return","ctrl_t"]),urls)
    for i in urls:
      got_answer = OSA.log("Got Answer (url: %s)?"%(i),tp=False,buttons=["Yes","No"])
      if got_answer == "No":
        pass
      if got_answer == "Yes":
        Update(Get(Question,url=i,question=gx("x")),answered = True)
class RandomGeneratedWords(Records):
  id = AutoField()
  x = CharField()
  data = JSONField()
  # :End:
  def add(self,x):
    Save(RandomGeneratedWords,x=x)
  def addlast(self,x):
    Update(All(RandomGeneratedWords).n(-1),data=or_list(lambda:dictupdate(All(RandomGeneratedWords).n(-1),stuff=x),lambda:dictupdate({},stuff=x)))
  def reset(self):
    Slime().speak("resetting all")
    lmap(Del,All(RandomGeneratedWords))
class Recompilate(Records):
  id = AutoField()
  w = CharField(unique=True, max_length="0256")
  x = CharField(unique=True, max_length="0256")
  # :End:
  recompilate = lambda self,w,L=16: Save(Recompilate,w=w,x=[[setattr(g,"recompilate_Z3421",generate_one_alphanumeric_string(L)),None if g.recompilate_Z3421 in key("x",All(Recompilate)) else g.recompilate_Z3421][1] for i in range(125)][0]) if not Filter(Recompilate,w=w) else Get(Recompilate,w=w)
class Request(Records):
  id = AutoField()
  cookies_label = CharField()
  time_added = DateTimeField()
  w = CharField()
  x = BooleanField(default=False)
  notInText = CharField()
  notInUrl = CharField()
  y = JSONField() 
  # :End:
  help = lambda self: [redprint("cookies label, time added (time requested), w = url, x = is it requested, y = request text")]
  def add(self,url):
    return Update(Request(),w=url,x=False)
  def X(self):
    poll(self.O, lambda:Request.objects.filter(x=False), step=8, poll_forever=True)
  def O(self):
    [My_Requests().request(i.w,process_count=10,timeout=10,notInUrl="ø",notInText="ø",proxy=True) for i in Filter(Request,x=False)]
  globals()["session_headers"] = {"User-Agent": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.1242123123.com/bot.html)", "authority": "www.aliexpress.com", "upgrade-insecure-requests": "1",}
class Reposit(Records):
  id = AutoField()
  state_a = JSONField()
  action_x = CharField(unique = True)
  # :End:
  @staticmethod
  def reposit():
    [OSA.notify(a.action_x) for a in All(Reposit)]
    OSA.notify("reposit, 60 blind seconds")
    [[time.sleep(1),OSA.notify("{}".format(i))] for i in tcer(range(61))]#@ruled as "if i skip 13 i will forget how to count"
    time.sleep(1)
    OSA.notify("..")
class SavedTime(Records):
  id = AutoField()
  seconds = IntegerField()
  date = DateTimeField()
  # :End:
class ScienceVessel(Records):
  id = AutoField()
  shop = CharField()
  niche = CharField()
  is_free_plus_ship = IntegerField()
  page = CharField()
  x = CharField(max_length="4196")
  y = BinaryField(max_length=4294967295)
  url = CharField(max_length="4196")
  warped = IntegerField()
  created_at = DateTimeField()
  caption = JSONField()
  append_pictures = JSONField()
  # :End:
  def add(self):
    if not Filter(ScienceVessel,x=pyperclip.paste(),url=get_first_chrome_url(),warped=0):
      x = Save(ScienceVessel,shop = Muta()().store_abbre,niche=Muta()().niche,is_free_plus_ship=Muta()().is_free_plus_ship,page=Muta()().is_free_plus_ship,
        x=pyperclip.paste().strip(),y=ifelseget(lambda:[rm(homepath("~/Desktop/.DS_Store")),len(os.listdir(homepath("~/Desktop")))][1]==1,lambda:[open(pathjoin(homepath("~/Desktop"),os.listdir(homepath("~/Desktop"))[0]),"rb").read(),os.remove(pathjoin(homepath("~/Desktop"),os.listdir(homepath("~/Desktop"))[0]))][0],lambda:None),url=get_first_chrome_url(),warped=0,created_at=Date().Now())
      if (g.Z.endswith("||+") or g.Z.endswith("||")) and g.Z.count("|") == 8:
        Update(x,caption=tryreturn(lambda:OSA.display_dialog(q="Caption? [note: enter in ! if you don't want to create an adset and only want to add the product. Press Command+Shift+Space to show a list of emojis.]", default_answer=str(Muta()().default_caption).format(Muta()().my_description)),ep=1))
      pyperclip.copy("\n")
      OSA.notify("Added ScienceVessel")
    else:
      OSA.notify("ScienceVessel exists")
  def warp(self):
    openchromeurl(self.url)
    setattr(g,"Z",self.x.strip())
    pyperclip.copy("\n")
    x=tr(lambda:Product().add_product(shop=self.shop,niche=self.niche,is_free_plus_ship=self.is_free_plus_ship,page=self.page,y=self.y,caption=self.caption),ep=1)
    ifdo(lambda:x,lambda: Update(self, warped=1))
    """
    Q = Filter(ScienceVessel,warped=0)
    pool(lambda q: setattr(q,"icon",Images().download(q.image_url)), Q).result()
    [MenuItem("{}|{}...{}|{}|{}|{}|{}|{}|{}|{}".format(
      q.title, q.image_idx, q.image_idx, q.vi_dx, q.imgrems_dx, q.intentions, 
      q.tiles, q.size_chart, q.my_description[:20], q.caption[:20]), icon = \
                                        q.icon,) for q in Q]
    """
class SecondaryAction(Records):
  id = AutoField()
  refund_id = BigIntegerField(unique=True)
  order_id = BigIntegerField()
  product_id = BigIntegerField()
  lineitem_id = BigIntegerField()
  price = FloatField()
  quantity = IntegerField()
  date = DateField()
  # :End:
  # HeroOrders?
  # ChillOrders? ;]
  def take_from_order(self,x):
    for i in x["refunds"]:
      for j in i["refund_line_items"]:
        r = SecondaryAction()
        r.refund_id = i["id"]
        r.order_id = x["id"]
        r.lineitem_id = j["line_item_id"]
        r.product_id = j["line_item"]["product_id"]
        r.quantity = j["line_item"]["quantity"]
        r.price = j["line_item"]["price"]
        r.date = Date(i["processed_at"][:10])()
        tryprocess(lambda:r.save())
class SelfHelpTip(Records):
  id = AutoField()
  selfhelptip = CharField()
  # :End:
class Settlement(Records):
  id = AutoField()
  shop = CharField()
  date = DateField(unique=True)
  products_added = IntegerField()
  adsets_added = IntegerField()
  
  sales = FloatField()
  ads = FloatField()
  cogs = FloatField()
  refunds = FloatField()
  chargebacks = JSONField()
  
  rake = FloatField()
  settlement = FloatField()
  # :End:
  def __call__(self,date=None,**kwargs):
    if kwargs: return Update(self,**kwargs)
    lmap(lambda i: lineitemsFeed(Shop()(i),date_range=60), key("shop_abbreviation",All(Shop)))
    lmap(lambda i: productsFeed(Shop()(i)), key("shop_abbreviation",All(Shop)))
    x = or_list(tryreturn(lambda:Get(Settlement,date=date)),Settlement(date = date))
    x.shop = Muta()().store_abbre
    x.ads = sum(key("facebookadaccountspend",Facebookadaccountspend().facebookadaccountspend_source(date=date)))
    x.sales = sum(key("total_price", Filter(Order,date__range = [(Date(date)).datestr, (Date(date)).datestr ], shop=Muta()().store_abbre)))
    x.cogs = sum(sud("ali_price",Filter(Lineitem, date__range=[(Date(date)).datestr, (Date(date)).datestr], shop=Muta()().store_abbre))) + \
            sum(key("price",keyby(lambda i:Get(Lineitem,order_id=i.order_id).date==date,Filter(ReOrder, shop=Muta()().store_abbre)))) + \
            sum(key("ali_price",keyby(lambda i:Get(Order,id=i.order_id).created_at.date()==date,Filter(Keep_Exchange,is_exchange=True, shop=Muta()().store_abbre))))
    #x.refunds = sum(key("price",Filter(SecondaryAction,date__range=[(Date(date)).datestr, (Date(date)).datestr])))#|Add Up Refunds
    x.refunds = sum(key("refunded_amount", Filter(Order,date__range=[(Date(date)).datestr, (Date(date)).datestr], shop=Muta()().store_abbre)))
    #x.chargebacks = 0#|By The Order's Date, Add Up The Fees And Order Amount (which will only show in the TertiaryActions)
    x.chargebacks = sum(flatten(keymulti(["case_close_ending_amount","case_close_dispute_fee"],keyby(lambda i:Get(Order,id=i.order_id).created_at.date()==date,Filter(TertiaryAction,is_complete=1,shop=Muta()().store_abbre))),1))
    x.products_added = len(Filter(Product,created_at__range=[(Date(date)).datestr, (Date(date)).datestr], shop=Muta()().store_abbre))
    x.adsets_added = len(Filter(Adset, created_time__range=[(Date(date)).datestr, (Date(date)).datestr], shop_abbreviation=Muta()().store_abbre))
    x.rake = (float(x.sales)-(float(x.ads)+float(x.cogs)+(float(x.refunds)+float(x.chargebacks))))*(0.35)
    tryprocess(lambda:x.save())
class Shop(Records):
  id = AutoField()
  shop_abbreviation = CharField(max_length="0064")
  product_page_general_information = JSONField()
  product_use_guidelines_1 = JSONField()
  location_id = BigIntegerField()

  Has_Gmail_Account = IntegerField()
  Has_Shopify_Store = IntegerField()
  Has_Namecheap_Account = IntegerField()
  Has_GSuite_Account = IntegerField()
  Has_Facebook_Account = IntegerField()
  Has_Facebook_Business_Manager_Account = IntegerField()
  Has_Facebook_Ad_Account_ID = IntegerField()
  Has_Facebook_Pixel = IntegerField()
  Has_Facebook_Developer_Account = IntegerField()
  Has_AliExpress_Account = IntegerField()
  Has_DBC_Account = IntegerField()

  Gmail_Email_Address = CharField(max_length="0064")
  Gmail_Password = CharField(max_length="0064")
  Number_To_Receive_Videocalls_And_Messages = IntegerField()

  Business_Name = CharField(max_length="0064")
  Employee_Count = BigIntegerField()
  Country_Of_Business = CharField() # United States DEFAULT! so maybe not even ask!
  First_Name = CharField(max_length="0032")
  Last_Name = CharField(max_length="0032")
  Street_Address = CharField(max_length="0128")
  Street_Address_Line_2 = CharField(max_length="0128")
  State = CharField(max_length="0032")
  City = CharField(max_length="0064")
  ZIP_Code = CharField(max_length="0032")
  Business_Phone_Number = BigIntegerField()
  Business_Email_Address = CharField(max_length="0064")
  GSuite_Password = CharField(max_length="0064")
  Product_Return_Address = CharField()
  
  Shopify_Email = CharField(max_length="0064")
  Shopify_Password = CharField(max_length="0032")
  Administrative_Url = CharField(max_length="0128") # STILL REQ IF Has_Shopify_Store
  Homepage_Title = CharField(max_length="0128")
  Homepage_Meta_Description = CharField()
  Metric_System = CharField(max_length="0064") # (but u always on Metric) ["Metric system", "Imperial system"]
  Facebook_Pixel_ID = BigIntegerField() # NOT STILL REQ IF Has_Shopify_Store. STILL_REQ if... Has_Facebook_Pixel
  Checkout_With_Account  = CharField(max_length="0032") # ["disabled", "optional", "required"]
  Checkout_With_Identifier = CharField(max_length="0032") # ["phone_or_email", "email"]
  Receive_Shipping_Updates  = IntegerField() # Customers can choose to add a phone number or email to receive shipping updates after they complete their order
  Checkout_With_Name  = CharField(max_length="0032") # ["require_last_only", "require_first_and_last"]
  Checkout_With_Company = CharField(max_length="0032") # ["hidden", "optional", "required"]
  Checkout_With_Address_Line_2 = CharField(max_length="0032") # ["hidden", "optional", "required"]
  Checkout_With_Phone_Number = CharField(max_length="0032") # ["hidden", "optional", "required"]
  Checkout_With_Shipping_As_Billing = IntegerField()
  Checkout_Enable_Address_Autocomplete = IntegerField()
  Show_Email_Signup_Option_At_Checkout = IntegerField()
  Preselect_Email_Signup_Option_At_Checkout = IntegerField()
  Use_Free_Plus_Shipping = IntegerField() # STILL REQ IF Has_Shopify_Store
  Shopify_App_API_Key = CharField(max_length="0064")
  Shopify_App_API_Password = CharField(max_length="0064")
  Shopify_App_API_Secret = CharField(max_length="0064")
  Shopify_App_API_Url = CharField(max_length="0256")
  Fields_To_Update = JSONField()
  Pages = IntegerField()
  Default_Product_Description = JSONField()

  Domain_Name_To_Transfer = IntegerField()
  Domain_Name = CharField(max_length="0064")
  Renew_Domain_Every_Year = IntegerField()
  
  Facebook_Email = CharField(max_length="0064")
  Facebook_Password = CharField(max_length="0032")
  Date_Of_Birth = BigIntegerField()
  Gender = CharField(max_length="0032") # ["female", "male"]
  Facebook_Business_Account_Business_Name = CharField(max_length="0128")
  Facebook_Business_Manager_ID = BigIntegerField()
  Facebook_Business_Ad_Account_Name = CharField(max_length="0064")
  Facebook_Business_Ad_Account_Time_Zone = CharField(max_length="0064")
  Facebook_Business_Ad_Account_ID = BigIntegerField()
  Facebook_Business_App_ID = BigIntegerField()
  Facebook_Business_App_Secret = CharField(max_length="0128")
  Facebook_Business_App_Token = CharField()
  
  AliExpress_Email = CharField(max_length="0064")
  AliExpress_Password = CharField(max_length="0032")
  AliExpress_Most_Recent_Date = DateTimeField()
  AliExpress_Account_Order_Scan_Earliest_Date = DateField()
  AliPay_Pin = CharField(max_length="0016")
  AliPay_Security_Question_1 = JSONField()
  AliPay_Security_Question_2 = JSONField()
  AliPay_Security_Question_3 = JSONField()

  AliExpress_Card_Transaction_Tags = JSONField()
  Adspend_Card_Transaction_Tags = JSONField()
  Payment_Gateway_Payout_Card_Transaction_Tags = JSONField()
  Lineitem_Most_Recent_Date = DateTimeField()

  Allow_Additional_Shipping_Methods = IntegerField()
  Send_Tracking_Number = IntegerField()

  DBC_Username = CharField()
  DBC_Password = CharField()

  GSuite_Financial_Card_Information = JSONField() # {"Financial_Card_Number": "Card Number", "Financial_Card_Expiration_Date": "Expiration Date", "Financial_Card_CVV": "CVV", "Financial_Card_Billing_First_Name": "First Name", "Financial_Card_Billing_Last_Name": "Last Name", "Financial_Card_Billing_Street_Address": "Street Address", "Financial_Card_Billing_Street_Address_Line_2": "", "Financial_Card_Billing_Country": "Country", "Financial_Card_Billing_State": "State", "Financial_Card_Billing_City": "City", "Financial_Card_Billing_ZIP_Code": "ZIP Code"}
  Shopify_Financial_Card_Information = JSONField() # {"Financial_Card_Number": "Card Number", "Financial_Card_Expiration_Date": "Expiration Date", "Financial_Card_CVV": "CVV", "Financial_Card_Billing_First_Name": "First Name", "Financial_Card_Billing_Last_Name": "Last Name", "Financial_Card_Billing_Street_Address": "Street Address", "Financial_Card_Billing_Street_Address_Line_2": "", "Financial_Card_Billing_Country": "Country", "Financial_Card_Billing_State": "State", "Financial_Card_Billing_City": "City", "Financial_Card_Billing_ZIP_Code": "ZIP Code"}
  Facebook_Financial_Card_Information = JSONField() # {"Financial_Card_Number": "Card Number", "Financial_Card_Expiration_Date": "Expiration Date", "Financial_Card_CVV": "CVV", "Financial_Card_Billing_First_Name": "First Name", "Financial_Card_Billing_Last_Name": "Last Name", "Financial_Card_Billing_Street_Address": "Street Address", "Financial_Card_Billing_Street_Address_Line_2": "", "Financial_Card_Billing_Country": "Country", "Financial_Card_Billing_State": "State", "Financial_Card_Billing_City": "City", "Financial_Card_Billing_ZIP_Code": "ZIP Code"}  
  AliExpress_Financial_Card_Information = JSONField() # {"Financial_Card_Number": "Card Number", "Financial_Card_Expiration_Date": "Expiration Date", "Financial_Card_CVV": "CVV", "Financial_Card_Billing_First_Name": "First Name", "Financial_Card_Billing_Last_Name": "Last Name", "Financial_Card_Billing_Street_Address": "Street Address", "Financial_Card_Billing_Street_Address_Line_2": "", "Financial_Card_Billing_Country": "Country", "Financial_Card_Billing_State": "State", "Financial_Card_Billing_City": "City", "Financial_Card_Billing_ZIP_Code": "ZIP Code"}

  Price_Change_Round_Type = CharField(max_length="0032")
  Price_Change_Ending_Amount = CharField(max_length="0008")
  Active = IntegerField()
  # :End:
  objects = BaseModelManager()
  def Migrate(self):
    1
  def Exit(self):
    [ss.quit(), globals().__delitem__("ss")]
  def GET_GMAIL_ACCOUNT(self):
    # Start
    globals()["ss"] = Browser()("ch")
    # Start
    ss.o().get("https://www.google.com",2)
    ss.ffsts("a", "Sign in").send_keys(ss.Keys.ENTER).urlwait("/identifier")
    ss.ffss("div", "tabindex", "0").send_keys(ss.Keys.ENTER).urlwait("/webcreateaccount")
    ss.bat().fids("firstName").fids("lastName").fns("Username")
    ss.bat(self.First_Name, self.Last_Name, self.Gmail_Email_Address)
    (ss.bat().fns("Passwd").fns("ConfirmPasswd").bat(self.Gmail_Password, self.Gmail_Password))if(self.Gmail_Password)else(OSA.display_dialog("Please enter the password in the password input box and in the confirm password box and then click OK in this dialog prompt.",text_prompt=False))
    ss.nexturlwait().fids("accountDetailsNext").send_keys(ss.Keys.ENTER).nexturlwaitjoin() # / urlwait
    if("/webgradsidvphone" in ss.current_url):
      ss.imko()
      #ss.bat().fids("phoneNumberId").ffsts("div", "Next")
      #ss.bat(self.Business_Phone_Number, ss.Keys.ENTER)# .atomicdialog("Phone number used too many times.", lambda: ss.ffsts("div", "This phone number has been used too many times.") != [])
      ss.jtns("input",self.Business_Phone_Number,{"type":"tel","id":"phoneNumberId"}).sp(2)
      ss.jtns("span","click",{"text":"Next"})
      ss.urlwait("/webgradsidvverify").imko()
      OSA.display_dialog("Please enter verification number in. Then click OK in this dialog.", text_prompt = False)
      ss.ffsts("div", "Verify").send_keys(ss.Keys.ENTER)
      ss.urlwait("/webpersonaldetails").imko()
      ss.bat().fids("month").fids("day").fids("year").fids("gender")
      ss.bat(date_of_birth_drawer(self.Date_Of_Birth)[0], date_of_birth_drawer(self.Date_Of_Birth)[1], date_of_birth_drawer(self.Date_Of_Birth)[2], self.Gender.title())
      ss.nexturlwait()
      ss.jtns("span","click",{"text":"Next"})
      ss.nexturlwaitjoin()
      # to do web phone usage
      ss.urlwait("/webphoneusage").imko().whippin()
      if self.Number_To_Receive_Videocalls_And_Messages == True:
        ss.ffsts("div", "Yes, I’m in").send_keys(ss.Keys.ENTER)
      else:
        ss.ffsts("button", "Skip").send_keys(ss.Keys.ENTER)

      ss.urlwait("/webtermsofservice").imko()
      ss.ffss("div", "aria-label", "Scroll down").send_keys(ss.Keys.ENTER).imko(1).sp(4)
      ss.ffss("div", "aria-label", "Scroll down").send_keys(ss.Keys.ENTER).imko(2).sp(4)
      # ss.fids("termsofserviceNext").send_keys(ss.Keys.ENTER) # UNABLE TO GET THROUGH, (to test)
      ss.jtns("span","click",{"text":"I agree"})
      ss.get("https://myaccount.google.com/").imko().urlwait("myaccount.google.com")
    else:
      # insert case for no phone number required... how could i possibly simulate this? Below: A GUESS.
      # it's the page right after the phone verification.
      ss.urlwait("/webtermsofservice").imko()
      ss.ffss("div", "aria-label", "Scroll down").send_keys(ss.Keys.ENTER).imko(1).sp(4)
      ss.ffss("div", "aria-label", "Scroll down").send_keys(ss.Keys.ENTER).imko(2).sp(4)
      # ss.fids("termsofserviceNext").send_keys(ss.Keys.ENTER) # UNABLE TO GET THROUGH, (to test)
      ss.jtns("span","click",{"text":"I agree"})
      ss.get("https://myaccount.google.com/").imko().urlwait("myaccount.google.com")
    Update(self, Has_Gmail_Account = True)
    # End
    self.Exit()
    # End
  def GET_SHOPIFY_STORE(self):
    globals()["ss"] = Browser()("sele",65)
    ss.o().get("https://www.shopify.com/signup")
    ss.bat().fn("signup[email]").bat(self.Shopify_Email)
    (ss.bat().fn("signup[password]").bat(self.Shopify_Password))if(self.Shopify_Password)else(OSA.display_dialog("Please enter in your Shopify Password and then click OK in this dialog",text_prompt=False))
    ss.bat().fn("signup[shop_name]").ffsts("button", "Create your store")
    ss.bat(self.Administrative_Url, "Click").sp(10)
    ss.urlwait("/admin/account_setup").whippin()
    # :Whippin:
    # zoom 50
    ss.ffst("option", "I’m selling, just not online").click().sp(10)
    keyequals("text", "When would you like to launch your store?\nPlease choose one…\nI’m just playing around with Shopify\nI’m learning, and need more time\nI’ll be ready in a few weeks\nI’m ready to go", ss.fcns("marketing-input-wrapper"))[0].click()
    ss.ffst("option", "I’ll be ready in a few weeks").click()
    ss.ffst("option", "Online only").click()
    ss.ffst("option", "$0 USD (I'm just getting started)").click().sp(2)
    ss.ffsts("button", "Next").click().sp(10)

    # [VARIATION] ss.imko("https://<replaced>.myshopify.com/admin/account_setup<replaced>", 2)

    ss.bat().fn("account_setup[first_name]").fn("account_setup[last_name]").fn("account_setup[address1]").fn("account_setup[address2]").fn("account_setup[city]").fn("account_setup[zip]").ffst("option", self.Country_Of_Business).fn("account_setup[phone]").ffsts("button", "Enter my store")
    ss.bat(self.First_Name, self.Last_Name, self.Street_Address, self.Street_Address_Line_2, self.City, self.ZIP_Code, "Click", self.Business_Phone_Number, "Click")
    ss.ffs("input","placeholder","Search").sp(5)

    Update(self, Administrative_Url = re.findall(r".*/admin",ss.current_url)[0])
    


    time.sleep(4)
    Default_All_Fields = ["Pages",
      "Homepage_Title",
      "Homepage_Meta_Description",
      "Metric_System",
      "Checkout_With_Account",
      "Checkout_With_Identifier",
      "Receive_Shipping_Updates",
      "Checkout_With_Name",
      "Checkout_With_Company",
      "Checkout_With_Address_Line_2",
      "Checkout_With_Phone_Number",
      "Checkout_With_Shipping_As_Billing",
      "Checkout_Enable_Address_Autocomplete",
      "Show_Email_Signup_Option_At_Checkout",
      "Preselect_Email_Signup_Option_At_Checkout",
      "Use_Free_Plus_Shipping",
      "Domain_Name",
      # "Facebook_Pixel_ID",
      ] # self.Assert_Domain_Name evokes self.Domain_Name_To_Transfer
    self.Migrate_Shopify_Changes(possible_fields = Default_All_Fields)
    self.GET_SHOPIFY_APP()
    Update(self, Has_Shopify_Store = True)
    # End
    self.Exit()
    # End
  def Migrate_Shopify_Changes(self, possible_fields, quit=False): # quit True if you only need to Migrate_Shopify_Changes
    if globals().get("ss", None) == None: self.Login_Shopify_Store()
    
    # :Initiate Readability:
    # Pages
    if "Pages" in possible_fields:
      pages = OrderedDict([("Refund Policy", 'Returns\nOur policy lasts 30 days. If 30 days have gone by since your purchase, unfortunately we can’t offer you a refund or exchange.\n\nTo be eligible for a return, your item must be unused and in the same condition that you received it. It must also be in the original packaging.\n\nSeveral types of goods are exempt from being returned. Perishable goods such as food, flowers, newspapers or magazines cannot be returned. We also do not accept products that are intimate or sanitary goods, hazardous materials, or flammable liquids or gases.\n\nAdditional non-returnable items:\nGift cards\nDownloadable software products\nSome health and personal care items\n\nTo complete your return, we require a receipt or proof of purchase.\n\nPlease do not send your purchase back to the manufacturer.\n\nThere are certain situations where only partial refunds are granted (if applicable)\nBook with obvious signs of use\nCD, DVD, VHS tape, software, video game, cassette tape, or vinyl record that has been opened\nAny item not in its original condition, is damaged or missing parts for reasons not due to our error\nAny item that is returned more than 30 days after delivery\n\nRefunds (if applicable)\nOnce your return is received and inspected, we will send you an email to notify you that we have received your returned item. We will also notify you of the approval or rejection of your refund.\nIf you are approved, then your refund will be processed, and a credit will automatically be applied to your credit card or original method of payment, within a certain amount of days.\n\nLate or missing refunds (if applicable)\nIf you haven’t received a refund yet, first check your bank account again.\nThen contact your credit card company, it may take some time before your refund is officially posted.\nNext contact your bank. There is often some processing time before a refund is posted.\nIf you’ve done all of this and you still have not received your refund yet, please contact us at __self.Business_Email_Address__.\n\nSale items (if applicable)\nOnly regular priced items may be refunded, unfortunately sale items cannot be refunded.\n\nExchanges (if applicable)\nWe only replace items if they are defective or damaged.  If you need to exchange it for the same item, send us an email at __self.Business_Email_Address__ and send your item to: __self.Product_Return_Address__.\n\nGifts\nIf the item was marked as a gift when purchased and shipped directly to you, you’ll receive a gift credit for the value of your return. Once the returned item is received, a gift certificate will be mailed to you.\n\nIf the item wasn’t marked as a gift when purchased, or the gift giver had the order shipped to themselves to give to you later, we will send a refund to the gift giver and he will find out about your return.\n\nShipping\nTo return your product, you should mail your product to: __self.Product_Return_Address__.\n\nYou will be responsible for paying for your own shipping costs for returning your item. Shipping costs are non-refundable. If you receive a refund, the cost of return shipping will be deducted from your refund.\n\nDepending on where you live, the time it may take for your exchanged product to reach you, may vary.\n\nIf you are shipping an item over $75, you should consider using a trackable shipping service or purchasing shipping insurance. We don’t guarantee that we will receive your returned item.'),
      ("Privacy Policy", 'This Privacy Policy describes how your personal information is collected, used, and shared when you visit or make a purchase from __self.Domain_Name__ (the “Site”).\n\nPERSONAL INFORMATION WE COLLECT\nWhen you visit the Site, we automatically collect certain information about your device, including information about your web browser, IP address, time zone, and some of the cookies that are installed on your device. Additionally, as you browse the Site, we collect information about the individual web pages or products that you view, what websites or search terms referred you to the Site, and information about how you interact with the Site. We refer to this automatically-collected information as “Device Information”.\n\nWe collect Device Information using the following technologies:\n- “Cookies” are data files that are placed on your device or computer and often include an anonymous unique identifier. For more information about cookies, and how to disable cookies, visit http://www.allaboutcookies.org.\n- “Log files” track actions occurring on the Site, and collect data including your IP address, browser type, Internet service provider, referring/exit pages, and date/time stamps.\n- “Web beacons”, “tags”, and “pixels” are electronic files used to record information about how you browse the Site.\n- [[INSERT DESCRIPTIONS OF OTHER TYPES OF TRACKING TECHNOLOGIES USED]]\n\nAdditionally when you make a purchase or attempt to make a purchase through the Site, we collect certain information from you, including your name, billing address, shipping address, payment information (including credit card numbers [[INSERT ANY OTHER PAYMENT TYPES ACCEPTED]]), email address, and phone number. We refer to this information as “Order Information”.\n\n[[INSERT ANY OTHER INFORMATION YOU COLLECT: OFFLINE DATA, PURCHASED MARKETING DATA/LISTS]]\n\nWhen we talk about “Personal Information” in this Privacy Policy, we are talking both about Device Information and Order Information.\n\nHOW DO WE USE YOUR PERSONAL INFORMATION?\nWe use the Order Information that we collect generally to fulfill any orders placed through the Site (including processing your payment information, arranging for shipping, and providing you with invoices and/or order confirmations). Additionally, we use this Order Information to:\n- Communicate with you;\n- Screen our orders for potential risk or fraud; and\n- When in line with the preferences you have shared with us, provide you with information or advertising relating to our products or services.\n- [[INSERT OTHER USES OF ORDER INFORMATION]]\n\nWe use the Device Information that we collect to help us screen for potential risk and fraud (in particular, your IP address), and more generally to improve and optimize our Site (for example, by generating analytics about how our customers browse and interact with the Site, and to assess the success of our marketing and advertising campaigns).\n\nSHARING YOUR PERSONAL INFORMATION\nWe share your Personal Information with third parties to help us use your Personal Information, as described above. For example, we use Shopify to power our online store--you can read more about how Shopify uses your Personal Information here: https://www.shopify.com/legal/privacy. We also use Google Analytics to help us understand how our customers use the Site -- you can read more about how Google uses your Personal Information here: https://www.google.com/intl/en/policies/privacy/. You can also opt-out of Google Analytics here: https://tools.google.com/dlpage/gaoptout.\n\nFinally, we may also share your Personal Information to comply with applicable laws and regulations, to respond to a subpoena, search warrant or other lawful request for information we receive, or to otherwise protect our rights.\n\nBEHAVIOURAL ADVERTISING\nAs described above, we use your Personal Information to provide you with targeted advertisements or marketing communications we believe may be of interest to you. For more information about how targeted advertising works, you can visit the Network Advertising Initiative’s (“NAI”) educational page at http://www.networkadvertising.org/understanding-online-advertising/how-does-it-work.\n\nYou can opt out of targeted advertising by using the links below:\n- Facebook: https://www.facebook.com/settings/?tab=ads\n- Google: https://www.google.com/settings/ads/anonymous\n- Bing: https://advertise.bingads.microsoft.com/en-us/resources/policies/personalized-ads\n- [[INCLUDE OPT-OUT LINKS FROM WHICHEVER SERVICES BEING USED]]\n\nAdditionally, you can opt out of some of these services by visiting the Digital Advertising Alliance’s opt-out portal at: http://optout.aboutads.info/.\n\nDO NOT TRACK\nPlease note that we do not alter our Site’s data collection and use practices when we see a Do Not Track signal from your browser.\n\nYOUR RIGHTS\nIf you are a European resident, you have the right to access personal information we hold about you and to ask that your personal information be corrected, updated, or deleted. If you would like to exercise this right, please contact us through the contact information below.\n\nAdditionally, if you are a European resident we note that we are processing your information in order to fulfill contracts we might have with you (for example if you make an order through the Site), or otherwise to pursue our legitimate business interests listed above. Additionally, please note that your information will be transferred outside of Europe, including to Canada and the __self.Country_Of_Business__.\n\nDATA RETENTION\nWhen you place an order through the Site, we will maintain your Order Information for our records unless and until you ask us to delete this information.\n\nCHANGES\nWe may update this privacy policy from time to time in order to reflect, for example, changes to our practices or for other operational, legal or regulatory reasons.\n\nCONTACT US\nFor more information about our privacy practices, if you have questions, or if you would like to make a complaint, please contact us by e‑mail at __self.Business_Email_Address__.'),
      ("Terms Of Service", "OVERVIEW\n\nThis website is operated by __self.Business_Name__. Throughout the site, the terms “we”, “us” and “our” refer to __self.Business_Name__. __self.Business_Name__ offers this website, including all information, tools and services available from this site to you, the user, conditioned upon your acceptance of all terms, conditions, policies and notices stated here.\n\nBy visiting our site and/ or purchasing something from us, you engage in our “Service” and agree to be bound by the following terms and conditions (“Terms of Service”, “Terms”), including those additional terms and conditions and policies referenced herein and/or available by hyperlink. These Terms of Service apply  to all users of the site, including without limitation users who are browsers, vendors, customers, merchants, and/ or contributors of content.\n\nPlease read these Terms of Service carefully before accessing or using our website. By accessing or using any part of the site, you agree to be bound by these Terms of Service. If you do not agree to all the terms and conditions of this agreement, then you may not access the website or use any services. If these Terms of Service are considered an offer, acceptance is expressly limited to these Terms of Service.\n\nAny new features or tools which are added to the current store shall also be subject to the Terms of Service. You can review the most current version of the Terms of Service at any time on this page. We reserve the right to update, change or replace any part of these Terms of Service by posting updates and/or changes to our website. It is your responsibility to check this page periodically for changes. Your continued use of or access to the website following the posting of any changes constitutes acceptance of those changes.\n\nOur store is hosted on Shopify Inc. They provide us with the online e-commerce platform that allows us to sell our products and services to you.\n\nSECTION 1 - ONLINE STORE TERMS\n\nBy agreeing to these Terms of Service, you represent that you are at least the age of majority in your state or province of residence, or that you are the age of majority in your state or province of residence and you have given us your consent to allow any of your minor dependents to use this site.\nYou may not use our products for any illegal or unauthorized purpose nor may you, in the use of the Service, violate any laws in your jurisdiction (including but not limited to copyright laws).\nYou must not transmit any worms or viruses or any code of a destructive nature.\nA breach or violation of any of the Terms will result in an immediate termination of your Services.\n\nSECTION 2 - GENERAL CONDITIONS\n\nWe reserve the right to refuse service to anyone for any reason at any time.\nYou understand that your content (not including credit card information), may be transferred unencrypted and involve (a) transmissions over various networks; and (b) changes to conform and adapt to technical requirements of connecting networks or devices. Credit card information is always encrypted during transfer over networks.\nYou agree not to reproduce, duplicate, copy, sell, resell or exploit any portion of the Service, use of the Service, or access to the Service or any contact on the website through which the service is provided, without express written permission by us.\nThe headings used in this agreement are included for convenience only and will not limit or otherwise affect these Terms.\n\nSECTION 3 - ACCURACY, COMPLETENESS AND TIMELINESS OF INFORMATION\n\nWe are not responsible if information made available on this site is not accurate, complete or current. The material on this site is provided for general information only and should not be relied upon or used as the sole basis for making decisions without consulting primary, more accurate, more complete or more timely sources of information. Any reliance on the material on this site is at your own risk.\nThis site may contain certain historical information. Historical information, necessarily, is not current and is provided for your reference only. We reserve the right to modify the contents of this site at any time, but we have no obligation to update any information on our site. You agree that it is your responsibility to monitor changes to our site.\n\nSECTION 4 - MODIFICATIONS TO THE SERVICE AND PRICES\n\nPrices for our products are subject to change without notice.\nWe reserve the right at any time to modify or discontinue the Service (or any part or content thereof) without notice at any time.\nWe shall not be liable to you or to any third-party for any modification, price change, suspension or discontinuance of the Service.\n\nSECTION 5 - PRODUCTS OR SERVICES (if applicable)\n\nCertain products or services may be available exclusively online through the website. These products or services may have limited quantities and are subject to return or exchange only according to our Return Policy.\nWe have made every effort to display as accurately as possible the colors and images of our products that appear at the store. We cannot guarantee that your computer monitor's display of any color will be accurate.\nWe reserve the right, but are not obligated, to limit the sales of our products or Services to any person, geographic region or jurisdiction. We may exercise this right on a case-by-case basis. We reserve the right to limit the quantities of any products or services that we offer. All descriptions of products or product pricing are subject to change at anytime without notice, at the sole discretion of us. We reserve the right to discontinue any product at any time. Any offer for any product or service made on this site is void where prohibited.\nWe do not warrant that the quality of any products, services, information, or other material purchased or obtained by you will meet your expectations, or that any errors in the Service will be corrected.\n\nSECTION 6 - ACCURACY OF BILLING AND ACCOUNT INFORMATION\n\nWe reserve the right to refuse any order you place with us. We may, in our sole discretion, limit or cancel quantities purchased per person, per household or per order. These restrictions may include orders placed by or under the same customer account, the same credit card, and/or orders that use the same billing and/or shipping address. In the event that we make a change to or cancel an order, we may attempt to notify you by contacting the e‑mail and/or billing address/phone number provided at the time the order was made. We reserve the right to limit or prohibit orders that, in our sole judgment, appear to be placed by dealers, resellers or distributors.\n\nYou agree to provide current, complete and accurate purchase and account information for all purchases made at our store. You agree to promptly update your account and other information, including your email address and credit card numbers and expiration dates, so that we can complete your transactions and contact you as needed.\n\nFor more detail, please review our Returns Policy.\n\nSECTION 7 - OPTIONAL TOOLS\n\nWe may provide you with access to third-party tools over which we neither monitor nor have any control nor input.\nYou acknowledge and agree that we provide access to such tools ”as is” and “as available” without any warranties, representations or conditions of any kind and without any endorsement. We shall have no liability whatsoever arising from or relating to your use of optional third-party tools.\nAny use by you of optional tools offered through the site is entirely at your own risk and discretion and you should ensure that you are familiar with and approve of the terms on which tools are provided by the relevant third-party provider(s).\nWe may also, in the future, offer new services and/or features through the website (including, the release of new tools and resources). Such new features and/or services shall also be subject to these Terms of Service.\n\nSECTION 8 - THIRD-PARTY LINKS\n\nCertain content, products and services available via our Service may include materials from third-parties.\nThird-party links on this site may direct you to third-party websites that are not affiliated with us. We are not responsible for examining or evaluating the content or accuracy and we do not warrant and will not have any liability or responsibility for any third-party materials or websites, or for any other materials, products, or services of third-parties.\nWe are not liable for any harm or damages related to the purchase or use of goods, services, resources, content, or any other transactions made in connection with any third-party websites. Please review carefully the third-party's policies and practices and make sure you understand them before you engage in any transaction. Complaints, claims, concerns, or questions regarding third-party products should be directed to the third-party.\n\nSECTION 9 - USER COMMENTS, FEEDBACK AND OTHER SUBMISSIONS\n\nIf, at our request, you send certain specific submissions (for example contest entries) or without a request from us you send creative ideas, suggestions, proposals, plans, or other materials, whether online, by email, by postal mail, or otherwise (collectively, 'comments'), you agree that we may, at any time, without restriction, edit, copy, publish, distribute, translate and otherwise use in any medium any comments that you forward to us. We are and shall be under no obligation (1) to maintain any comments in confidence; (2) to pay compensation for any comments; or (3) to respond to any comments.\nWe may, but have no obligation to, monitor, edit or remove content that we determine in our sole discretion are unlawful, offensive, threatening, libelous, defamatory, pornographic, obscene or otherwise objectionable or violates any party’s intellectual property or these Terms of Service.\nYou agree that your comments will not violate any right of any third-party, including copyright, trademark, privacy, personality or other personal or proprietary right. You further agree that your comments will not contain libelous or otherwise unlawful, abusive or obscene material, or contain any computer virus or other malware that could in any way affect the operation of the Service or any related website. You may not use a false e‑mail address, pretend to be someone other than yourself, or otherwise mislead us or third-parties as to the origin of any comments. You are solely responsible for any comments you make and their accuracy. We take no responsibility and assume no liability for any comments posted by you or any third-party.\n\nSECTION 10 - PERSONAL INFORMATION\n\nYour submission of personal information through the store is governed by our Privacy Policy. To view our Privacy Policy.\n\nSECTION 11 - ERRORS, INACCURACIES AND OMISSIONS\n\nOccasionally there may be information on our site or in the Service that contains typographical errors, inaccuracies or omissions that may relate to product descriptions, pricing, promotions, offers, product shipping charges, transit times and availability. We reserve the right to correct any errors, inaccuracies or omissions, and to change or update information or cancel orders if any information in the Service or on any related website is inaccurate at any time without prior notice (including after you have submitted your order).\nWe undertake no obligation to update, amend or clarify information in the Service or on any related website, including without limitation, pricing information, except as required by law. No specified update or refresh date applied in the Service or on any related website, should be taken to indicate that all information in the Service or on any related website has been modified or updated.\n\nSECTION 12 - PROHIBITED USES\n\nIn addition to other prohibitions as set forth in the Terms of Service, you are prohibited from using the site or its content: (a) for any unlawful purpose; (b) to solicit others to perform or participate in any unlawful acts; (c) to violate any international, federal, provincial or state regulations, rules, laws, or local ordinances; (d) to infringe upon or violate our intellectual property rights or the intellectual property rights of others; (e) to harass, abuse, insult, harm, defame, slander, disparage, intimidate, or discriminate based on gender, sexual orientation, religion, ethnicity, race, age, national origin, or disability; (f) to submit false or misleading information; (g) to upload or transmit viruses or any other type of malicious code that will or may be used in any way that will affect the functionality or operation of the Service or of any related website, other websites, or the Internet; (h) to collect or track the personal information of others; (i) to spam, phish, pharm, pretext, spider, crawl, or scrape; (j) for any obscene or immoral purpose; or (k) to interfere with or circumvent the security features of the Service or any related website, other websites, or the Internet. We reserve the right to terminate your use of the Service or any related website for violating any of the prohibited uses.\n\nSECTION 13 - DISCLAIMER OF WARRANTIES; LIMITATION OF LIABILITY\n\nWe do not guarantee, represent or warrant that your use of our service will be uninterrupted, timely, secure or error-free.\nWe do not warrant that the results that may be obtained from the use of the service will be accurate or reliable.\nYou agree that from time to time we may remove the service for indefinite periods of time or cancel the service at any time, without notice to you.\nYou expressly agree that your use of, or inability to use, the service is at your sole risk. The service and all products and services delivered to you through the service are (except as expressly stated by us) provided 'as is' and 'as available' for your use, without any representation, warranties or conditions of any kind, either express or implied, including all implied warranties or conditions of merchantability, merchantable quality, fitness for a particular purpose, durability, title, and non-infringement.\nIn no case shall __self.Business_Name__, our directors, officers, employees, affiliates, agents, contractors, interns, suppliers, service providers or licensors be liable for any injury, loss, claim, or any direct, indirect, incidental, punitive, special, or consequential damages of any kind, including, without limitation lost profits, lost revenue, lost savings, loss of data, replacement costs, or any similar damages, whether based in contract, tort (including negligence), strict liability or otherwise, arising from your use of any of the service or any products procured using the service, or for any other claim related in any way to your use of the service or any product, including, but not limited to, any errors or omissions in any content, or any loss or damage of any kind incurred as a result of the use of the service or any content (or product) posted, transmitted, or otherwise made available via the service, even if advised of their possibility. Because some states or jurisdictions do not allow the exclusion or the limitation of liability for consequential or incidental damages, in such states or jurisdictions, our liability shall be limited to the maximum extent permitted by law.\n\nSECTION 14 - INDEMNIFICATION\n\nYou agree to indemnify, defend and hold harmless __self.Business_Name__ and our parent, subsidiaries, affiliates, partners, officers, directors, agents, contractors, licensors, service providers, subcontractors, suppliers, interns and employees, harmless from any claim or demand, including reasonable attorneys’ fees, made by any third-party due to or arising out of your breach of these Terms of Service or the documents they incorporate by reference, or your violation of any law or the rights of a third-party.\n\nSECTION 15 - SEVERABILITY\n\nIn the event that any provision of these Terms of Service is determined to be unlawful, void or unenforceable, such provision shall nonetheless be enforceable to the fullest extent permitted by applicable law, and the unenforceable portion shall be deemed to be severed from these Terms of Service, such determination shall not affect the validity and enforceability of any other remaining provisions.\n\nSECTION 16 - TERMINATION\n\nThe obligations and liabilities of the parties incurred prior to the termination date shall survive the termination of this agreement for all purposes.\nThese Terms of Service are effective unless and until terminated by either you or us. You may terminate these Terms of Service at any time by notifying us that you no longer wish to use our Services, or when you cease using our site.\nIf in our sole judgment you fail, or we suspect that you have failed, to comply with any term or provision of these Terms of Service, we also may terminate this agreement at any time without notice and you will remain liable for all amounts due up to and including the date of termination; and/or accordingly may deny you access to our Services (or any part thereof).\n\nSECTION 17 - ENTIRE AGREEMENT\n\nThe failure of us to exercise or enforce any right or provision of these Terms of Service shall not constitute a waiver of such right or provision.\nThese Terms of Service and any policies or operating rules posted by us on this site or in respect to The Service constitutes the entire agreement and understanding between you and us and govern your use of the Service, superseding any prior or contemporaneous agreements, communications and proposals, whether oral or written, between you and us (including, but not limited to, any prior versions of the Terms of Service).\nAny ambiguities in the interpretation of these Terms of Service shall not be construed against the drafting party.\n\nSECTION 18 - GOVERNING LAW\n\nThese Terms of Service and any separate agreements whereby we provide you Services shall be governed by and construed in accordance with the laws of __self.Country_Of_Business__.\n\nSECTION 19 - CHANGES TO TERMS OF SERVICE\n\nYou can review the most current version of the Terms of Service at any time at this page.\nWe reserve the right, at our sole discretion, to update, change or replace any part of these Terms of Service by posting updates and changes to our website. It is your responsibility to check our website periodically for changes. Your continued use of or access to our website or the Service following the posting of any changes to these Terms of Service constitutes acceptance of those changes.\n\nSECTION 20 - CONTACT INFORMATION\n\nQuestions about the Terms of Service should be sent to us at __self.Business_Email_Address__."),
      ("DMCA Policy", 'This notice is for informational purposes only. It is not intended as, nor should it be construed as, legal advice. If you believe that your intellectual property rights have been infringed upon, or if a notice of infringement has been filed against you, you should immediately seek legal counsel.\n\nThis website, including all text, HTML, scripts, and images are copyrighted, owned, and/or licensed by __self.Business_Name__, partners and respective individual suppliers, All rights reserved.\n\nNO PART OF THIS WEBSITE MAY BE REPRODUCED OR TRANSMITTED IN ANY FORM OR BY ANY MEANS, MECHANICAL, ELECTRONIC, OR OTHERWISE, INCLUDING PHOTOCOPYING AND RECORDING, OR BY ANY INFORMATION STORAGE AND RETRIEVAL SYSTEM, OR TRANSMITTED BY E-MAIL, OR USED IN ANY OTHER FASHION WITHOUT THE EXPRESS PRIOR WRITTEN PERMISSION OF THE WEBSITE OWNER.\n\nThis, of course, excludes the downloading and temporary caching of this website on a personal computer for the explicit purpose of viewing this website, as well as any information clearly marked as reproducible. This copyright notice applies to everyone, including all visitors to this website.\n\nDMCA Provisions\n\nThe Digital Millennium Copyright Act of 1998, found at 17 U.S.C. Â§ 512 (“DMCA”), provides recourse for owners of copyrighted materials who believe that their rights under United States copyright law have been infringed upon on the Internet.\n\nUnder the DMCA, the bona fide owner of copyrighted materials who has a good faith belief that their copyright has been infringed may contact not only the person or entity infringing on their copyright, but may also contact the designated agent of an Internet service provider to report alleged infringements of their protected works, when such alleged infringements appear on pages contained within the system of the Internet service provider (“ISP”).\n\nThe owner of this website and the ISP are committed to complying with international trade law, international trade practices, all United States laws, including United States copyright law. Upon receipt of a properly filed complaint under the DMCA, the owner and/or the ISP of this website will block access to the allegedly infringing material. The website owner and/or the ISP will forward a copy of the notification of claimed copyright infringement to the alleged infringer. Anyone who believes in good faith that a notice of copyright infringement has wrongfully been filed against them, may submit a Counternotice to the website owner and/or the ISP.\n\nNotification Of Claimed Copyright Infringement\n\nPlease send DMCA notifications of claimed copyright infringement to __self.Business_Email_Address__\n\nTo file a notice of infringement with either the website owner or the ISP, you must provide a written communication that sets forth the items specified below. You will be liable for damages (including damages, costs, and attorneys’ fees) if you materially misrepresent that the website or a web page is infringing your copyright. Accordingly, if you are not sure whether certain material of yours is protected by copyright laws, we suggest that you first contact an attorney.\n\nTo expedite our ability to process your request, please use the following format (including section numbers):\n\n1. Identify in sufficient detail the copyrighted work that you believe has been infringed upon.\n2. Identify the material that you claim is infringing the copyrighted work listed in item #1 above. (You must include the URL(s) (the location(s) of the page(s) that contains the allegedly infringing material and also include a description of the specific content which you claim is infringing on your copyright.)\n3. Provide information reasonably sufficient to permit the website owner to contact you (e-mail address and a phone number are required at a minimum).\n4. Include the following statement: swear, under penalty of perjury, that the information in the notification is accurate and that I am the copyright owner or am authorized to act on behalf of the owner of an exclusive right that is allegedly infringed. I also affirm that as the copyright owner, I have a good faith belief that use of the material in the manner complained of is not authorized by me, my agent, or the law.\n5. The signature of the copyright owner or a person authorized to act on behalf of the copyright owner. You may send your notice via email provided such notice includes a proper electronic signature. The signature or electronic signature must be that of the copyright owner, or a person authorized to act on behalf of the owner, of an exclusive copyright that has allegedly been infringed.\nFor details on the information required for valid notification, see 17 U.S.C. Â§ 512(c)(3).\n\nCounter Notification To Claimed Copyright Infringement\n\nIf a notice of copyright infringement has been filed with the website owner and/or the ISP against you, the owner and/or the ISP will attempt to notify you and provide you with a copy of the notice of copyright infringement. If you have a good faith belief that you have been wrongfully accused, you may file a counternotification with the website owner and/or the ISP. If website owner and/or the ISP receives a valid counternotification, the DMCA provides that the removed or blocked information will be restored or access re-enabled.\n\nThe website owner and/or the ISP will replace the removed material and cease disabling access to it in not less than 10, nor more than 14, business days following receipt of the counternotification, unless the website owner and/or ISP first receives notice from the complaining party that such complaining party has filed an action seeking a court order to restrain the alleged infringer from engaging in infringing activity relating to the material on this website.\n\nPlease be advised that United States copyright law provides substantial penalties for a false counternotice filed in response to a notice of copyright infringement. Accordingly, if you are not sure whether certain material of yours is protected by copyright laws, we suggest that you first contact an attorney.'),
      ])
      replacement_fields = ["__self.Business_Email_Address__", "__self.Street_Address__", "__self.Domain_Name__", "__self.Business_Name__", "__self.Country_Of_Business__","__self.Product_Return_Address__"]
      for k, v in pages.items():
        for R in replacement_fields:
          T = R.split("__self.")[1].split("__")[0]
          v = v.replace(R, getattr(self, T))
        pages[k] = v

      ss.whippin()
      for k,v in pages.items():
        new_page_url = "{}/pages/new".format(self.Administrative_Url)
        ss.get(new_page_url).fid("page-name").send_keys(k)
        ss.switch_to_frame(ss.ftns("iframe")[keycall("get_attribute", ss.ftns("iframe"), "id").index("page-content_ifr")])
        ss.ftns("body").send_keys(v)
        ss.dc()
        ss.ffs("button", "aria-label", "Save").click().sp(10)


    # Preferences
    quas, wex, zuf = "Homepage_Title" in possible_fields, "Homepage_Meta_Description" in possible_fields, "Facebook_Pixel_ID" in possible_fields
    
    if(True in [quas, wex, zuf]):
      url = "{}/online_store/preferences".format(self.Administrative_Url)
      ss.get(url)
    
    changed = False
    if (quas):
      ss.switch_to_frame(ss.ftns("iframe")[keycall("get_attribute", ss.ftns("iframe"), "title").index("Online Store Preferences")])
      ss.bat().ffs("input","aria-describedby","TextField1HelpText")
      ss.bat(self.Homepage_Title)
      ss.dc()
      changed = True

    if (wex):
      ss.switch_to_frame(ss.ftns("iframe")[keycall("get_attribute", ss.ftns("iframe"), "title").index("Online Store Preferences")])
      ss.bat().fid("TextField2",2)
      ss.bat(self.Homepage_Meta_Description)
      ss.dc()
      changed = True

    if (zuf):
      ss.switch_to_frame(ss.ftns("iframe")[keycall("get_attribute", ss.ftns("iframe"), "title").index("Online Store Preferences")])
      ss.bat().ffss("input", "placeholder", "Paste your Facebook Pixel ID here")
      ss.bat(self.Facebook_Pixel_ID)
      ss.dc()
      changed = True

    ss.whippin()
    time.sleep(20)
    if(changed):
      if(0!=tryprocess(ss.ffst,"span","Save")):
        # if the elements to change to create a difference
        ss.ffst("span","Save").click().sp(20)
        # Note: The default save button is in an iframe (here presented at the bottom of the page)

    # General
    quas = "Metric_System" in possible_fields
    changed = False
    ss.whippin()
    if (quas):
      url = "{}/settings/general".format(self.Administrative_Url)
      ss.get(url)
      ss.arrowdowndo(lambda: 0==tryprocess(ss.ffst("option", "Metric system").click))
      changed = True
      if(changed):
        if(0!=tryprocess(ss.ffs,"button","aria-label","Save")):
          ss.ffs("button","aria-label","Save").click()
    time.sleep(8)
    
    # Checkout
    changed_Checkout_With_Account = "Checkout_With_Account" in possible_fields
    changed_Checkout_With_Identifier = "Checkout_With_Identifier" in possible_fields
    changed_Receive_Shipping_Updates = "Receive_Shipping_Updates" in possible_fields
    changed_Checkout_With_Name = "Checkout_With_Name" in possible_fields
    changed_Checkout_With_Company = "Checkout_With_Company" in possible_fields
    changed_Checkout_With_Address_Line_2 = "Checkout_With_Address_Line_2" in possible_fields
    changed_Checkout_With_Phone_Number = "Checkout_With_Phone_Number" in possible_fields
    changed_Checkout_With_Shipping_As_Billing = "Checkout_With_Shipping_As_Billing" in possible_fields
    changed_Checkout_Enable_Address_Autocomplete = "Checkout_Enable_Address_Autocomplete" in possible_fields
    changed_Show_Email_Signup_Option_At_Checkout = "Show_Email_Signup_Option_At_Checkout" in possible_fields
    changed_Preselect_Email_Signup_Option_At_Checkout = "Preselect_Email_Signup_Option_At_Checkout" in possible_fields
    if True in [changed_Checkout_With_Account,changed_Checkout_With_Identifier,changed_Receive_Shipping_Updates,changed_Checkout_With_Name,changed_Checkout_With_Company,changed_Checkout_With_Address_Line_2,changed_Checkout_With_Phone_Number,changed_Checkout_With_Shipping_As_Billing,changed_Checkout_Enable_Address_Autocomplete,changed_Show_Email_Signup_Option_At_Checkout,changed_Preselect_Email_Signup_Option_At_Checkout]:
      url = "{}/settings/checkout".format(self.Administrative_Url)
      ss.get(url)

    changed = False
    if changed_Checkout_With_Account:
      #++
      option_idx = ["disabled", "optional", "required"].index(self.Checkout_With_Account)
      ss.arrowdowndo(lambda: 0==tryprocess(ss.fns("shop[customer_accounts]")[option_idx].click))
      changed = True
    
    if changed_Checkout_With_Identifier:
      #++
      option_idx = ["phone_or_email", "email"].index(self.Checkout_With_Identifier)
      ss.arrowdowndo(lambda: 0==tryprocess(ss.fns("shop[checkout_configuration][email_or_phone_field_mode]")[option_idx].click))
      changed = True
    
    if changed_Receive_Shipping_Updates:
      #++
      if self.Receive_Shipping_Updates:
        if "true" in keycall("get_attribute", ss.fns("shop[checkout_configuration][order_subscription_mode]"), "checked"):
          ()
        else:
          ss.arrowdowndo(lambda: 0==tryprocess(ss.ffs("label", "for", "shop_checkout_configuration_order_subscription_mode").click))
      else:
        if "true" not in keycall("get_attribute", ss.fns("shop[checkout_configuration][order_subscription_mode]"), "checked"):
          ()
        else:
          ss.arrowdowndo(lambda: 0==tryprocess(ss.ffs("label", "for", "shop_checkout_configuration_order_subscription_mode").click))
      time.sleep(4)
      changed = True
    
    if changed_Checkout_With_Name:
      #++
      option_idx = ["require_last_only", "require_first_and_last"].index(self.Checkout_With_Name)
      ss.arrowdowndo(lambda: 0==tryprocess(ss.fns("shop[checkout_configuration][first_name_field_mode]")[option_idx].click))
      changed = True
    
    if changed_Checkout_With_Company:
      #++
      option_idx = ["hidden", "optional", "required"].index(self.Checkout_With_Company)
      ss.arrowdowndo(lambda: 0==tryprocess(ss.fns("shop[checkout_configuration][company_field_mode]")[option_idx].click))
      changed = True
    
    if changed_Checkout_With_Address_Line_2:
      #++
      option_idx = ["hidden", "optional", "required"].index(self.Checkout_With_Address_Line_2)
      ss.arrowdowndo(lambda: 0==tryprocess(ss.fns("shop[checkout_configuration][address2_field_mode]")[option_idx].click))
      changed = True
    
    if changed_Checkout_With_Phone_Number:
      #++
      option_idx = ["hidden", "optional", "required"].index(self.Checkout_With_Phone_Number)
      ss.arrowdowndo(lambda: 0==tryprocess(ss.fns("shop[checkout_configuration][phone_field_mode]")[option_idx].click))
      changed = True
    
    if changed_Checkout_With_Shipping_As_Billing:
      #++
      if self.Checkout_With_Shipping_As_Billing:
        if "true" in keycall("get_attribute", ss.fns("shop[checkout_configuration][same_billing_and_shipping_address]"), "checked"):
          ()
        else:
          ss.arrowdowndo(lambda: 0==tryprocess(ss.ffs("label","for","shop_checkout_configuration_same_billing_and_shipping_address").click))
      else:
        if "true" not in keycall("get_attribute", ss.fns("shop[checkout_configuration][same_billing_and_shipping_address]"), "checked"):
          ()
        else:
          ss.arrowdowndo(lambda: 0==tryprocess(ss.ffs("label","for","shop_checkout_configuration_same_billing_and_shipping_address").click))
      changed = True
    
    if changed_Checkout_Enable_Address_Autocomplete:
      #++
      if self.Checkout_Enable_Address_Autocomplete:
        if "true" in keycall("get_attribute", ss.fns("shop[checkout_configuration][address_autocompletion]"), "checked"):
          ()
        else:
          ss.arrowdowndo(lambda: 0==tryprocess(ss.ffs("label","for","shop_checkout_configuration_address_autocompletion").click))
      else:
        if "true" not in keycall("get_attribute", ss.fns("shop[checkout_configuration][address_autocompletion]"), "checked"):
          ()
        else:
          ss.arrowdowndo(lambda: 0==tryprocess(ss.ffs("label","for","shop_checkout_configuration_address_autocompletion").click))
      changed = True
    
    if changed_Show_Email_Signup_Option_At_Checkout:
      #++
      if self.Show_Email_Signup_Option_At_Checkout:
        if "true" in keycall("get_attribute", ss.fns("allows_sign_up"), "checked"):
          ()
        else:
          ss.arrowdowndo(lambda: 0==tryprocess(ss.fns("allows_sign_up").click))
      else:
        if "true" not in keycall("get_attribute", ss.fns("allows_sign_up"), "checked"):
          ()
        else:
          ss.arrowdowndo(lambda: 0==tryprocess(ss.fns("allows_sign_up").click))
      changed = True
    
    if self.Show_Email_Signup_Option_At_Checkout == True and changed_Preselect_Email_Signup_Option_At_Checkout:
      # [or otherwise you have a 3 line block though here it's the boolean from that, not changed_Preselect_Email_Signup_Option_At_Checkout], change it not whether Show_Email_Signup_Option_At_Checkout changed, because it may be to True, and then leave it to self.Show_Email_Signup_Option_At_Checkout being False
      #++
      if self.Preselect_Email_Signup_Option_At_Checkout:
        if "true" in keycall("get_attribute", ss.fns("preselect_sign_up"), "checked"):
          ()
        else:
          ss.arrowdowndo(lambda: 0==tryprocess(ss.fns("preselect_sign_up").click))
      else:
        if "true" not in keycall("get_attribute", ss.fns("preselect_sign_up"), "checked"):
          ()
        else:
          ss.arrowdowndo(lambda: 0==tryprocess(ss.fns("preselect_sign_up").click))
      changed = True
    
    #++
    if(changed):
      if(0!=tryprocess(ss.ffs,"button", "aria-label", "Save")):
        ss.ffs("button", "aria-label", "Save").click().sp(10)
    #++
    quas = "Use_Free_Plus_Shipping" in possible_fields
    if(quas):
      # this actually to delete every existing shipping option
      if self.Use_Free_Plus_Shipping:
        url = "{}/settings/shipping".format(self.Administrative_Url)
        ss.get(url).whippin().sp(12)
        ss.arrowdowndo(lambda: 0==tryprocess(lambda: ss.fid("shipping_zones")))
        F = ss.fid("shipping_zones").find_elements_by_tag_name("a")
        ss.arrowdowndo(lambda: 0==tryprocess([i for i in F if i.text == "Edit"][0].click))
        
        T = [i for i in ss.fcns("table-wrapper") if i.get_attribute("data-bind-show") == "weightBasedShippingRatesViewer.hasRates()"][0]
        F = T.find_elements_by_tag_name("use")
        for i in range(len(F)):
          T = [i for i in ss.fcns("table-wrapper") if i.get_attribute("data-bind-show") == "weightBasedShippingRatesViewer.hasRates()"][0]
          F = T.find_elements_by_tag_name("use")
          ss.arrowdowndo(lambda: 0==tryprocess(F[0].click))

        weight_min = 0.01
        weight_max = 0.1
        price = 9.95
        things = []
        ex = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","AA","AB","AC","AD"]
        for i in range(30):
          shipping_name = "Shipping Rate %s" % (ex[(i)])
          weight_min = round(weight_min, 2)
          weight_max = round(weight_max, 2)
          price = round(price, 2)
          things.append([shipping_name, weight_min, weight_max, price])
          weight_min += 0.1
          weight_max += 0.1
          price += 9.95
        # mad limiting. just sleep 3 seconds at the end. will find out if it doesn't work.
        for z in things:
          redprint("?")
          shipping_name, weight_min, weight_max, price = z
          T = [i for i in ss.fcns("next-card__header") if "Weight based rates" in i.text][0]
          R = ss.arrowdowndo(lambda:0==tryprocess([i for i in T.find_elements_by_tag_name("button") if i.text=="Add rate"][0].click))
          form = [i for i in ss.ffss("form", "data-define", "{priceRateForm: new Shopify.Form(this)}") if "Add weight based rate" in i.text][0]
          inputs = form.find_elements_by_tag_name("input")
          name = [i for i in inputs if i.get_attribute("data-bind") == "rate.name"][0]; name.clear(); name.send_keys(str(shipping_name))
          weight_low = [i for i in inputs if i.get_attribute("data-bind") == "rate.weight_low"][0]; weight_low.clear(); weight_low.send_keys(str(weight_min))
          weight_high = [i for i in inputs if i.get_attribute("data-bind") == "rate.weight_high"][0]; weight_high.clear(); weight_high.send_keys(str(weight_max))
          price_rate = [i for i in inputs if i.get_attribute("data-bind") == "rate.price"][0]; price_rate.clear(); price_rate.send_keys(str(price))

          ss.ffsts("button","Done").click().sp(3)
        if(0!=tryprocess(ss.ffst, "span", "Save")):
          ss.ffst("span", "Save").click()
        time.sleep(10)
    time.sleep(4)

    if "Domain_Name" in possible_fields:
      self.Assert_Shopify_Domain(domain = self.Domain_Name)
    
    if "Facebook_Pixel_ID" in possible_fields:
      self.ALWAYS_FOR_INPUT_SHOPIFY_PIXEL()

    # End
    if quit == True: self.Exit()
    # End
  def Assert_Shopify_Domain(self, domain):
    """ exist&prim,is_alreadyØ,is_bought|Ø|(avail|Ø|(card_added|+&securse|(to_renew&click))),"""
    url = "{}/settings/domains".format(self.Administrative_Url)
    ss.get(url)
    existing_domains = ss.fcns("domain-index-table__cell--host",_time=2)
    tmp = ss.fcns("domain-index-table__cell--host-name",_time=2)
    existing_domains = existing_domains + tmp
    f = lambda: lset([i for i in lmap(lambda i: i[4:] if i.startswith("www.")else(i), key("text", existing_domains))if not i.endswith(".myshopify.com") ])
    connected_domains = tryreturn(f)if(existing_domains!=[])else(0)
    primary_domain = ss.fcns("domain-index-table__cell--host-name",2)
    if primary_domain == [] and connected_domains == 0:
      primary_domain = None
      () # no tables shown. only a buy new domain button.
    else:
      primary_domain = primary_domain[0].text
      primary_domain = primary_domain[4:] if primary_domain.startswith("www.") else primary_domain

    is_already = None
    if( domain == primary_domain):
      is_already = True
    else:
      is_already = False
    if is_already:
      return

    is_bought = False
    if connected_domains!=0:
      if(domain in connected_domains):
        is_bought = True
    if is_bought == True: # will show a table
      ss.switch_to_frame(ss.ffs("iframe", "title", "Online Store"))
      ss.ffsts("button", "Change primary domain").click()
      R = [i for i in ss.fcns("next-label--switch") if i.text == domain][0]
      R.click()
      ss.fns("commit").click()
      primary_domain = ss.fcns("domain-index-table__cell--host-name")[0].text
      assert domain == primary_domain

    else:
      if self.Domain_Name_To_Transfer == True: # ie, you want to connect, in g suite, it will be, YES, I HAVE ONE
        ss.get("{}/settings/domains/connect".format(self.Administrative_Url)).sp(7)
        ss.fn("domain[host]").send_keys(self.Domain_Name).sp(5)
        ss.fn("commit").click().sp(10)
        ss.ffs("button", "data-bind-event-click", "domainValidation.onVerify()").click().sp(60)
      else:
        url = "{}/settings/domains/buy".format(self.Administrative_Url)
        ss.get(url)
        ss.fns("domain_host").send_keys(domain).sp(5)
        R = ss.fcn("domain-status")
        Z = R.find_elements_by_tag_name("tr")
        T = [i for i in Z if i.text != ""]
        assert(1==len(T))
        if "Unavailable" in T[0].text: # you should have an available domain because of the menulet checking it.
          OSA.display_dialog("The domain %s is unavailable. Please try again." % (domain), text_prompt = False)
        else:
          assert(T[0].text.endswith("Buy"))
          V = T[0].find_elements_by_class_name("domain-status__button")
          # V[0].click()
          ss.jcns("domain-status__button","click",{}) # confirmed jsclick works
          time.sleep(6)


          Financial_Card_Added = None
          if "/confirm" in ss.current_url:
            Financial_Card_Added = True
          else:
            Financial_Card_Added = False

          if Financial_Card_Added == True:
            Renew_Domain_Every_Year = self.Renew_Domain_Every_Year
            X = None
            if True == Renew_Domain_Every_Year:
              X = "true"
            else:
              X = None
            Auto_Renew_Element = ss.fids("auto_renew")[0]
            while (X != Auto_Renew_Element.get_attribute("checked")):
              # Auto_Renew_Element.click()
              ss.jcns("next-checkbox","click",{})

            # ss.arrowdowndo(lambda: 0==tryprocess(ss.fns("commit").click)).sp(20)
            ss.jtns("button","click",{"text":"Buy domain"}).sp(20)
            # this is a check, so dont do it. self.Assert_Shopify_Domain(domain = domain)
            # instead, have assert mx entries.
            self.Assert_MX_Entry(domain = domain)
          else:
            # you can change payment info, so don't assert payment info, and then change new domain.
            self.Assert_Shopify_Payment()
            self.Assert_Shopify_Domain(domain = domain)
  def Assert_Shopify_Payment(self):
    url = "{}/settings/account/payment".format(self.Administrative_Url)
    ss.get(url).sp(7)

    # Check for if it is update.
    if ss.ffsts("button", "Update billing address"):
      ss.ffsts("button", "Update billing address")[0].click().sp(5)

    if self.Shopify_Financial_Card_Information:
      Financial_Card_Number = AttrDict(self.Shopify_Financial_Card_Information).Financial_Card_Number
      Financial_Card_Expiration_Date = "".join(re.findall("\d+", AttrDict(self.Shopify_Financial_Card_Information).Financial_Card_Expiration_Date))
      Financial_Card_CVV = AttrDict(self.Shopify_Financial_Card_Information).Financial_Card_CVV
      Financial_Card_Billing_First_Name = AttrDict(self.Shopify_Financial_Card_Information).Financial_Card_Billing_First_Name
      Financial_Card_Billing_Last_Name = AttrDict(self.Shopify_Financial_Card_Information).Financial_Card_Billing_Last_Name
      Financial_Card_Billing_Street_Address = AttrDict(self.Shopify_Financial_Card_Information).Financial_Card_Billing_Street_Address
      Financial_Card_Billing_Street_Address_Line_2 = AttrDict(self.Shopify_Financial_Card_Information).Financial_Card_Billing_Street_Address_Line_2
      Financial_Card_Billing_Country = AttrDict(self.Shopify_Financial_Card_Information).Financial_Card_Billing_Country
      Financial_Card_Billing_State = AttrDict(self.Shopify_Financial_Card_Information).Financial_Card_Billing_State
      Financial_Card_Billing_City = AttrDict(self.Shopify_Financial_Card_Information).Financial_Card_Billing_City
      Financial_Card_Billing_ZIP_Code = AttrDict(self.Shopify_Financial_Card_Information).Financial_Card_Billing_ZIP_Code

      ss.dc()
      number, expiry, cvv = ss.fcns("card-fields-iframe")

      ss.dc().frame(number)
      ss.execute_script("document.getElementById('number').value = '%s'" % Financial_Card_Number)
      ss.dc()

      ss.dc().frame(expiry)
      ss.execute_script("document.getElementById('expiry').value = '%s'" % " / ".join([Financial_Card_Expiration_Date[:2], Financial_Card_Expiration_Date[2:]]))
      ss.dc()
      
      ss.dc().frame(cvv)
      ss.execute_script("document.getElementById('verification_value').value = '%s'" % Financial_Card_CVV)
      ss.dc()
      
      ss.fns("credit_card[first_name]").send_keys(Financial_Card_Billing_First_Name)
      ss.fns("credit_card[last_name]").send_keys(Financial_Card_Billing_Last_Name)
      ss.fns("credit_card[address1]").send_keys(Financial_Card_Billing_Street_Address)
      ss.fns("credit_card[city]").send_keys(Financial_Card_Billing_City)
      ss.fns("credit_card[zip]").send_keys(Financial_Card_Billing_ZIP_Code)
      ss.ffsts("option", Financial_Card_Billing_Country).click()
      ss.ffsts("option", Financial_Card_Billing_State).click()
    else:
      OSA.display_dialog("Please fill in the card number, expiration date, cvv, first name, last name, address line 1, address line 2, city, state, and zip code.",text_prompt=False)      

    # ss.fns("commit").click().sp(20)
    ss.jtns("input","click",{"name":"commit","value":"Confirm"}).sp(20)
    still_on_the_payment_information_page = False
    if("/account/payment" in ss.current_url):
      still_on_the_payment_information_page = True
    if still_on_the_payment_information_page == True:
      OSA.display_dialog("Financial information card did not add/change. Please check the card information and repush changes.", text_prompt = False)
      self.Assert_Shopify_Payment()
      # instead of refresh financial card information
      # because any field can be wrong.
  def Assert_MX_Entry(self, domain):
    # first find values, then webdriver it.
    # 
    ss.get("{}/settings/domains".format(self.Administrative_Url))
    existing_domains = ([] if ss.fcns("domain-index-table__cell--host",_time=2) == [] else ss.fcns("domain-index-table__cell--host",_time=2)) + ss.fcns("domain-index-table__cell--host-name")
    R = [i for i in existing_domains if i.text == domain][0]
    assert(1==len(R.find_elements_by_tag_name("a"))) # len of domain matches
    shopify_domain_id = R.find_elements_by_tag_name("a")[0].get_attribute("href").split("/")[-1]
    ss.get("{}/settings/domains/{}/dns".format(self.Administrative_Url, shopify_domain_id))

    [[ss.arrowdowndo(lambda: 0==tryprocess([i for i in [i for i in ss.fcns("ui-card__section") if tryreturn(lambda: i.find_element_by_tag_name("h3").text) == "mx record"][0].find_elements_by_tag_name("button") if i.text == "Actions"][0].click)).sp(2), ss.arrowdowndo(lambda: 0==tryprocess([i for i in [i for i in ss.fcns("ui-card__section") if tryreturn(lambda: i.find_element_by_tag_name("h3").text) == "mx record"][0].find_elements_by_tag_name("button") if i.text == "Remove"][0].click)).sp(2), ss.arrowdowndo(lambda: 0==tryprocess(ss.ffsts("button", "Remove").click)).sp(15)] for i in range((len([i for i in ss.fcns("ui-card__section") if tryreturn(lambda: i.find_element_by_tag_name("h3").text) == "mx record"][0].find_elements_by_tag_name("tr"))-1))]if(len([i for i in ss.fcns("ui-card__section") if tryreturn(lambda: i.find_element_by_tag_name("h3").text) == "mx record"])!=0)else()
    input("This thing sort of fails. does it save?")
    [[ss.ffst("button","Add custom record").click(),ss.ffst("button","MX record").click(),ss.fids("dns_record_name").send_keys(i.Name),ss.fids("dns_record_data[value]").send_keys(i.Destination),ss.fids("dns_record_data[priority]").send_keys(i.Priority),ss.ffst("button","Confirm").click().sp(10)] for i in [AttrDict({"Priority": 1, "Destination": "ASPMX.L.GOOGLE.COM", "Name": "@"}), AttrDict({"Priority": 5, "Destination": "ALT1.ASPMX.L.GOOGLE.COM", "Name": "@"}), AttrDict({"Priority": 5, "Destination": "ALT2.ASPMX.L.GOOGLE.COM", "Name": "@"}), AttrDict({"Priority": 10, "Destination": "ALT3.ASPMX.L.GOOGLE.COM", "Name": "@"}), AttrDict({"Priority": 10, "Destination": "ALT4.ASPMX.L.GOOGLE.COM", "Name": "@"})]]
    #1it is possible to not have any mx record section
    #2'    for i in range((len(R[0].find_elements_by_tag_name("tr"))-1)):\n      ss.arrowdowndo(lambda: 0==tryprocess([i for i in [i for i in ss.fcns("ui-card__section") if tryreturn(lambda: i.find_element_by_tag_name("h3").text) == "mx record"][0].find_elements_by_tag_name("button") if i.text == "Actions"][0].click)).sp(2)\n      ss.arrowdowndo(lambda: 0==tryprocess([i for i in [i for i in ss.fcns("ui-card__section") if tryreturn(lambda: i.find_element_by_tag_name("h3").text) == "mx record"][0].find_elements_by_tag_name("button") if i.text == "Remove"][0].click)).sp(2)\n      ss.arrowdowndo(lambda: 0==tryprocess(ss.ffsts("button", "Remove").click)).sp(15)\n'
  def GET_SHOPIFY_APP(self):
    ss.get("%s/apps/private/new" % (self.Administrative_Url))
    ss.arrowdowndo(lambda: 0==tryprocess(ss.ffst("button", "▼ Review disabled Admin API permissions").click)).sp(2)
    ss.key(ss.Keys.HOME)
    quas = ["Store content like articles, blogs, comments, pages, and redirects","Customer details and customer groups","Orders, transactions and fulfillments","Products, variants and collections","Product information","Discounts","Locations","Inventory","Fulfillment services","Draft orders",]
    rex = []
    for i in ss.ftns("tr"):
      for j in quas:
        if j in i.text:
          rex.append(i)
    time.sleep(2)
    for i in rex:
      ss.arrowdowndo(lambda: 0==tryprocess(i.find_elements_by_tag_name("td")[1].click)).sp(2)
      ss.arrowdowndo(lambda: 0==tryprocess(i.find_elements_by_tag_name("td")[1].find_elements_by_tag_name("option")[-1].click))
      ss.ftn("h1").click()
      ss.key(ss.Keys.HOME).sp(2)
    ss.fn("api_client[title]").send_keys("Shopify API").sp(2)
    ss.fn("api_client[contact_email]").send_keys(self.Business_Email_Address).sp(2)
    if(0!=tryprocess(ss.ffst,"span", "Save")):
      ss.ffst("span","Save").click()
    ss.arrowdowndo(lambda: 0==tryprocess(ss.ffst("button", "I understand, create the app").click)).sp(20)
    Shopify_App_API_Key = ss.fid("api_key").get_attribute("value")
    Shopify_App_API_Password = [ss.arrowdowndo(lambda:0==tryprocess(ss.ffs("button", "data-bind-event-click", "showPrivateAppPassword = !showPrivateAppPassword").click)), ss.ffs("button", "aria-label", "Copy password").get_attribute("data-clipboard-text")][1]
    Shopify_App_API_Secret = ss.fn("shared_secret").get_attribute("value")
    Shopify_App_API_Url = findall(ss.fn("admin_api_example_url").get_attribute("value"), "(.*/admin)")[0]
    Update(self,Shopify_App_API_Key=Shopify_App_API_Key,Shopify_App_API_Password=Shopify_App_API_Password,Shopify_App_API_Secret=Shopify_App_API_Secret,Shopify_App_API_Url=Shopify_App_API_Url)
    ss.get(self.Administrative_Url)
    ss.ffs("input","placeholder","Search")

    # # #
    #ss.get(self.Administrative_Url + "/settings/payments")
    #OSA.display_dialog("")
    #ss.get(self.Administrative_Url + "/menus")
    #OSA.display_dialog("")
    #ss.get(self.Administrative_Url + "/themes")
    #OSA.display_dialog("")
    # Pick Plan
    #ss.get(self.Administrative_Url + "/settings/account/plan")
    # Disable your password page
    #ss.get(self.Administrative_Url + "/online_store/preferences")
    #++
  def GET_GSUITE_ACCOUNT(self):
    globals()["ss"] = Browser()("ch") # signup X(46/65)√(68)
    
    ss.bacpac(start = True).get("https://gsuite.google.com/signup/basic/welcome").bacpac(end = True, url = "https://gsuite.google.com/signup/basic/welcome")

    # elements = ss.ffss("input","aria-label","Business name")
    time.sleep(10)
    elements = None
    while True:
      elements = ss.fcns("zHQkBf")
      if "WebElement" in lmap(lambda i: type(i).__name__,elements):break
    brauhana = self.Business_Name
    while(brauhana not in keycall("get_attribute", elements, "data-initial-value")):
      elements.send_keys(brauhana)
    #[Honestly, Not Sure if required to sleep. Might be IP/Mac Address.]time.sleep(random.randrange(4,11))


    data_value = None
    if 1==self.Employee_Count:
      data_value = "1"
    elif 2 >= self.Employee_Count <= 9:
      data_value = "2-9"
    elif 10 >= self.Employee_Count <= 99:
      data_value = "10-99"
    elif 100 >= self.Employee_Count <= 299:
      data_value = "100-299"
    elif self.Employee_Count >= 300:
      data_value = "300+"

    data_value = data_value
    vididishi = ss.ffs("div","data-value",data_value)
    while("true" != vididishi.get_attribute("aria-checked")):
      vididishi.send_keys(ss.Keys.SPACE)
    #[Honestly, Not Sure if required to sleep. Might be IP/Mac Address.]time.sleep(random.randrange(4,11))


    #hnstly, u can assert it inside the browser.... my first thought is: or not pass.|time?
    #then, if you assert, and it's breaks, the broken still.
    #i would instead 
    while(self.Country_Of_Business not in key("text",ss.fcns("oJeWuf"))):
      ss.fcns("KKjvXb")[0].send_keys(self.Country_Of_Business)
    #[Honestly, Not Sure if required to sleep. Might be IP/Mac Address.]time.sleep(random.randrange(4,11))

    ss.bacpac(start = True)
    
    ss.jcns("snByac","click",{}).sp(2)
    
    if self.Employee_Count <= 9:
      ss.bacpac(end = True, url = "https://gsuite.google.com/signup/basic/contactinfo") # assert the url is this. or display a dialog.
    else:
      ss.bacpac(end = True, url = "https://gsuite.google.com/signup/basic/contactinfoandphone") # assert the url is this. or display a dialog.

    # MAY HAVE TO POP OFF ELEMENTS AND JIXIN IT ALLONG
    #ROLLINOUTCHANGESelements = ss.ffss("input","aria-label","First name")
    time.sleep(6)
    brauhana = self.First_Name
    while(brauhana not in keycall("get_attribute", ss.ffss("input","aria-label","First name"), "data-initial-value")):
      ss.ffss("input","aria-label","First name").send_keys(brauhana)

    #[Honestly, Not Sure if required to sleep. Might be IP/Mac Address.]time.sleep(random.randrange(4,11))
    elements = ss.ffss("input","aria-label","Last name")
    brauhana = self.Last_Name
    while(brauhana not in keycall("get_attribute", elements, "data-initial-value")):
      elements.send_keys(brauhana)


    prawn = None
    try:
      prawn = ss.ffss("input", "aria-label", "Current email address")
    except Exception as e:
      print(e, "current email address not asked")

    #[Honestly, Not Sure if required to sleep. Might be IP/Mac Address.]time.sleep(random.randrange(4,11))
    if not self.Gmail_Email_Address and prawn:
      OSA.display_dialog("You Need To Verify With A Current Email. Add It With Command+Shift+Control+Option+2.\nExitting.", text_prompt = False, buttons=["OK"])
      ss.quit()
      [exec("import sys",globals()),sys.exit()]
    elif not self.Gmail_Email_Address and not prawn:
      time.sleep(1)
    elif self.Gmail_Email_Address and prawn:
      dart = self.Gmail_Email_Address
      while(dart not in [i.get_attribute("data-initial-value") for i in prawn]):
        prawn.clear()
        prawn.send_keys(dart)
    if self.Employee_Count >= 10:
      time.sleep(4)
      preso = ss.ffs("input", "aria-label", "Enter a phone number")
      kron = self.Business_Phone_Number
      kron_kin = String(kron)
      while(kron_kin != preso.get_attribute("data-initial-value")):
        preso.send_keys(kron_kin)
      time.sleep(4)
    time.sleep(5)
    ss.bacpac(start = True)
    ss.jcns("snByac","click",{}).sp(2)

    time.sleep(5)
    if ss.current_url == "https://gsuite.google.com/signup/basic/domainoptions":
      ss.bacpac(start = True)

      # ss.jcns("Id5V1","click",{}).sp(2)
      ss.jtns("div","click",{"aria-label":"I have a domain"})
      # Lo = list(range(len(ss.es("return document.getElementsByClassName('Id5V1')"))))
      # for i in tcer(Lo): ss.es("document.getElementsByClassName('Id5V1')[%s].click()"%(i)); time.sleep(0.5)
      ss.jtns("div","click",{"aria-label":"I have a domain"})
      ss.jcns("snByac","click",{}).sp(2)

    elif ss.current_url == "https://gsuite.google.com/signup/basic/domain":
      ss.jcns("snByac","click",{"text":"Yes, I have one I can use"})


    ss.jtns("input",self.Domain_Name,{"aria-label":"Your domain name"}).sp(5)

    ss.jcns("snByac","click",{"text":"NEXT\ue5cc"}).sp(2)

    ss.zoom_level(5)

    def asteroid():
      hotbox = ss.current_url
      verif1 = (hotbox=="https://gsuite.google.com/signup/basic/bringconfirmation")
      R = key("text", ss.ffss("div","aria-live","assertive"))
      verif2 = ("This domain name is already in use. If you own this domain and would like to use G Suite, please follow the steps here" not in R and "This domain hasn't been purchased yet." not in R)
      if(verif1 == True and verif2 == True):
        return
      else:
        if "This domain name is already in use. If you own this domain and would like to use G Suite, please follow the steps here" in R:
          OSA.display_dialog("This domain name is already in use in G Suite.\nIf this domain is already connected to G Suite, please set Has_GSuite_Account in the Shop Menulet to Yes and provide accompanying details for the G Suite Account To Shop Menulet As Well.\nOtherwise, please follow the instructions here to transfer that domain to this account in creation: https://support.google.com/a/answer/80610", text_prompt = False, buttons = ["OK"])
          sys_exit()
        elif "This domain has been registered and is in the process of ownership verification. If you believe this registration was unauthorized, see our Signup Troubleshooter to help guide in troubleshooting this issue." in R:
          OSA.display_dialog("This domain name has been registered and is in the process of ownership verification in G Suite.\nThis error should not occur here since given you could purchase this domain, the domain will be registered here in a G Suite account only once.", text_prompt = False, buttons = ["OK"])
          sys_exit()
        elif "This domain hasn't been purchased yet." in R:
          OSA.display_dialog("This domain hasn't been purchased yet. To purchase this domain please set Domain_Name_To_Transfer to No in the config", text_prompt = False, buttons = ["OK"])
          sys_exit()
        # you want to wait., to flag off either X1 X2. or. redo. OR then... is Good.
        asteroid()
    asteroid()


    ss.bacpac(start = True)
    ss.jcns("snByac","click",{"text":"NEXT\ue5cc"}).sp(2)
    ss.bacpac(end = True, url = "https://gsuite.google.com/signup/basic/accountandrecaptcha").sp(10)


    # Username Page
    #FF = ss.execute_script("return document.getElementsByClassName('snByac').length")
    #FFF = int(FF)
    #for i in range(FFF): greenprint(ss.execute_script("return document.getElementsByClassName('snByac')[%s].text"%i))
    #for i in range(FFF): (greenprint("LOL"))if("Username"==ss.execute_script("return document.getElementsByClassName('snByac')[%s].text"%i))else()

    brauhana = re.findall(r"(.*)@",self.Business_Email_Address)[0]
    while(brauhana not in keycall("get_attribute", ss.ffss("input","aria-label","Username"), "data-initial-value")):
      ss.ffss("input","aria-label","Username").send_keys(brauhana)


    if self.GSuite_Password:
      ss.zoom_level(5)
      ss.ffss("input", "aria-label", "Password").send_keys(self.GSuite_Password)
      ss.ffss("input","aria-label","Username").click() # help to ungray
      ss.ffss("input","aria-label","Username").send_keys(brauhana) # help to ungray
      OSA.display_dialog("Please fill in the captcha, and click agree and continue, then fill out any 2 factor authorizations.\nThen click 'Verify' in the web browser.\nThen click OK in this prompt.", text_prompt = False, buttons=["OK"])
    else:
      ss.zoom_level(5)
      ss.ffss("input", "aria-label", "Password").send_keys("")
      ss.ffss("input", "aria-label", "Password").clear()
      ss.ffss("input","aria-label","Username").click() # help to ungray
      ss.ffss("input","aria-label","Username").send_keys(brauhana) # help to ungray
      OSA.display_dialog("Please fill in your password, fill in the captcha, and click agree and continue, then fill out any 2 factor authorizations.\nThen click 'Verify' in the web browser.\nThen click OK in this prompt.", text_prompt = False, buttons=["OK"])
    # ss.ffss("input","aria-label","Username").click() # help to ungray
    # ss.ffss("input","aria-label","Username").send_keys(brauhana) # help to ungray

    ss.ffsts("span", "AGREE AND CONTINUE").click()
    ss.jtns("span","click",{"text":"AGREE AND CONTINUE"})
    ss.sp(20) # i rmbr this wzerking.
    # WTF? it jiffied the page and stayed.

    # End
    self.Exit() # LOL!
    # End

    def verify():
      self.Login_GSuite_Admin()
      if ss.fid("deviceAddress",_time=5) != "fail":
        ss.fid("deviceAddress").send_keys(self.Business_Phone_Number).fid("next-button").click()
        if ss.fid("error",_time=5) != "fail":
          OSA.display_dialog("This Phone Number Has Been Used Too Many Times For Verification. Change Your Business Phone Number And Restart This.", text_prompt = False, buttons=["OK"])
        else:
          ss.urlwait("/speedbump/idvreenable/sendidv")
          while True:
            OSA.display_dialog("Please fill in the 6 digit code without clicking verify. Then click OK here in this prompt.", text_prompt = False, buttons=["OK"])
            ss.fid("next-button").click()
            if "fail" != ss.fid("error",_time=5):
              OSA.display_dialog("There was an error in the verification code. Please click OK here to try again.", text_prompt = False, buttons=["OK"])
            else:
              ss.urlwait("/speedbump/gaplustos?continue").sp(5)
              break
      ss.fid("accept").click()
    verify()

    ss.urlwait("/signup/business/plan")
    ss.jtns("span","click",{"text":"NEXT\ue5cc"})
    ss.urlwait("/signup/business/checkout")
    ss.frame(ss.jtns("iframe",0,{"src":"about:blank"})[0])
    ss.jtns("input",self.Business_Name,{"name":"ORGANIZATION"})
    ss.jtns("input",(self.First_Name + (" ") + self.Last_Name),{"name":"RECIPIENT"})
    ss.jtns("input",self.Street_Address,{"name":"ADDRESS_LINE_1"})
    ss.jtns("input",self.Street_Address_Line_2,{"name":"ADDRESS_LINE_2"})if(self.Street_Address_Line_2)else()
    ss.jtns("input",self.City,{"name":"LOCALITY"})
    ss.ffs("div","data-name","ADMIN_AREA").click().ffs("div", "data-value", Locations().get_state(self.State)).click()
    ss.jtns("input",self.ZIP_Code,{"name":"POSTAL_CODE"})
    ss.dc()
    ss.frame(ss.jtns("iframe",0,{"src":"about:blank"})[0])

    ss.ffst("div","Add credit or debit card").click().sp(10)
    ss.ffst("div","Add credit or debit card").click()
    if self.GSuite_Financial_Card_Information:
      Financial_Card_Number = AttrDict(self.GSuite_Financial_Card_Information).Financial_Card_Number
      Financial_Card_Expiration_Date = "".join(re.findall("\d+", AttrDict(self.GSuite_Financial_Card_Information).Financial_Card_Expiration_Date))
      Financial_Card_CVV = AttrDict(self.GSuite_Financial_Card_Information).Financial_Card_CVV
      Financial_Card_Billing_First_Name = AttrDict(self.GSuite_Financial_Card_Information).Financial_Card_Billing_First_Name
      Financial_Card_Billing_Last_Name = AttrDict(self.GSuite_Financial_Card_Information).Financial_Card_Billing_Last_Name
      Financial_Card_Billing_Street_Address = AttrDict(self.GSuite_Financial_Card_Information).Financial_Card_Billing_Street_Address
      Financial_Card_Billing_Street_Address_Line_2 = AttrDict(self.GSuite_Financial_Card_Information).Financial_Card_Billing_Street_Address_Line_2
      Financial_Card_Billing_Country = AttrDict(self.GSuite_Financial_Card_Information).Financial_Card_Billing_Country
      Financial_Card_Billing_State = AttrDict(self.GSuite_Financial_Card_Information).Financial_Card_Billing_State
      Financial_Card_Billing_City = AttrDict(self.GSuite_Financial_Card_Information).Financial_Card_Billing_City
      Financial_Card_Billing_ZIP_Code = AttrDict(self.GSuite_Financial_Card_Information).Financial_Card_Billing_ZIP_Code
      ss.fns("cardnumber").send_keys(Financial_Card_Number)
      ss.fns("ccmonth").send_keys(Financial_Card_Expiration_Date[0:2])
      ss.fns("ccyear").send_keys(Financial_Card_Expiration_Date[2:4])
      ss.fns("cvc").send_keys(Financial_Card_CVV)
      ss.ffsts("label", "Credit or debit card address is same as above").click()
      ss.fns("ADDRESS_LINE_1")[-1].clear()
      ss.fns("ADDRESS_LINE_1")[-1].send_keys(Financial_Card_Billing_Street_Address)
      ss.fns("ADDRESS_LINE_2")[-1].clear()
      ss.fns("ADDRESS_LINE_2")[-1].send_keys(Financial_Card_Billing_Street_Address_Line_2)if(self.Street_Address_Line_2)else()
      ss.fns("LOCALITY")[-1].clear()
      ss.fns("LOCALITY")[-1].send_keys(Financial_Card_Billing_City)
      ss.ffss("div","data-name","ADMIN_AREA")[-1].click()
      ss.ffss("div","data-name","ADMIN_AREA")[-1]
      ss.ffss("div", "data-value", Locations().get_state(self.State))[-1].click()
      ss.fns("POSTAL_CODE")[-1].clear()
      ss.fns("POSTAL_CODE")[-1].send_keys(Financial_Card_Billing_ZIP_Code)
      ss.dc()
    else:
      OSA.display_dialog("Please fill in the financial card number, expiration month, expiration year, and the billing address if it is different than the business address. Then click OK in this prompt.",text_prompt=False)

    # ss.jtns("span","click",{"text":"NEXT\ue5cc"}).sp(10)
    ss.ffsts("span", "NEXT").click().sp(15)
    while ss.current_url != "https://gsuite.google.com/u/0/signup/business/checkoutdone":
      OSA.display_dialog("Please manually click the verify button, sometimes it needs to be manually clicked.\n\nThen click OK in this dialog.")
    ss.urlwait("/signup/business/checkoutdone")

    ss.ffsts("span", "CONTINUE TO SETUP").click()
    ss.urlwait("/apps")
    
    redinput("WHOA, WTF?")

    ss.ffss("div", "aria-label", "Start Current Step 2 of 3: Add people to your G Suite account").click()
    ss.ffss("div", "aria-checked", "false").click().sp(5)
    ss.ffsts("span", "NEXT").click().sp(15)
    tryprocess(lambda: ss.ffsts("span", "Choose a different method").click())
    tryprocess(lambda: ss.ffsts("div", "Add a domain host record (TXT or CNAME)").click())
    ss.ffst("label", "I have successfully logged in.").click()
    ss.ffst("label", "I have opened the control panel for my domain.").click()
    TXT_RECORD = ss.ffsts("section", "Value / Answer / Destination")[0].find_elements_by_tag_name("input")[0].get_attribute("value")
    self.Insert_Txt_Record(TXT_RECORD)
    # whoa wtf, first it said, insert txt record, next, i login, it tells me to set the 5 MX entries. WHAT?
    # i also don't think i set the 5 mx entires
    ss.ffst("label", "I added the TXT verification record.").click()
    ss.ffst("label", "I saved the TXT verification record.").click()
    ss.ffsts("span", "VERIFY DOMAIN AND SET UP EMAIL").click()
    ss.ffsts("span", "NEXT").click().sp(5)
    ss.urlswait("/apps/done")
    ss.get("https://admin.google.com/AdminHome")
    ss.urlwait("https://admin.google.com/AdminHome")
    Update(self, Has_GSuite_Account = True)
    # End
    self.Exit()
    # End
  def Insert_Txt_Record(self, TXT_RECORD):
    # just decided to do it with ss2 instead. okay,
    globals()["ss"] = Browser()("sele",65)
    ss2.get(self.Administrative_Url)
    ss2.bat().fid("account_email")
    ss2.bat(self.Shopify_Email)
    ss2.captcha_check()
    ss2.bat().ffst("button","Next")
    ss2.bat(ss2.Keys.ENTER)
    ss2.bat().fid("account_password")
    (ss2.bat(self.Shopify_Password))if(self.Shopify_Password)else(OSA.display_dialog("Please enter in your Shopify Password and click OK in this prompt.",text_prompt=False))
    ss2.captcha_check()
    ss2.nexturlwait()
    ss2.ffst("button","Log in").send_keys(ss2.Keys.ENTER)
    ss2.nexturlwaitjoin()
    if "accounts.shopify.com/login/two-factor" in ss2.current_url:
      ss2.fid("account_tfa_code").send_keys(OSA.display_dialog("Please enter the verification code sent to your phone and then click OK in this prompt.",default_answer="")).sp(5)
      ss2.captcha_check()
      ss2.fcns("login-card__submit").send_keys(ss2.Keys.ENTER).sp(5)
    ss2.ffs("input","placeholder","Search").sp(5)
    ss2.get("{}/settings/domains".format(self.Administrative_Url))


    ss2.get(ss2.fcns("domain-index-table__cell--host-name")[0].find_elements_by_tag_name("a")[0].get_attribute("href") + "/dns")
    ss2.jtns("span", "click", {"text":"Add custom record"})
    ss2.jtns("span", "click", {"text":"TXT record"})
    ss2.jtns("input", "@", {"name":"dns_record[name]"})
    ss2.jtns("input", TXT_RECORD, {"name":"dns_record[data[value]]"})
    ss2.jtns("button", "click", {"text":"Confirm"}).sp(10)
    ss2.quit()
  def Login_GSuite_Admin(self):
    globals()["ss"] = Browser()("sele")
    ss.get("https://gsuite.google.com")
    ss.fcn("js-sign-in-toggle").click()
    ss.fid("sign-in--domain").send_keys(self.Domain_Name)
    ss.ffs("button","data-g-action","Sign In: Go").click().sp(10)
    ss.fid("identifierId").send_keys(self.Business_Email_Address)
    ss.fid("identifierNext").click().sp(5)
    OSA.display_dialog("Enter Your Password In. Then Click OK Here In This Prompt.", text_prompt = False, buttons=["OK"])if(not self.GSuite_Password)else(ss.fn("password").send_keys(self.GSuite_Password))
    ss.fid("passwordNext").click().sp(5)
    if "accounts.google.com/signin/v2/challenge" in ss.current_url:
      ss.fid("idvPin").send_keys(OSA.display_dialog("Please enter in the 6 digit verification pin here and then click OK.",default_answer="")).sp(5)
      ss.ffsts("span","Next").click().sp(5)
    ss.urlwait("admin.google.com").sp(5)
  def GET_GOOGLE_API_PROJECT(self, Email_Address = None):
    self.Login_GSuite_Admin()if(Email_Address==self.Business_Email_Address)else(self.Login_Gmail_Account())

    def accept_terms():
      ss.get("https://console.cloud.google.com/apis/library?pli=1").sp(10)
      if "fail" != ss.fcn("mat-dialog-content",5):
        # Honestly, this was Bitch Move. Best to have autocomplete.
        # OSA.display_dialog("Please Press Accept In The Browser's Terms Of Service Dialog Box If You Accept.\nThen Click OK Here.", text_prompt = False, buttons=["OK"])
        ss.jtns("input", "click", {"aria-checked":"false"})
        redprint(ss.current_url)
        #ss.jtns("span", "click", {"text":"Accept"}).sp(120)
        ss.jtns("span", "click", {"text":"Agree and continue"}).sp(120)
    accept_terms()
    def get_create_proj_page():
      ss.get("https://console.cloud.google.com/projectcreate")
      ss.urlwait("/projectcreate")
      ss.fid("p6ntest-name-input").send_keys("GSuite Project").sp(35)
      while 0!=len(findall(ss.page_source, "will be based on your project name")): [print("1"), time.sleep(1)]
      project_id = findall(ss.page_source, "Project ID:.*?strong>(.*?)</strong")[0].strip().replace(".","")
      ss.jtns("span","click",{"text":"Create"})
      # ss.urlwait("/home/dashboard").sp(10)
      ss.fcns("cfc-info-card-header-content", _time=120)
      return project_id
    p = get_create_proj_page()
    def get_consent(p):
      ss.get("https://console.cloud.google.com/apis/credentials/consent?project=omega-clarity-272021%s"%p).sp(3)
      ss.zoom_level(0)
      # this needs to show the button before editing the name so the button can become clickable
      ss.ffs("input", "placeholder", "Application name").send_keys("GSuite Project").sp(5)
      ss.fid("api-consent-save").click()
      ss.urlwait("https://console.cloud.google.com/apis/credentials?project=%s"%p)
    get_consent(p)
    def get_oauth_client_id(p):
      ss.get("https://console.cloud.google.com/apis/credentials/oauthclient?project=%s"%p).sp(10)
      ss.jtns("span","click",{"text":"Other"})
      ss.ffst("span", "Create").click()
      ss.urlwait("highlightClient")
    get_oauth_client_id(p)
    def download_creds_file(p):
      ss.get("https://console.cloud.google.com/apis/credentials?project=%s"%p)
      assert 1 == len(ss.jtns("a",0,{"title":"Download JSON"}))
      dc1 = get_dircount(homepath("~/Downloads"))
      ss.jtns("a","click",{"title":"Download JSON"})
      dc2 = get_dircount(homepath("~/Downloads"))
      while dc2 == dc1:
        dc2 = get_dircount(homepath("~/Downloads"))
        if dc2 != dc1: break
      return get_latest_download()
    cf = download_creds_file(p)
    def save_cf_file(cf):
      # a = "." + "|".join([Email_Address,"Client_Secret","GSuite"]) + ".json"
      # shutil_move(cf, a)
      # Binarydata().update_or_create(a)
      a = "credentials.json"
      shutil_move(cf,a)
    save_cf_file(cf)


    ss.get("https://console.developers.google.com/apis/library/gmail.googleapis.com").sp(6).tp(lambda:ss.fids("p6n-mp-enable-api-button").click()).ftn("head")
    ss.get("https://console.developers.google.com/apis/library/drive.googleapis.com").sp(6).tp(lambda:ss.fids("p6n-mp-enable-api-button").click()).ftn("head")

    Google_Drive(Email_Address) # √
    Emailer().set_services_initiate_2(Email_Address) # √

    # End
    self.Exit()
    # End
  def Login_Gmail_Account(self):
    globals()["ss"] = Browser()("sele")
    ss.get("https://accounts.google.com/Logout")
    ss.get("http://accounts.google.com/signin")
    if("/signinchooser" in ss.current_url):
      ss.jtns("div","click",{"text":"Use another account"})
    ss.jtns("input",self.Gmail_Email_Address,{"type":"email"})
    ss.jtns("span","click",{"text":"Next"}).sp(2)
    (ss.jtns("input",self.Gmail_Password,{"type":"password"}).sp(2))if(self.Gmail_Password)else(OSA.display_dialog("Please enter in your Gmail account password and then click OK in this prompt.",text_prompt=False))
    ss.nexturlwait()
    ss.jtns("span","click",{"text":"Next"})
    ss.nexturlwaitjoin()
    if "accounts.google.com/signin/v2/challenge" in ss.current_url:
      ss.fid("idvPin").send_keys(OSA.display_dialog("Please enter in the 6 digit verification pin here and then click OK.",default_answer="")).sp(5)
      ss.ffsts("span","Next").click().sp(5)
    ss.urlwait("myaccount.google.com")
    # https://myaccount.google.com/?pli=1
  def GET_FACEBOOK_ACCOUNT(self):
    globals()["ss"] = Browser()("ch")
    ss.get("https://facebook.com/")
    ss.fn("firstname").send_keys(self.First_Name)
    ss.fn("lastname").send_keys(self.Last_Name)
    ss.fn("reg_email__").send_keys(self.Facebook_Email)
    ss.fn("reg_email_confirmation__").send_keys(self.Facebook_Email)
    (ss.fn("reg_passwd__").send_keys(self.Facebook_Password))if(self.Facebook_Password)else(OSA.display_dialog("Please enter in your Facebook password and then click OK in this dialog prompt", text_prompt=False))
    months_abbreviated = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]

    month, day, year = date_of_birth_drawer(self.Date_Of_Birth, m_num = True)
    m = months_abbreviated[int(month)-1]
    ss.fn("birthday_month").send_keys(m)
    ss.fn("birthday_day").send_keys(day)
    ss.fn("birthday_year").send_keys(year)

    if("female"==self.Gender):
      ss.jtns("label","click",{"text":"Female"})
    elif("male"==self.Gender):
      ss.jtns("label","click",{"text":"Male"})
    ss.jtns("button","click",{"name":"websubmit"})
    ss.urlwait("/confirmemail")
    ss.get("https://www.facebook.com/confirmemail.php")
    e = Emailer(self.Gmail_Email_Address)
    e.set_messages()
    input("this did not work for some reason. i used html test and copied the link and it did. not sure why.")
    [ss.get("https://www." + url) for url in set(findall(e.messages[0]["hidden_message_3"].decode(), "(facebook.com.*?confirmemail.*?)\""))]
    # urls = ["https://www." + i for i in set(findall(e.messages[0]["hidden_message_3"].decode(), "(facebook.com.*?confirmemail.*?)\""))]

    Update(self, Has_Facebook_Account = True)
    # End
    self.Exit()
    # End
  def GET_FACEBOOK_BUSINESS_MANAGER_ACCOUNT(self):
    if globals().get("ss", None) == None: self.Login_Facebook_Account(driver_type = "ch")
    self.CALL_IS_THIS_THE_KAYAYE_MY_FACEBOOK_BUSINESS_MANAGER_ACCOUNT()
    if self.Has_Facebook_Business_Manager_Account == True:
      return
    ss.get("https://business.facebook.com").sp(3)
    ss.set_zoom_level(16)
    ss.jtns("a","click",{"data-testid":"business-create-account-button"})
    
    [ss.ffs("div", "data-testid", "create-business-name-dialog").find_elements_by_tag_name("input")[0].clear(),ss.sp(2),ss.ffs("div", "data-testid", "create-business-name-dialog").find_elements_by_tag_name("input")[0].send_keys(self.Business_Name),ss.sp(2)]
    [ss.ffs("div", "data-testid", "create-business-name-dialog").find_elements_by_tag_name("input")[1].clear(),ss.sp(2),ss.ffs("div", "data-testid", "create-business-name-dialog").find_elements_by_tag_name("input")[1].send_keys(self.First_Name + (" ") + self.Last_Name),ss.sp(2)]
    [ss.ffs("div", "data-testid", "create-business-name-dialog").find_elements_by_tag_name("input")[2].clear(),ss.sp(2),ss.ffs("div", "data-testid", "create-business-name-dialog").find_elements_by_tag_name("input")[2].send_keys(self.Business_Email_Address),ss.sp(2)]
    ss.jtns("button","click",{"aria-disabled":"false"}).sp(5)

    ss.jtns("button","click",{"data-testid":"SUISearchableSelector/button"}).sp(2)
    [ss.ffss("input", "role", "combobox")[0].send_keys(self.Country_Of_Business), ss.sp(2)]
    ss.ffss("input", "role", "combobox")[0].send_keys(ss.Keys.ENTER)

    R = [i for i in ss.ftns("label") if i.get_attribute("style") != ""]
    X = keycall("find_elements_by_tag_name", R, "input")[:-2]
    Z = [x[0] for x in X]
    [[i.clear(),time.sleep(1)] for i in Z]
    time.sleep(2)
    [Z[0].send_keys(self.Street_Address), ss.sp(2)]
    if self.Street_Address_Line_2: [Z[1].send_keys(self.Street_Address_Line_2), ss.sp(2)]
    [Z[2].send_keys(self.City), ss.sp(2)]
    [Z[3].send_keys(self.State), ss.sp(2)]
    [Z[4].send_keys(self.ZIP_Code), ss.sp(2)]
    [Z[5].send_keys(self.Business_Phone_Number), ss.sp(2)]
    [Z[6].send_keys(self.Domain_Name), ss.sp(2)]
    Q = R[-2:]
    # Promote its own goods or services
    Q[0].click()
    time.sleep(4)
    ss.jtns("div","click",{"text":"Submit"})
    time.sleep(4)
    time.sleep(4)
    time.sleep(4)
    assert "Created" in "\n".join(key("text", ss.ftns("span")))
    time.sleep(60)
    e = Emailer(self.Business_Email_Address)
    e.set_messages()
    while(0==len([i for i in e.messages if i["subject"] == "Confirm your business email"])):
      time.sleep(1)
    R = [i for i in e.messages if i["subject"] == "Confirm your business email"][0]
    time.sleep(10)
    a_url =re.findall(r"(https://www.facebook.com/verify/.*?)\"",R["hidden_message_3"].decode())[0]
    ss.get(a_url).sp(20).urlwait("/settings/people/").sp(30)
    e.modify_as_read(R["id"], star = False)
    time.sleep(10)
    Facebook_Business_Manager_ID = findall(ss.current_url, "business_id=(.*?(?:\?|$))")[0]
    Update(self, Facebook_Business_Manager_ID = Facebook_Business_Manager_ID)
    time.sleep(10)
    Update(self, Has_Facebook_Business_Manager_Account = True)
    # End
    self.Exit()
    # End
  def CALL_IS_THIS_THE_KAYAYE_MY_FACEBOOK_BUSINESS_MANAGER_ACCOUNT(self):
    ss.get("https://business.facebook.com").sp(10)
    if(0==tryprocess(ss.ffs("a","data-testid","business-create-account-button"))):
      Update(self, Has_Facebook_Business_Manager_Account = False)
    else:
      Update(self, Has_Facebook_Business_Manager_Account = True)
  def Login_Facebook_Account(self, driver_type = "ch"):
    if driver_type == "ch":
      globals()["ss"] = Browser()("ch/").get("facebook.com").bat().fid("email").fid("pass").bat(self.Facebook_Email,((self.Facebook_Password)if(self.Facebook_Password)else([OSA.display_dialog("Please enter in your Facebook password and then click OK in this prompt.",text_prompt=False),""][1]))).nexturlwait().fid("loginbutton").send_keys(globe("Keys").ENTER).nexturlwaitjoin()
      ss.tp(lambda:(ss.ffss("input","aria-label","Login code").send_keys(OSA.display_dialog("Please enter the verification code sent to your device and then click OK in this prompt.",default_answer="")).sp(5).fn("submit[Continue]").send_keys(ss.Keys.ENTER).sp(5).fid("checkpointSubmitButton").send_keys(ss.Keys.ENTER).sp(5))if("facebook.com/checkpoint" in ss.current_url)else())
    elif driver_type == "sele":
      globals()["ss"] = Browser()("ch/").get("facebook.com").bat().fid("email").fid("pass").bat(self.Facebook_Email,((self.Facebook_Password)if(self.Facebook_Password)else([OSA.display_dialog("Please enter in your Facebook password and then click OK in this prompt.",text_prompt=False),""][1]))).nexturlwait().fid("loginbutton").click().nexturlwaitjoin()
      ss.tp(lambda:(ss.ffss("input","aria-label","Login code").send_keys(OSA.display_dialog("Please enter the verification code sent to your device and then click OK in this prompt.",default_answer="")).sp(5).fn("submit[Continue]").click().sp(5).fid("checkpointSubmitButton").click().sp(5))if("facebook.com/checkpoint" in ss.current_url)else())
    # 2FA click use text message
    """
    ss.jtns("strong","click",{"text":"Use text message"})
    ss.ffst("a","Didn’t receive a code?").send_keys(ss.Keys.ENTER)
    """
  def GET_FACEBOOK_AD_ACCOUNT(self):
    if globals().get("ss", None) == None: self.Login_Facebook_Account(driver_type = "ch")
    ss.get("https://business.facebook.com/settings/ad-accounts?business_id=%s"%self.Facebook_Business_Manager_ID)
    
    ss.jtns("button","click",{"data-testid":"AddAssetButton-brands/menuRoot"})
    ss.jtns("div","click",{"text":"Create a New Ad Account"})
    
    ss.ffss("input", "data-testid", "AdAccountDialogs-brands/createTextInput").send_keys(self.Facebook_Business_Ad_Account_Name).sp(5)

    [tryprocess(i.send_keys,ss.Keys.ENTER) for i in ss.fxsxs(ss.fcns("hLeft")[5])]
    ss.jtns("span","click",{"text":self.Facebook_Business_Ad_Account_Time_Zone})

    ss.ffsts("div", "Create Ad Account").click().sp(30)
    ss.nexturwait()
    ss.jtns("div","click",{"text":"Create Ad Account"})
    ss.nexturlwaitjoin()

    Update(self, Facebook_Business_Ad_Account_ID = findall(ss.current_url,"/settings/ad-accounts/([0-9]+)")[0])
    
    ss.get("https://business.facebook.com/settings/ad-accounts/%s"%self.Facebook_Business_Ad_Account_ID)

    ss.jtns("div","click",{"text":"Add People"}).sp(10)
    # ss.jtns("div","click",{"role":"checkbox"})
    X = ss.ffss("div", "role", "checkbox")
    for i in X:
      if("true"!=i.get_attribute("aria-checked")):
        i.click()
    ss.ffsts("div", "Assign").click().sp(7)
    ss.jtns("div","click",{"text":"Assign"}).sp(7)
    ss.jtns("div","click",{"text":"Done"}).sp(7)
    time.sleep(30)

    ss.get("https://www.facebook.com/ads/manager/account_settings/account_billing/?act=%s"%(self.Facebook_Business_Ad_Account_ID))
    if self.Facebook_Financial_Card_Information:
      Financial_Card_Number = AttrDict(self.Facebook_Financial_Card_Information).Financial_Card_Number
      Financial_Card_Expiration_Date = "".join(re.findall("\d+", AttrDict(self.Facebook_Financial_Card_Information).Financial_Card_Expiration_Date))
      Financial_Card_CVV = AttrDict(self.Facebook_Financial_Card_Information).Financial_Card_CVV
      Financial_Card_Billing_First_Name = AttrDict(self.Facebook_Financial_Card_Information).Financial_Card_Billing_First_Name
      Financial_Card_Billing_Last_Name = AttrDict(self.Facebook_Financial_Card_Information).Financial_Card_Billing_Last_Name
      Financial_Card_Billing_Street_Address = AttrDict(self.Facebook_Financial_Card_Information).Financial_Card_Billing_Street_Address
      Financial_Card_Billing_Street_Address_Line_2 = AttrDict(self.Facebook_Financial_Card_Information).Financial_Card_Billing_Street_Address_Line_2
      Financial_Card_Billing_Country = AttrDict(self.Facebook_Financial_Card_Information).Financial_Card_Billing_Country
      Financial_Card_Billing_State = AttrDict(self.Facebook_Financial_Card_Information).Financial_Card_Billing_State
      Financial_Card_Billing_City = AttrDict(self.Facebook_Financial_Card_Information).Financial_Card_Billing_City
      Financial_Card_Billing_ZIP_Code = AttrDict(self.Facebook_Financial_Card_Information).Financial_Card_Billing_ZIP_Code

      ss.jtns("div","click",{"text":"Add Payment Method"})
      ss.ffs("input","data-testid","credit_card_number").send_keys(Financial_Card_Number)
      ss.ffs("input","data-testid","credit_card_month").send_keys(Financial_Card_Expiration_Date[0:2])
      ss.ffs("input","data-testid","credit_card_year").send_keys(Financial_Card_Expiration_Date[2:4])
      ss.ffs("input","data-testid","credit_card_security_code").send_keys(Financial_Card_CVV)
      ss.ffs("input","data-testid","credit_card_postal_code").send_keys(Financial_Card_Billing_ZIP_Code)
    else:
      OSA.display_dialog("Please fill in the financial card number, expiration month, expiration year, cvv, and zip code. Then click OK in this prompt.",text_prompt=False)
    ss.jtns("button","click",{"type":"submit"})
    time.sleep(30)

    Update(self, Has_Facebook_Ad_Account_ID = True)
    # End
    self.Exit()
    # End
  def GET_FACEBOOK_PIXEL(self):
    if globals().get("ss", None) == None: self.Login_Facebook_Account(driver_type = "ch")
    ss.get("https://www.facebook.com/events_manager/?selected_data_sources=PIXEL&act={}&business_id={}".format(self.Facebook_Business_Ad_Account_ID, self.Facebook_Business_Manager_ID)).sp(5)
    ss.jtns("button","click",{"text":"Create a Pixel"}).sp(7)
    # ss.ffss("input", "placeholder", "Enter your website URL (optional)").send_keys(self.Domain_Name).sp(10)
    ss.ffsts("div", "Create").click().sp(10)
    ss.jtns("button","click",{"text":"Create a Pixel"}).sp(7)
    ss.jtns("button","click",{"text":"Create"}).sp(7)
    ss.urlwait("&pixel_id=")
    Facebook_Pixel_ID = re.findall(r"pixel_id=(.*?)(?:\?|$)", ss.current_url)[0].split("?")[0]
    Update(self, Facebook_Pixel_ID = Facebook_Pixel_ID)
    ss.get("https://www.facebook.com/events_manager/pixel/events?act={}&business_id={}&selected_data_sources=PIXEL&pixel_id={}".format(self.Facebook_Business_Ad_Account_ID, self.Facebook_Business_Manager_ID, self.Facebook_Pixel_ID)).sp(7)
    Update(self, Has_Facebook_Pixel = True)
    # End
    self.Exit()
    # End
  def CALL_IS_THIS_THE_KAYAYE_MY_FACEBOOK_DEVELOPER_ACCOUNT(self):
    ss.get("https://developers.facebook.com").sp(10)
    if([]==ss.ffss("a", "data-testid", "register_button")):
      Update(self, Has_Facebook_Developer_Account = True)
    else:
      Update(self, Has_Facebook_Developer_Account = False)
  def GET_FACEBOOK_DEVELOPER_ACCOUNT(self):
    if globals().get("ss", None) == None: self.Login_Facebook_Account(driver_type = "ch")
    self.CALL_IS_THIS_THE_KAYAYE_MY_FACEBOOK_DEVELOPER_ACCOUNT()
    if self.Has_Facebook_Developer_Account == True:
      return
    ss.get("https://developers.facebook.com")
    ss.set_zoom_level(5)
    ss.jtns("a","click",{"data-testid":"register_button"}).sp(7)
    ss.jtns("button","click",{"data-testid":"config_register_button"}).sp(7)
    ss.fns("contact_point").send_keys(self.Business_Phone_Number).sp(10)
    ss.jtns("button","click",{"text":"Send as Text"}).sp(7)
    if([]!= ss.fids("ajax_password")):
      # Check For Any Available Of Password Field. (usually it will appear. it won't appear if you've authenticated in the last few minutes)
      OSA.display_dialog("Enter in Facebook password in the browser. Then click OK in this dialog.",text_prompt=False)if(self.Facebook_Password==None)else(ss.fids("ajax_password").send_keys(self.Facebook_Password).sp(10))
      ss.jtns("button","click",{"data-testid":"sec_ac_button"}).sp(10)
      ss.jtns("button","click",{"text":"Send as Text"}).sp(7)
    verif = OSA.display_dialog("Please input the verification code sent to your phone", buttons = ["Enter"], default_answer = "")
    ss.ffs("input", "placeholder", "Enter Confirmation Code").send_keys(verif).sp(5)
    ss.jtns("button","click",{"text":"Verify"}).sp(7)
    # ss.ffss("button", "data-testid", "registered_success_create_app_text").click()
    ss.jtns("button","click",{"text":"Next"}).sp(15)
    ss.get("https://developers.facebook.com")
    Update(self, Has_Facebook_Developer_Account = True)
    # End
    self.Exit()
    # End
  def GET_FACEBOOK_MARKETING_APP(self):
    if globals().get("ss", None) == None: self.Login_Facebook_Account(driver_type = "ch")
    ss.get("https://developers.facebook.com/apps")
    ss.jtns("a","click",{"data-testid":"add-a-new-app-button"}).sp(5)
    ss.fns("basic_name").send_keys("%s's first app" % self.First_Name).sp(5)
    ss.ffss("input", "data-testid", "contact-email").send_keys(self.Facebook_Email).sp(5)
    ss.jtns("button","click",{"data-testid":"create-app-id-button"}).sp(5)
    OSA.display_dialog("Please fill out the captcha until you see the green check. Then click submit in the browser. Then click OK here.", text_prompt = False, buttons = ["OK"])
    Update(self, Facebook_Business_App_ID = findall(ss.current_url,"/apps/([0-9]+)/")[0])
    # Won't require an exit because will always call the next chained function which is ALWAYS_FOR_SETUP_FACEBOOK_MARKETING_APP_ANDGET_TOKEN
  def ALWAYS_FOR_SETUP_FACEBOOK_MARKETING_APP_ANDGET_TOKEN(self):
    ss.get("https://developers.facebook.com/apps/{}".format(self.Facebook_Business_App_ID))
    ss.set_zoom_level(16)
    # add the Marketing API app
    try:
      Marketing_API_Division = [i for i in  ss.fcns("_4-u8") if "Marketing API" in i.text][0]
      Marketing_API_Division_Setup_Button = [i for i in Marketing_API_Division.find_elements_by_tag_name("div") if i.get_attribute("data-hover") == "tooltip"][0]
      Marketing_API_Division_Setup_Button.click()
    except: "the Marketing API is already added."

    # URL_1
    ss.get("https://developers.facebook.com/apps/{}/settings/basic/".format(self.Facebook_Business_App_ID)).sp(3)
    ss.jtns("button","click",{"text":"Show"})
    assert(1==len(ss.fids("ajax_password")))
    OSA.display_dialog("Please enter in your password. Then click OK in this dialog",text_prompt=False)if(None==self.Facebook_Password)else(ss.fids("ajax_password").send_keys(self.Facebook_Password))
    ss.jtns("button","click",{"data-testid":"sec_ac_button"}).sp(10)
    Update(self, Facebook_Business_App_Secret = key("text", ss.fcns("_5rv9"))[0]) #_5rv9 for secret

    ss.fns("app_details_privacy_policy_url")
    Facebook_Business_App_Privacy_Policy = 'Privacy Policy\n\n\nEffective date: __Effective_Date__\n\n\n__self.Business_Name__ ("us", "we", or "our") operates the http://__self.Domain_Name__/ website (the "Service").\n\nThis page informs you of our policies regarding the collection, use, and disclosure of personal data when you use our Service and the choices you have associated with that data. Our Privacy Policy for __self.Business_Name__ is managed through Free Privacy Policy.\n\nWe use your data to provide and improve the Service. By using the Service, you agree to the collection and use of information in accordance with this policy. Unless otherwise defined in this Privacy Policy, terms used in this Privacy Policy have the same meanings as in our Terms and Conditions, accessible from http://__self.Domain_Name__/\n\n\nInformation Collection And Use\n\nWe collect several different types of information for various purposes to provide and improve our Service to you.\n\nTypes of Data Collected\n\nPersonal Data\n\nWhile using our Service, we may ask you to provide us with certain personally identifiable information that can be used to contact or identify you ("Personal Data"). Personally identifiable information may include, but is not limited to:\n\n\nCookies and Usage Data\n\n\nUsage Data\n\nWe may also collect information how the Service is accessed and used ("Usage Data"). This Usage Data may include information such as your computer\'s Internet Protocol address (e.g. IP address), browser type, browser version, the pages of our Service that you visit, the time and date of your visit, the time spent on those pages, unique device identifiers and other diagnostic data.\n\nTracking & Cookies Data\nWe use cookies and similar tracking technologies to track the activity on our Service and hold certain information.\nCookies are files with small amount of data which may include an anonymous unique identifier. Cookies are sent to your browser from a website and stored on your device. Tracking technologies also used are beacons, tags, and scripts to collect and track information and to improve and analyze our Service.\nYou can instruct your browser to refuse all cookies or to indicate when a cookie is being sent. However, if you do not accept cookies, you may not be able to use some portions of our Service.\nExamples of Cookies we use:\n\n    Session Cookies. We use Session Cookies to operate our Service.\n    Preference Cookies. We use Preference Cookies to remember your preferences and various settings.\n    Security Cookies. We use Security Cookies for security purposes.\n\n\nUse of Data\n    \n__self.Business_Name__ uses the collected data for various purposes:    \n\n    To provide and maintain the Service\n    To notify you about changes to our Service\n    To allow you to participate in interactive features of our Service when you choose to do so\n    To provide customer care and support\n    To provide analysis or valuable information so that we can improve the Service\n    To monitor the usage of the Service\n    To detect, prevent and address technical issues\n\n\nTransfer Of Data\nYour information, including Personal Data, may be transferred to — and maintained on — computers located outside of your state, province, country or other governmental jurisdiction where the data protection laws may differ than those from your jurisdiction.\nIf you are located outside United States and choose to provide information to us, please note that we transfer the data, including Personal Data, to United States and process it there.\nYour consent to this Privacy Policy followed by your submission of such information represents your agreement to that transfer.\n__self.Business_Name__ will take all steps reasonably necessary to ensure that your data is treated securely and in accordance with this Privacy Policy and no transfer of your Personal Data will take place to an organization or a country unless there are adequate controls in place including the security of your data and other personal information.\n\nDisclosure Of Data\n\nLegal Requirements\n__self.Business_Name__ may disclose your Personal Data in the good faith belief that such action is necessary to:\n\n    To comply with a legal obligation\n    To protect and defend the rights or property of __self.Business_Name__\n    To prevent or investigate possible wrongdoing in connection with the Service\n    To protect the personal safety of users of the Service or the public\n    To protect against legal liability\n\n\nSecurity Of Data\nThe security of your data is important to us, but remember that no method of transmission over the Internet, or method of electronic storage is 100% secure. While we strive to use commercially acceptable means to protect your Personal Data, we cannot guarantee its absolute security.\n\nService Providers\nWe may employ third party companies and individuals to facilitate our Service ("Service Providers"), to provide the Service on our behalf, to perform Service-related services or to assist us in analyzing how our Service is used.\nThese third parties have access to your Personal Data only to perform these tasks on our behalf and are obligated not to disclose or use it for any other purpose.\n\n\n\nLinks To Other Sites\nOur Service may contain links to other sites that are not operated by us. If you click on a third party link, you will be directed to that third party\'s site. We strongly advise you to review the Privacy Policy of every site you visit.\nWe have no control over and assume no responsibility for the content, privacy policies or practices of any third party sites or services.\n\n\nChildren\'s Privacy\nOur Service does not address anyone under the age of 18 ("Children").\nWe do not knowingly collect personally identifiable information from anyone under the age of 18. If you are a parent or guardian and you are aware that your Children has provided us with Personal Data, please contact us. If we become aware that we have collected Personal Data from children without verification of parental consent, we take steps to remove that information from our servers.\n\n\nChanges To This Privacy Policy\nWe may update our Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on this page.\nWe will let you know via email and/or a prominent notice on our Service, prior to the change becoming effective and update the "effective date" at the top of this Privacy Policy.\nYou are advised to review this Privacy Policy periodically for any changes. Changes to this Privacy Policy are effective when they are posted on this page.\n\n\nContact Us\nIf you have any questions about this Privacy Policy, please contact us:\n\n        By email: __self.Business_Email_Address__\n          \n                                        \n'
    Effective_Date = datetime.now().strftime("%B %d, %Y")
    Facebook_Business_App_Privacy_Policy = Replacements(Facebook_Business_App_Privacy_Policy, "__self.Business_Name__", self.Business_Name, "__self.Domain_Name__", self.Domain_Name, "__self.Business_Email_Address__", self.Business_Email_Address, "__Effective_Date__", Effective_Date)
    text_to_docx(Facebook_Business_App_Privacy_Policy, "Facebook Business App Privacy Policy.docx")
    #...
    #???
    #...
    Privacy_Policy_URL = Google_Drive(Email_Address = self.Business_Email_Address).create(address = "Facebook Business App Privacy Policy.docx", public = True)
    rm("Facebook Business App Privacy Policy.docx")
    ss.fns("app_details_privacy_policy_url").send_keys(Privacy_Policy_URL).sp(10)
    ss.jns("save_changes","click",{}).sp(10)
    time.sleep(10)
    

    # URL_2
    def get_token():
      #ss.get("https://developers.facebook.com/apps/{}/marketing-api/tools/".format(self.Facebook_Business_App_ID))
      #ss.jcns("_66ul","click",{})
      #ss.jtns("button","click",{"text":"Get Token"}).sp(10)
      #Update(self, Facebook_Business_App_Token = key("text", ss.fcns("uiBoxLightblue"))[0])
      ss.get("https://developers.facebook.com/tools/explorer/")
      ss.zoom_level(5)
      ss.jtns("span","click",{"text":"Get Token"})
      ss.jtns("span","click",{"text":"Get User Access Token"})
      ss.jtns("button","click",{"text":"Get Access Token"})
      Facebook_Business_App_Token = ss.ffs("input","placeholder",'Paste in an existing Access Token or click "Get User Access Token"').get_attribute("value")

      Update(self, Facebook_Business_App_Token = Facebook_Business_App_Token)
    get_token()

    def extend_token():
      ss.get("https://developers.facebook.com/tools/debug/accesstoken/").sp(10)
      ss.zoom_level(5)
      ss.fns("access_token").send_keys(self.Facebook_Business_App_Token)
      #ss.jtns("button","click",{"text":"Extend Access Token"}).sp(10)
      ss.jtns("button","click",{"text":"Debug"}).sp(10)
      ss.jtns("button","click",{"text":"Extend Access Token"}).sp(10)
      # Get Token
      if([] != ss.fids("ajax_password",_time=5)):
        # Check For Any Available Of Password Field. (usually it will appear. it won't appear if you've authenticated in the last few minutes)
        OSA.display_dialog("Enter in Facebook password in the browser. Then click OK in this dialog.",text_prompt=False)if(self.Facebook_Password==None)else(ss.fids("ajax_password").send_keys(self.Facebook_Password).sp(10))
        ss.jtns("button","click",{"data-testid":"sec_ac_button"}).sp(10)
      Update(self, Facebook_Business_App_Token = ss.fcns("lfloat")[lmap(len, key("text", ss.fcns("lfloat"))).index(max(lmap(len, key("text", ss.fcns("lfloat")))))].text)
    extend_token()


    def turn_on_live_mode():
      ss.get("https://developers.facebook.com/apps/{}/settings/basic/".format(self.Facebook_Business_App_ID)).sp(3)
      ss.zoom_level(5)
      ss.jtns("div","click",{"text":"ON"}).sp(10)
      ss.jtns("a","click",{"rel":"toggle","text":"Choose a Category"}).sp(5)
      ss.jtns("a","click",{"role":"menuitemcheckbox","text":"Business and Pages"}).sp(5)
      ss.jtns("button","click",{"text":"Confirm"}).sp(60)
      [ss.handle_alert().sp(2) for i in range(3)]
      #ss.ffsts("span", "Business and Pages").click().sp(10)
      #[[tryprocess(i.click), time.sleep(5)] for i in ss.ffsts("button", "Confirm")]; sp(5)
      #tryprocess(ss.handle_alert); sp(10)
      #ss.refresh(); sp(2)
      #assert "ON" in key("text", ss.ffss("a", "role", "switch")); sp(5)
    turn_on_live_mode()
    # End
    self.Exit()
    # End
  def ALWAYS_FOR_INPUT_SHOPIFY_PIXEL(self):
    self.Login_Shopify_Store()
    ss.get("{}/online_store/preferences".format(self.Administrative_Url)).sp(10)
    ss.frame([i for i in ss.ftns("iframe") if i.get_attribute("title") == "Online Store Preferences"][0]).sp(3)
    ss.arrowdowndo(lambda: 0==len(ss.ffss("input", "placeholder", "Paste your Facebook Pixel ID here"))).sp(3)
    ss.ffss("input", "placeholder", "Paste your Facebook Pixel ID here").send_keys(self.Facebook_Pixel_ID).sp(3)
    ss.ffsts("button", "Save").click().sp(4)
    ss.dc().sp(10)
    # End
    self.Exit()
    # End
  def Login_Shopify_Store(self):
    globals()["ss"] = Browser()("sele",65)
    ss.get(self.Administrative_Url)
    ss.bat().fid("account_email")
    ss.bat(self.Shopify_Email)
    ss.captcha_check()
    ss.bat().ffst("button","Next")
    ss.bat("Click")
    ss.bat().fid("account_password")
    ss.bat((self.Shopify_Password)if(self.Shopify_Password)else([OSA.display_dialog("Please enter in your Shopify password and then click OK in this prompt.",text_prompt=False),""][1]))
    ss.captcha_check()
    ss.nexturlwait()
    ss.ffst("button","Log in").click()
    ss.nexturlwaitjoin()
    if "accounts.shopify.com/login/two-factor" in ss.current_url:
      ss.fid("account_tfa_code").send_keys(OSA.display_dialog("Please enter the verification code sent to your phone and then click OK in this prompt.",default_answer="")).sp(5)
      ss.captcha_check()
      ss.fcns("login-card__submit").click().sp(5)
    ss.ffs("input","placeholder","Search").sp(5)
    print(ss)
    # insert time for checking if the homepage is loaded
  def GET_ALIEXPRESS_ACCOUNT(self):
    globals()["ss"] = Browser()("sele") # only a crazy dude would redo ALL of AliExpress with FF65 or GC68
    ss.set_zoom_level(0)
    ss.get("aliexpress.com").sp(10)
    if([]!=ss.fcns("close-layer",6)):
      ss.fcns("close-layer").click()

    ss.ffss("a", "data-role", "join-link").click().sp(10)
    ss.fids("email-ipt").s_keys(self.AliExpress_Email).fids("email-ipt").click()
    ss.fids("first-name-ipt").send_keys(self.First_Name)
    ss.fids("last-name-ipt").send_keys(self.Last_Name)
    ss.bat().fids("password-ipt").fids("confirm-password-ipt")
    (ss.bat(self.AliExpress_Password, self.AliExpress_Password))if(self.AliExpress_Password)else(OSA.display_dialog("Please enter in your AliExpress password and then click OK in this prompt.",text_prompt=False))

    if([]!=ss.fids("checkcode-img",2)):
      ss.fid("checkcode-ipt").send_keys(handle_captcha(ss.fid("checkcode-img").get_attribute("src"))["text"])
      ss.ffss("input","value","Create Your Account").send_keys(ss.Keys.ENTER).sp(15)
    while([]!=ss.fids("checkcode-tipbox",5)):
      if([]!=ss.fids("checkcode-img",2)): ss.fid("checkcode-ipt").send_keys(handle_captcha(ss.fid("checkcode-img").get_attribute("src"))["text"])
      #ss.fid("submit-btn").click()
      ss.ffss("input","value","Create Your Account").send_keys(ss.Keys.ENTER)
      #ss.fid("submit-btn").send_keys(ss.Keys.ENTER); sp(3)
    ss.urlwait("aliexpress.com")
    # don't see a confirmation email
    ss.get(findall(keyequals("sender","account@notice.aliexpress.com",Emailer(self.AliExpress_Email).set_messages().messages)[0]["hidden_message_3"].decode(),"\"(.*?accounts.aliexpress.com.*?)\"")[0])
    Update(self, Has_AliExpress_Account = True)
    # End
    self.Exit()
    # End
  def CALL_IS_THIS_THE_KAYAYE_MY_ALIPAY_ACCOUNT(self):
    globals()["ss"] = Browser()("sele") # only a crazy dude would redo ALL of AliExpress with FF65 or GC68
    ss.set_zoom_level(0)
    ss.get("https://login.aliexpress.com/?return_url=https://login.aliexpress.com/ipay_login.htm").dc().switch_to_frame("alibaba-login-box").bat().fn("loginId").fn("password").fn("submit-btn").bat(self.AliExpress_Email, (self.AliExpress_Password)if(self.AliExpress_Password)else([OSA.display_dialog("Please enter in your AliExpress_Password and then click OK in this dialog.",text_prompt=False),""][1]), ss.Keys.ENTER).sp(8).ftn("body").sp(8)
    Has_AliPay_Account = None
    if ss.current_url == ("https://intl.alipay.com/user/activateEmail.htm"):
      Has_AliPay_Account = False
    else:
      Has_AliPay_Account = True
    # End
    self.Exit()
    # End

    return Has_AliPay_Account
  def GET_ALIPAY_ACCOUNT(self):
    if False == self.CALL_IS_THIS_THE_KAYAYE_MY_ALIPAY_ACCOUNT():
      1
    else:
      print("Already have AliPay account")
      return
    globals()["ss"] = Browser()("sele") # only a crazy dude would redo ALL of AliExpress with FF65 or GC68
    ss.set_zoom_level(0)
    ss.get("https://login.aliexpress.com/?return_url=https://login.aliexpress.com/ipay_login.htm").dc().switch_to_frame("alibaba-login-box").bat().fn("loginId").fn("password").fn("submit-btn").bat(self.AliExpress_Email, (self.AliExpress_Password)if(self.AliExpress_Password)else([OSA.display_dialog("Please enter in your AliExpress_Password and then click OK in this dialog.",text_prompt=False),""][1]), ss.Keys.ENTER).sp(8).ftn("body").sp(8)
    ss.urlwait("https://intl.alipay.com/user/activateEmail.htm")

    ss.fn("checkCode").send_keys(handle_captcha(ss.fid("AT-refresh-img").get_attribute("src"))["text"]).sp(3)
    ss.fid("AT-send-confirm-email").click().sp(8)
    while(not ss.current_url.startswith("https://intl.alipay.com/user/verifyEmail.htm")):
      ss.fn("checkCode").send_keys(handle_captcha(ss.fid("AT-refresh-img").get_attribute("src"))["text"]).sp(3)
      ss.fid("AT-send-confirm-email").click().sp(8)
      #--^

    ss.get(findall(keyequals("sender","service@mail.alipay.com",Emailer(self.AliExpress_Email).set_messages().messages)[0]["hidden_message_3"].decode(),"href=\"(.*?checkActivateCode.*?)\"")[0])
    ss.urlwait("/user/setSecurity")
    [ss.ffsts("span", "Please select a security question.")[0].click(),ss.sp(4),ss.fcns("ui-select-content")[0].find_elements_by_tag_name("li")[1].click(),ss.sp(5),Update(self,AliPay_Security_Question_1=generate_one_alphanumeric_string(32)),ss.fn("secureAnswerOne").send_keys(self.AliPay_Security_Question_1).sp(3)]
    [ss.ffsts("span", "Please select a security question.")[0].click(),ss.sp(4),ss.fcns("ui-select-content")[1].find_elements_by_tag_name("li")[2].click(),ss.sp(5),Update(self,AliPay_Security_Question_2=generate_one_alphanumeric_string(32)),ss.fn("secureAnswerTwo").send_keys(self.AliPay_Security_Question_2).sp(3)]
    [ss.ffsts("span", "Please select a security question.")[0].click(),ss.sp(4),ss.fcns("ui-select-content")[2].find_elements_by_tag_name("li")[3].click(),ss.sp(5),Update(self,AliPay_Security_Question_3=generate_one_alphanumeric_string(32)),ss.fn("secureAnswerThree").send_keys(self.AliPay_Security_Question_3).sp(3)]
    OSA.display_dialog("For your AliPay password in this page, please enter in your AliPay Pin, as well as enter in your AliPay Pin in the confirm field. Then click OK in this dialog prompt.",text_prompt=False)if(self.AliPay_Pin==None)else([ss.fn("password").s_keys(self.AliPay_Password).sp(2).fn("confirmPassword").s_keys(self.AliPay_Password)])
    ss.ffst("button","Submit").click().sp(5)
    ss.urlwait("/activateSuccess.htm")

    ss.get("https://intl.alipay.com/ihome/user/queryUserBindCard.htm")
    ss.ffst("a", "Add cards").click()
    click_financial_card_type = None
    if self.AliExpress_Financial_Card_Information:
      Financial_Card_Number = AttrDict(self.AliExpress_Financial_Card_Information).Financial_Card_Number
      Financial_Card_Expiration_Date = "".join(re.findall("\d+", AttrDict(self.AliExpress_Financial_Card_Information).Financial_Card_Expiration_Date))
      Financial_Card_CVV = AttrDict(self.AliExpress_Financial_Card_Information).Financial_Card_CVV
      Financial_Card_Billing_First_Name = AttrDict(self.AliExpress_Financial_Card_Information).Financial_Card_Billing_First_Name
      Financial_Card_Billing_Last_Name = AttrDict(self.AliExpress_Financial_Card_Information).Financial_Card_Billing_Last_Name
      Financial_Card_Billing_Street_Address = AttrDict(self.AliExpress_Financial_Card_Information).Financial_Card_Billing_Street_Address
      Financial_Card_Billing_Street_Address_Line_2 = AttrDict(self.AliExpress_Financial_Card_Information).Financial_Card_Billing_Street_Address_Line_2
      Financial_Card_Billing_Country = AttrDict(self.AliExpress_Financial_Card_Information).Financial_Card_Billing_Country
      Financial_Card_Billing_State = AttrDict(self.AliExpress_Financial_Card_Information).Financial_Card_Billing_State
      Financial_Card_Billing_City = AttrDict(self.AliExpress_Financial_Card_Information).Financial_Card_Billing_City
      Financial_Card_Billing_ZIP_Code = AttrDict(self.AliExpress_Financial_Card_Information).Financial_Card_Billing_ZIP_Code
      ss.fn("cardNo").send_keys(Financial_Card_Number)
      ss.fn("expiryMonth").send_keys(Financial_Card_Expiration_Date[0:2])
      ss.fn("expiryYear").send_keys(Financial_Card_Expiration_Date[2:4])
      ss.fn("cvv2").send_keys(Financial_Card_CVV)
      ss.fn("firstName").send_keys(Financial_Card_Billing_First_Name)
      ss.fn("lastName").send_keys(Financial_Card_Billing_Last_Name)
      ss.fn("address1-s").send_keys(Financial_Card_Billing_Street_Address)
      ss.fn("address2-s").send_keys(Financial_Card_Billing_Street_Address_Line_2)
      ss.fn("city-s").send_keys(Financial_Card_Billing_City)
      ss.ffs("option","value",self.State).click()    
      ss.fn("postCode-s").send_keys(Financial_Card_Billing_ZIP_Code)
      click_financial_card_type = True
    else:
      OSA.display_dialog("Please fill in the card number, expiration month, expiration year, cvv, first name, last name, address line 1, address line 2, city, state, and zip code.",text_prompt=False)      
      click_financial_card_type = False
    (ss.fcns("password").s_keys(self.AliPay_Pin).fn("oldPassword").send_keys(self.AliPay_Pin))if(self.AliPay_Pin)else(OSA.display_dialog("Please enter your AliPay Pin here two times and then click OK in this dialog.",text_prompt=False))
    if click_financial_card_type == True:
      ss.fcns("i-bank-mastercard").click().sp(2)
    assert [] == ss.ffss("input","data-current-errormessage","The card number you have entered is invalid.",5)
    ss.ffs("button","type","submit").click()
    if [] != ss.ffss("input","data-current-errormessage","The card number you have entered is invalid.",5): [ss.fcns("i-bank-visa").click().sp(2), ss.ffs("button","type","submit").click()]
    ss.urlwait("/bindcard/selfhelp-success").sp(10)
    # End
    self.Exit()
    # End

    # OOPS I DID IT AS ADD WITH THE THING... WAIT... how about now here, i verify? because it's low case.
    # o.o.o w/e/w/e/w/e/w/e/w/e/w/e/w/e/w/e/w/e/w/e/ someone has a new... ali acc. OKAY... yeah do not use
    # do not use the Domain_Name. lolololol. lololol. lolol. lol. lololololololol. lololololol.
    # then the first problem is the Facebook.com signup verification. .? O.O? so maybe current_email required.
    # oh plus, it does not make sense to sign up to Facebook with an email that is not a personal email.
    # Confirmation, AliPay, AliPay Pin, AliPay Password, AliExpress Password
    # AliPay Credit/Debit Card, Preferred Debit/Credit Card Last 4 Digits
  def Close_Gmail_Account(self):
    pass
  def Close_GSuite_Account(self):
    pass
  def Close_Shopify_Store(self):
    self.Login_Shopify_Store()
    ss.get("{}/settings/account".format(self.Administrative_Url)).sp(5)
    ss.jcns("ui-button","click",{"text":"Close store","data-bind-event-click":"passwordConfirmationModal.show()"}).sp(5)
    ss.jtns("input",(self.Shopify_Password)if(self.Shopify_Password)else([OSA.display_dialog("Please enter in your Shopify password here and then click OK.",text_prompt=False),""][1]),{"id":"password","name":"password"}).sp(5)
    ss.jtns("input","click",{"name":"commit","value":"Confirm"}).sp(5)
    ss.jcns("has-loading","click",{"text":"Close store","name":"button"}).sp(5)
    ss.jtns("h1",0,{"text":"You have successfully logged out"}).sp(5)
  def Deactivate_Facebook_Account(self):
    pass
  def Close_AliExpress_Account(self):
    pass
  def Run_Setup(self):
    OSA.notify("-");return
    if self.Has_Gmail_Account == False:
      self.GET_GMAIL_ACCOUNT()
    if self.Has_Shopify_Store == False:
      self.GET_SHOPIFY_STORE()
    self.GET_SHOPIFY_APP()
    if self.Has_GSuite_Account == False:
      self.GET_GSUITE_ACCOUNT()
    self.GET_GOOGLE_API_PROJECT(self.Gmail_Email_Address)
    self.GET_GOOGLE_API_PROJECT(self.Business_Email_Address)
    if self.Has_Facebook_Account == False:
      self.GET_FACEBOOK_ACCOUNT()
    if self.Has_Facebook_Business_Manager_Account == False:
      self.GET_FACEBOOK_BUSINESS_MANAGER_ACCOUNT()
    if self.Has_Facebook_Ad_Account_ID == False:
      self.GET_FACEBOOK_AD_ACCOUNT()
    if self.Has_Facebook_Pixel == False:
      self.GET_FACEBOOK_PIXEL()
    if self.Has_Facebook_Developer_Account == False:
      self.GET_FACEBOOK_DEVELOPER_ACCOUNT()
    self.GET_FACEBOOK_MARKETING_APP()
    if self.Has_AliExpress_Account == False:
      self.GET_ALIEXPRESS_ACCOUNT()
    self.GET_ALIPAY_ACCOUNT()
  def __call__(self, init_shop, window_index=[0,0,3,3], **kwargs):
    import shopify
    from facebook_business.adobjects.targetingsearch import TargetingSearch
    from facebook_business.adobjects.targeting import Targeting
    # from facebook_business.adobjects.reachestimate import ReachEstimate
    from facebook_business.adobjects.customaudiencedatasource import CustomAudienceDataSource
    from facebook_business.adobjects.customaudience import CustomAudience
    from facebook_business.adobjects.campaign import Campaign
    from facebook_business.adobjects.adset import AdSet
    from facebook_business.adobjects.adpreview import AdPreview
    from facebook_business.adobjects.adimage import AdImage
    from facebook_business.adobjects.adcreativephotodata import AdCreativePhotoData
    from facebook_business.adobjects.adcreativeobjectstoryspec import AdCreativeObjectStorySpec
    from facebook_business.adobjects.adcreativelinkdata import AdCreativeLinkData
    from facebook_business.adobjects.adcreative import AdCreative
    from facebook_business.adobjects.adaccount import AdAccount
    from facebook_business.adobjects.ad import Ad
    from facebook_business import FacebookAdsApi
    globals().update(locals())
    shop = Shop.objects.get(shop_abbreviation=init_shop)
    shop.init_shop = init_shop
    FacebookAdsApi.init(app_id=str(shop.Facebook_Business_App_ID),app_secret=shop.Facebook_Business_App_Secret,access_token=shop.Facebook_Business_App_Token)
    shopify.ShopifyResource.clear_session(); shopify.ShopifyResource.set_site(shop.Shopify_App_API_Url); shopify.Session.setup(api_key=shop.Shopify_App_API_Key, secret=shop.Shopify_App_API_Secret)
    shop.fb = AdAccount("act_%s"%shop.Facebook_Business_Ad_Account_ID)
    shop.shopify = shopify
    ifdo(lambda:(shop.location_id==None),lambda:tp(lambda:Update(shop,location_id=shop.shopify.Location.find(status="any")[0].id)))
    from types import MethodType,ModuleType,FunctionType
    ffind = lambda self, **kwargs: self.shopify.Fulfillment.find(**kwargs)  ;  setattr(shop, "ffind", MethodType(ffind,shop))
    pfind = lambda self, **kwargs: self.shopify.Product.find(**kwargs)  ;  setattr(shop, "pfind", MethodType(pfind,shop))
    ofind = lambda self, **kwargs: self.shopify.Order.find(**kwargs)  ;  setattr(shop, "ofind", MethodType(ofind,shop)) # created_at_(min|max)
    rfind = lambda self, **kwargs: self.shopify.Redirect.find(**kwargs)  ;  setattr(shop, "rfind", MethodType(rfind,shop))
    #shop.ff = Browser()(profile='sele', window_index=window_index)
    #https://developers.facebook.com/tools/explorer/ <- generate access token
    #https://developers.facebook.com/tools/accesstoken/
    #https://developers.facebook.com/apps
    #https://developers.facebook.com/docs/marketing-api/buying-api/ <- very helpful link for creating ads and adsets and campaigns
    #  print('Initializing as %s' % init_shop)
    return Update(self,**kwargs)if(kwargs)else(shop)
class Sku(Records):
  id = AutoField()
  product_id = IntegerField(unique=True)
  sku = CharField(unique=True)
  nsku = CharField()
  # :End:
  def qsku(self, sku_algorithm, variant_data):
    nsku = sku_algorithm(variant_data["sku"])
    globals()["qsku_helper"] = generate_one_random_number(19)
    saved_sku_object = Save(Sku,nsku=nsku,sku=variant_data["sku"],product_id=globals()["qsku_helper"])
    variant_data["sku"] = nsku
    greenprint("\n:Sku Object:\n:%s:\n:%s:\n:%s:\n:%s:\n\n\n"%(saved_sku_object.__dict__, nsku, variant_data["sku"], globals()["qsku_helper"]))
    return variant_data, saved_sku_object
  def xsku(self, product):
    s = globals()["qsku_helper"]
    for i in Filter(Sku,product_id=s):
      greenprint("%s -> %s for %s" % (i.product_id, product.id, product))
      i.product_id = product.id
      i.save()
  def zsku(self):
    s = globals()["qsku_helper"]
    for a in Filter(Sku,product_id=s):
      Del(a)
  @staticmethod
  def get(self,nsku):
    return Get(Sku,nsku=nsku).sku
class Soup(Records):
  id = AutoField()
  page_source = JSONField()
  url = CharField(max_length="0512",unique=True)
  last_check = DateTimeField()
  is_available = IntegerField()
  # :End:
  def Leave(self):
    Push(Soup,url=self.url)(is_available=0)
    Push(Soup,url=self.url)(page_source=EMPTYSTRING)
    Push(Soup,url=self.url)(last_check=datetime.now())
  def Update(self):
    lmap(lambda i:Aliexpress_Products().refresh_product_inventory(id=i.id), All(Product))
  def handle_url(self, url, page_source):
    if findall(url,r"https://www.aliexpress.com/item/.*/\d+.html"):
      url = findall(url,1,"(.*?)(?:\?|$)")
      OSA.notify(url)
    if findall(url,r"https://www.aliexpress.com/item/\d+.html"):
      url_title = findall(page_source,1,'"imagePath":"https://.*?/.*?/.*?/(.*?)\..*?"')
      url = re.sub(r"(/item)", "\\1/%s"%(url_title), url)
      url = findall(url,1,"(.*?)(?:\?|$)")
      OSA.notify(url)
    return url
  def X(self):
    url = get_first_chrome_url()
    page_source = getchromesource()
    url = Soup().handle_url(url, page_source)                                                                                                                                                                                                                                                   ; Additemstest().Run()
    # page_source = Aliexpress_Requests()().get(url).text
    to_update = False
    if Filter(Soup,url=url).len() == 1:
      if ((Date().Now()-Get(Soup,url=url).last_check).total_seconds()<=(86400*2)):
        ()
      if ((Date().Now()-Get(Soup,url=url).last_check).total_seconds()>(86400*2)):
        to_update = True
    if (Filter(Soup,url=url).len() == 0):
      to_update = True
    if to_update == False:
      return Get(Soup,url=url).page_source, url


    if findall(url,r"https://www.aliexpress.com/item/.*/\d+.html"):
      ()
    if findall(url,r"https://www.aliexpress.com/item/\d+.html"):
      url_title = findall(page_source,1,'"imagePath":"https://.*?/.*?/.*?/(.*?)\..*?"')
      url = re.sub(r"(/item)", "\\1/%s"%(url_title), url)

    tryprocess(lambda:Save(Soup,url=url,page_source=page_source,is_available=1,last_check=Date().Now()))
    Push(Soup, url=url)( page_source = page_source , is_available = 1    ,    last_check=datetime.now())

    return Get(Soup,url=url).page_source, url
class StatusVerification(Records):
  id = AutoField()
  last_check = DateTimeField()
  shop = CharField()
  # :End:
  def run(self):
    Aliexpressorder_event().run()
class Subscription(Records):
  id = AutoField()
  name = CharField(unique=True)
  price_per_month = FloatField()
  shop = CharField()
  # :End:
class TertiaryAction_Template(Records):
  id = AutoField()
  template = JSONField()
  shop = CharField(max_length="0016",unique=True)
  subject = CharField(max_length="0256",unique=True)
  matter = CharField(max_length="0256",unique=True)
  # :End:
  def create_default_templates(self):
    ""
  create_new_template=lambda self,shop:[Save(TertiaryAction_Template,
                                                                  shop = shop,
                                                                  subject=OSA.log("Subject of this template [note: the max length of a subject is 256 characters.]?"),
                                                                  matter=OSA.log("Matter of this template [note: the max length of a subject is 256 characters.]?"),
                                                                  template=OSA.display_dialog("What is this template [note: %s]?"%(
                                                          """Keep in mind, available replaceable fields for any identified order will be notated by enclosement in paranthesis. All available fields are as follows:\n%s.\n\nFor example: (order_number)"""%("\n".join(["%s. %s"%((idx+1),i) for idx, i in enum(["customer_name", "order_number", "email", "shop_name", "tracking_numbers", "order_amount", "order_creation_time", "item_titles", "item_prices", "tracking_times", "tracking_events", "actions_taken_so_far"])]))),
                                                                    buttons=["".join([" "*75,"OK"," "*75])])),TertiaryAction_Template().create_new_template(shop)if(OSA.log("Add another template?",tp=False,buttons=["No","Yes"])=="Yes")else()]
class TestPasteData(Records):
  id = AutoField()
  w = CharField(unique=True)
  x = BinaryField(max_length=4294967295)
  # :End:
  def update_or_create(self, w, x):
    Save(TestPasteData,w=w,x=x.encode())if(tryprocess(lambda:Get(TestPasteData,w=w))==0)else(Update(Get(TestPasteData,w=w),x=x.encode()))
  def export(self, w):
    return Get(TestPasteData,w=w).x.decode()
class TestPickleData(Records):
  id = AutoField()
  w = CharField(unique=True)
  x = BinaryField(max_length=4294967295)
  # :End:
  def update_or_create(self, w, x):
    Save(TestPickleData,w=w,x=pickle.dumps(x))if(tryprocess(lambda:Get(TestPickleData,w=w))==0)else(Save(TestPickleData,id=Get(TestPickleData,w=w).id,w=w,x=pickle.dumps(x)))
  def export(self, w):
    return pickle.loads(Get(TestPickleData,w=w).x)
  """
  TestPickleData().update_or_create()
  """
class Timedtask(Records):
  id = AutoField()
  function_name = CharField()
  start = DateTimeField()
  end = DateTimeField()
  elapsed_time = FloatField()
  my_time_elapsed = FloatField()
  my_time_start = FloatField()
  my_time_end = FloatField()
  # :End:
class Tipsingeneral(Records):
  id = AutoField()
  tipsingeneral = CharField()
  # :End:
class Todo(Records):
  id = AutoField()
  todo = CharField()
  is_completed = IntegerField()
  pyperclips = CharField()
  # :End:
class Transaction(Records):
  id = AutoField()
  date = IntegerField()
  amount = IntegerField()
  bank = CharField()
  text = CharField(max_length="0128")
  # :End:
class TransactionVerification(Records):
  id = AutoField()
  last_check = DateTimeField()
  # :End:
  def verify_no_excess_aliexpress_orders(self):
    aliexpress_order_ids = added_list(sud("id",All(Aliexpressorder)),sud("identifier",All(ReOrder)))
    saved_ordered_aliexpress_order_ids = sud("ali_order_number",[i for i in All(Lineitem) if i.ali_order_number])
    x = show_overhead(aliexpress_order_ids, saved_ordered_aliexpress_order_ids)
    return x        
  def verify_no_excess_saved_aliexpress_order_ids(self):
    aliexpress_order_ids = added_list(sud("id",All(Aliexpressorder)),sud("identifier",All(ReOrder)))
    saved_ordered_aliexpress_order_ids = sud("ali_order_number",[i for i in All(Lineitem) if i.ali_order_number])
    x = show_overhead(saved_ordered_aliexpress_order_ids, aliexpress_order_ids)
    return x
  def verify_no_excess_aliexpress_card_transactions(self):
    # klossed due to bank account might be taking card transactions for 2 shops. versus not accounting for shop, this one will be more accurate.
    aliexpress_transaction_tags = Get(Shop,shop_abbreviation=Muta()().store_abbre).AliExpress_Card_Transaction_Tags
    aliexpress_transactions = [a for a in All(AceInTheHole) if [b for b in aliexpress_transaction_tags if b.upper() == str(a.tag).upper()]]
    aliexpress_transaction_prices = [-1*i.amount for i in aliexpress_transactions if i.amount < 0]
    saved_aliexpress_order_prices = added_list(sud("ali_price",[i for i in All(Lineitem) if i.ali_order_number]),sud("price",All(ReOrder)))
    x = show_overhead(aliexpress_transaction_prices, saved_aliexpress_order_prices)
    return x
  def verify_no_excess_saved_ordered_aliexpress_order_transactions(self):
    aliexpress_transaction_tags = Get(Shop,shop_abbreviation=Muta()().store_abbre).AliExpress_Card_Transaction_Tags
    aliexpress_transactions = [a for a in All(AceInTheHole) if [b for b in aliexpress_transaction_tags if b.upper() == str(a.tag).upper()]]
    aliexpress_transaction_prices = [-1*i.amount for i in aliexpress_transactions if i.amount < 0]
    saved_aliexpress_order_prices = added_list(sud("ali_price",[i for i in All(Lineitem) if i.ali_order_number]),sud("price",All(ReOrder)))
    x = show_overhead(saved_aliexpress_order_prices, aliexpress_transaction_prices)
    return x
  def verify_no_excess_order_price_amounts_to_payment_gateway_sale_order_price_amounts(self):
    order_price_amounts = lmap(float,sud("total_price",Filter(Order,(~Q(financial_status="refunded")))))
    payment_gateway_sale_order_price_amounts = sud("amount",All(Payment))
    x = show_overhead(order_price_amounts, payment_gateway_sale_order_price_amounts)
    return x
  def verify_no_excess_payment_gateway_sale_order_price_amounts_to_order_price_amounts(self):
    order_price_amounts = lmap(float,sud("total_price",Filter(Order,(~Q(financial_status="refunded")))))
    payment_gateway_sale_order_price_amounts = sud("amount",All(Payment))
    x = show_overhead(payment_gateway_sale_order_price_amounts, order_price_amounts)
    return x
  def verify_no_excess_bank_account_payment_gateway_deposits_to_payment_gateway_payouts_to_bank_account(self):
    payment_gateway_payouts_to_bank_account_tags = Get(Shop,shop_abbreviation=Muta()().store_abbre).Payment_Gateway_Payout_Card_Transaction_Tags
    payment_gateway_payouts_to_bank_account = [a for a in All(AceInTheHole) if [b for b in payment_gateway_payouts_to_bank_account_tags if b.upper() == str(a.tag).upper()]]
    payment_gateway_payouts_to_bank_account_prices = sud("amount", payment_gateway_payouts_to_bank_account)
    bank_account_payment_gateway_deposit_prices = sud("amount",All(Payout))
    x = show_overhead(bank_account_payment_gateway_deposit_prices, payment_gateway_payouts_to_bank_account_prices)
    return x
  def verify_no_excess_payment_gateway_payouts_to_bank_account_to_bank_account_payment_gateway_deposits(self):
    payment_gateway_payouts_to_bank_account_tags = Get(Shop,shop_abbreviation=Muta()().store_abbre).Payment_Gateway_Payout_Card_Transaction_Tags
    payment_gateway_payouts_to_bank_account = [a for a in All(AceInTheHole) if [b for b in payment_gateway_payouts_to_bank_account_tags if b.upper() == str(a.tag).upper()]]
    payment_gateway_payouts_to_bank_account_prices = sud("amount", payment_gateway_payouts_to_bank_account)
    bank_account_payment_gateway_deposit_prices = sud("amount",All(Payout))
    x = show_overhead(payment_gateway_payouts_to_bank_account_prices, bank_account_payment_gateway_deposit_prices)
    return x
  def verify_no_excess_adspend_charges(self):
    adspend_transaction_tags = Get(Shop,shop_abbreviation=Muta()().store_abbre).Adspend_Card_Transaction_Tags
    adspend_transactions = [a for a in All(AceInTheHole) if [b for b in adspend_transaction_tags if b.upper() == str(a.tag).upper()]]
    adspend_transaction_prices = [-1*i.amount for i in adspend_transactions if i.amount < 0]
    saved_adspend_prices = key("facebookadaccountspend", Filter(Facebookadaccountspend,date__range=[min(key("date",list(All(Facebookadaccountspend))+[(Date()-15)()])),(Date()-10).datestr]))
    saved_positive_adspend_prices = [i for i in saved_adspend_prices if i > 0]
    x = show_overhead(adspend_transaction_prices, saved_positive_adspend_prices)
    return x
  def verify_no_excess_card_transaction_adspend_charges(self):
    adspend_transaction_tags = Get(Shop,shop_abbreviation=Muta()().store_abbre).Adspend_Card_Transaction_Tags
    adspend_transactions = [a for a in All(AceInTheHole) if [b for b in adspend_transaction_tags if b.upper() == str(a.tag).upper()]]
    adspend_transaction_prices = [-1*i.amount for i in adspend_transactions if i.amount < 0]
    saved_adspend_prices = key("facebookadaccountspend", Filter(Facebookadaccountspend,date__range=[min(key("date",list(All(Facebookadaccountspend))+[(Date()-15)()])),(Date()-10).datestr]))
    saved_positive_adspend_prices = [i for i in saved_adspend_prices if i > 0]
    x = show_overhead(saved_positive_adspend_prices, adspend_transaction_prices)
    return x
  def get_excess_transaction_verification_data(self):
    aliexpress_order_ids = added_list(sud("id",All(Aliexpressorder)),sud("identifier",All(ReOrder)))
    saved_ordered_aliexpress_order_ids = sud("ali_order_number",[i for i in All(Lineitem) if i.ali_order_number])
    x_1 = show_in_list(aliexpress_order_ids, saved_ordered_aliexpress_order_ids)
    x_2 = show_in_list(saved_ordered_aliexpress_order_ids, aliexpress_order_ids)
    data1,data2=round(tr(lambda:len(x_1)/len(aliexpress_order_ids))*100,2),round(tr(lambda:len(x_2)/len(saved_ordered_aliexpress_order_ids))*100,2)
    aliexpress_transaction_tags = Get(Shop,shop_abbreviation=Muta()().store_abbre).AliExpress_Card_Transaction_Tags
    aliexpress_transactions = [a for a in All(AceInTheHole) if [b for b in aliexpress_transaction_tags if b.upper() == str(a.tag).upper()]]
    aliexpress_transaction_prices = [-1*i.amount for i in aliexpress_transactions if i.amount < 0]
    saved_aliexpress_order_prices = added_list(sud("ali_price",[i for i in All(Lineitem) if i.ali_order_number]),sud("price",All(ReOrder)))
    x_3 = show_in_list(aliexpress_transaction_prices, saved_aliexpress_order_prices)
    x_4 = show_in_list(saved_aliexpress_order_prices, aliexpress_transaction_prices)
    data3,data4=round(tr(lambda:len(x_3)/len(aliexpress_transaction_prices))*100,2),round(tr(lambda:len(x_4)/len(saved_aliexpress_order_prices))*100,2)
    order_price_amounts = lmap(float,sud("total_price",Filter(Order,(~Q(financial_status="refunded")))))
    payment_gateway_sale_order_price_amounts = sud("amount",All(Payment))
    x_5 = show_in_list(order_price_amounts, payment_gateway_sale_order_price_amounts)
    x_6 = show_in_list(payment_gateway_sale_order_price_amounts, order_price_amounts)
    data5,data6=round(tr(lambda:len(x_5)/len(order_price_amounts))*100,2),round(tr(lambda:len(x_6)/len(payment_gateway_sale_order_price_amounts))*100,2)
    payment_gateway_payouts_to_bank_account_tags = Get(Shop,shop_abbreviation=Muta()().store_abbre).Payment_Gateway_Payout_Card_Transaction_Tags
    payment_gateway_payouts_to_bank_account = [a for a in All(AceInTheHole) if [b for b in payment_gateway_payouts_to_bank_account_tags if b.upper() == str(a.tag).upper()]]
    payment_gateway_payouts_to_bank_account_prices = sud("amount", payment_gateway_payouts_to_bank_account)
    bank_account_payment_gateway_deposit_prices = sud("amount",All(Payout))
    x_7 = show_in_list(bank_account_payment_gateway_deposit_prices, payment_gateway_payouts_to_bank_account_prices)
    x_8 = show_in_list(payment_gateway_payouts_to_bank_account_prices, bank_account_payment_gateway_deposit_prices)
    data7,data8=round(tr(lambda:len(x_7)/len(bank_account_payment_gateway_deposit_prices))*100,2),round(tr(lambda:len(x_8)/len(bank_account_payment_gateway_deposit_prices))*100,2)
    adspend_transaction_tags = Get(Shop,shop_abbreviation=Muta()().store_abbre).Adspend_Card_Transaction_Tags
    adspend_transactions = [a for a in All(AceInTheHole) if [b for b in adspend_transaction_tags if b.upper() == str(a.tag).upper()]]
    adspend_transaction_prices = [-1*i.amount for i in adspend_transactions if i.amount < 0]
    saved_adspend_prices = key("facebookadaccountspend", Filter(Facebookadaccountspend,date__range=[min(key("date",list(All(Facebookadaccountspend))+[(Date()-15)()])),(Date()-10).datestr]))
    saved_positive_adspend_prices = [i for i in saved_adspend_prices if i > 0]
    x_9 = show_in_list(adspend_transaction_prices, saved_positive_adspend_prices)
    x_10 = show_in_list(saved_positive_adspend_prices, adspend_transaction_prices)
    data9,data10=round(tr(lambda:len(x_9)/len(adspend_transaction_prices))*100,2),round(tr(lambda:len(x_10)/len(saved_positive_adspend_prices))*100,2)
    return x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, data1, data2, data3, data4, data5, data6, data7, data8, data9, data10
class Typing_Format(Records):
  id = AutoField()
  variable = CharField()
  save_lines = IntegerField()
  verbal = IntegerField()
  printful = IntegerField()
  naming = CharField()
  naming_collision = CharField()
  rudeness = IntegerField()
  pseudocode = IntegerField()
  depth_of_recursion = IntegerField()
  ugliness = IntegerField()
  error_method = CharField()
  # :End:
  __call__ = lambda self,**kwargs: Update(self,**kwargs)if(kwargs)else(All(Typing_Format)[0])
class UniqueProductAlgorithm(Records):
  id = AutoField()
  shop = CharField(max_length="0008",unique=True)
  x = CharField()
  # :End:
  def add(self,x,shop):
    UniqueProductAlgorithm(shop=shop,x=x).save()
  def generate(self):
    # "[A-Z][A-Z]-[0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9]-[A-Z][A-Z][A-Z]Q22"
    # [A-Z][A-Z]-[0-9][0-9][0-9][0-9][0-9]-[A-Z][A-Z][0-9][A-Z]
    ascii_uppercase,digits,ascii_uppercase_digits,digits_ascii_uppercase = string.ascii_uppercase, string.digits, "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    x = lambda a,b: (gleb(digits_ascii_uppercase[digits_ascii_uppercase.index(a):digits_ascii_uppercase.index(b)],1))if(a in digits and b in ascii_uppercase)else(gleb(ascii_uppercase_digits[ascii_uppercase_digits.index(a):ascii_uppercase_digits.index(b)],1))if(a in ascii_uppercase and b in digits)else(gleb(ascii_uppercase[ascii_uppercase.index(a):ascii_uppercase.index(b)],1))if(a in ascii_uppercase and b in ascii_uppercase)else(gleb(digits[digits.index(a):digits.index(b)],1))if(a in digits and b in digits)else()
    a = Join("",[x(i[1:-1][0],i[1:-1][-1]) if (findall(i,"\[.*\]")) else i for i in findall(self.x,"(?:\[.*?\]|.)")])
    return a
class UniqueProductIdentifier(Records):
  id = AutoField()
  shop = CharField(max_length="0008",unique=True)
  product_id = BigIntegerField(unique=True)
  x = CharField(unique=True)
  y = CharField(max_length="0064")
  # :End:
  def add(self,product_id,shop,x):
    # UniqueProductIdentifier().add(123,"spc","Red|XL")
    y = Get(UniqueProductAlgorithm,shop=shop).generate()
    if y in key("y",Filter(UniqueProductIdentifier,product_id=product_id)):
      return UniqueProductIdentifier().add(product_id=product_id,shop=shop,x=x)
    return Save(UniqueProductIdentifier,shop=shop,product_id=product_id,x=x,y=y).y
class UnsolvableProblem(Records):
  id = AutoField()
  unsolvableproblem = CharField()
  # :End:
class Updates(Records):
  id = AutoField()
  name = CharField()
  base_hours = IntegerField()
  time = DateTimeField()
  # :End:
  def update(self,technical_name):
    max_ = tr(lambda:max(sud("time",Filter(Updates,name=technical_name))))
    if max_ == 0:
      max_ = (Time()-100)
    diff_ = (Time()- Time(max_)).hours()
    one = get_one(Updates,name=technical_name)
    print(diff_,one.base_hours)
    if diff_ > one.base_hours:
      if technical_name == "GhostProductUpdate":
        lmap(lambda i:GhostProduct().productghosts(i.shop_abbreviation),get_active_shops())
      elif technical_name == "ProductsFeed":
        lmap(lambda i:ProductsFeed().ProductsFeed(i.shop_abbreviation),get_active_shops())
      elif technical_name == "LineitemsFeed":
        lmap(lambda i:LineitemsFeed().LineitemsFeed(i.shop_abbreviation),get_active_shops())
      elif technical_name == "AdsetUpdates":
        lmap(lambda i:July_Adset_Utilities().update_advertisements(i.shop_abbreviation),get_active_shops())
      elif technical_name == "LineitemUpdates":
        lmap(lambda i:Tracker_Updates().run(i.shop_abbreviation),get_active_shops())
      elif technical_name == "Aliexpressorder_update":
        Aliexpressorderpager().get_urls((Date()-7)(),(Date()-0)(),get_order_info=False)
      elif technical_name == "ProductUpdates":
        lmap(lambda i:ProductUpdates().run(i.shop_abbreviation),get_active_shops())
      elif technical_name == "New_EmailUpdates":
        lmap(lambda i:New_Email().new_email_set(i.shop_abbreviation),get_active_shops())
      elif technical_name == "Aliexpressorder_event_update":
        lmap(lambda i:Aliexpressorder_event().run(i.shop_abbreviation),get_active_shops())
      Save(Updates,name=one.name,
                    base_hours=one.base_hours,
                    time=datetime.now())
    else:
      # OSA.notify(technical_name, "Difference: %s Hours %s Minutes" % (diff_,(Time()- Time(max_)).minutes()))
      print(technical_name, "Difference: %s Hours %s Minutes" % (diff_, ((Time()- Time(max_)).minutes()-(diff_*60)) ))
      time.sleep(5)
  def save_initial(self):
    Save(Updates,name="GhostProductUpdate",base_hours=24,time=(Time()-10)())
    Save(Updates,name="ProductsFeed",base_hours=24,time=(Time()-10)())
    Save(Updates,name="LineitemsFeed",base_hours=24,time=(Time()-10)())
    Save(Updates,name="AdsetUpdates",base_hours=2,time=(Time()-10)())
    Save(Updates,name="LineitemUpdates",base_hours=3,time=(Time()-10)())
    Save(Updates,name="Aliexpressorder_update",base_hours=24,time=(Time()-10)())
    Save(Updates,name="ProductUpdates",base_hours=24,time=(Time()-10)())
    Save(Updates,name="New_EmailUpdates",base_hours=24,time=(Time()-10)())
    Save(Updates,name="Aliexpressorder_event_update",base_hours=24,time=(Time()-10)())
class Video(Records):
  id = AutoField()
  product_id = BigIntegerField(unique=True)
  video = BinaryField(max_length=4294967295)
  video_id = BigIntegerField()
  downloaded = IntegerField()
  # :End:
  def download_video(self, url):
    Update(self, video = open(video_download(url),"rb").read(), downloaded = 1)
class AceInTheHole(Worksheet):
  id = AutoField()
  account = CharField(max_length="0128")
  date = DateField()
  amount = FloatField()
  type = CharField(max_length="0128")
  tag = CharField(max_length="0128")
  description = CharField(max_length="4096")
  note = CharField()
  shop = CharField()
  # :End:
  __repr__ = lambda self: "\x1b[38;5;255m \x1b[48;5;0m \n[{id}][{date}]{amount}:{description}".format(id=self.id,date=self.date,amount=self.date,description=str(self.description)[:100])
  def accept_csv(self,address=None):
    if address == None:
      address = get_latest_download()
    x=lmap(lambda i: AD(i), CSV().DictReadWithDelimiterGuess(address))
    if len(x)==0: (0/0)

    account = Muta()().Active_AceInTheHole_header_column_account_name
    max_ = Date(or_list(lambda:max(sud("date",All(AceInTheHole))),lambda:(Date()-15)()))
    shop = Muta()().store_abbre

    header_column_dict = Get(AceInTheHoleHeaderColumns,account=account,shop=shop).header_column_dict
    for i in x:
      for j in header_column_dict:
        i[header_column_dict[j]] = i[j]

    lmap(lambda i: setitem(i,"date",Date().parse_date(i["date"])), x)
    lmap(lambda i: setitems(i,"shop",shop,"account",account),x)

    x = sudby(lambda i: Date(i.date) > max_, x)
    x = sudby(lambda i: Date(i.date) != Date(), x)

    lmap(lambda i: Save(AceInTheHole,**i), x)
    drkprint("%s AceInTheHole saved."%len(x))
    return x
class Adset(Worksheet):
  id = AutoField()
  last_check = DateTimeField()
  niche = CharField()
  shop_abbreviation = CharField()
  facebook_page = CharField()
  product_url = CharField()
  image_url = CharField()
  caption = JSONField()
  complete_create = BooleanField(default=False)
  icon = CharField()
  is_created = BooleanField(default=False)
  ad_account_id = BigIntegerField()
  campaign_id = BigIntegerField(unique=True)
  adset_id = BigIntegerField(unique=True)
  created_time = DateTimeField()
  date_last_requested_keyword_stats = IntegerField()
  click_attribution = IntegerField()
  view_attribution = IntegerField()
  custom_event_type = CharField()
  billing_event = CharField()
  optimization_goal = CharField()
  recommendations = CharField()
  bid_info = JSONField()
  device_platforms = JSONField()
  publisher_platforms = JSONField()
  facebook_positions = JSONField()
  targeting_optimization = CharField()
  user_device = JSONField()
  user_os = JSONField()
  age_min = IntegerField()
  age_max = IntegerField()
  genders = IntegerField()
  geo_locations = JSONField()
  status = CharField()
  name = CharField()
  daily_budget = FloatField()
  body = JSONField()
  effective_object_story_id = CharField()
  source_adset_id = BigIntegerField()
  custom_audiences = JSONField()
  original_caid = BigIntegerField()
  interest_ids = JSONField()
  flexible_spec1 = JSONField()
  flexible_spec2 = JSONField()
  flexible_spec3 = JSONField()
  flexible_spec4 = JSONField()
  flexible_spec5 = JSONField()
  handle = CharField()
  # :End:
  def Update(self):
    lmap(lambda i: July_Adset_Utilities().update_advertisement_all(id=i.id),All(Adset))
  def reach_estimate(self):
    a_shop()
    return October_Keyword_Utilities().re(key("id",flatten(key("interests",AdSet(self.adset_id).remote_read(fields=["targeting"])._json["targeting"]["flexible_spec"]),1)))
    # return AdSet(self.adset_id).get_delivery_estimate()
  def get_delivery_estimate(self):
    a_shop()
    x = AdSet(self.adset_id).get_delivery_estimate()[0]._json["estimate_mau"]
    return x
  def re(self):
    interest_ids = self.interest_ids
    audience_size = None
    try:audience_size = [i for i in All(Facebookkeywordlist) if list(sorted(key("id",i.keywordlist))) == list(sorted(interest_ids))][0].audience_size
    except Exception as e: redprint(e)
    return audience_size
    """
    keycall("re", All(Adset))
    """
  def Icon(self):
    if self.image_url == Null:
      Shop()(All(Shop)[0].shop_abbreviation)
      url = AdSet(self.adset_id).get_ads()[0].get_ad_creatives()[0].remote_read(fields=["thumbnail_url"])["thumbnail_url"]
      Update(self,image_url = url)
      redprint("Retrieved image url: %s" % self.image_url)

    os.makedirs(homepath("~/tavern/tavern/bag/.adset_icon_images"),exist_ok=True)
    if self.icon == None:
      address = homepath("~/tavern/tavern/bag/.adset_icon_images/no.%s.png"%self.adset_id)
      try:
        Images().download(self.image_url,save_path=address)
      except Exception as e:
        redprint(e)
        url = AdSet(self.adset_id).get_ads()[0].get_ad_creatives()[0].remote_read(fields=["thumbnail_url"])["thumbnail_url"]
        Update(self,image_url = url)
        redprint("Retrieved image url: %s" % self.image_url)
        Images().download(self.image_url,save_path=address)
      Update(self,icon=address)
      assert os.path.exists(address)                                                                                                                                                            ;redprint("self.icon: %s" % self.icon)
    if self.icon != None:
      if os.path.exists(self.icon) == False:
        address = homepath("~/tavern/tavern/bag/.adset_icon_images/no.%s.png"%self.adset_id)
        try:
          Images().download(self.image_url,save_path=address)
        except Exception as e:
          redprint(e)
          url = AdSet(self.adset_id).get_ads()[0].get_ad_creatives()[0].remote_read(fields=["thumbnail_url"])["thumbnail_url"]
          Update(self,image_url = url)
          redprint("Retrieved image url: %s" % self.image_url)
          Images().download(self.image_url,save_path=address)
        Update(self,icon=address)
        assert os.path.exists(address)                                                                                                                                                            ;redprint("self.icon: %s" % self.icon)
    return self.icon
  def post_duplicate(self):
    a = [idx for idx,i in enum(pool(lambda i:[i.custom_audiences,i.flexible_spec1,i.flexible_spec2,i.flexible_spec3,i.flexible_spec4,i.flexible_spec5,],Filter(Adset,handle=self.handle)).result()) if i==[self.custom_audiences,self.flexible_spec1,self.flexible_spec2,self.flexible_spec3,self.flexible_spec4,self.flexible_spec5,]]
    b = [Filter(Adset,handle=self.handle)[i] for i in a]
    c = key("daily_budget",b)
    d = max(c)+5
    e = None
    if len([i for i in b if not i.original_caid and not i.source_adset_id]) > 0:
      e = [i for i in b if not i.original_caid and not i.source_adset_id][0]
      # Basically, There are two events:  I am duplicating an original, so i say please; handlized; caidless, and no source_adset_id (no duplicate) | 2: I am duplicating a Lookalike. it'll definitely have a source_adset_id lol. go below. (then, it will have an original custom audience id, the only one with an original custom audience id the original lookalike, not any duplicates of that one.)
    elif len([i for i in b if not i.original_caid and not i.source_adset_id]) == 0:
      e = [i for i in b if i.original_caid][0]
      # Basically, There are two events:  I am duplicating an original, so i say please; handlized; caidless, and no source_adset_id (no duplicate) | 2: I am duplicating a Lookalike. it'll definitely have a source_adset_id lol. go below. (then, it will have an original custom audience id, the only one with an original custom audience id the original lookalike, not any duplicates of that one.)
    f = Copy(e.adset_id)[0]
    g = itemcopy(Adset(),e,f=["niche","shop_abbreviation","facebook_page","product_url","caption","icon","is_created","ad_account_id","campaign_id","date_last_requested_keyword_stats","click_attribution","view_attribution","custom_event_type","billing_event","optimization_goal","recommendations","bid_info","device_platforms","publisher_platforms","facebook_positions","targeting_optimization","user_device","user_os","age_min","age_max","genders","geo_locations","body","effective_object_story_id","interest_ids","handle"])
    h = Update(g,adset_id=f)
    AdSet(f).remote_update(params={"daily_budget":str((d*100)) })
    July_Adset_Utilities().update_advertisement_all(f)
  def post_handle(self):
    if not self.handle:
      Update(self,handle=get_url_from_body([Shop()(All(Shop)[0].shop_abbreviation),AdSet(self.adset_id)][1].get_ads()[0].get_ad_creatives()[0].remote_read(fields=["body"])["body"]).split("/")[-1].split("?")[0])
    handle = self.handle
    custom = CustomAudience(parent_id='act_%s' %Shop()(self.shop_abbreviation).Facebook_Business_Ad_Account_ID).remote_create(params={'pixel_id': Shop()(self.shop_abbreviation).Facebook_Pixel_ID,'retention_days':'180',
        'rule':json.dumps({'inclusions': {'operator': 'or',
          'rules': [{'event_sources': [{'id': Get(Shop,shop_abbreviation=Muta()().store_abbre).Facebook_Pixel_ID, 'type': 'pixel'}],
            'filter': {'filters': [{'filters': [{'field': 'url',
                 'operator': 'i_contains',
                 'value': "/%s"%handle}],
               'operator': 'or'},
              {'field': 'url', 'operator': 'i_contains', 'value': ''}],
             'operator': 'and'},
            'retention_seconds': 15552000,
            'template': 'VISITORS_BY_URL'}]}}),
            'name':"/%s"%handle,})['id'] if not Filter(Handle,handle=handle) else 1
    Save(Handle,handle=handle,custom_audience_id=custom,has_adset=[],shop=self.shop_abbreviation)() if not Filter(Handle,handle=handle) else 1
    return custom if not Filter(Handle,handle=handle) else 1
  def i(self):
    return sudsort("date",Filter(Adsetinsight,adset_id=self.adset_id),tcer=False)
class Order(Worksheet):
  id = BigIntegerField(primary_key=True)
  shop = CharField() 
  created_at = DateTimeField() 
  date = DateField() 
  email = CharField() 
  line_items = JSONField()
  fulfillments = JSONField()
  shipping_address = JSONField()
  order_number = IntegerField() 
  total_price = DecimalField()
  total_line_items_price = FloatField()
  fulfillment_status = models.CharField(max_length="0032", null=True, blank=True)
  gateway = CharField()
  note = CharField()
  financial_status = CharField()
  billing_address_contact_name = CharField()
  posted_to_paypal = BooleanField(default=False)
  state = IntegerField()
  field_in_event_of_unavailability = JSONField()
  is_checked = IntegerField()
  refunded_amount = FloatField()
  # :End:
  lineitems = lambda self:[Get(Lineitem,id=i.get("id"))for i in self.line_items]
  l=lambda self:[Get(Lineitem,id=i.get("id"))for i in self.line_items]
  o=lambda self:Shop()(self.shop).ofind(id_=self.id)
  objects = BaseModelManager()
  """ ::: Field In Event Of Unavailability Should Be Like; {"image_url":``, "handle":``, "option1":``, "option2":``, "option3":``} ; ::: """
class Product(Worksheet):
  id = BigIntegerField(primary_key=True)
  last_check = DateTimeField()
  size_chart = JSONField()
  created_at = DateTimeField()
  image = JSONField()
  images = JSONField()
  options = JSONField()
  variants = JSONField()
  product_type = CharField()
  description = JSONField()
  vendor = CharField()
  body_html = JSONField()
  seller_platform = CharField()
  last_quantity_check = DateTimeField()
  tags = CharField()
  title = CharField()
  handle = CharField()
  similar_urls = JSONField()
  ca_id = CharField()
  ca_views = IntegerField()
  caption = JSONField()
  short_url = CharField()
  story_id = CharField()
  pcs = DecimalField()
  roi = DecimalField()
  spent = DecimalField()
  pcv = DecimalField()
  item_type = CharField()
  shop = CharField()
  niche = CharField()
  amazon_url = CharField()
  ali_url = CharField()
  amazonvendor = CharField()
  aliexpressvendor = CharField()
  amazon_json = JSONField()
  amazon_inspect = BooleanField(default=False)
  state = IntegerField()
  adset_ids = JSONField()
  adset_id = BigIntegerField()
  size_chart_power_urls = JSONField()
  freelancer_description = CharField(max_length="2048")
  my_description = CharField(max_length="4096")
  original = JSONField()
  shifted = JSONField()
  HTML = JSONField()
  url_title = CharField()
  video_url = CharField()
  icon_image = BinaryField(max_length=4294967295)
  product_tags = CharField()
  sku_image_dict = JSONField()
  objects = BaseModelManager()
  # :End:
  # Sync fields with GhostProduct
  is_available = lambda self: True if set(key("is_available",Filter(Soup,url=self.ali_url)))=={1} else False # {1}
  is_unavailable = lambda self: True if set(key("is_available",Filter(Soup,url=self.ali_url)))!={1} else False # {0}, {0,1}
  is_availables = lambda self,**kwargs: [i for i in Filter(Product,**kwargs) if i.is_available()]
  is_unavailables = lambda self,**kwargs: [i for i in Filter(Product,**kwargs) if i.is_unavailable()]

  need_knockin = lambda self: len([i for i in All(Product) if (datetime.now()-i.last_check).total_seconds()>86400])
  p = lambda self: Shop()(self.shop).pfind(id_=self.id)
  def remap(self):
    tryprocess(lambda:self.p().destroy())
    lmap(Del,Filter(GhostProduct,title=self.title))
    lmap(Del,Filter(Product,title=self.title))
  def add_product(self,**stars):
    # Delete all objects used for testing
    # All(Video)
    # All(UniqueProductIdentifier)
    # All(Product)
    # lmap(Del,All(Video))
    # lmap(Del,All(UniqueProductIdentifier))
    # lmap(Del,All(Product))

    # timing = multiprocessing_process(lambda: [[OSA.notify("adding, %s"%(datetime.now()),sp(5))] for i in range(WHILE_TRUE)])

    # if globe("add_product_x",[]) == []:
    #   globalise([],"add_product_x")
    # random_int = generate_one_random_number(10)
    # globe("add_product_x").append(random_int)

    # while globe("add_product_x")[0] != random_int:
    #   time.sleep(1)

    # shop=stars.get("shop",),niche=stars.get("niche",),is_free_plus_ship=stars.get("is_free_plus_ship",),page=stars.get("page",),y=stars.get("y",)
    # logo,logo_size,logo_scaling_dimension_size
    # if (g.Z.endswith("||+") or g.Z.endswith("||")) and g.Z.count("|") == 8 and caption == None:
    start_time = Date().Now()
    shop,niche,is_free_plus_ship,page,title,image_idx,image_indexes,option_indexes,variant_indexes,size_chart,my_description,logo,logo_size,logo_scaling_dimension_size,caption,extra_commands=stars.get("shop"),stars.get("niche"),stars.get("is_free_plus_ship"),stars.get("page"),stars.get("title"),stars.get("image_idx"),stars.get("image_indexes"),stars.get("option_indexes"),stars.get("variant_indexes"),stars.get("size_chart"),stars.get("my_description"),stars.get("logo"),stars.get("logo_size"),stars.get("logo_scaling_dimension_size"),stars.get("caption"),stars.get("extra_commands")
    clear_google_chrome_processes()

    print(g.Z.count("|"))

    if shop == None and niche == None and is_free_plus_ship == None and page == None and title == None and image_idx == None and image_indexes == None and option_indexes == None and variant_indexes == None and size_chart == None and my_description == None and caption == None and extra_commands == None:
      # Set variables
      shop,niche,is_free_plus_ship,page=Muta()().store_abbre,Muta()().niche,Muta()().is_free_plus_ship,Muta()().page
      #
      #
      if g.Z.count("|") == 0:
        # twirl1: caption
        store_abbre = Muta()().store_abbre
        niche = Muta()().niche
        # product = or_list(lambda:Get(Product,shop=Muta()().store_abbre,handle=get_first_chrome_url().split("?")[0].split("/")[-1]).p()
        product = or_list(lambda:Get(Product,shop=Muta()().store_abbre,handle=or_list(lambda:stars.get("url"),lambda:get_first_chrome_url()).split("?")[0].split("/")[-1]).p(),lambda:Shop()(Muta()().store_abbre).pfind(handle=or_list(lambda:stars.get("url"),lambda:get_first_chrome_url()).split("?")[0].split("/")[-1])[0])
        variant_id = or_list(lambda:int(findall(get_first_chrome_url(),1,"\?variant=(\d+)")),lambda:product.variants[0].id)
        page=Muta()().page
        # store_abbre,niche,product,variant_id,page=Muta()().store_abbre,Muta()().niche,Get(Product,shop=Muta()().store_abbre,handle=get_first_chrome_url().split("?")[0].split("/")[-1]).p(),or_list(lambda:int(findall(get_first_chrome_url(),1,"\?variant=(\d+)")),lambda:),Muta()().page
        caption = or_list(lambda:stars.get("post_caption"),lambda:OSA.display_dialog(q="Caption? [note: enter in ! if you don't want to create an adset and only want to add the product. Press Command+Shift+Space to show a list of emojis.]", default_answer=str(Muta()().default_caption).format(Muta()().my_description)))
        # OSA.log("A")
        create_ad(product,variant_id,store_abbre,niche,page,caption)
        # OSA.log("B")
        if GLOBAL_ADD_PRODUCT_NOTIFICATION == True:
          pool(lambda:OSA.log("Completed",tp=False))
        ####
        ####
        ####
        ####
        return
        ####
        ####
        ####
        ####
      #
      #
      # Manage the logo
      if logo == None and logo_size == None and logo_scaling_dimension_size == None:
        logo,logo_size,logo_scaling_dimension_size=ifelseget(lambda:g.Z.endswith("+") and logo == None and logo_size == None and logo_scaling_dimension_size == None,lambda:[[True,get_logo_size(),ifelseget(lambda:findall(get_first_chrome_url(),r"https://www.aliexpress.com/item/\d+.html"),lambda:[450,450],lambda:[500,500])],setattr(g,"Z",g.Z[:-1])][0],lambda:[False,[],ifelseget(lambda:findall(get_first_chrome_url(),r"https://www.aliexpress.com/item/\d+.html"),lambda:[450,450],lambda:[500,500])])
      # Manage the caption
      if caption == None:
        caption = ifelseget(lambda:g.Z.endswith("||") and g.Z.count("|") == 8,lambda:[tryreturn(lambda:OSA.display_dialog(q="Caption? [note: enter in ! if you don't want to create an adset and only want to add the product. Press Command+Shift+Space to show a list of emojis.]", default_answer=str(Muta()().default_caption).format(my_description)),ep=1),setattr(g,"Z",g.Z[:-1])][0],lambda:caption)

      g.Z = g.Z[:-1]

      Product().check_for_errors(g.Z)
      title,image_idx,image_indexes,option_indexes,variant_indexes,size_chart,my_description=dune(
        viden(g.Z,"twirl1: ",1,"|"),
          [
              lambda i: Replacements(i,"'S","'s"),
              lambda i: ifelseget(lambda: i, lambda: (int(i)-1), lambda: None),
              lambda i: ifelseget(lambda: i, lambda: lmap(lambda i:(int(i)-1),i.split(",")), lambda: []),
              lambda i: ifelseget(lambda: i, lambda: [dune(i.split(":"),[lambda i:(int(i)-1),lambda i:i]) for i in i.split(",")], lambda: []),
              lambda i: ifelseget(lambda: i, lambda: [dune(i.split(":"),[lambda i:(int(i)-1),lambda i:i]) for i in i.split(",")], lambda: []),
              lambda i: ifelseget(lambda: i, lambda: Freelancer().SizeChart(i,html=True), lambda: None),
              lambda i: ifelseget(lambda: i, lambda: Replacements(i,"\n","<br/>"), lambda: None),
          ]
        )
      #
      #
    #
    #
    # 1 second
    html, url = Soup().X()

    # if sudby(lambda i:i.ali_url==url,Filter(Product,handle=get_handle_from_title(title),shop=shop)) and Muta()().incept_product_on != True:
    #   OSA.notify("Product With Title Exists, Returning")
    #   (0/0)

    # globalise(globe("add_product_x")[1:],"add_product_x")
    OSA.notify("-X-: %s"%(Date().friendlydate(Date().Now(),seconds=True)))
    # 1 second
    shipping_companies = AD(json.loads(findall(  apilimitcall(lambda:requests.get("https://freight.aliexpress.com/ajaxFreightCalculateService.htm?&f=d&productid={}&currencyCode=USD&transactionCurrencyCode=USD&sendGoodsCountry=&country=US&province=&city=&abVersion=1".format(re.findall(r"aliexpress.com/item/.*?/(\d+).html",url)[0]))).text ,1,"{.*}"))).freight
    if Shop()(shop).Allow_Additional_Shipping_Methods == False:
      if "ePacket" not in sud("companyDisplayName",shipping_companies):
        OSA.notify("No available shipping options, Returning")
        (0/0)
    shipping_price = ShippingCost().get_shipping_cost(shipping_companies,shop)
    """ 
    In [51]: title
    Out[51]: 'Spaghetti Dress'

    In [52]: image_idx
    Out[52]: 1

    In [53]: image_indexes
    Out[53]: []

    In [54]: option_indexes
    Out[54]: [[0, 'Color'], [1, 'Size']]

    In [55]: variant_indexes
    Out[55]: []

    In [56]: size_chart
    Out[56]: '<table border="1" class="dataframe"><tbody><tr><th style="text-align: center;">Size</th><th style="text-align: center;">Bust</th><th style="text-align: center;">Waist</th><th style="text-align: center;">Length</th></tr><tr><th style="text-align: center;">S</th><td style="text-align: center;">86"</td><td style="text-align: center;">68"</td><td style="text-align: center;">81"</td></tr><tr><th style="text-align: center;">M</th><td style="text-align: center;">90"</td><td style="text-align: center;">72"</td><td style="text-align: center;">82"</td></tr><tr><th style="text-align: center;">L</th><td style="text-align: center;">94"</td><td style="text-align: center;">76"</td><td style="text-align: center;">83"</td></tr><tr><th style="text-align: center;">XL</th><td style="text-align: center;">98"</td><td style="text-align: center;">80"</td><td style="text-align: center;">84"</td></tr><tr><th style="text-align: center;">2XL</th><td style="text-align: center;">102"</td><td style="text-align: center;">84"</td><td style="text-align: center;">85"</td></tr></tbody></table>'

    In [57]: my_description
    Out[57]: 'Hot'
    """

    # Update Muta
    # 1 second
    Update(Muta()(),title=title,image_idx=image_idx,image_indexes=image_indexes,option_indexes=option_indexes,variant_indexes=variant_indexes,size_chart=size_chart,my_description=my_description)
    # Update g for globals
    setattrs(g,"title",Muta()().title,"image_idx",Muta()().image_idx,"image_indexes",Muta()().image_indexes,"option_indexes",Muta()().option_indexes,"variant_indexes",Muta()().variant_indexes,"size_chart",Muta()().size_chart,"my_description",Muta()().my_description,"logo",Muta()().logo,"logo_size",Muta()().logo_size,"logo_scaling_dimension_size",Muta()().logo_scaling_dimension_size)


    # Define adding for single variant product
    def single_variant_product(data,shipping_price):
      if data.skuModule.get("productSKUPropertyList",None) == None:
        # shipping_price = ShippingCost().get_shipping_cost(x.shipping,shop)

        price,compare_at_price,inventory_quantity = setfrom(data.skuModule.skuPriceList[0],lambda i:CH().price_change(flt(or_list(lambda:i.skuVal.actSkuCalPrice,lambda:i.skuVal.skuCalPrice))+shipping_price,shop),lambda i:CH().get_compare_at_price(CH().price_change(flt(or_list(lambda:i.skuVal.actSkuCalPrice,lambda:i.skuVal.skuCalPrice))+shipping_price,shop)),lambda i: i.skuVal.inventory)

        images = lmap(lambda i: {"attachment": i}, pool(lambda i: Images().image_base64(i), zki(lambda: logo, lambda i: Images().flexor_and_tenor(i,size=logo_size,logo_scaling_dimension_size=logo_scaling_dimension_size), pool(Images().sharpen, pool(Images().download, indicepick(image_indexes,data.imageModule.imagePathList)).result()).result())).result())
        print("shop", shop)
        product = go_over(lambda i:droll(lambda:apilimitcall(i.save)==True), Shop()(shop).shopify.product.Product(dict(title=title,product_type=niche,images=images)))
        product = go_over(lambda i:droll(lambda:apilimitcall(i.save)==True), xir(product,body_html=my_description,published_scope="web",variants=[dict(inventory_management="shopify",inventory_quantity=inventory_quantity,price=price,compare_at_price=compare_at_price,image_id=product.images[0].id,sku=UniqueProductIdentifier().add(product_id = product.id, shop = shop, x = ""))]))


        if DOWNLOAD_VIDEO == True:
          ifdo(lambda: data.imageModule.get("videoId",None), lambda: Save(Video,product_id=product.id,video=data.imageModule.videoId).download_video("https://cloud.video.taobao.com/play/u/3078003042/p/1/e/6/t/10301/%s.mp4"%(data.imageModule.videoId)))
        added_product=Save(Product,**dictupdate(dictupdate(product.to_dict(),ali_url=url,seller_platform="Aliexpress",description=my_description,shop=shop,size_chart=size_chart,last_quantity_check=datetime.now(),aliexpressvendor = ("https://aliexpress.com/store/%s"%(data.actionModule.storeNum)),url_title = data.imageModule.imagePathList[0].split("/")[-1].split(".")[0],),created_at=None))
        pool(lambda: [pool(lambda: [time.sleep(0), Get(Product,id=product.id).post_description()]).result(), ifdo(lambda: is_free_plus_ship, lambda: CH().free_plus_ship(Get(Product,id=product.id))), pool(lambda:GhostProduct().productgost(product)), CH()(product), pool(lambda:productsFeed(Shop()(shop), created_at_min=1))]).result()
        ifdo(lambda: globe("caption"), lambda: create_ad(product,caption))
        Update(Muta()(),caption=None,size_chart=None,my_description=None)
        tryprocess(lambda: timing.terminate())
        if GLOBAL_ADD_PRODUCT_NOTIFICATION == True:
          pool(lambda: OSA.log("Completed",tp=False))
        print("time taken: %s"%((Date().Now()-start_time).total_seconds()))
        return added_product
    #
    #

    # Normal Adding Product Mode
    if Muta()().product_adding_mode == "Normal":


      Exec('def format_data(page_source):\n  soup = SOUP(page_source)\n  data = AD({"actionModule":{"productId":None,"storeNum":None},\n          "imageModule":{"imagePathList":None},\n          "skuModule":{"productSKUPropertyList":None,\n                        "skuPriceList":None,}\n          })\n  productId = findall(page_source,1,\'window.runParams.productId="(\\d+)"\')\n  storeNum = findall(page_source,1,\'window.runParams.shopId="(\\d+)"\')\n\n  data.actionModule.productId = productId\n  data.actionModule.storeNum = storeNum\n\n  productSKUPropertyList = []\n  for i in range(3):\n    new = AD()\n    product_info_sku = soupy(soup,"div","id","j-product-info-sku")[0]\n    option_names = lmap(lambda i:i[:-1], key("text",product_info_sku.findAll("dt",attrs={"class":"p-item-title"})))\n\n    if (i+1) > len(option_names):\n      break\n\n    skuPropertyName = option_names[i]\n\n    x = product_info_sku.findAll("dd",attrs={"class":"p-item-main"})[i]\n    y = x.findAll("li")\n    skuPropertyValues = []\n    for j in y:\n      z = AD()\n      if j.findAll("img"):\n        z.skuPropertyTips = j.findAll("a")[0].attrs["title"]\n        z.propertyValueId = int(j.findAll("a")[0].attrs["data-sku-id"])\n        z.skuPropertyImagePath = j.findAll("img")[0].attrs["src"]\n      else:\n        z.skuPropertyTips = j.text\n        z.propertyValueId = int(j.findAll("a")[0].attrs["data-sku-id"])\n        z.skuPropertyImagePath = None\n      skuPropertyValues.append(z)\n    new.skuPropertyName = skuPropertyName\n    new.skuPropertyValues = skuPropertyValues\n    productSKUPropertyList.append(new)\n  data.skuModule.productSKUPropertyList = productSKUPropertyList\n  data.skuModule.skuPriceList = json.loads(findall(page_source,1,"var skuProducts=(.*);"))\n  data.imageModule.imagePathList = lmap(lambda i: re.sub("(.*)_\\d+x\\d+\\.(?:.{3}|.{4})","\\\\1",i), lmap(lambda i: i.findAll("img")[0].attrs["src"], soupy(soup,"span","class","img-thumb-item")))\n  data.imageModule.videoId = or_list(lambda:soupy(soup,"div","id","item-video")[0].attrs["data-vid"],None)\n  return data',globals(),locals())

      data = None
      try:
        data = AD(json.loads(findall(html,1,'data: ({"actionModule":.*),')))
      except Exception as e:
        data = format_data(html)

      added_product = single_variant_product(AD(json.loads(findall(html,1,'data: ({"actionModule":.*),'))),shipping_price)
      if added_product:
        ####
        ####
        ####
        ####
        return added_product
        ####
        ####
        ####
        ####

      options = []
      # Exec(b'for i in data.skuModule.productSKUPropertyList:\n  for value in i.skuPropertyValues:\n    new = AD()\n    new.option = i.skuPropertyName\n    new.id = value.propertyValueId\n    new.name = value.skuPropertyTips\n    new.image = value.get("skuPropertyImagePath",None)\n    options.append(new)\n'.decode(),globals(),locals())
      for i in data.skuModule.productSKUPropertyList:
        for value in i.skuPropertyValues:
          new = AD()
          new.option = i.skuPropertyName
          new.id = value.propertyValueId
          new.name = value.skuPropertyTips
          new.image = value.get("skuPropertyImagePath",None)
          options.append(new)

      variants = []
      # Exec(b'for i in data.skuModule.skuPriceList:\n  new = AD()\n  new.option_ids = lmap(int,Split(",",i.skuPropIds))\n  new.price = flt(or_list(lambda:i.skuVal.actSkuCalPrice,lambda:i.skuVal.skuCalPrice))\n  new.compare_at_price = flt(or_list(lambda:i.skuVal.actSkuCalPrice,lambda:i.skuVal.skuCalPrice))\n  new.inventory = i.skuVal.availQuantity\n  new.option_ids_saved = lmap(int,Split(",",i.skuPropIds))\n  variants.append(new)\n'.decode(),globals(),locals())
      for i in data.skuModule.skuPriceList:
        new = AD()
        new.option_ids = lmap(int,Split(",",i.skuPropIds))
        new.price = flt(or_list(lambda:i.skuVal.actSkuCalPrice,lambda:i.skuVal.skuCalPrice))
        new.compare_at_price = flt(or_list(lambda:i.skuVal.actSkuCalPrice,lambda:i.skuVal.skuCalPrice))
        new.inventory = i.skuVal.availQuantity
        new.option_ids_saved = lmap(int,Split(",",i.skuPropIds))
        variants.append(new)

      images = []
      # Exec(b'for i in data.imageModule.imagePathList:\n  images.append(i)'.decode(),globals(),locals())
      for i in data.imageModule.imagePathList:
        images.append(i)


      x = lmap(lambda i: key("propertyValueId",i.skuPropertyValues), data.skuModule.productSKUPropertyList)
      c = len(variants[0].option_ids_saved) - 1
      for i in reversed(x):
        l = []
        for j in i:
          for k in variants:
            if k.option_ids_saved[c] == j:
              l.append(k)
        variants = l
        c -= 1

      product = Shop()(shop).shopify.product.Product({"title":title,
                                                                      "product_type":niche,
                                                                      "images":images,
                                                                      "variants":variants,
                                                                      "options":options})
      tryprocess(lambda: timing.terminate())
      pool(lambda: OSA.log("Completed",tp=False))
      product.save()
    else:
      

      #
      #
      # create definition for format_data
      Exec('def format_data(page_source):\n  soup = SOUP(page_source)\n  data = AD({"actionModule":{"productId":None,"storeNum":None},\n          "imageModule":{"imagePathList":None},\n          "skuModule":{"productSKUPropertyList":None,\n                        "skuPriceList":None,}\n          })\n  productId = findall(page_source,1,\'window.runParams.productId="(\\d+)"\')\n  storeNum = findall(page_source,1,\'window.runParams.shopId="(\\d+)"\')\n\n  data.actionModule.productId = productId\n  data.actionModule.storeNum = storeNum\n\n  productSKUPropertyList = []\n  for i in range(3):\n    new = AD()\n    product_info_sku = soupy(soup,"div","id","j-product-info-sku")[0]\n    option_names = lmap(lambda i:i[:-1], key("text",product_info_sku.findAll("dt",attrs={"class":"p-item-title"})))\n\n    if (i+1) > len(option_names):\n      break\n\n    skuPropertyName = option_names[i]\n\n    x = product_info_sku.findAll("dd",attrs={"class":"p-item-main"})[i]\n    y = x.findAll("li")\n    skuPropertyValues = []\n    for j in y:\n      z = AD()\n      if j.findAll("img"):\n        z.skuPropertyTips = j.findAll("a")[0].attrs["title"]\n        z.propertyValueId = int(j.findAll("a")[0].attrs["data-sku-id"])\n        z.skuPropertyImagePath = j.findAll("img")[0].attrs["src"]\n      else:\n        z.skuPropertyTips = j.text\n        z.propertyValueId = int(j.findAll("a")[0].attrs["data-sku-id"])\n        z.skuPropertyImagePath = None\n      skuPropertyValues.append(z)\n    new.skuPropertyName = skuPropertyName\n    new.skuPropertyValues = skuPropertyValues\n    productSKUPropertyList.append(new)\n  data.skuModule.productSKUPropertyList = productSKUPropertyList\n  data.skuModule.skuPriceList = json.loads(findall(page_source,1,"var skuProducts=(.*);"))\n  data.imageModule.imagePathList = lmap(lambda i: re.sub("(.*)_\\d+x\\d+\\.(?:.{3}|.{4})","\\\\1",i), lmap(lambda i: i.findAll("img")[0].attrs["src"], soupy(soup,"span","class","img-thumb-item")))\n  data.imageModule.videoId = or_list(lambda:soupy(soup,"div","id","item-video")[0].attrs["data-vid"],None)\n  return data',globals(),locals())

      # get the data
      data = None
      try:
        data = AD(json.loads(findall(html,1,'data: ({"actionModule":.*),')))
      except Exception as e:
        data = format_data(html)

      added_product = single_variant_product(AD(json.loads(findall(html,1,'data: ({"actionModule":.*),'))),shipping_price)
      #
      #
      if added_product:
        ####
        ####
        ####
        ####
        return added_product
        ####
        ####
        ####
        ####
      
      #
      #
      # 2 seconds
      options = []
      # Exec(b'for i in data.skuModule.productSKUPropertyList:\n  for value in i.skuPropertyValues:\n    new = AD()\n    new.option = i.skuPropertyName\n    new.id = value.propertyValueId\n    new.name = value.skuPropertyTips\n    new.image = value.get("skuPropertyImagePath",None)\n    options.append(new)\n'.decode(),globals(),locals())
      for i in data.skuModule.productSKUPropertyList:
        for value in i.skuPropertyValues:
          new = AD()
          new.option = i.skuPropertyName
          new.id = value.propertyValueId
          new.name = value.skuPropertyTips
          new.image = value.get("skuPropertyImagePath",None)
          options.append(new)

      variants = []
      # Exec(b'for i in data.skuModule.skuPriceList:\n  new = AD()\n  new.option_ids = lmap(int,Split(",",i.skuPropIds))\n  new.price = flt(or_list(lambda:i.skuVal.actSkuCalPrice,lambda:i.skuVal.skuCalPrice))\n  new.compare_at_price = flt(or_list(lambda:i.skuVal.actSkuCalPrice,lambda:i.skuVal.skuCalPrice))\n  new.inventory = i.skuVal.availQuantity\n  new.option_ids_saved = lmap(int,Split(",",i.skuPropIds))\n  variants.append(new)\n'.decode(),globals(),locals())
      for i in data.skuModule.skuPriceList:
        new = AD()
        new.option_ids = lmap(int,Split(",",i.skuPropIds))
        new.price = flt(or_list(lambda:i.skuVal.actSkuCalPrice,lambda:i.skuVal.skuCalPrice))
        new.compare_at_price = flt(or_list(lambda:i.skuVal.actSkuCalPrice,lambda:i.skuVal.skuCalPrice))
        new.inventory = i.skuVal.availQuantity
        new.option_ids_saved = lmap(int,Split(",",i.skuPropIds))
        variants.append(new)

      images = []
      # Exec(b'for i in data.imageModule.imagePathList:\n  images.append(i)'.decode(),globals(),locals())
      for i in data.imageModule.imagePathList:
        images.append(i)

      # OSA.notify("-X-: %s"%(Date().friendlydate(Date().Now(),seconds=True)))

      # A. Sort the variants more
      # get the ordered sku values from the sku option list
      x = lmap(lambda i: key("propertyValueId",i.skuPropertyValues), data.skuModule.productSKUPropertyList)
      # get the len of option_ids for the variants and subtract 1 from it as the idx counter
      # order the variants by the option_ids to the sku values
      c = len(variants[0].option_ids_saved) - 1
      for i in reversed(x):
        l = []
        for j in i:
          for r in variants:
            if r.option_ids_saved[c] == j:
              l.append(r)
        variants = l
        c -= 1
        
      # 5 seconds
      # B. Get the images, keeping the variant_indexes in here because if it's 1 image that's not specified as a variant index, then it won't otherwise save (complex 1)
      # thumbnails first and then the variant indexes
      images_x = indicepick(image_indexes, images)
      if filter(options,~Q(image=None)):
        # get the image urls from the options without specifying any variant_indexes
        # get the image urls from the options using variant_indexes
        images_x = ifelseget(lambda:len(variant_indexes) == 0,lambda: (lmap(lambda i:findall(i,1,r"(.*)_\d+x\d+\.(?:.{3}|.{4})"),listminus(key("image",options),None)) + images_x),lambda: (indicepick(key(0,variant_indexes), lmap(lambda i:findall(i,1,r"(.*)_\d+x\d+\.(?:.{3}|.{4})"),listminus(key("image",options),None))) + images_x) )
      else:
        images_x = lmap(lambda i:findall(i,1,r"(.*)_\d+x\d+\.(?:.{3}|.{4})"),listminus(key("image",options),None)) + images_x
      globals()["rr"] = images_x
      # images = lmap(lambda i: {"attachment": i},
      #     pool(lambda i: Images().image_base64(i), 
      #         zki(lambda: logo, lambda i: 
      #           Images().flexor_and_tenor(i,size=logo_size,logo_scaling_dimension_size=logo_scaling_dimension_size),
      #             pool(Images().sharpen, pool(Images().download,
      #                 images_x
      #                   ).result()).result())).result())

      x = pool(Images().download,images_x).result()
      x = pool(Images().sharpen,x).result()
      if logo:
        # address=x[0];size=logo_size;logo_scaling_dimension_size=[450,450]
        x = pool(lambda i:Images().flexor_and_tenor(i,size=logo_size,logo_scaling_dimension_size=[450,450]), x).result()
      x = pool(lambda i: Images().image_base64(i), x).result()
      images = lmap(lambda i: {"attachment":i},x)


      # C. Set default fields for variants
      # set option names
      # set sku
      # some options will have color, color and the ids can repeat twice such as 366,366. for this use the line below. this was an issue for not that many tests but i didn't change everything and test again. the ordering may change.
      'for i in variants:\n  options_x = []\n  for idx,j in enum(i.option_ids):\n    options_x.append(filter(options,id=j,option=oset(sud("option",options))[idx])[0].name)\n  i.options = options_x\n  i.sku = str(Join("|",lmap(str,i.option_ids_saved)))'
      for i in variants:
        options_x = []
        for idx,j in enum(i.option_ids):
          options_x.append(filter(options,id=j,option=oset(sud("option",options))[idx])[0].name)
        i.options = options_x
        i.sku = str(Join("|",lmap(str,i.option_ids_saved)))


      # go over through the names and get the same names. then get the skus and if it's over 1, make the names unique
      for i in range(len(variants[0].options)):
        names = oset(lmap(lambda j: j.options[i], variants))
        for j in names:
          same_names = [l for l in variants if l.options[i] == j]
          q = oset(lmap(lambda l: l.option_ids[i], same_names))
          if len(q) > 1:
            for idx, v in enum(q):
              x = [l for l in same_names if l.option_ids[i] == v]
              for idx2, y in enum(x):
                y.options[i] = y.options[i] + (" #%s"%(idx+1))
              for option in options:
                if option.id == v:
                  option.name = option.name + (" #%s"%(idx+1))

      # 4 seconds
      # D. Create sku_image_dict
      # create sku image dict
      sku_image_dict = {}
      if filter(options,~Q(image=None)):
        # get the option number that has images
        x = oset(key("option",filter(options))).index(oset(key("option",filter(options,~Q(image=None))))[0])
        for i in variants:
          # get the option name for the variant and get the image
          # assign the image to the variant
          # assign the variant's sku to the images_x' index of the image
          option_x = i.options[x]
          # won't add here where a row of variants with images will have 1 without an image
          image = tr(lambda:filter(options,~Q(image=None),name=option_x)[0].image)
          if image == 0:
            print("image error")
            assert False
          i.image = findall(image,1,"(.*)_\d+x\d+\.(?:.{3}|.{4})")
          if tryprocess(lambda: images_x.index(i.image)):
            sku_image_dict[i.sku] = images_x.index(i.image)


      # E. Set default things for option_indexes
      # save a copy of options (tmp)
      options_copy = lmap(lambda i: AD(i), copy.deepcopy(lmap(lambda i: dict(i), options)))
      # arrange options if option_indexes
      if option_indexes:
        # initialize options_x
        options_x = []
        # initialize unique names of the options.
        names = oset(key("option",options))
        # get the option number for each of the option indexes
        # filter the options to the option number based on the unique names
        # and update the option name.
        for option_number, option_name in option_indexes:
          options_y = filter(options,option=names[option_number])
          list(map(lambda i: update(i,option=option_name), options_y))
          options_x.extend(options_y)
        options = options_x

        # iterate through the variants and set a new option and option id list order based on the option indexes
        for i in variants:
          i.options_saved = i.options
          # don't set options or option_ids here because the option_number will go to the correct one but the options will already be collapsed
          # don't set options or option_ids here because the right option number is collapsed. but the options list is collapsed
          # or the option number is not there, so there is no such thing as an option to not remove; then you have to separate for variant_indexes
          # i.options = [i.options[option_number] for option_number, option_name in option_indexes]
          # i.option_ids = [i.option_ids[option_number] for option_number, option_name in option_indexes]


      # F. Set default things for variant_indexes, keeping in mind the option_not_remove_exists if options have been changed. (complex 2)
      # assign variant indexes. it will be for naming the intended option number
      # if variant_indexes is [], just iterate through the variants and change the option names.
      options_not_remove_a = None
      if variant_indexes:
        # get the option_not_remove_exists by checking the filtered options for the variants for the first option_not_remove
        # find the intended option number
        # get the option number by indexing the option to not remove's name from the option names.
        # option_not_remove_exists = ifelseget(lambda:oset(key("option",[i for i in [i for i in options if i.option != "Ships From"] if "Size" not in i.option and len(filter(options,option=i.option)) != 1]))[0],lambda:True,lambda:False)
        # checks the option_not_remove by the option names you choose
        option_not_remove_exists = ifelseget(lambda:oset(key("option",[i for i in [i for i in options if i.option != "Ships From"] if check_option(i.option) and len(filter(options,option=i.option)) != 1]))[0],lambda:True,lambda:False)
        options_not_remove_a = True
        options_copy_2 = lmap(AD,copy.deepcopy(lmap(dict,options_copy)))
        option_names = oset(key("option",options_copy_2))
        for idx, i in option_indexes:
          option_name = option_names[idx]
          for j in filter(options_copy_2,option=option_name):
            j["option"] = i
        option_not_remove = oset(key("option",[i for i in [i for i in options_copy_2 if i.option != "Ships From"] if check_option(i.option) and len(filter(options,option=i.option)) != 1]))[0]
        option_number = oset(key("option",options_copy_2)).index(option_not_remove)
        # get the variant options. these are the names for the option number for the variants
        # so now you have the intended option number and the variant option names for it.
        variant_options = oset(lmap(lambda i: i.options[option_number], variants))
        # set variants_x. it will be used for storing the variants
        variants_x = []
        for variant_list_number, name in variant_indexes:
          # get the variant name based on the variant list number
          # print(variant_list_number, name)
          variant_name = variant_options[variant_list_number]
          # print(variant_name)
          # filter by all the variants with the variant option number name as that variant name
          variants_y = sudby(lambda i: i.options[option_number] == variant_name, variants)
          variants_y = [AD(dictrecurse(i)) for i in variants_y]
          print(len(variants_y), option_number, variant_name)
          # print(variants_y)
          # now iterate through the filtered variants to rename them
          # print(len(variants_y))
          for i in variants_y:
            # below there will be an idx initiated for keeping track of the index
            # if the idx of the options is the intended option number, assign the name from the variant_indexes
            # if the idx of the option is not the intended option number, change the option name using cm_to_inch4 and adjust the variant name
            if option_not_remove_exists == True:
              # lmap(lambda idx, j: setitem(i.options,idx,cm_to_inch4(name))if(idx==option_number)else(setitem(i.options,idx,adjustvariantname(cm_to_inch4(j)))), list(enum(i.options)))
              for idx, j in enum(i.options):
                if idx == option_number:
                  i.options[idx] = cm_to_inch4(name)
                else:
                  i.options[idx] = adjustvariantname(cm_to_inch4(j))
            else:
              i.options = [adjustvariantname(cm_to_inch4(j)) for j in i.options]

            # set the variant options and option_ids based on the option_indexes
            i.options = [i.options[option_number] for option_number, option_name in option_indexes]
            i.option_ids = [i.option_ids[option_number] for option_number, option_name in option_indexes]

          # finally, aside from renaming the variants, extend the variants to a list to be ordered according to the variant_indexes
          variants_x.extend(variants_y)
        variants = variants_x

        # get the option_not_remove_x and option_number_x for the collapsed options and get options_y and change the options
        if option_not_remove_exists == True:
          option_not_remove_x = oset(key("option",[i for i in [i for i in options if i.option != "Ships From"] if check_option(i.option) and len(filter(options,option=i.option)) != 1]))[0]
          option_number_x = oset(key("option",options)).index(option_not_remove_x)
          options_x_idxs = lmap(lambda i: options.index(i), filter(options,option=oset(key("option",options))[option_number_x]))
          options_y = indicepick(key(0,variant_indexes),filter(options,option=oset(key("option",options))[option_number_x]))
          options[options_x_idxs[0]:(options_x_idxs[-1] + 1)] = options_y

      else:
        for i in variants:
          options_x = []
          for j in i.options:
            options_x.append(adjustvariantname(cm_to_inch4(j)))
          i.options = options_x


      # 7 seconds
      # G. Set and use the option_idxs_to_delete
      # set option_idxs_to_delete
      options_idxs_to_delete = []
      for i in range(len(variants[0].options)):
        options_idx_number = lmap(lambda j: j.options[i], variants)
        if len(oset(options_idx_number)) == 1:
          options_idxs_to_delete.append(i)
      # change options and variant options and variant_ids
      if options_idxs_to_delete:
        # fine without using options_copy_2
        option_names = oset(key("option",options_copy))
        for i in options_idxs_to_delete:
          option_name_to_delete = option_names[i]
          options = filter(options,~Q(option=option_name_to_delete))
        for i in variants:
          i.options = [i for idx, i in enum(i.options) if idx not in options_idxs_to_delete]
          i.options_ids = [i for idx, i in enum(i.options) if idx not in options_idxs_to_delete]
        # for i in options_idxs_to_delete:
        #   option_name_to_delete = option_names[i]
        #   options = filter(options,~Q(option=option_name_to_delete))
        #   for j in variants:
        #     j.options = [i for idx, i in enum(j.options) if idx not in options_idxs_to_delete]
        #     j.option_ids = [i for idx, i in enum(j.option_ids) if idx not in options_idxs_to_delete]


      # H. Remove from variant options and options
      # get options to remove, if there are options to remove, remove options for variants
      options_to_remove = [i for i in options if i.option == "Ships From" or (check_option(i.option) and len(filter(options,option=i.option)) == 1)]
      if options_to_remove:
        # use the options to remove and index those from the original option names and then set the variant options as the indexes that are not in that list.
        # removed options with options_to_remove as [0], twice, one in above block and also here
        if not options_not_remove_a:
          lmap(lambda i: update(i,options=[i for idx, i in enum(i.options) if idx not in [oset(key("option",options)).index(j) for j in oset(key("option",options_to_remove))]]), variants)

      # set the options as the intended options
      options = [i for i in options if i not in keyby(lambda i: ((i.option == "Ships From") or (check_option(i.option) and len(filter(options,option=i.option))==1)),options)]


      # Select China for Ships From
      # fine without using options_copy_2
      if "Ships From" in key("option",options_copy):
        variants = filter(variants,option_ids_saved__contains=filter(options_copy,option="Ships From",name="China")[0].id)

      # I. Set the options
      # keep an index and iterate through the options by using the option ids list of the options to sort the variants by the variant option number 
      # keep an options x for the options
      # 8 seconds
      options_x = []
      # iterate through the options names and get the option ids for the option name
      for idx, i in enum(oset(key("option",options))):
        option_ids = key("id",filter(options,option=i))
        # get the associated values for the option ids
        # or_list with [] if the options have been deleted from the options_idxs_to_delete
        values = or_list(lambda:[keyby(lambda k: k.option_ids[idx] == j, variants)[0].options[idx] for j in option_ids if j in lmap(lambda r: r.option_ids[idx], variants)],lambda:[])
        # append to options_x
        # only append if the values are greater than len 0
        ifdo(lambda: len(values) > 0, lambda:options_x.append({"name": i, "values": values}))

        # reset variants based on acquiring the right order based on the option ids and the idx
        variants = or_list(lambda:dip([keyby(lambda i: i.option_ids[idx] == j, variants) for j in option_ids],1),lambda:variants)

      # finally, set options to options_x
      options = options_x


      # get the shipping price
      # shipping_price = ShippingCost().get_shipping_cost(x.shipping,shop)
      shipping_price = shipping_price
      # update the price, compare_at_price, inventory_quantity, and inventory_management
      lmap(lambda i:i.update(price=CH().price_change((i.price+shipping_price),shop),compare_at_price = CH().get_compare_at_price(CH().price_change((i.price+shipping_price),shop)),inventory_quantity = i.inventory,inventory_management = "shopify",), variants)

      # clean up the variants and reformat them
      #lmap(lambda i:[i.pop("image",None),i.pop("option_ids"),i.pop("option_ids_saved"),i.update(option1=or_list(lambda:i.options[0],None)),i.update(option2=or_list(lambda:i.options[1],None)),i.update(option3=or_list(lambda:i.options[2],None)),i.pop("options")], variants)
      for i in variants:
        delete_keys(i, "image", "option_ids", "option_ids_saved")
        i.update(option1=or_list(lambda:i.options[0],None)),i.update(option2=or_list(lambda:i.options[1],None)),i.update(option3=or_list(lambda:i.options[2],None))
        delete_keys(i, "options", "options_saved")

      if "variantdelete" in str(extra_commands):
        variantdelete = findall(extra_commands,1,"variantdelete: (.*?)\|")
        idx,variantnumbers = dune(variantdelete.split("&"),[lambda i:int(i),lambda i:lmap(lambda i:(int(i)-1),i.split(","))])
        variant_values_to_delete = lmap(lambda i:i[1],sudby(lambda idx,i:idx in variantnumbers,list(enum(options[(idx-1)]["values"]))))
        options[(idx-1)]["values"] = sudby(lambda i:i not in variant_values_to_delete,options[(idx-1)]["values"])
        variants = sudby(lambda i:getattr(i,"option%s"%(idx)) not in variant_values_to_delete,variants)
        if len(options[(idx-1)]["values"]) == 1:
          lmap(lambda i:setattr(i,"option%s"%(idx),None),variants)
          options.pop(idx-1)
          

      # save the product with the title, and product_type
      print("Starting to save product")
      globalise(variants,"tmp_variants")


      # save the product with the images, body_html, published_scope, options, and variants
      variants = sort_variants(variants)
      removed_variants = variants[100:]
      variants = variants[:100]
      variant_image_idxs = oset(lmap(lambda i:sku_image_dict[i],sud("sku",variants)))
      removed_variant_image_idxs = oset(lmap(lambda i:sku_image_dict[i],sud("sku",removed_variants)))
      variant_image_idxs_to_remove = sudby(lambda i:i not in variant_image_idxs,removed_variant_image_idxs)
      images = lmap(lambda i:i[1],sudby(lambda idx,i:idx not in variant_image_idxs_to_remove,list(enum(images))))


      product = go_over(lambda i:droll(lambda:apilimitcall(i.save)==True), Shop()(shop).shopify.product.Product(dict(title=title,product_type=niche,images=images)))


      # add the UniqueProductIdentifier sku for the variants
      lmap(lambda i: [globalise(UniqueProductIdentifier().add(product_id = product.id, shop = shop, x = i.sku),"new_sku"),tryprocess(lambda:[setitem(sku_image_dict,globe("new_sku"),slank(i.sku,sku_image_dict))]),setitem(i,"sku",globe("new_sku"))], variants)
      # do not let options be an empty list
      ifdo(lambda: options == [], lambda: options.append({'name': 'Title', 'values': ['Default Title']}))



      # print(json.dumps(variants,indent=4))
      product = xir(product,body_html=my_description,published_scope="web",options=options,variants=variants)
      if apilimitcall(product.save) == True:
        pass
      else:
        product.destroy()
        print("product did not save with the variants")
        assert False
      # product = go_over(lambda i:droll(lambda:apilimitcall(i.save)==True), xir(product,body_html=my_description,published_scope="web",options=options,variants=variants))

      
      # update the image ids of the variants if there is an sku_image_dict and then save the product
      if sku_image_dict:
        for i in product.variants:
          i.image_id = product.images[sku_image_dict[i.sku]].id
        product = varsave(product)

      if DOWNLOAD_VIDEO == True:
        ifdo(lambda: data.imageModule.get("videoId",None), lambda: Save(Video,product_id=product.id,video=data.imageModule.videoId).download_video("https://cloud.video.taobao.com/play/u/3078003042/p/1/e/6/t/10301/%s.mp4"%(data.imageModule.videoId)))


      added_product = tr(lambda:Save(Product,**dictupdate(dictupdate(product.to_dict(),ali_url=url,seller_platform="Aliexpress",description=my_description,shop=shop,size_chart=size_chart,last_quantity_check=datetime.now(),last_check=Date().Now(),aliexpressvendor = ("https://aliexpress.com/store/%s"%(data.actionModule.storeNum)),url_title = data.imageModule.imagePathList[0].split("/")[-1].split(".")[0]),created_at=None,icon_image=[globalise(Images().download(product.images[0].src),"icon_image_x"),open(Images().resize(globe("icon_image_x"),50),"rb").read(),rm(globe("icon_image_x"))][1])))
      if added_product == 0:
        product.destroy()
        print("product did not save with the variants")
        assert False
      pool(lambda: [
        pool(lambda: [time.sleep(0), Get(Product,id=product.id).post_description()]).result(),
        ifdo(lambda: is_free_plus_ship, lambda: CH().free_plus_ship(Get(Product,id=product.id))),
        pool(lambda:GhostProduct().productgost(product)),
        CH()(product),
        pool(lambda:productsFeed(Shop()(shop), created_at_min=1)),
        ]).result()
      ifdo(lambda: globe("caption"), lambda: create_ad(product,caption,shop,niche,caption))
      Update(Muta()(),caption=None,size_chart=None,my_description=None)
      if globe("caption"): globals().pop("caption")
      print("COMPLETE")
      tryprocess(lambda: timing.terminate())
      if GLOBAL_ADD_PRODUCT_NOTIFICATION == True:
        pool(lambda: OSA.log("Completed",tp=False))
      print("time taken: %s"%((Date().Now()-start_time).total_seconds()))
      return added_product
  def Leave(self):
    Get(Soup,url=self.ali_url).Leave()
    Update(self,last_quantity_check=Date().Now())
    return self
  def Refresh(self,refresh_prices = False):
    x = Aliexpress_Products().get_product_data(self.ali_url,check_for_epacket=(True)if Shop()(self.shop).Allow_Additional_Shipping_Methods == False else (False))
    Exec('def format_data(page_source):\n  soup = SOUP(page_source)\n  data = AD({"actionModule":{"productId":None,"storeNum":None},\n          "imageModule":{"imagePathList":None},\n          "skuModule":{"productSKUPropertyList":None,\n                        "skuPriceList":None,}\n          })\n  productId = findall(page_source,1,\'window.runParams.productId="(\\d+)"\')\n  storeNum = findall(page_source,1,\'window.runParams.shopId="(\\d+)"\')\n\n  data.actionModule.productId = productId\n  data.actionModule.storeNum = storeNum\n\n  productSKUPropertyList = []\n  for i in range(3):\n    new = AD()\n    product_info_sku = soupy(soup,"div","id","j-product-info-sku")[0]\n    option_names = lmap(lambda i:i[:-1], key("text",product_info_sku.findAll("dt",attrs={"class":"p-item-title"})))\n\n    if (i+1) > len(option_names):\n      break\n\n    skuPropertyName = option_names[i]\n\n    x = product_info_sku.findAll("dd",attrs={"class":"p-item-main"})[i]\n    y = x.findAll("li")\n    skuPropertyValues = []\n    for j in y:\n      z = AD()\n      if j.findAll("img"):\n        z.skuPropertyTips = j.findAll("a")[0].attrs["title"]\n        z.propertyValueId = int(j.findAll("a")[0].attrs["data-sku-id"])\n        z.skuPropertyImagePath = j.findAll("img")[0].attrs["src"]\n      else:\n        z.skuPropertyTips = j.text\n        z.propertyValueId = int(j.findAll("a")[0].attrs["data-sku-id"])\n        z.skuPropertyImagePath = None\n      skuPropertyValues.append(z)\n    new.skuPropertyName = skuPropertyName\n    new.skuPropertyValues = skuPropertyValues\n    productSKUPropertyList.append(new)\n  data.skuModule.productSKUPropertyList = productSKUPropertyList\n  data.skuModule.skuPriceList = json.loads(findall(page_source,1,"var skuProducts=(.*);"))\n  data.imageModule.imagePathList = lmap(lambda i: re.sub("(.*)_\\d+x\\d+\\.(?:.{3}|.{4})","\\\\1",i), lmap(lambda i: i.findAll("img")[0].attrs["src"], soupy(soup,"span","class","img-thumb-item")))\n  data.imageModule.videoId = or_list(lambda:soupy(soup,"div","id","item-video")[0].attrs["data-vid"],None)\n  return data',globals(),locals())

    if x.y == "Not Found":
      print("Not Found")
      self.Leave()
      return
    
    if Shop()(self.shop).Allow_Additional_Shipping_Methods == False:
      if x.y == "No ePacket":
        print("No ePacket")
        return

    html = x.data
    data = None
    try:
      data = AD(json.loads(findall(html,1,'data: ({"actionModule":.*),')))
    except Exception as e:
      data = format_data(html)

    # if x.y == "Not Found":
    #   print("Not Found")
    #   self.Leave()
    #   return
    
    # if Shop()(self.shop).Allow_Additional_Shipping_Methods == False:
    #   if x.y == "No ePacket":
    #     print("No ePacket")
    #     return

    shipping_cost = ShippingCost().get_shipping_cost(x.shipping,self.shop)

    data2 = or_list(lambda: AD(json.loads(findall(str(x.data),1,'data: ({"actionModule.*),'))).skuModule.skuPriceList, lambda: lmap(AD,json.loads(findall(str(x.data),1,"var skuProducts=(.*);"))))
    variants = lmap(lambda i: AD(sku = Join("|",Split(", ", i.skuPropIds)), inventory_quantity = i.skuVal.availQuantity, price = or_list(lambda:flt(i.skuVal.actSkuCalPrice),lambda:flt(i.skuVal.skuCalPrice))), data2)

    product = Shop()(self.shop).pfind(id_=self.id)
    if not product:
      Del(Get(Product,id=self.id))
      return
    quantities_a = key("inventory_quantity",product.variants)
    for i in variants:
      x = Join("|",i.sku.split(","))
      if x in sud("x", Filter(UniqueProductIdentifier,product_id=self.id)) and x in lmap(lambda i: Get(UniqueProductIdentifier,product_id=self.id,y=i).x, sud("sku",product.variants)):
        variant = keyby(lambda j: x == Get(UniqueProductIdentifier,product_id = self.id, y = j.sku).x, product.variants)[0]
        available_adjustment = i.inventory_quantity - variant.inventory_quantity
        if available_adjustment != 0:
          InventoryLevel().adjust(self.shop,variant,available_adjustment)
          print("%s - > %s" % (variant.inventory_quantity, i.inventory_quantity))
          i.inventory_quantity = variant.inventory_quantity

        # does not change the price
        # Exec('if variant.price != (float(i.price)+shipping_cost):\n  PriceIncrease(product_id=self.id,variant_id=variant.id,corn=variant.price,medium=i.price,date_added=datetime.now(),approved=0).save()\nif variant.price != (float(i.price)+shipping_cost):\n  PriceDecrease(product_id=self.id,variant_id=variant.id,corn=variant.price,medium=i.price,date_added=datetime.now()).save()',globals(),locals())
        if refresh_prices == True:
          i.price = float(i.price)
          print("%s}<==PRE}Refresh Products: True|Generating Current Cost:PRICE_CHANGE(%s+%s)=(%s)((%s(COMPARE_PRICE)))"%(variant.price,i.price,shipping_cost,CH().price_change(i.price+shipping_cost,self.shop),CH().get_compare_at_price(CH().price_change(i.price+shipping_cost,self.shop))))
          variant.price = CH().price_change(i.price+shipping_cost,self.shop)
          if variant.price * 0.7 < i.price:
            print("Less than, %s %s"%(variant.price,i.price))
            print("id: %s" % (self.id))
            variant.price = i.price + 2
          variant.compare_at_price = CH().get_compare_at_price(CH().price_change(i.price+shipping_cost,self.shop))

    product = varsave(product)
    quantities_b = key("inventory_quantity",product.variants)
    print(quantities_a)
    print(quantities_b)
    Update(self, images = AD(product.to_dict()).images, variants = AD(product.to_dict()).variants, last_check = Date().Now(), last_quantity_check = Date().Now())

    # So , unpublish there too. If that's what you do.
  def check_for_errors(self,x):
    if x.count("|") != 6:
      OSA.log("Error with number of '|' delimiters")
      assert False
    title,image_idx,image_indexes,option_indexes,variant_indexes,size_chart,my_description=dune(
      viden(x,"twirl1: ",1,"|"),
        [
            lambda i: tp(lambda:Replacements(i,"'S","'s"),error="Error with title"),
            lambda i: tp(lambda:ifelseget(lambda: i, lambda: (int(i)-1), lambda: None),error="Error with image number"),
            lambda i: tp(lambda:ifelseget(lambda: i, lambda: lmap(lambda i:(int(i)-1),i.split(",")), lambda: []),error="Error with image indexes"),
            lambda i: tp(lambda:ifelseget(lambda: i, lambda: [dune(i.split(":"),[lambda i:(int(i)-1),lambda i:i]) for i in i.split(",")], lambda: []),error="Error with option indexes"),
            lambda i: tp(lambda:ifelseget(lambda: i, lambda: [dune(i.split(":"),[lambda i:(int(i)-1),lambda i:i]) for i in i.split(",")], lambda: []),error="Error with variant indexes"),
            lambda i: tp(lambda:ifelseget(lambda: i, lambda: Freelancer().SizeChart(i,html=True), lambda: None),error="Error with size chart"),
            lambda i: tp(lambda:ifelseget(lambda: i, lambda: Replacements(i,"\n","<br/>"), lambda: None),error="Error with description"),
        ]
      )
    if title == 0 or image_idx == 0 or image_indexes == 0 or option_indexes == 0 or variant_indexes == 0 or size_chart == 0 or my_description == 0:
      assert False
  def feed(self,x):
    print("Product update")
    return Update(self,**x)
  def update(self):
    x = self.p()
    x = AttrDict({ ("shop")if("vendor"==a)else(a):( getattr(Shop()(self.shop),"init_shop")if("vendor"==a) else(Date().parse_date(b)) if("created_at"==a) else(b) )    for a,b in x.to_dict().items()  if a not in ["admin_graphql_api_id","image"]})
    self.feed(x)
  #@staticmethod
  take_freelancer_description = lambda self, id, freelancer_description: Update(Get(Product,id=id),freelancer_description=freelancer_description)
  def post_description(self):
    
    x = Shop()(Get(Product,id=self.id).shop).Default_Product_Description.replace("\n","")
    # potential_size_chart_insert = ('<p style="text-align: center;"><span style="text-decoration: underline;"><strong>Size Guide</strong></span></p>{}<br>'.format(Get(Product,id=self.id).size_chart)) if Get(Product,id=self.id).size_chart else ""
    # x = x.replace("<Size Chart>", potential_size_chart_insert)
    x = x.replace("<Unique Description>", ("<p>%s</p>"%(Get(Product,id=self.id).description.replace("\n","<br>")))if(Get(Product,id=self.id).description)else(""))
    x = x.replace("\n","")
    
    product = apilimitcall(lambda:Shop()(Get(Product,id=self.id).shop).pfind(id_=Get(Product,id=self.id).id))
    # if product.body_html != x:
    #   product.body_html = x
    #   product.save()
    #   Update(Get(Product,id=self.id),HTML=x)
    #   distinct_print("%s"%(product.body_html[:120]))
    product.body_html = x
    apilimitcall(product.save)

    Update(Get(Product,id=self.id),HTML=x)
    distinct_print("%s"%(product.body_html[:120]))

    # if apilimitcall(lambda:Shop()(Get(Product,id=self.id).shop).pfind(id_=Get(Product,id=self.id).id)).body_html.replace("\n","") != x:
    #   OSA.log("product with handle %s body html not the same as body_html" % (product.handle))
    #   return self.post_description()
class New_Email(Records):
  id = AutoField()
  email = CharField()
  emailer = CharField()
  emailer_name = CharField()
  true_id = CharField(unique=True)
  hidden_message = JSONField()
  binarydata = BinaryField(max_length=4294967295)
  date = DateTimeField()
  shop = CharField()
  responded = IntegerField()
  tagged_order_numbers = JSONField()
  tags = JSONField()
  actions_taken = JSONField()
  response = JSONField()
  # :End:
  possible_tags = ["Product About: Product About",
                  "Product Sizing: Product Sizing",
                "Await Delivery Time: Await Delivery Time",
              "Address Change: Address Change",
            "Special Note: Special Note",
              "Order Cancellation: Order Cancellation",
                "Order Refund: Order Refund",
                  "Order Sizing: Order Sizing",
                    "Order Quality: Order Quality",
                      "Tracking Says Delivered But Order Not Delivered: Tracking Says Delivered But Order Not Delivered",
                    "Product Not Delivered Yet: Product Not Delivered Yet",
                "Order For Crew: Order For Crew",
              "Christmas Discount: Christmas Discount",
            "Free Coupon: Free Coupon",
              "Order Not Delivered And Wants A Refund: Order Not Delivered And Wants A Refund",
                "Order Not Delivered In Time For A Holiday And Wants A Refund: Order Not Delivered In Time For A Holiday And Wants A Refund",
                  "Order Delivered: Order Delivered",]
  get_orders = lambda self: keysort("order_number",Filter(Order,email=self.emailer,shop=self.shop),tcer=False)
  get_identified_emails = lambda self,shop: oset(key("emailer",sorted([i for i in All(New_Email) if i.emailer in key("email",Filter(Order,shop=shop))],key=lambda i:or_list(lambda:max(key("order_number",i.get_orders())),0))))
  def printformat(self):
    return "█((%s))█, █((New_Email))█, █((%s))█: █((%s))█ ((%s))"%(Date().friendlydate(self.date,with_year=True),(", ".join(lmap(str,self.tagged_order_numbers)))if(self.tagged_order_numbers)else("No Order Number Tags"),(self.true_id),("Responded")if(self.responded)else("Choose Response From Templates"))
  def get_all_identified_emails(self,shop):
    emailers = sud("emailer", sudby(lambda i:i.emailer in sud("email",Filter(Order,shop=shop)),list(Filter(New_Email,shop=shop))) )
    aliexpressorderevents = list(Filter(Aliexpressorder_event,shop=shop))
    keepexchanges = list(Filter(Keep_Exchange,shop=shop))
    aliexpressdisputes = list(Filter(Aliexpress_Dispute,shop=shop))
    tertiaryactions = list(Filter(TertiaryAction,shop=shop))
    reorders = list(Filter(ReOrder,shop=shop))
    a = sorted(set((emailers+sud("email",(aliexpressorderevents+keepexchanges+aliexpressdisputes+tertiaryactions+reorders)))))
    return a
  def get_all_identified_emails(self,shop):
    emailers = sud("emailer", sudby(lambda i:i.emailer in sud("email",Filter(Order,shop=shop)),list(Filter(New_Email,shop=shop))) )
    # aliexpressorderevents = list(Filter(Aliexpressorder_event,shop=shop))
    # keepexchanges = list(Filter(Keep_Exchange,shop=shop))
    # aliexpressdisputes = list(Filter(Aliexpress_Dispute,shop=shop))
    # tertiaryactions = list(Filter(TertiaryAction,shop=shop))
    # reorders = list(Filter(ReOrder,shop=shop))
    a = sorted(set((emailers)))
    return a
  def run_support(self):
    impreview(writewb(get_random_address(homepath("~/tavern/tavern/soda/dls")).png(),self.binarydata))
    OSA().setforemostwindowarrangement("Preview",0,0,*OSA().getwindowsize("Preview"))
    Update(self, tags = OSA.log(do=self.possible_tags,mo=True))if(self.tags == None)else()

    globals()["actions"] = OSA.log(do=["%s: %s"%(i.subject,i.matter) for i in
        sorted(Filter(New_Email_Template,shop=self.shop),key=\
          lambda i:[i.subject,i.matter])] + [ 
                        "Add Template", 
                        "Delete A Template", 
                        "Modify As Read Without Responding", 
                        *["Tag With Order Number %s"%(i.order_number) for i in self.get_orders()], 
                        "Untag Order Numbers", 
                        "Create +1 ProductTalk",
                        "Create -1 ProductTalk",
                        "Send Reply",
                        "Create Keeps Item, Refund",
                        "Create Keeps Item, Exchange",
                        "Create Returns Item, Refund",
                        "Create Returns Item, Exchange",
                        "Create Keeps Item, Discount",
                        "Create Returns Item, Discount"
                        ],
                        mo=True)
    Update(self,actions_taken = actions)
    if("Add Template")in(actions): New_Email_Template().create_new_template(self.shop) 
    if("Delete A Template")in(actions): ([Del(Get(New_Email_Template,subject=findall(i,1,"(.*?):"),matter=findall(i,1,".*?: (.*?$)"))) for i in OSA.log("Template to delete?",do=["%s: %s"%(i.subject,i.matter) for i in sorted(Filter(New_Email_Template,shop=self.shop),key=lambda i:[i.subject,i.matter])],mo=True)])
    if("Modify As Read Without Responding")in(actions): (Update(self,responded=True))
    if(sum(lmap(lambda i:findall(i,"Tag With Order Number [0-9]+"),actions),[])): Update(self,tagged_order_numbers=(sorted(lmap(lambda i:int(findall(i,1,".*Tag With Order Number ([0-9]+)")),[i for i in actions if findall(i,".*Tag With Order Number [0-9]+")]))))
    if("Untag Order Numbers" in actions): Update(self,tagged_order_numbers=(sorted(list(set(self.tagged_order_numbers)-set(lmap(lambda i:int(i),OSA.log("Order Numbers To Untag [separated by ', ']?").split(", ")))))))
    if("Create +1 ProductTalk" in actions):
      x = OSA.log(do=sum([[(lambda: "%s （%s） (#%s)"%(i.title,i.variant_title,order_number))() for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[]),mo=True)
      for i in x:
        title, variant_title, order_number = dune(re.findall(r"(.*) （(.*)） \(#(\d+)\)",i)[0],[lambda i:i, lambda i:i, lambda i:int(i)])
        ProductTalk().create(
          customer=self.emailer,
          order_id=Get(Order,shop=self.shop,order_number=order_number).id,
          shop=self.shop,
          binarydata=self.binarydata,
          thread_id=self.true_id,
          lineitem_id=Filter(Lineitem,title=title,variant_title=variant_title,order_id=(Get(Order,shop=self.shop,order_number=order_number).id),shop=self.shop)[0].id,
          product_id=Filter(Lineitem,title=title,variant_title=variant_title,order_id=(Get(Order,shop=self.shop,order_number=order_number).id),shop=self.shop)[0].product_id,
          url=Get(Product,id=Filter(Lineitem,title=title,variant_title=variant_title,order_id=(Get(Order,shop=self.shop,order_number=order_number).id),shop=self.shop)[0].product_id).ali_url,
          supplier=Get(Product,id=Filter(Lineitem,title=title,variant_title=variant_title,order_id=(Get(Order,shop=self.shop,order_number=order_number).id),shop=self.shop)[0].product_id).aliexpressvendor,
          feeling=1,
          )
    if("Create -1 ProductTalk" in actions):
        ProductTalk().create(
          customer=self.emailer,
          order_id=Get(Order,shop=self.shop,order_number=order_number).id,
          shop=self.shop,
          binarydata=self.binarydata,
          thread_id=self.true_id,
          lineitem_id=Filter(Lineitem,title=title,variant_title=variant_title,order_id=(Get(Order,shop=self.shop,order_number=order_number).id),shop=self.shop)[0].id,
          product_id=Filter(Lineitem,title=title,variant_title=variant_title,order_id=(Get(Order,shop=self.shop,order_number=order_number).id),shop=self.shop)[0].product_id,
          url=Get(Product,id=Filter(Lineitem,title=title,variant_title=variant_title,order_id=(Get(Order,shop=self.shop,order_number=order_number).id),shop=self.shop)[0].product_id).ali_url,
          supplier=Get(Product,id=Filter(Lineitem,title=title,variant_title=variant_title,order_id=(Get(Order,shop=self.shop,order_number=order_number).id),shop=self.shop)[0].product_id).aliexpressvendor,
          feeling=0,
          )
    if("Create Keeps Item, Refund" in actions):
      a=["%s (%s) (#%s)"%(a,b,c) for a,b,c in sum([[((lambda:"%s （%s）"%(i.title ,i.variant_title))(), i.quantity, order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])]
      b=sum([[i.quantity for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])
      c=sum([[i+" x%s"%q for q in lrange(1,j+1)] for i,j in zip(a,b)],[])
      d=OSA.log("Choose the variant and quantity for the customer to keep and issue a refund for",do=c,mo=True)
      for i in d:
        title, variant_title, quantity, order_number = dune(re.findall(r"(.*) （(.*?)） \((\d+)\) \(#(\d+)\)",i)[0],[lambda i:i, lambda i:i, lambda i:int(i), lambda i:int(i)])
        Keep_Exchange().create(is_keep=1,is_refund=1,is_exchange=0,is_discount=0,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id,quantity=quantity)
    if("Create Keeps Item, Exchange" in actions):
      a=["%s (%s) (#%s)"%(a,b,c) for a,b,c in sum([[((lambda:"%s （%s）"%(i.title ,i.variant_title))(), i.quantity, order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])]
      b=sum([[i.quantity for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])
      c=sum([[i+" x%s"%q for q in lrange(1,j+1)] for i,j in zip(a,b)],[])
      d=OSA.log("Choose the variant and quantity for the customer to keep and to create an exchange for",do=c,mo=True)
      for i in d:
        title, variant_title, quantity, order_number = dune(re.findall(r"(.*) （(.*?)） \((\d+)\) \(#(\d+)\)",i)[0],[lambda i:i, lambda i:i, lambda i:int(i), lambda i:int(i)])
        Keep_Exchange().create(is_keep=1,is_refund=0,is_exchange=1,is_discount=0,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id,quantity=quantity)
    if("Create Returns Item, Refund" in actions):
      a=["%s (%s) (#%s)"%(a,b,c) for a,b,c in sum([[((lambda:"%s （%s）"%(i.title ,i.variant_title))(), i.quantity, order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])]
      b=sum([[i.quantity for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])
      c=sum([[i+" x%s"%q for q in lrange(1,j+1)] for i,j in zip(a,b)],[])
      d=OSA.log("Choose the variant and quantity for the customer to return and to refund",do=c,mo=True)
      for i in d:
        title, variant_title, quantity, order_number = dune(re.findall(r"(.*) （(.*?)） \((\d+)\) \(#(\d+)\)",i)[0],[lambda i:i, lambda i:i, lambda i:int(i), lambda i:int(i)])
        Keep_Exchange().create(is_keep=0,is_refund=1,is_exchange=0,is_discount=0,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id,quantity=quantity)
    if("Create Returns Item, Exchange" in actions):
      a=["%s (%s) (#%s)"%(a,b,c) for a,b,c in sum([[((lambda:"%s （%s）"%(i.title ,i.variant_title))(), i.quantity, order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])]
      b=sum([[i.quantity for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])
      c=sum([[i+" x%s"%q for q in lrange(1,j+1)] for i,j in zip(a,b)],[])
      d=OSA.log("Choose the variant and quantity for the customer to return and to create an exchange for",do=c,mo=True)
      for i in d:
        title, variant_title, quantity, order_number = dune(re.findall(r"(.*) （(.*?)） \((\d+)\) \(#(\d+)\)",i)[0],[lambda i:i, lambda i:i, lambda i:int(i), lambda i:int(i)])
        Keep_Exchange().create(is_keep=0,is_refund=0,is_exchange=1,is_discount=0,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id,quantity=quantity)
    if("Create Keeps Item, Discount" in actions):
      a=["%s (%s) (#%s)"%(a,b,c) for a,b,c in sum([[((lambda:"%s （%s）"%(i.title ,i.variant_title))(), i.quantity, order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])]
      b=sum([[i.quantity for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])
      c=sum([[i+" x%s"%q for q in lrange(1,j+1)] for i,j in zip(a,b)],[])
      d=OSA.log("Choose the variant and quantity for the customer to keep. You will be prompted for the discount total.",do=c,mo=True)
      for i in d:
        title, variant_title, quantity, order_number = dune(re.findall(r"(.*) （(.*?)） \((\d+)\) \(#(\d+)\)",i)[0],[lambda i:i, lambda i:i, lambda i:int(i), lambda i:int(i)])
        Keep_Exchange().create(is_keep=1,is_refund=0,is_exchange=0,is_discount=1,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id,quantity=quantity)
        Update(Get(Keep_Exchange,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id),discount_coupon=globe("discount_coupon_x"))
    if("Create Returns Item, Discount" in actions):
      a=["%s (%s) (#%s)"%(a,b,c) for a,b,c in sum([[((lambda:"%s （%s）"%(i.title ,i.variant_title))(), i.quantity, order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])]
      b=sum([[i.quantity for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])
      c=sum([[i+" x%s"%q for q in lrange(1,j+1)] for i,j in zip(a,b)],[])
      d=OSA.log("Choose the variant and quantity for the customer to return. You will be prompted for the discount total.",do=c,mo=True)
      for i in d:
        title, variant_title, quantity, order_number = dune(re.findall(r"(.*) （(.*?)） \((\d+)\) \(#(\d+)\)",i)[0],[lambda i:i, lambda i:i, lambda i:int(i), lambda i:int(i)])
        Keep_Exchange().create(is_keep=0,is_refund=0,is_exchange=0,is_discount=1,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id,quantity=quantity)
        Update(Get(Keep_Exchange,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id),discount_coupon=globe("discount_coupon_x"))

    if("Send Reply" in actions):
      customer_name, email, shop_name = Get(Order,shop=self.shop,order_number=self.tagged_order_numbers[0]).billing_address_contact_name, self.emailer, Get(Shop,shop_abbreviation=self.shop).Business_Name
      order_creation_times, actions_taken_so_far = [], []
      for order_number in self.tagged_order_numbers:
        order_creation_times.append((Get(Order,id=Get(Order,shop=self.shop,order_number=order_number).id).created_at, order_number))
        actions_taken_so_far.append((Join(", ",sum(listreplace(key("actions_taken",keysort("date",[i for i in Filter(New_Email,shop=self.shop) if order_number in or_list(lambda:i.tagged_order_numbers,[])],tcer=False)),None,[]),[])), order_number) )
      order_numbers, tracking_numbers, order_amounts, item_titles, item_prices, tracking_times = [], [], [], [], [], []
      for order_number in self.tagged_order_numbers:
        order_numbers.append(order_number)
        tracking_numbers.extend([(or_list(i.ali_tracking_number,"No Tracking Number Yet"), (lambda:"%s (%s)"%(i.title ,i.variant_title))(), order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)])
        order_amounts.append(("${}".format(Get(Order,id=Get(Order,shop=self.shop,order_number=order_number).id).total_price), order_number))
        item_titles.extend([((lambda:"%s (%s)"%(i.title ,i.variant_title))(), i.quantity, order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)])
        item_prices.extend([("${}".format(i.price), (lambda:"%s (%s)"%(i.title ,i.variant_title))(), i.quantity, order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)])
        tracking_times.extend([([(i.t1, i.t2, i.t3, i.t4), (i.e1, i.e2, i.e3)], (lambda:"%s (%s)"%(i.title ,i.variant_title))(), order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)])
      order_creation_times = ["%s (#%s)"%(Date().friendlydate(a), b) for a, b in order_creation_times]
      actions_taken_so_far = ["%s (#%s)"%(a, b) for a, b in actions_taken_so_far]
      
      tracking_numbers = ["%s (%s) (#%s)"%(a, b, c) for a, b, c in tracking_numbers]
      order_amounts = ["%s (#%s)"%(a, b) for a, b in order_amounts]
      item_titles = ["%s (%s) (#%s)"%(a, b, c) for a, b, c in item_titles]
      item_prices = ["%s (%s) (%s) (#%s)"%(a, b, c, d) for a, b, c, d in item_prices]
      tracking_times = ["%s (%s) (#%s)"%(a, b, c) for a, b, c in tracking_times]
      
      order_creation_times = Join(", ", order_creation_times)
      actions_taken_so_far = Join(", ", actions_taken_so_far)
      
      order_numbers = Join(", ", lmap(str,order_numbers))
      tracking_numbers = Join(", ", tracking_numbers)
      order_amounts = Join(", ", order_amounts)
      item_titles = Join(", ", item_titles)
      item_prices = Join(", ", item_prices)
      tracking_times = Join(", ", tracking_times)

      q="""
      Customer Name: {customer_name}, Email: {email}, Shop: {shop_name}
      █Order Creation Times█ {order_creation_times}
      █Actions Taken So Far█ {actions_taken_so_far}
      █Order Numbers█ {order_numbers}
      █Tracking Numbers█ {tracking_numbers}
      █Order Amounts█ {order_amounts}
      █Item Titles█ {item_titles}
      █Item Prices█ {item_prices}
      █Tracking Times█ {tracking_times}
      """.format(customer_name = customer_name, email = email, shop_name = shop_name, order_creation_times = order_creation_times, actions_taken_so_far = actions_taken_so_far, order_numbers = order_numbers, tracking_numbers = tracking_numbers, order_amounts = order_amounts, item_titles = item_titles, item_prices = item_prices, tracking_times = tracking_times,)
      Templates = [Get(New_Email_Template,shop=self.shop,subject=findall(i,1,"(.*?):"),matter=findall(i,1,".*?: (.*?$)")).template for i in [i for i in actions if ":" in i]]
      # [[setitem(L,idx,i.replace(("(%s)"%(j)),str(eval(j)))) for j in ["customer_name","email","payment_gateway_name","shop_name","tracking_numbers","order_problem","dispute_amount","order_amount","order_creation_time","lineitem_titles","lineitem_variant_titles","tracking_times","tracking_events","actions_taken_so_far",]] for idx,i in enum(L)]
      for idx, i in enum(Templates):
        for j in ["customer_name", "email", "shop_name", "order_creation_times", "actions_taken_so_far", "order_numbers", "tracking_numbers", "order_amounts", "item_titles", "item_prices", "tracking_times"]:
          if ("(%s)"%(j) in i): L.__setitem__(idx,i.replace(("(%s)"%(j)),str(eval(j))))
      response = OSA.log(q=q,df="".join([("\n\n".join(Templates)),("\n"*50)]),buttons=["".join([" "*100,"OK"," "*100])])
      Emailer(self.email).send_message(subject="Re:", to=self.emailer, msgHtml=response)
      Update(self,responded=True)
      Update(self,response=response)
  def verify(self):
    customer,order_number = g.Z.replace("support: verify: ","").split("|")
    ()if(tryreturn(lambda:Get(Order,email=customer,order_number=int(re_substitute(order_number,["#",""]))))==1)else([pyperclip.copy("Order not able to be verified using email: %s and order number: %s"%(customer,order_number)),0/0])
    order = Get(Order,email=customer,order_number=int(re_substitute(order_number,["#",""])))
    pyperclip.copy("ORDER #%s\n%s"%((re_substitute(order_number,["#",""])),("\n".join(["({}) ({} - {})".format(*i) for i in keymulti(["id","title","variant_title"],order.line_items)]))))
  def take_response(self, w):
    #OSA.log(w.email + w.emailer + w.true_id)
    #return
    address = get_random_address(homepath("~/tavern/tavern/soda/dls")).png()
    open(address,"wb").write(w.binarydata)
    impreview(address)
    status = OSA.log("Respond now?\n1. Enter in 'Yes' to respond.\n2. Enter in 'No' to modify as read.\n3. Enter in 'Previewing' to skip.")
    if status == "Previewing":
      0/0
    elif status == "No":
      Emailer(w.email).modify_as_read(id=w.true_id,star=False)
      Update(w,responded=True)
    elif status == "Yes":
      r = OSA.display_dialog("reply?:")
      kwargs = {"threadId":w.true_id,"msgHtml":r}
      Emailer(w.email).send_reply(**kwargs)
      Update(w,responded=True)
  @staticmethod
  def new_email_set(shop):
    start_time = Time()
    email_address = Get(Shop,shop_abbreviation=shop).Business_Email_Address
    e = Emailer(email_address)
    e.set_messages(count=50)
    if getattr(e,"messages",None) == None: (0/0)
    for quasmorty in e.messages:
      true_id = quasmorty["id"]
      if true_id not in key("true_id",Filter(New_Email,shop=shop)):
        msg = quasmorty["hidden_message_3"].decode("utf-8",errors="ignore")
        responded,email_address,emailer,gershwin,date=0,e.user,quasmorty.sender,tryreturn(html_to_png, msg),quasmorty.date
        gershwin=Images().black_and_white(gershwin)
        binarydata = open(gershwin,"rb").read()
        New_Email(binarydata=binarydata,email=email_address,emailer=emailer,responded=responded,hidden_message=msg,date=date,true_id=true_id,shop=shop).save()#5.
        time.sleep(1)
    elapsed_time = (Time() - start_time).total_minutes()
    OSA.notify("Elapsed: %s minutes"%(elapsed_time))
  def get_all_support_items(self,email,shop):
    x=list(Filter(New_Email,emailer=email,shop=shop)) +\
    list(Filter(TertiaryAction,email=email,shop=shop)) +\
    [x for x in All(Aliexpressorder_event) if Get(Order,id=Get(Lineitem,ali_order_number=x.id).order_id).email == email and Get(Order,id=Get(Lineitem,ali_order_number=x.id).order_id).shop == shop] +\
    [x for x in All(ReOrder) if Get(Order,id=x.order_id).email == email and Get(Order,id=x.order_id).shop == shop] +\
    [x for x in All(Keep_Exchange) if Get(Order,id=x.order_id).email == email and Get(Order,id=x.order_id).shop == shop] +\
    list(Filter(Aliexpress_Dispute,email=email,shop=shop))
    w=sorted(x,key=lambda i:
      i.date if type(i)==New_Email else \
      i.date if type(i)==TertiaryAction else \
      Date().myUndatetimenow(i.datetime) if type(i)==Aliexpressorder_event else \
      i.creation_time if type(i)==ReOrder else \
      i.creation_time if type(i) == Keep_Exchange else \
      i.date if type(i) == Aliexpress_Dispute else \
      ())
    return w
  def get_all_support_items(self,email,shop):
    return sorted(list(Filter(New_Email,emailer=email,shop=shop)),key=lambda i:i.date)
    # x=list(Filter(New_Email,emailer=email,shop=shop)) +\
    # list(Filter(TertiaryAction,email=email,shop=shop)) +\
    # [x for x in All(Aliexpressorder_event) if Get(Order,id=Get(Lineitem,ali_order_number=x.id).order_id).email == email and Get(Order,id=Get(Lineitem,ali_order_number=x.id).order_id).shop == shop] +\
    # [x for x in All(ReOrder) if Get(Order,id=x.order_id).email == email and Get(Order,id=x.order_id).shop == shop] +\
    # [x for x in All(Keep_Exchange) if Get(Order,id=x.order_id).email == email and Get(Order,id=x.order_id).shop == shop] +\
    # list(Filter(Aliexpress_Dispute,email=email,shop=shop))
    # w=sorted(x,key=lambda i:
    #   i.date if type(i)==New_Email else \
    #   i.date if type(i)==TertiaryAction else \
    #   Date().myUndatetimenow(i.datetime) if type(i)==Aliexpressorder_event else \
    #   i.creation_time if type(i)==ReOrder else \
    #   i.creation_time if type(i) == Keep_Exchange else \
    #   i.date if type(i) == Aliexpress_Dispute else \
    #   ())
    # return w
class Aliexpressorder_event(Records):
  id = BigIntegerField(primary_key=True)
  order_time = FloatField()
  order_status = CharField(max_length="2048")
  order_reminder = CharField(max_length="2048")
  contact_name = CharField()
  address1 = CharField()
  address2 = CharField()
  zip_code = CharField()
  mobile = CharField()
  total_amount = FloatField()
  datetime = FloatField()
  tracking_number = CharField()
  tracking_method = CharField()
  comments = CharField(max_length="2048")
  event = CharField()
  shop = CharField()
  email = CharField()
  reorder_ids = JSONField()
  # :End:
  def printformat(self):
    return "█((%s))█ █((Aliexpressorder_event))█ █((%s))█ █((%s))█ █((%s))█ █((%s))█"%(Date().friendlydate(Date().myUndatetimenow(self.datetime)),
      Get(Order,id=Get(Lineitem,ali_order_number=self.id).order_id).order_number,
      self.order_reminder, ", ".join(lmap(str,self.reorder_ids))if(self.reorder_ids)else("No Reorders Created"),
      "Create ReOrder" if self.reorder_ids == None else "Created ReOrder")
  def run_support(self):
    OSA.log("In Order to run support 4 this, please use the Status Verifications section in the Menulet. It will show listed the Aliexpress order events, to which a reorder must be created. Keep in mind, there may be various reorders per each specific Aliexpress order. \n\nThis is to say, that a re-order may legitimately fail, as well as the original. Thereby, stacking up a 2nd, reorder for that original.",tp=False)
  def run(self,shop):
    email_address = Get(Shop,shop_abbreviation=shop).Business_Email_Address
    for i in Filter(Aliexpressorder,email_address=email_address):
      if i.order_reminder == "Seller did not ship goods.":
        Save(Aliexpressorder_event,**{"id":i.id,"order_time":i.order_time,"order_status":i.order_status,"order_reminder":i.order_reminder,"contact_name":i.contact_name,"address1":i.address1,"address2":i.address2,"zip_code":i.zip_code,"mobile":i.mobile,"total_amount":i.total_amount,"datetime":i.datetime,"tracking_number":i.tracking_number,"tracking_method":i.tracking_method,"comments":i.comments,"event":i.order_reminder,"shop":shop, "email":[Get(Order,id=j.order_id).email for j in onyx_lineitems() if i.id == j.ali_order_number][0]})
      if i.order_reminder == "Your payment was not processed due to security reasons. As a result your order has been cancelled. AliExpress did not accept any payment for this order. However, please note that some banks may hold onto payments for up to 3-15 business days.":
        Save(Aliexpressorder_event,**{"id":i.id,"order_time":i.order_time,"order_status":i.order_status,"order_reminder":i.order_reminder,"contact_name":i.contact_name,"address1":i.address1,"address2":i.address2,"zip_code":i.zip_code,"mobile":i.mobile,"total_amount":i.total_amount,"datetime":i.datetime,"tracking_number":i.tracking_number,"tracking_method":i.tracking_method,"comments":i.comments,"event":i.order_reminder,"shop":shop, "email":[Get(Order,id=j.order_id).email for j in onyx_lineitems() if i.id == j.ali_order_number][0]})
    Save(StatusVerification,last_check=Date().Now(),shop=shop)
class Keep_Exchange(Records):
  id = AutoField()
  x = DateTimeField()
  order_id = BigIntegerField(unique=True)
  lineitem_id = BigIntegerField(unique=True)
  shop = CharField()
  email = CharField()
  send_back_tracking_number = CharField()
  send_back_tracking_arrive = IntegerField()
  exchange_ali_order_number = BigIntegerField()
  exchange_ali_tracking_num = CharField()
  exchange_tracking_timers_ = JSONField()
  exchange_tracking_arrived = IntegerField()
  ali_price = FloatField()
  quantity = IntegerField()
  discount_price = FloatField()
  discount_coupon = CharField()
  discount_used = IntegerField()

  is_keep = IntegerField()
  is_kept = IntegerField()
  is_send_back = IntegerField()
  is_sendback_started = IntegerField()
  is_sendback_complete = IntegerField()
  is_refund = IntegerField()
  is_refunded = IntegerField()
  is_exchange = IntegerField()
  is_exchange_started = IntegerField()
  is_exchange_complete = IntegerField()
  is_discount = IntegerField()
  is_discount_completed = IntegerField()

  is_complete = IntegerField()
  creation_time = DateTimeField()
  # :End:
  def genstatus(self):
    p1_c = 0
    r=0
    if self.is_keep:
      if self.is_kept:
        p1_c=1
        r="C"
    if self.is_send_back:
      if self.is_sendback_started:
        r="Started"
      if self.is_sendback_complete:
        p1_c=1
        r="C"
    e=0
    if self.is_refund:
      if self.is_refunded:
        e="C"
    if self.is_exchange:
      if self.is_exchange_started:
        e="Started"
      if self.is_exchange_complete:
        e="C"
    return r, e
  def gensum(self):
    p1_c = 0
    r=0
    s=""
    if self.is_keep:
      s+="k"
      if self.is_kept:
        p1_c=1
        r="C"
        s+="√"
      else:
        s+="✗"
    if self.is_send_back:
      s+="S"
      if self.is_sendback_started:
        s+="√"
        r="Started"
      else:
        s+="⌛"
      if self.is_sendback_complete:
        p1_c=1
        r="C"
        s+="√"
      else:
        s+="📦"
    e=0
    if self.is_refund:
      s+="R"
      if self.is_refunded:
        e="C"
        s+="√"
      else:
        s+="⌛"
    if self.is_exchange:
      s+="E"
      if self.is_exchange_started:
        s+="√"
        e="Started"
      else:
        s+="⌛"
      if self.is_exchange_complete:
        e="C"
        s+="√"
      else:
        s+="⌛"
    return s
  def genstatus(self):
    p1_c = 0
    r=0
    s=""
    if self.is_keep:
      s+="k"
      if self.is_kept:
        p1_c=1
        r="C"
        s+="√"
      else:
        s+="✗"
        return "Waiting For Is Keep To Complete"
    if self.is_send_back:
      s+="S"
      if self.is_sendback_started:
        s+="√"
        r="Started"
      else:
        s+="⌛"
      if self.is_sendback_complete:
        p1_c=1
        r="C"
        s+="√"
      else:
        s+="📦"
      if self.is_sendback_started==0:
        return "Waiting On Sendback"
      if self.is_sendback_started ==1:
        if self.is_sendback_complete==0:
          return "Waiting for sendback complete"
        if self.is_sendback_complete == 1:
          ""
    e=0
    if self.is_refund:
      s+="R"
      if self.is_refunded:
        e="C"
        s+="√"
      else:
        s+="⌛"
        return "Create A Refund"
    if self.is_exchange:
      s+="E"
      if self.is_exchange_started:
        s+="√"
        e="Started"
      else:
        s+="⌛"
      if self.is_exchange_complete:
        e="C"
        s+="√"
      else:
        s+="⌛"
      if self.is_exchange_started==0:
        return "Create An Exchange"
      if self.is_exchange_started==1:
        if self.is_exchange_complete==0:
          return "Waiting for Exchange to complete"
        if self.is_exchange_complete==1:
          ""
    return "Complete"
  def printformat(self):
    return "█((%s))█, █((Keep_Exchange))█, █((%s))█, █((%s))█: █((%s))█ █(([%s]))█"%\
            (Date().friendlydate(self.creation_time,with_year=True),
              Get(Order,id=self.order_id).order_number,
              self.gensum(),
              (lmap(lambda i: tuple([round(float(j),2) for j in i]),self.exchange_tracking_timers_))if(self.is_exchange)else("No Exchange Tracking Timers"),
              self.genstatus()
              )
  def run_support(self):
    status = self.genstatus()
    if status=="Waiting for sendback complete": [globalise(OSA.log("Waiting on send back to complete. %s Please select Completed if the sendback has arrived at your intended location. Which is either %s or the Aliexpress Store's address from which you instructed the customer to send the item back to, which should be viewable in this list of events as an Aliexpress dispute. So the dispute should show that the status is complete and you have received the money you paid for the order back and the dispute is closed with the items returned.\n\nUpon selecting Completed, it will progress this item to the next stage. If you select Not Completed, it will continue to stay as the same status."%(("The tracking for this order is %s."%(self.send_back_tracking_number))if(self.send_back_tracking_number)else(""),Get(Shop,shop_abbreviation=Get(Order,id=self.order_id).shop).Product_Return_Address),tp=False,buttons=["Not Completed","Completed"]),"run_support_x"),Update(self,send_back_tracking_arrive=1,is_sendback_complete=1)if(globe("run_support_x")=="Completed")else()]
    elif status=="Create A Refund": [globalise(OSA.log("Status is Create A Refund. After this, it will be set to Complete. Create A Refund to Create A Refund. It will set this status to complete. Please go ahead and create a refund, and then the menulet will reset, showing Complete. You can create a refund in the browser at %s/orders/%s (order #%s). This Refund is for the %sx of %s.\n\nThen click Created in this prompt"%(Get(Shop,shop_abbreviation=Get(Order,id=self.order_id).shop).Administrative_Url,self.order_id,Get(Order,id=self.order_id).order_number,self.quantity, "%s (%s)"%(Get(Lineitem,id=self.lineitem_id).title,Get(Lineitem,id=self.lineitem_id).variant_title),),tp=False,buttons=["Not Created", "Created"]),"run_support_x"), Update(self,is_refunded=1,is_complete=1,)if(globe("run_support_x")=="Created")else()]                                                                                                                       
    elif status=="Create An Exchange": [globalise(OSA.log("Status is Create An Exchange. This means that either the items have been sent back by the customer, or, that the customer has been notified to keep the items. What will happen at this time is that an exchange of items must occur for the customer. This means that the customer should have an Aliexpress order created for them. Please create an Aliexpress order for %sx of the %s to \n%s\nIf there is another address, please send it to that one. Make sure to save the exchange's Aliexpress order number and the exact price. Then click Created in this prompt. It will prompt you to save the Aliexpress order number and the price."%(self.quantity,("%s (%s)"%(Get(Lineitem,id=self.lineitem_id).title,Get(Lineitem,id=self.lineitem_id).variant_title)), Join("\n",listminus(lmap(lambda i: Join(", ",i),[getitems(["name"],Get(Lineitem,id=self.lineitem_id).shipping_address),getitems(["address1"],Get(Lineitem,id=self.lineitem_id).shipping_address),getitems(["address2"],Get(Lineitem,id=self.lineitem_id).shipping_address),getitems(["city","province","zip"],Get(Lineitem,id=self.lineitem_id).shipping_address)]),[""])) ), tp=False,buttons=["Not Created", "Created"]),"run_support_x"),self.create_exchange()if(globe("run_support_x")=="Created")else()]                                                                                                          
    elif status=="Waiting for Exchange to complete": [OSA.log("The status is currently waiting for the exchange with the Ali Order Number of %s to complete. In The updates, it will automatically update the data, of the tracking, and it will automatically transfer the status of this item to show that the order is complete and arrived when it arrives. As such, you can also see the time sets of this order. For something like [(19123,19125,19137),(2,12)], it means that day 123, 125, and 137 of year 2019 were respectively the Aliexpress order creation date, Aliexpress order date of tracking number posting (so you can track it now), and, finally, the arrival date to the intended customer. The 2 and 12 are the calculated elapsed times. Please currently wait for the Aliexpress order to deliver."%(self.exchange_ali_order_number),tp=False)]                                                                                                                                                                                         
    elif status=="Waiting For Is Keep To Complete": [OSA.log("Waiting for Is Keep to complete. This means that this status is waiting for the customer to keep the order. This will not be a status that is called. ",tp=False)]
    elif status=="Waiting On Sendback": [OSA.log("Waiting on sendback to start. This means that this status is waiting for the customer to initiate the sendback. This will not be a status that is called. Instead, the status would be waiting on sendback to complete.",tp=False)]
    elif status=="Complete": [OSA.log("This item is complete. There is no further action at this time.",tp=False)]
  def create(self, is_keep, is_refund, is_exchange, is_discount, order_id, lineitem_id, quantity):
    send_back_tracking_number = None
    if is_keep == False:
      if OSA.log("For the %sx %s (#%s), is there a tracking number?"%(quantity,(lambda:("%s (%s)"%(Get(Lineitem,id=lineitem_id).title,Get(Lineitem,id=lineitem_id).variant_title)))(),Get(Order,id=order_id).order_number),tp=False,buttons=["No","Yes"])=="Yes":
        send_back_tracking_number = OSA.log("Send back tracking number?")
    is_kept = 0
    if is_keep == 1:
      is_kept = 1
    is_send_back = 0
    is_sendback_started = 0
    if is_keep == 0:
      is_send_back = 1
      is_sendback_started = 1
    is_exchange = is_exchange
    is_refund = is_refund
    is_discount = is_discount
    exchange_tracking_timers_ = None
    if is_exchange:
      exchange_tracking_timers_ = [(Date().myDatetimenow(),0,0), (0,0)]
    discount_price = 0
    discount_coupon = None
    discount_used = False
    if is_discount:
      discount_price = float(OSA.log("For the %sx %s (#%s), Discount price?: "%(quantity,(lambda:("%s (%s)"%(Get(Lineitem,id=lineitem_id).title,Get(Lineitem,id=lineitem_id).variant_title)))(),Get(Order,id=order_id).order_number)))
      discount_coupon = ""
      globalise(discount_coupon,"discount_coupon_x")

    shop = Get(Order,id=order_id).shop
    email = Get(Order,id=order_id).email
    Save(Keep_Exchange,order_id=order_id,lineitem_id=lineitem_id,is_keep=is_keep,is_refund=is_refund,is_discount=is_discount,
                                                                                                                              send_back_tracking_number=send_back_tracking_number,exchange_tracking_timers_=exchange_tracking_timers_,creation_time=Date().Now(),quantity=quantity,
                                                                                                                              discount_price=discount_price,
                                                                                                                              discount_coupon=discount_coupon,
                                                                                                                              is_kept=is_kept,is_send_back=is_send_back,
                                                                                                                              is_sendback_started=is_sendback_started,
                                                                                                                              is_exchange=is_exchange,
                                                                                                                              shop=shop,email=email,
                                                                                                                              )
  def create_refund(self):
    OSA.log("Please create a refund manually in the Shop Admin")
    Update(self,is_complete=True)
  def create_exchange(self):
    if self.is_send_back: Update(self,send_back_tracking_arrive=True)
    Update(self,is_exchange_started=True)
    exchange_ali_order_number = int(OSA.log("Ali Order Number?"))
    ali_price = float(OSA.log("Order price?"))
    Update(self,exchange_ali_order_number=exchange_ali_order_number,ali_price=ali_price)                                        
    self.exchange_tracking_timers_[0][0] = Date().myDatetimenow()
    self.save()
  def create_discount(self):
    pass
  def update_exchange_orders(self):
    r = Aliexpress_Requests()()
    for i in Filter(Keep_Exchange,is_refund=False):
      if i.send_back_tracking_arrive == True or i.is_kept:
        if i.exchange_ali_order_number:
          if not i.exchange_ali_tracking_num:
            url = "https://trade.aliexpress.com/order_detail.htm?spm=a2g0s.9042311.0.0.27424c4dNadavy&orderId={}".format(i.exchange_ali_order_number)
            exchange_ali_tracking_num = or_list(lambda:soupy(r.get(url).text).find_all(attrs={"class":"no"})[-1].text.strip(),None)
            Update(i,x=Date().Now(),exchange_ali_tracking_num=exchange_ali_tracking_num)
          if i.exchange_ali_tracking_num:
            
            if i.exchange_tracking_timers_[0][1] == 0:
              exchange_tracking_timers_ = i.exchange_tracking_timers_
              exchange_tracking_timers_[0][1] = Date().myDatetimenow()
              exchange_tracking_timers_[1][0] = round(float(exchange_tracking_timers_[0][1]) - float(exchange_tracking_timers_[0][0]),3)
              i.exchange_tracking_timers_ = exchange_tracking_timers_

              Update(i,exchange_tracking_timers_=exchange_tracking_timers_)
            s = requests.Session()
            s.headers['User-Agent'] = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.131 Safari/537.36'
            url = "https://tools.usps.com/go/TrackConfirmAction?tLabels=%s" % (i.exchange_ali_tracking_num)
            r = tryreturn(lambda:s.get(url, timeout=3))
            data = []
            soup = BeautifulSoup(r.text)
            # okay, here variablo the .... t1,t2,t3, since t3 is a must for any tracking events to be gotten @first
            #lmap(Date().myUndatetimenow,getattrs(["t1","t2","t3"],Get(Lineitem,ali_tracking_number=tracking_number)))
            if "Pre-Shipment" in soup.findAll("div",attrs={"class":"delivery_status"})[0].text:
              redprint("[pre-shipment][tracking_number][%s]"%tracking_number)
              data.append([datetime.now(),"Pre-Shipment - No Tracking Events Thus Far"])
            if "Label Created, not yet in system" in str(soup):
              redprint("[pre-shipment][tracking_number][%s]"%tracking_number)
              data.append([datetime.now(),"Label Created, not yet in system - No Tracking Events Thus Far"])
            else:
              action_panels = soup.findAll("div", attrs={"class":"thPanalAction"})
              len_action_panels = len(action_panels)
              if len_action_panels == 0:                                                  # Imaginary tracking number having no action panels returns None
                redprint("[len thPanalAction][%s]"%len_action_panels)
              events = [re.sub(r"[\r\n\t]", " ", i) for i in key("text", action_panels[0].findAll("strong"))]
              events = [re.sub(r"\s+", " ", re.sub(r"[\r\n\t\xa0]", " ", i)).strip() for i in key("text", action_panels[0].findAll("span"))]
              events = [i for i in events if i != ""]
              for q in events:
                if   tryprocess(datetime.strptime, q, "%B %d, %Y, %H:%M %p")  == 1:
                  data.append([])
                  data[-1].append(datetime.strptime(q, "%B %d, %Y, %H:%M %p"))
                elif tryprocess(datetime.strptime, q, "%B %d, %Y")            == 1:
                  data.append([])
                  data[-1].append(datetime.strptime(q, "%B %d, %Y"))
                else:
                  data[-1].append(q)
            [redprint("[i][%s]"%i) for i in data]
            if exchange_tracking_timers_[0][2]: data.append([Date().myUndatetimenow(float(exchange_tracking_timers_[0][2])), "Order Delivered, (Time Elapsed Between Tracking Number Received And Order Delivered: %s)"%(float(exchange_tracking_timers_[1][1]))])
            if exchange_tracking_timers_[0][1]: data.append([Date().myUndatetimenow(float(exchange_tracking_timers_[0][1])), "Tracking Number Received, (Time Elapsed Between Order Placed And Tracking Number Received: %s)"%(float(exchange_tracking_timers_[1][0]))])
            if exchange_tracking_timers_[0][0]: data.append([Date().myUndatetimenow(float(exchange_tracking_timers_[0][0])), "Order Placed"])
            data.append([Get(Order,id=i.order_id).created_at, "Original Order Placed"])
            data = [": ".join(["((%s))"%(Date().friendlydate(i[0],with_year=1)),"(%s)"%(": ".join(list(tcer(i[1:]))))]) for i in data]
            if "Delivered" in data[0]:
              Update(i,exchange_tracking_arrived=True)

            
              exchange_tracking_timers_ = i.exchange_tracking_timers_
              exchange_tracking_timers_[0][2] = Date().myDatetimenow()
              exchange_tracking_timers_[1][1] = round(float(exchange_tracking_timers_[0][2]) - float(exchange_tracking_timers_[0][1]),3)
              i.exchange_tracking_timers_ = exchange_tracking_timers_

              Update(i,exchange_tracking_timers_=exchange_tracking_timers_)

              Update(i,is_complete=True)
            i.save()
        else:
          print("No exchange created yet")
class Aliexpress_Dispute(Records):
  id = AutoField()
  dispute_id = BigIntegerField(unique=True)
  idx_idx = IntegerField(unique=True)
  account = CharField() #
  store = CharField() #
  shop = CharField() #
  email = CharField()
  order_id = BigIntegerField() # ##
  lineitem_id = BigIntegerField() #
  ali_order_number = BigIntegerField() #
  quantity = IntegerField() # 
  

  is_refund = IntegerField()
  is_return = IntegerField()
  received_order = IntegerField() # ##
  dispute_reason = CharField() # ##
  refund_amount = FloatField() ##
  dispute_details = CharField()
  dispute_reason_specification = CharField()

  
  dispute_status = CharField() ##
  end = IntegerField()
  is_accept = IntegerField() ##
  
  dispute_order_total = FloatField() ##
  date = DateTimeField()

  response = CharField()

  initiator = CharField()
  action = CharField()
  reason_and_detail = CharField()
  attachment = CharField()
  title = CharField()
  proposal = CharField()
  comments = CharField()
  evidence = CharField()


  # :End:
  def run_support(self):
    url = "https://trade.aliexpress.com/issue/fastissue/Detail.htm?spm=a2g0s.issue_5ptha.0.0.21024c4d6pXlrA&issueId={}".format(self.dispute_id)
    option = OSA.log(q="%s"%(self.id),do=["Add Comment/Evidence/Another Action","Cancel Dispute"])
    if option == "Add Comment/Evidence/Another Action":
      self.add_to_dispute()
      Update(self,response="Added to dispute")
    elif option == "Cancel Dispute":
      Filter(Aliexpress_Dispute,dispute_id=self.dispute_id)[0].cancel_dispute()
      Update(self,response="Cancelled dispute")
    OSA.notify("Finished running support")
  def paging(self):
    x = Aliexpress_Login()
    ss.get("https://trade.aliexpress.com/issue/issue_list.htm")
    max_page = max(lmap(lambda i:int(i),findall(ss.page_source,"javascript:gotoPage\((\d+)\)")))
    for i in range(max_page):
      dispute_ids = lmap(lambda i:int(i), findall(ss.page_source,"issueId=(\d+)"))
      dispute_dates = lmap(lambda i:Date().parse_date(i), findall(ss.page_source,"Dispute Date.*?<.*?> (.*)"))
      for i,j in zip(dispute_ids,dispute_dates): Push(Aliexpress_Dispute,id=i)(creation_time=j)
      ss.tp(lambda:ss.fcns("ui-goto-page")[-1].send_keys(ss.SHADOW.ENTER)).sp(3)
      blueprint(len(All(Aliexpress_Dispute)))
    """
    As long as you capture all processing orders you should be fine.
    Ie check at least once every 7 days.
    Otherwise the case could be it isn't captured, it goes into deleted, which will never be shown.
    """
  def add_to_dispute(self):
    OSA.log("A browser will open and go to the dispute page. Click OK to continue", tp=False)
    Aliexpress_Login()
    ss.get("https://trade.aliexpress.com/issue/fastissue/Detail.htm?issueId={}".format(self.dispute_id))
    OSA.log("Please log into AliExpress and reply so that you can Add Comment/Evidence/Another Action.\n\nThen click OK in this prompt.",tp=False)
  def page_disputes_for_keep_status(self, a=None):
    # """ 'lineitem_id=All(Lineitem)[0].id\nstore, shop, order_id, ali_order_number = Get(Product,id=Get(Lineitem,id=lineitem_id).product_id).aliexpressvendor, Get(Lineitem,id=lineitem_id).shop, Get(Lineitem,id=lineitem_id).order_id, Get(Lineitem,id=lineitem_id).ali_order_number\nquantity, is_refund, received_order, refund_amount, dispute_details = dune(OSA.log("Please enter the quantity of this item to dispute, if this is for a refund or return, True or False for if you received the order (applies only for disputes that are for refunds), the amount of the refund for this dispute (max: %s), and comments for the dispute. Separate the choices with commas (\', \'). [for example: 1, refund, False, 20.0, The tracking number is not showing anything]"%( or_list(lambda:Get(Aliexpressorder,id=Get(Lineitem,id=lineitem_id).ali_order_number).total_amount,"Unavailable, please check at https://trade.aliexpress.com/order_detail.htm?spm=a2g0s.9042311.0.0.27424c4dNadavy&orderId={}".format(Get(Lineitem,id=lineitem_id).ali_order_number)))).split(", "),[lambda i:int(i), lambda i:(True)if("is_refund"==i)else(False), lambda i:(True)if(eval(i)==True)else(False), lambda i: float(i), lambda i:i])\nis_return = not is_refund\ndispute_reason=None\nif is_return:\n  dispute_reason = OSA.log(q="Please select a dispute reason",do=["Personal Reasons", "Shipping method was not as described", "Product not as described", "Quality problems", "Damaged goods", "Quantity shortage", "Received counterfeit goods", "Problems with the accessories",])\nelif is_refund and received_order:\n  dispute_reason = OSA.log(q="Please select a dispute reason",do=["Product not as described", "Quality problems", "Damaged goods", "Quantity shortage", "Received counterfeit goods", "Problems with the accessories",])\nelif is_refund and not received_order:\n  dispute_reason = OSA.log(q="Please select a dispute reason",do=["Logistics tracking problem", "Customs problem", "wrong address",])\nx = {\'Customs problem\': set(),\'Damaged goods\': [\'Product arrived damaged\', \'Scratched\'],\'Logistics tracking problem\': [\'Purchase Protection is running out, but package is still in transit\', \'Package was returned to seller by shipping company\', \'No tracking information\'],\'Personal Reasons\': [\'I ordered the product by mistake\', \'I found a better price somewhere else\', \'I no longer need the product\'],\'Problems with the accessories\': set(),\'Product not as described\': [\'Appearance not as described\', \'Functions are not as described\', \'parameter not as described\'],\'Quality problems\': [\'Sound problems\', \'Having problems after connecting to the device\', \'Cannot charge\', \'Microphone does not work\', \'Button is not responsive\', \'Stained\', \'Noise problem\'],\'Quantity shortage\': [\'Missing some goods\', \'The package was empty\'],\'Received counterfeit goods\': set(),\'Shipping method was not as described\': set(),\'wrong address\': set()}\ndispute_reason_specification = None\nif x[dispute_reason] != set():\n  dispute_reason_specification = OSA.log(q="Please select a dispute reason specification", do=x[dispute_reason])\n# dispute_id\ndispute_id=401046012404792 # if you have another dispute id, please enter it here\nSave(Aliexpress_Dispute,\n                        store=store,\n                        shop=shop,\n                        order_id=order_id,\n                        ali_order_number=ali_order_number,\n                        quantity=quantity,\n                        is_refund=is_refund,\n                        received_order=received_order,\n                        refund_amount=refund_amount,\n                        dispute_details=dispute_details,\n                        dispute_reason=dispute_reason,\n                        dispute_reason_specification=dispute_reason_specification,\n                        dispute_id=dispute_id,\n                        idx_idx = 0\n                        )\na=generator([dispute_id])\nif a == None: Aliexpress_Dispute().paging()\nif a == None: a = generator(lset(sud("dispute_id",All(Aliexpress_Dispute))))\nx = next(a)\nmore = Filter(Aliexpress_Dispute,dispute_id=x)\nstatuses = key("dispute_status",more)\nend_statuses = (["Dispute Finished","Seller agreed","Seller response time has ended","The dispute has been canceled","Buyer accept issue"])\nend = False\nfor status in statuses:\n  if status in end_statuses:\n    end = True\np = r.get("https://trade.aliexpress.com/issue/fastissue/Detail.htm?spm=a2g0s.issue_5ptha.0.0.21024c4d6pXlrA&issueId={}".format(x))\nactions = self.get_data(p)\nif len(Filter(Aliexpress_Dispute,dispute_id=x)) == 1:\n  new = All(Aliexpress_Dispute)[0]\n  Update(new,**actions[0])\n  # new.idx_idx = max(key("idx_idx",Filter(Aliexpress_Dispute,dispute_id=x)))+1\n  new.save()\n\nfor idx, i in enum(actions[1:]):\n  if len(actions[1:]) != len(Filter(Aliexpress_Dispute,dispute_id=x))-1:\n    new = Aliexpress_Dispute()\n    Update(new,**i)\n    new.idx_idx = max(key("idx_idx",Filter(Aliexpress_Dispute,dispute_id=x)))+1\n    for j in ["dispute_id","account","store","shop","email","order_id","lineitem_id","ali_order_number","quantity","is_refund","is_return","received_order","dispute_reason","dispute_details",]:\n      if not getattr(new,j,None):\n        setattr(new,j,getattr(Filter(Aliexpress_Dispute,(~Q(account=None)),dispute_id=x)[0],j))\n    new.save()\nsp(1)\n' """
    if a == None: Aliexpress_Dispute().paging()
    if a == None: a = generator(lset(sud("dispute_id",All(Aliexpress_Dispute))))
    x = next(a)

    more = Filter(Aliexpress_Dispute,dispute_id=x)
    statuses = key("dispute_status",more)
    end_statuses = (["Dispute Finished","Seller agreed","Seller response time has ended","The dispute has been canceled","Buyer accept issue"])
    end = False
    for status in statuses:
      if status in end_statuses:
        end = True

    if end == True:
      return self.page_disputes_for_keep_status(a)
    else:
      print("Moving Forward")


    p = Aliexpress_Requests()().get("https://trade.aliexpress.com/issue/fastissue/Detail.htm?spm=a2g0s.issue_5ptha.0.0.21024c4d6pXlrA&issueId={}".format(x))
    actions = self.get_data(p)
    if len(Filter(Aliexpress_Dispute,dispute_id=x)) == 1:
      new = All(Aliexpress_Dispute)[0]
      Update(new,**actions[0])
      # new.idx_idx = max(key("idx_idx",Filter(Aliexpress_Dispute,dispute_id=x)))+1
      new.save()

    for idx, i in enum(actions[1:]):
      if len(actions[1:]) != len(Filter(Aliexpress_Dispute,dispute_id=x))-1:
        new = Aliexpress_Dispute()
        Update(new,**i)
        new.idx_idx = max(key("idx_idx",Filter(Aliexpress_Dispute,dispute_id=x)))+1
        for j in ["dispute_id","account","store","shop","email","order_id","lineitem_id","ali_order_number","quantity","is_refund","is_return","received_order","dispute_reason","dispute_reason_specification","dispute_details",]:
          if not getattr(new,j,None):
            setattr(new,j,getattr(Filter(Aliexpress_Dispute,(~Q(account=None)),dispute_id=x)[0],j))
        new.save()
    sp(1)
    return self.page_disputes_for_keep_status(a)
  def get_data(self,p):
    actions = None
    if "trade.aliexpress.com/issue/fastissue" in p.url:
      actions=tryreturn(lambda:[([("Title",or_list(tryreturn(lambda:j.findAll("div",attrs={"class":"title"})[0].text),None)),("Date",Date().parse_date([i.text.strip() for i in j.findAll("div") if tryprocess(lambda:Date().parse_date(i.text.strip()))][0]) ) ]+[(re_substitute(a.text,["\s+"," "]).strip(), re_substitute(b.text,["\s+"," "]).strip()) for a,b in zip(j.findAll("dt"),j.findAll("dd"))]) for j in soupy(p.text,"table")[-1].findAll("tr")])
      #exec(b'if actions == 0:\n  other = [j for j in soupy(p.text,"table")[-1].findAll("tr") if "platformrow" in j.attrs.get("class",[]) or len(j.findAll("div",attrs={"class":"platformrow"})) != 0]\n  data=[]\n  for idx,j in enum(soupy(p.text,"table")[-1].findAll("tr")):\n    if j not in other:\n      data.append(([("Title",or_list(tryreturn(lambda:j.findAll("div",attrs={"class":"title"})[0].text),None)),("Date",Date().parse_date([i.text.strip() for i in j.findAll("div") if tryprocess(lambda:Date().parse_date(i.text.strip()))][0]) ) ]+[(re_substitute(a.text,["\\s+"," "]).strip(), re_substitute(b.text,["\\s+"," "]).strip()) for a,b in zip(j.findAll("dt"),j.findAll("dd"))]))\n    else:\n      x=or_list(lambda:([("Title",re_spaces(j.findAll("div",attrs={"class":"title"})[0].text)),("Date",re_spaces(soupy(p.text,"table")[-1].findAll("tr")[idx-1].text))]))\n      if x!= 0: tryprocess(lambda:x.append((list((button_up(soupy(p.text,"table")[-1].findAll("tr")[idx],lambda i:i.findAll("dt"),lambda i:i.findAll("dd"))).keys())[0],list((button_up(soupy(p.text,"table")[-1].findAll("tr")[idx],lambda i:i.findAll("dt"),lambda i:i.findAll("dd"))).values())[0])))\n      if x!= 0: data.append(x)\n  actions = data'.decode(),globals(),locals())
      #exec(b'a=button_up(soupy(p.text,"div","class","reminder-section")[0],lambda i:i.findAll("dt"),lambda i:i.findAll("dd"))\nb=button_up(soupy(p.text,"div","class","order-info-c")[0],lambda i:i.findAll("dt"),lambda i:i.findAll("dd"))\nc=button_up([i for i in soupy(p.text,"div","class","util-clearfix") if "Quantity:" in key("text",i.findAll("label"))][0],lambda i:i.findAll("label"), lambda i:i.findAll("strong"))\n'.decode(),globals(),locals())
      if actions == 0:
        other = [j for j in soupy(p.text,"table")[-1].findAll("tr") if "platformrow" in j.attrs.get("class",[]) or len(j.findAll("div",attrs={"class":"platformrow"})) != 0]
        data=[]
        for idx,j in enum(soupy(p.text,"table")[-1].findAll("tr")):
          if j not in other:
            data.append(([("Title",or_list(tryreturn(lambda:j.findAll("div",attrs={"class":"title"})[0].text),None)),("Date",Date().parse_date([i.text.strip() for i in j.findAll("div") if tryprocess(lambda:Date().parse_date(i.text.strip()))][0]) ) ]+[(re_substitute(a.text,["\s+"," "]).strip(), re_substitute(b.text,["\s+"," "]).strip()) for a,b in zip(j.findAll("dt"),j.findAll("dd"))]))
          else:
            x=or_list(lambda:([("Title",re_spaces(j.findAll("div",attrs={"class":"title"})[0].text)),("Date",re_spaces(soupy(p.text,"table")[-1].findAll("tr")[idx-1].text))]))
            if x!= 0: tryprocess(lambda:x.append((list((button_up(soupy(p.text,"table")[-1].findAll("tr")[idx],lambda i:i.findAll("dt"),lambda i:i.findAll("dd"))).keys())[0],list((button_up(soupy(p.text,"table")[-1].findAll("tr")[idx],lambda i:i.findAll("dt"),lambda i:i.findAll("dd"))).values())[0])))
            if x!= 0: data.append(x)
        actions = data
      actions = lmap(dict,actions)
      a=button_up(soupy(p.text,"div","class","reminder-section")[0],lambda i:i.findAll("dt"),lambda i:i.findAll("dd"))
      b=button_up(soupy(p.text,"div","class","order-info-c")[0],lambda i:i.findAll("dt"),lambda i:i.findAll("dd"))
      c=button_up([i for i in soupy(p.text,"div","class","util-clearfix") if "Quantity:" in key("text",i.findAll("label"))][0],lambda i:i.findAll("label"), lambda i:i.findAll("strong"))

      dispute_status = a["Status:"].split("Refund")[0].strip()
      dispute_order_total = float(".".join(findall(b["Order Total:"],"\d+")))
      refund_amount = or_list(lambda:float(".".join(findall(a["Status:"].split("Refund")[1].strip(),"\d+"))),0)
      end = True if (dispute_status in ["Dispute Finished","Seller agreed","Seller response time has ended","The dispute has been canceled","Buyer accept issue"]) else False
      is_accept = True if (end == True and refund_amount == dispute_order_total) else False
      for i in actions:
        for a, b in dict(zip(["Initiator","Action","Reasion & Detail","Attachment","Title","Proposal:","Comments:","Evidence:","Date"],["initiator","action","reason_and_detail","attachment","title","proposal","comments","evidence","date"])).items():
          i[b]=i.get(a,None)
      for i in actions:
        for j in ["dispute_status","dispute_order_total","refund_amount","end","is_accept",]:
          i[j] = eval(j)
    elif "trade.aliexpress.com/issue/issueDetail" in p.url:
      reminder_details = button_up(soupy(p.text,"div","id","reminder-section")[0],lambda i:i.findAll("dt"),lambda i:i.findAll("dd"))
      dispute_info = button_up(soupy(p.text,"table","class","dis-table")[0],lambda i:i.findAll("td")[0::2],lambda i:i.findAll("td")[1::2])
      actions = button_up(soupy(p.text,"table")[-1],cork=lambda i:i.findAll("td"),headors=lambda i:i.findAll("th"))
      dispute_status = reminder_details["Status:"]
      dispute_order_total = float(".".join(findall(re_substitute(dispute_info["Dispute Order Total:"],["\(.*?\)",""]),"\d+")))
      refund_amount = float(".".join(findall(dispute_info["Refund Amount:"],"\d+")))
      end = True if (dispute_status in ["Dispute Finished","Seller agreed","Seller response time has ended","The dispute has been canceled","Buyer accept issue"]) else False
      is_accept = True if (end == True and refund_amount == dispute_order_total) else False
      for i in actions:
        for a, b in dict(zip(["Initiator","Action","Reasion & Detail","Attachment","Title","Proposal:","Comments:","Evidence:","Date"],["initiator","action","reason_and_detail","attachment","title","proposal","comments","evidence","date"])).items():
          i[b]=i.get(a,None)
      for i in actions:
        for j in ["dispute_status","dispute_order_total","refund_amount","end","is_accept",]:
          i[j] = eval(j)
    return actions
  def printformat(self):
    x = self
    get_items = lambda x, y, z="": [getattr(x,i,"") for i in y]
    w=(get_items(x,["initiator",
                  "attachment"],""))if(getattr(x,"initiator",None))\
      else(get_items(x,["title","evidence"],""))
    assert len(w)==2
    vorx=(Date().friendlydate(x.date),
          Get(Order,id=x.order_id).order_number,
          x.lineitem_id,
          str(w[0]),str(w[1]),
          or_list(self.response,"No action"))
    l = "█((%s))█ █((Aliexpress_Dispute))█ █((%s, %s))█ █%s█%s█ █((%s))█"%vorx
    return l
  def start_dispute(self,lineitem_id):
    store, shop, email, order_id, ali_order_number = Get(Product,id=Get(Lineitem,id=lineitem_id).product_id).aliexpressvendor, Get(Lineitem,id=lineitem_id).shop, Get(Order,id=Get(Lineitem,id=lineitem_id).order_id).email, Get(Lineitem,id=lineitem_id).order_id, Get(Lineitem,id=lineitem_id).ali_order_number
    quantity, is_refund, received_order, refund_amount, dispute_details = dune(OSA.log("Please enter the quantity of this item to dispute, if this is for a refund or return, True or False for if you received the order (applies only for disputes that are for refunds), the amount of the refund for this dispute (max: %s), and comments for the dispute. Separate the choices with commas (', '). [for example: 1, refund, False, 20.0, The tracking number is not showing anything]"%( or_list(lambda:Get(Aliexpressorder,id=Get(Lineitem,id=lineitem_id).ali_order_number).total_amount,"Unavailable, please check at https://trade.aliexpress.com/order_detail.htm?spm=a2g0s.9042311.0.0.27424c4dNadavy&orderId={}".format(Get(Lineitem,id=lineitem_id).ali_order_number)))).split(", "),[lambda i:int(i), lambda i:(True)if("is_refund"==i)else(False), lambda i:(True)if(eval(i)==True)else(False), lambda i: float(i), lambda i:i])
    is_return = not is_refund
    dispute_reason=None
    if is_return:
      dispute_reason = OSA.log(q="Please select a dispute reason",do=["Personal Reasons", "Shipping method was not as described", "Product not as described", "Quality problems", "Damaged goods", "Quantity shortage", "Received counterfeit goods", "Problems with the accessories",])
    elif is_refund and received_order:
      dispute_reason = OSA.log(q="Please select a dispute reason",do=["Product not as described", "Quality problems", "Damaged goods", "Quantity shortage", "Received counterfeit goods", "Problems with the accessories",])
    elif is_refund and not received_order:
      dispute_reason = OSA.log(q="Please select a dispute reason",do=["Logistics tracking problem", "Customs problem", "wrong address",])
    x = {'Customs problem': set(),'Damaged goods': ['Product arrived damaged', 'Scratched'],'Logistics tracking problem': ['Purchase Protection is running out, but package is still in transit', 'Package was returned to seller by shipping company', 'No tracking information'],'Personal Reasons': ['I ordered the product by mistake', 'I found a better price somewhere else', 'I no longer need the product'],'Problems with the accessories': set(),'Product not as described': ['Appearance not as described', 'Functions are not as described', 'parameter not as described'],'Quality problems': ['Sound problems', 'Having problems after connecting to the device', 'Cannot charge', 'Microphone does not work', 'Button is not responsive', 'Stained', 'Noise problem'],'Quantity shortage': ['Missing some goods', 'The package was empty'],'Received counterfeit goods': set(),'Shipping method was not as described': set(),'wrong address': set()}
    dispute_reason_specification = None
    if x[dispute_reason] != set():
      dispute_reason_specification = OSA.log(q="Please select a dispute reason specification", do=x[dispute_reason])

    OSA.log("A browser will open and create the dispute. Please click OK to continue.",tp=False)
    Aliexpress_Login(ph=False,exit_browser=False)
    ss.get("https://trade.aliexpress.com/issue/fastissue/createIssueStep2.htm?orderId={}".format(ali_order_number))
    if(is_refund):
      ss.jtns("li","click",{"text":"Refund Only"})
    else:
      ss.jtns("li","click",{"text":"Return Goods"})
    if(is_refund):
      if(received_order):
        ss.jtns("input","click",{"name":"is_received","value":"yes"})
      else:
        ss.jtns("input","click",{"name":"is_received","value":"no"})
    ss.jtns("li","click",{"text":dispute_reason})
    ss.jtns("li","click",{"text":dispute_reason_specification})

    ss.fn("refund_amount").send_keys(str(refund_amount))
    ss.fn("request_detail_txt").send_keys(dispute_details)
    
    if ss.fid("attachment-title").text=="Please upload your evidence.":
      OSA.log("Please upload any picture files (max 3) and any video file (max 1). Then click OK in this prompt.",tp=False)
    ss.fid("submit").send_keys(SHADOW.ENTER)
    dispute_id = findall(ss.current_url,"issueId=(.*?)(?:$|&)")[0]
    Save(Aliexpress_Dispute,
                            account=All(Shop)[0].AliExpress_Email,
                            store=store,
                            shop=shop,
                            email=email,
                            order_id=order_id,
                            lineitem_id=lineitem_id,
                            ali_order_number=ali_order_number,
                            quantity=quantity,
                            is_refund=is_refund,
                            is_return=is_return,
                            received_order=received_order,
                            refund_amount=refund_amount,
                            dispute_details=dispute_details,
                            dispute_reason=dispute_reason,
                            dispute_reason_specification=dispute_reason_specification,
                            dispute_id=dispute_id,
                            idx_idx = 0
                            )
  def cancel_dispute(self):
    Aliexpress_Login()
    ss.get("https://trade.aliexpress.com/issue/fastissue/Detail.htm?issueId={}".format(self.dispute_id))
    time.sleep(4)
    ss.fid("buyerCancelButton").click()
    time.sleep(4)
    ss.ffss("input","value","Submit").click()
    time.sleep(4)
    ss.quit()
    OSA.notify("Cancelled")
class TertiaryAction(Records):
  id = AutoField()
  payment_gateway_name = CharField()
  invoice_id = CharField(unique=True)
  invoice_id_instance_number = IntegerField(unique=True) # Replace with Unique TertiaryAction ID in the future
  shop = CharField()
  order_id = BigIntegerField()
  date = DateTimeField()
  requires_response_by = DateTimeField()
  status = CharField()
  tracking_numbers = JSONField()
  message = CharField(max_length="4096")
  order_problem = CharField()
  email = CharField()
  customer_name = CharField()
  dispute_amount = FloatField()
  order_amount = FloatField()
  case_close_ending_amount = FloatField()
  case_close_dispute_fee = FloatField()
  responded = IntegerField()
  dispute_timeout = IntegerField()
  is_complete = IntegerField()
  actions_taken = JSONField()
  keep_exchange_id = BigIntegerField()
  # :End:
  def printformat(self):
    return "█((%s))█ █((TertiaryAction))█ █((%s))█ █((%s))█ █((%s))█ █((%s))█ █((%s))█"%(Date().friendlydate(self.date,with_year=True),
      (self.invoice_id),
      Date(self.requires_response_by).strftime("%Y-%m-%d %H:%M %p"),
      ("Responded")if(self.responded)else("Dispute Timeout")if(self.dispute_timeout)else("Created Keep_Exchange")if(self.keep_exchange_id)else("No Action"),
      self.status, self.is_complete)
  def run_support(self):

    globals()["actions"] = OSA.log(do=["%s: %s"%(i.subject,i.matter) for i in
          sorted(Filter(TertiaryAction_Template,shop=self.shop),key=\
          lambda i:[i.subject,i.matter])] + [ 
                   "Add Template",
                   "Delete A Template",
                   "Let Dispute Go All The Way Through",
                   "Reply",
                   "Create Keeps Item, Refund",
                   "Create Keeps Item, Exchange",
                   "Create Returns Item, Refund",
                   "Create Returns Item, Exchange",
                   "Modify As End Of TertiaryAction",
                  "Create Keeps Item, Discount",
                  "Create Returns Item, Discount"
                   ],
                   mo=True)

    if("Add Template")in(actions): TertiaryAction_Template().create_new_template(self.shop) 
    if("Delete A Template")in(actions): ([Del(Get(TertiaryAction_Template,subject=findall(i,1,"(.*?):"),matter=findall(i,1,".*?: (.*?$)"))) for i in OSA.log("Template to delete?",do=["%s: %s"%(i.subject,i.matter) for i in sorted(Filter(TertiaryAction_Template,shop=self.shop),key=lambda i:[i.subject,i.matter])],mo=True)]) 
    if("Let Dispute Go All The Way Through" in actions): Update(self,dispute_timeout=True)
    if("Reply" in actions): [OSA.log("Please reply on the dispute page and click OK in this prompt.",tp=False), Update(self,responded=True)]

    
    if("Create Keeps Item, Refund" in actions):
      a=["%s (%s) (#%s)"%(a,b,c) for a,b,c in sum([[((lambda:"%s （%s）"%(i.title ,i.variant_title))(), i.quantity, order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in [Get(Order,id=self.order_id).order_number]],[])]
      b=sum([[i.quantity for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in [Get(Order,id=self.order_id).order_number]],[])
      c=sum([[i+" x%s"%q for q in lrange(1,j+1)] for i,j in zip(a,b)],[])
      d=OSA.log("Choose the variant and quantity to refund",do=c,mo=True)
      for i in d:
        title, variant_title, quantity, order_number = dune(re.findall(r"(.*) （(.*?)） \((\d+)\) \(#(\d+)\)",i)[0],[lambda i:i, lambda i:i, lambda i:int(i), lambda i:int(i)])
        Keep_Exchange().create(is_keep=1,is_refund=1,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id,quantity=quantity)
    if("Create Keeps Item, Exchange" in actions):
      a=["%s (%s) (#%s)"%(a,b,c) for a,b,c in sum([[((lambda:"%s （%s）"%(i.title ,i.variant_title))(), i.quantity, order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in [Get(Order,id=self.order_id).order_number]],[])]
      b=sum([[i.quantity for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in [Get(Order,id=self.order_id).order_number]],[])
      c=sum([[i+" x%s"%q for q in lrange(1,j+1)] for i,j in zip(a,b)],[])
      d=OSA.log("Choose the variant and quantity to exchange",do=c,mo=True)
      for i in d:
        title, variant_title, quantity, order_number = dune(re.findall(r"(.*) （(.*?)） \((\d+)\) \(#(\d+)\)",i)[0],[lambda i:i, lambda i:i, lambda i:int(i), lambda i:int(i)])
        Keep_Exchange().create(is_keep=1,is_refund=0,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id,quantity=quantity)
    if("Create Returns Item, Refund" in actions):
      a=["%s (%s) (#%s)"%(a,b,c) for a,b,c in sum([[((lambda:"%s （%s）"%(i.title ,i.variant_title))(), i.quantity, order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in [Get(Order,id=self.order_id).order_number]],[])]
      b=sum([[i.quantity for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in [Get(Order,id=self.order_id).order_number]],[])
      c=sum([[i+" x%s"%q for q in lrange(1,j+1)] for i,j in zip(a,b)],[])
      d=OSA.log("Choose the variant and quantity to refund",do=c,mo=True)
      for i in d:
        title, variant_title, quantity, order_number = dune(re.findall(r"(.*) （(.*?)） \((\d+)\) \(#(\d+)\)",i)[0],[lambda i:i, lambda i:i, lambda i:int(i), lambda i:int(i)])
        Keep_Exchange().create(is_keep=0,is_refund=1,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id,quantity=quantity)
    if("Create Returns Item, Exchange" in actions):
      a=["%s (%s) (#%s)"%(a,b,c) for a,b,c in sum([[((lambda:"%s （%s）"%(i.title ,i.variant_title))(), i.quantity, order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in [Get(Order,id=self.order_id).order_number]],[])]
      b=sum([[i.quantity for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in [Get(Order,id=self.order_id).order_number]],[])
      c=sum([[i+" x%s"%q for q in lrange(1,j+1)] for i,j in zip(a,b)],[])
      d=OSA.log("Choose the variant and quantity to exchange",do=c,mo=True)
      for i in d:
        title, variant_title, quantity, order_number = dune(re.findall(r"(.*) （(.*?)） \((\d+)\) \(#(\d+)\)",i)[0],[lambda i:i, lambda i:i, lambda i:int(i), lambda i:int(i)])
        Keep_Exchange().create(is_keep=0,is_refund=0,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id,quantity=quantity)
    if("Modify As End Of TertiaryAction" in actions):
      Update(self, case_close_ending_amount=float(OSA.log("Case Close Ending Amount?: ")),
                    case_close_dispute_fee=float(OSA.log("Case Close Dispute Fee?: ")),
                    is_complete=1)
    if("Create Keeps Item, Discount" in actions):
      a=["%s (%s) (#%s)"%(a,b,c) for a,b,c in sum([[((lambda:"%s （%s）"%(i.title ,i.variant_title))(), i.quantity, order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])]
      b=sum([[i.quantity for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])
      c=sum([[i+" x%s"%q for q in lrange(1,j+1)] for i,j in zip(a,b)],[])
      d=OSA.log("Choose the variant and quantity for the customer to keep. You will be prompted for the discount total.",do=c,mo=True)
      for i in d:
        title, variant_title, quantity, order_number = dune(re.findall(r"(.*) （(.*?)） \((\d+)\) \(#(\d+)\)",i)[0],[lambda i:i, lambda i:i, lambda i:int(i), lambda i:int(i)])
        Keep_Exchange().create(is_keep=0,is_refund=0,is_exchange=0,is_discount=1,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id,quantity=quantity)
        Update(Get(Keep_Exchange,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id),discount_coupon=globe("discount_coupon_x"))
    if("Create Returns Item, Discount" in actions):
      a=["%s (%s) (#%s)"%(a,b,c) for a,b,c in sum([[((lambda:"%s （%s）"%(i.title ,i.variant_title))(), i.quantity, order_number) for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])]
      b=sum([[i.quantity for i in Filter(Lineitem,order_id=Get(Order,shop=self.shop,order_number=order_number).id)] for order_number in self.tagged_order_numbers],[])
      c=sum([[i+" x%s"%q for q in lrange(1,j+1)] for i,j in zip(a,b)],[])
      d=OSA.log("Choose the variant and quantity for the customer to return. You will be prompted for the discount total.",do=c,mo=True)
      for i in d:
        title, variant_title, quantity, order_number = dune(re.findall(r"(.*) （(.*?)） \((\d+)\) \(#(\d+)\)",i)[0],[lambda i:i, lambda i:i, lambda i:int(i), lambda i:int(i)])
        Keep_Exchange().create(is_keep=0,is_refund=0,is_exchange=0,is_discount=1,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id,quantity=quantity)
        Update(Get(Keep_Exchange,order_id=Get(Order,shop=self.shop,order_number=order_number).id,lineitem_id=Get(Lineitem,title=title,variant_title=variant_title,order_id=Get(Order,shop=self.shop,order_number=order_number).id).id),discount_coupon=globe("discount_coupon_x"))


    Update(self,actions_taken = actions)

    shop_name = Get(Shop,shop_abbreviation=self.shop).Business_Name
    order_creation_time = Get(Order,id=Get(Order,shop=self.shop,order_number=order_number).id).created_at
    order_number = Get(Order,id=self.order_id).order_number
    customer_name = Get(Order,id=self.order_id).billing_address_contact_name
    email = self.email
    invoice_id = self.invoice_id
    status = self.status
    order_id = self.order_id
    date = self.date
    requires_response_by = self.requires_response_by
    message = self.message
    dispute_amount = self.dispute_amount
    order_amount = self.order_amount
    order_problem = self.order_problem
    case_close_ending_amount = self.case_close_ending_amount
    case_close_dispute_fee = self.case_close_dispute_fee
    responded = self.responded
    is_complete = self.is_complete
    actions_taken_so_far = sum(listreplace(key("actions_taken",keysort("date",[i for i in Filter(TertiaryAction,shop=self.shop,invoice_id=self.invoice_id)],tcer=False)),None,[]),[])

    tracking_numbers, item_titles, tracking_times, item_prices = [], [], [], []

    tracking_numbers.extend([[or_list(i.ali_order_number,"No Tracking Number Yet"), (lambda:"%s (%s)"%(i.title ,i.variant_title))()] for i in Filter(Lineitem,order_id=self.order_id)])
    item_titles.extend([(lambda:"%s (%s)"%(i.title ,i.variant_title))() for i in Filter(Lineitem,order_id=self.order_id)])
    tracking_times = [[getattrs(["t1","t2","t3","t4"],i),(lambda:"%s (%s)"%(i.title ,i.variant_title))()] for i in Filter(Lineitem,order_id=self.order_id)]
    item_prices.extend([["${}".format(i.price), (lambda:"%s (%s)"%(i.title ,i.variant_title))()] for i in Filter(Lineitem,order_id=self.order_id)])

    tracking_numbers = ["%s (%s)"%(a,b) for a, b in tracking_numbers]
    tracking_times = ["%s (%s)"%(a,b) for a, b in tracking_times]
    item_prices = ["%s (%s)"%(a,b) for a, b in item_prices]
    
    tracking_numbers = Join(", ", tracking_numbers)
    item_titles = Join(", ", item_titles)
    tracking_times = Join(", ", tracking_times)
    item_prices = Join(", ", item_prices)

    actions_taken_so_far = Join(", ", actions_taken_so_far)


    if("Reply" in actions):
      Templates = [Get(TertiaryAction_Template,shop=self.shop,subject=findall(i,1,"(.*?):"),matter=findall(i,1,".*?: (.*?$)")).template for i in [i for i in actions if ":" in i]]
      # [[setitem(Templates,idx,i.replace(("(%s)"%(j)),str(eval(j)))) for j in ["customer_name","email","payment_gateway_name","shop_name","tracking_numbers","order_problem","dispute_amount","order_amount","order_creation_time","lineitem_titles","lineitem_variant_titles","tracking_times","tracking_events","actions_taken_so_far",]] for idx,i in enum(Templates)]
      for idx, i in enum(Templates):
        for j in ["customer_name","order_number","email","shop_name","tracking_numbers","order_amount","order_creation_time","item_titles","item_prices","tracking_times","tracking_events","actions_taken_so_far","invoice_id","status","order_id","date","requires_response_by","message","dispute_amount","order_amount","order_problem","case_close_ending_amount","case_close_dispute_fee","responded","dispute_timeout","is_complete",]:
          if ("(%s)"%(j) in i): Templates.__setitem__(idx,i.replace(("(%s)"%(j)),str(eval(j))))
      q="""
      █shop_name█ {shop_name}
      █order_creation_time█ {order_creation_time}
      █order_number█ {order_number}
      █customer_name█ {customer_name}
      █email█ {email}
      █invoice_id█ {invoice_id}
      █status█ {status}
      █date█ {date}
      █requires_response_by█ {requires_response_by}
      █message█ {message}
      █dispute_amount█ {dispute_amount}
      █order_amount█ {order_amount}
      █order_problem█ {order_problem}
      █case_close_ending_amount█ {case_close_ending_amount}
      █case_close_dispute_fee█ {case_close_dispute_fee}
      █responded█ {responded}
      █is_complete█ {is_complete}
      █actions_taken_so_far█ {actions_taken_so_far}
      █tracking_numbers█ {tracking_numbers}
      █item_titles█ {item_titles}
      █tracking_times█ {tracking_times}
      █item_prices█ {item_prices}
      """.format(shop_name = shop_name, order_creation_time = order_creation_time, order_number = order_number, customer_name = customer_name, email = email, invoice_id = invoice_id, status = status, date = date, requires_response_by = requires_response_by, message = message, dispute_amount = dispute_amount, order_amount = order_amount, order_problem = order_problem, case_close_ending_amount = case_close_ending_amount, case_close_dispute_fee = case_close_dispute_fee, responded = responded, is_complete = is_complete, actions_taken_so_far = actions_taken_so_far, tracking_numbers = tracking_numbers, item_titles = item_titles, tracking_times = tracking_times, item_prices = item_prices, )

      OSA.log(q="Information:\n%s"%(q),df="".join([("\n\n".join(Templates)),("\n"*10)]),buttons=["".join([" "*100,"OK"," "*100])])
  get_fieldnames=lambda self:["invoice_id","date","requires_response_by","status","message","order_problem","email","customer_name","dispute_amount"]
  def add(self, shop):
    address = OSA.log("Address?: ")
    payment_gateway_name = OSA.log("Payment Gateway Name?: ")
    w= CSV().DictReadWithDelimiterGuess(address)
    field_item = None
    statuses = None
    if payment_gateway_name == "PayPal":
      field_item = [("Transaction invoice ID", "invoice_id"),
                    ("Transaction date", "date"),
                    ("Response due date", "requires_response_by"),
                    ("Case status", "status"),
                    ("Buyer comments", "message"),
                    ("Case reason", "order_problem"),
                    ("Claimant email address", "email"),
                    ("Claimant name", "customer_name"),
                    ("Disputed amount", "dispute_amount"),]
      statuses = [("Case Closed", "case_closure")]
    elif payment_gateway_name == "Stripe":
      field_item = [("ID", "invoice_id"),
                    ("Dispute Created (UTC)", "date"),
                    ("Due By (UTC)", "requires_response_by"),
                    ("Status", "status"),
                    ("Reason", "order_problem"),
                    ("Customer Email", "email"),
                    ("Dispute Amount", "dispute_amount"),]
      statuses = []
    most_recent_saved_date = Date(max(key("date",All(TertiaryAction))))()
    today = Date()()
    for i in w:
      c = AD({b:i[a] if a.endswith("(UTC)") == False else Date().parse_date(i[a]).replace(tzinfo=pytz.utc).astimezone().replace(tzinfo=None) for a,b in field_item})
      
      print("accepted statuses: needs_reply, case_closure, wait")
      c.order_id = int(c.invoice_id.replace("c","").split(".")[0])
      if c.get("customer_name",None) == None: c.customer_name = ("%s %s"%(Get(Order,id=c.order_id).billing_address["first_name"], Get(Order,id=c.order_id).billing_address["last_name"]))
      if c.get("message",None) == None: c.message = None

      if c.date > most_recent_saved_date and c.date < today:
        Save(TertiaryAction,**{"payment_gateway_name":payment_gateway_name,
                                "invoice_id":c.invoice_id,
                                "invoice_id_instance_number":(len(Filter(TertiaryAction,invoice_id=c.invoice_id))+1),
                                "shop":shop,
                                "order_id":c.order_id,
                                "date":c.date,
                                "requires_response_by": c.requires_response_by,
                                "status":or_list(lambda:[y for x,y in statuses if c.status == x][0],"No Status Matched"),
                                "tracking_numbers":[(i.ali_tracking_number)if(i.ali_tracking_number!=None)else("No tracking yet")for i in(Filter(Lineitem,order_id=c.order_id))],
                                "message":c.message,
                                "order_problem":c.order_problem,
                                "email":c.email,
                                "customer_name":c.customer_name,
                                "dispute_amount":c.dispute_amount,
                                "order_amount":Get(Order,id=c.order_id).total_price,})
class ReOrder(Records):
  id = AutoField()
  order_id = BigIntegerField()
  lineitem_id = BigIntegerField()
  identifier = BigIntegerField(unique=True)
  quantity = IntegerField()
  price = FloatField()
  x = DateTimeField()
  reorder_ali_tracking_num = CharField()
  reorder_tracking_timers_ = JSONField()
  reorder_tracking_arrived = IntegerField()
  is_complete = IntegerField()
  creation_time = DateTimeField()
  shop = CharField()
  email = CharField()
  # :End:
  # will complicate "checks"
  # will specifically not get tracking for these.
  # class is very far away from usual
  def printformat(self):
    return "█((%s))█ █((ReOrder))█ █((%s))█ █((%s))█ █((%s))█"%(Date().friendlydate(self.creation_time),
      Get(Order,id=self.order_id).order_number,
      lmap(tuple,self.reorder_tracking_timers_), (("Completed")if(self.is_complete)else("Waiting For Delivery")))
  def run_support(self):
    OSA.log("For any reorder, at the time the reorder was created, the Aliexpress order was created at the same time. This means that the the reorder's status will be set to complete at the time the Aliexpress order is tracked to the status where it is shown to be delivered. Therefore, there is no action to do for this reorder since this is still waiting for the reorder to deliver. The updates area of the Menulet will update that status.",tp=False)
  def create(self, x):
    order_id = Get(Order,id=Get(Lineitem,ali_order_number=x).order_id).id
    shop = Get(Lineitem,ali_order_number=x).shop
    email = Get(Order,id=Get(Lineitem,ali_order_number=x).order_id).email
    lineitems = Filter(Lineitem,order_id=order_id)
    v = OSA.log("Please select the item and the quantity", do=["%s x%s"%(a,b) for a, b in zip(["%s （%s）"%(i.title,i.variant_title) for i in Filter(Lineitem,order_id=order_id)], [i.quantity for i in Filter(Lineitem,order_id=order_id)])])
    title, variant_title, quantity = dune(re.findall(r"(.*) （(.*)） x(\d+)",v)[0],[lambda i:i, lambda i:i, lambda i:int(i)])
    lineitem_id = [i.id for i in Filter(Lineitem,order_id=order_id) if i.title == title and i.variant_title == variant_title and i.quantity == quantity][0]

    
    identifier = ali_order_number = int(OSA.log("Ali Order Number?"))
    reorder_tracking_timers_ = [(Date().myDatetimenow(),0,0),(0,0)]
    price = float(OSA.log("Order price?"))

    return Save(ReOrder,**{"order_id":order_id,"shop":shop,"email":email,"lineitem_id":lineitem_id,"quantity":quantity,"price":price,"identifier":identifier,"x":Date().Now(),"reorder_tracking_timers_":reorder_tracking_timers_,"creation_time":Date().Now()})
  def update_reorders(self):
    r = Aliexpress_Requests()()
    for i in Filter(ReOrder,reorder_tracking_arrived=False):
      if i.identifier:
        if not i.reorder_ali_tracking_num:
          url = "https://trade.aliexpress.com/order_detail.htm?spm=a2g0s.9042311.0.0.27424c4dNadavy&orderId={}".format(i.identifier)
          reorder_ali_tracking_num = or_list(lambda:soupy(r.get(url).text).find_all(attrs={"class":"no"})[-1].text.strip(),None)
          Update(i,x=Date().Now(),reorder_ali_tracking_num=reorder_ali_tracking_num)
        if i.reorder_ali_tracking_num:
          
          if i.reorder_tracking_timers_[0][1] == 0:
            reorder_tracking_timers_ = i.reorder_tracking_timers_
            reorder_tracking_timers_[0][1] = Date().myDatetimenow()
            reorder_tracking_timers_[1][0] = round(float(reorder_tracking_timers_[0][1]) - float(reorder_tracking_timers_[0][0]),3)
            i.reorder_tracking_timers_ = reorder_tracking_timers_

            Update(i,reorder_tracking_timers_=reorder_tracking_timers_)
          s = requests.Session()
          s.headers['User-Agent'] = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.131 Safari/537.36'
          url = "https://tools.usps.com/go/TrackConfirmAction?tLabels=%s" % (i.reorder_ali_tracking_num)
          r = tryreturn(lambda:s.get(url, timeout=3))
          data = []
          soup = BeautifulSoup(r.text)
          # okay, here variablo the .... t1,t2,t3, since t3 is a must for any tracking events to be gotten @first
          #lmap(Date().myUndatetimenow,getattrs(["t1","t2","t3"],Get(Lineitem,ali_tracking_number=tracking_number)))
          if "Pre-Shipment" in soup.findAll("div",attrs={"class":"delivery_status"})[0].text:
            redprint("[pre-shipment][tracking_number][%s]"%tracking_number)
            data.append([datetime.now(),"pre-shipment-Shipment - No Tracking Events Thus Far"])
          if "Label Created, not yet in system" in str(soup):
            redprint("[pre-shipment][tracking_number][%s]"%tracking_number)
            data.append([datetime.now(),"Label Created, not yet in system - No Tracking Events Thus Far"])
          else:
            action_panels = soup.findAll("div", attrs={"class":"thPanalAction"})
            len_action_panels = len(action_panels)
            if len_action_panels == 0:                                                  # Imaginary tracking number having no action panels returns None
              redprint("[len thPanalAction][%s]"%len_action_panels)
            events = [re.sub(r"[\r\n\t]", " ", i) for i in key("text", action_panels[0].findAll("strong"))]
            events = [re.sub(r"\s+", " ", re.sub(r"[\r\n\t\xa0]", " ", i)).strip() for i in key("text", action_panels[0].findAll("span"))]
            events = [i for i in events if i != ""]
            for q in events:
              if   tryprocess(datetime.strptime, q, "%B %d, %Y, %H:%M %p")  == 1:
                data.append([])
                data[-1].append(datetime.strptime(q, "%B %d, %Y, %H:%M %p"))
              elif tryprocess(datetime.strptime, q, "%B %d, %Y")            == 1:
                data.append([])
                data[-1].append(datetime.strptime(q, "%B %d, %Y"))
              else:
                data[-1].append(q)
          [redprint("[i][%s]"%i) for i in data]
          if reorder_tracking_timers_[0][2]: data.append([Date().myUndatetimenow(float(reorder_tracking_timers_[0][2])), "Order Delivered, (Time Elapsed Between Tracking Number Received And Order Delivered: %s)"%(float(reorder_tracking_timers_[1][1]))])
          if reorder_tracking_timers_[0][1]: data.append([Date().myUndatetimenow(float(reorder_tracking_timers_[0][1])), "Tracking Number Received, (Time Elapsed Between Order Placed And Tracking Number Received: %s)"%(float(reorder_tracking_timers_[1][0]))])
          if reorder_tracking_timers_[0][0]: data.append([Date().myUndatetimenow(float(reorder_tracking_timers_[0][0])), "Order Placed"])
          data.append([Get(Order,id=i.order_id).created_at, "Original Order Placed"])
          data = [": ".join(["((%s))"%(Date().friendlydate(i[0],with_year=1)),"(%s)"%(": ".join(list(tcer(i[1:]))))]) for i in data]
          if "Delivered" in data[0]:
            Update(i,reorder_tracking_arrived=True)

          
            reorder_tracking_timers_ = i.reorder_tracking_timers_
            reorder_tracking_timers_[0][2] = Date().myDatetimenow()
            reorder_tracking_timers_[1][1] = round(float(reorder_tracking_timers_[0][2]) - float(reorder_tracking_timers_[0][1]),3)
            i.reorder_tracking_timers_ = reorder_tracking_timers_

            Update(i,reorder_tracking_timers_=reorder_tracking_timers_)

            Update(i,is_complete=True)
          i.save()
      else:
        print("No exchange created yet")


""" END """







"""
for i in All(Shop):
  update..
  unf...
  notify
"""